{
    "009b8a1a": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n\nvoid fcn.009b8a1a(uint param_1, int32_t param_2)\n\n{\n    uint8_t extraout_AH;\n    uint *unaff_EBP;\n    uint *puVar1;\n    uint *in_FS_OFFSET;\n    uint uStack00000010;\n    \n    *in_FS_OFFSET = unaff_EBP[-4];\n    do {\n        uStack00000010 = 0x9cb3f3;\n        fcn.009cb3d1();\n        puVar1 = *unaff_EBP;\n        *unaff_EBP = 0x9cb401;\n        fcn.009cb42c();\n        *(param_2 + -0x6e) = *(param_2 + -0x6e) + (extraout_AH & 0xd4);\n        *unaff_EBP = unaff_EBP + 1;\n        unaff_EBP = puVar1;\n    } while( true );\n}\n",
        "token_count": 220
    },
    "0099e98a": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0099e98a(uchar *arg_8h, int32_t arg_ch)\n\n{\n    uint8_t uVar1;\n    uint8_t *puVar2;\n    bool bVar3;\n    bool bVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uchar *in_ECX;\n    uint8_t *puVar7;\n    int32_t in_EDX;\n    uint32_t uVar8;\n    uint32_t uStack48;\n    int32_t iStack44;\n    uint32_t uStack40;\n    uint8_t *puStack32;\n    int32_t iStack28;\n    uint8_t *puStack24;\n    uint32_t uStack20;\n    \n    bVar3 = false;\n    if ((in_ECX == NULL) || (arg_8h == NULL)) {\n        return -1;\n    }\n    iStack28 = in_EDX + -1;\n    bVar4 = false;\n    if (in_EDX == 0) {\n        return -1;\n    }\n    uStack20 = arg_ch - 1;\n    if (arg_ch == 0) {\n        return -1;\n    }\n    uVar8 = 0;\n    *arg_8h = *in_ECX;\n    puStack24 = arg_8h + 1;\n    puStack32 = in_ECX + 1;\n    do {\n        iVar5 = fcn.0099e8df();\n        if (iVar5 == 0) {\n            return -1;\n        }\n        if (iStack44 == 0) {\n            if (iStack28 == 0) {\n                return -1;\n            }\n            if (uStack20 == 0) {\n                return -1;\n            }\n            uVar1 = *puStack32;\n            puStack32 = puStack32 + 1;\n            *puStack24 = uVar1;\n            iStack28 = iStack28 + -1;\ncode_r0x0099ec91:\n            puStack24 = puStack24 + 1;\n            uStack20 = uStack20 - 1;\n            bVar3 = false;\n        }\n        else {\n            iVar5 = fcn.0099e8df();\n            if (iVar5 == 0) {\n                return -1;\n            }\n            if (iStack44 == 0) {\n                iVar5 = fcn.0099e93b();\n                if (iVar5 == 0) {\n                    return -1;\n                }\n                if (bVar3) {\n                    iVar5 = uStack40 - 2;\ncode_r0x0099ebc3:\n                    iVar6 = iStack28 + -1;\n                    if (iStack28 == 0) {\n                        return -1;\n                    }\n                    uStack40 = iVar5 * 0x100 + *puStack32;\n                    puStack32 = puStack32 + 1;\n                    iVar5 = fcn.0099e93b();\n                    if (iVar5 == 0) {\n                        return -1;\n                    }\n                    if (31999 < uStack40) {\n                        uStack48 = uStack48 + 1;\n                    }\n                    if (0x4ff < uStack40) {\n                        uStack48 = uStack48 + 1;\n                    }\n                    if (uStack40 < 0x80) {\n                        uStack48 = uStack48 + 2;\n                    }\n                    if (arg_ch - uStack20 < uStack40) {\n                        return -1;\n                    }\n                    if (uStack20 < uStack48) {\n                        return -1;\n                    }\n                    uStack20 = uStack20 - uStack48;\n                    iStack28 = iVar6;\n                    if (uStack48 != 0) {\n                        puVar7 = puStack24 + -uStack40;\n                        do {\n                            uVar1 = *puVar7;\n                            puVar2 = puStack24 + 1;\n                            puVar7 = puVar7 + 1;\n                            uStack48 = uStack48 - 1;\n                            *puStack24 = uVar1;\n                            puStack24 = puVar2;\n                        } while (uStack48 != 0);\n                    }\n                }\n                else {\n                    if (uStack40 != 2) {\n                        iVar5 = uStack40 - 3;\n                        goto code_r0x0099ebc3;\n                    }\n                    iVar5 = fcn.0099e93b();\n                    if (iVar5 == 0) {\n                        return -1;\n                    }\n                    if (arg_ch - uStack20 < uVar8) {\n                        return -1;\n                    }\n                    if (uStack20 < uStack48) {\n                        return -1;\n                    }\n                    uStack20 = uStack20 - uStack48;\n                    uStack40 = uVar8;\n                    if (uStack48 != 0) {\n                        puVar7 = puStack24 + -uVar8;\n                        do {\n                            uVar1 = *puVar7;\n                            puVar2 = puStack24 + 1;\n                            puVar7 = puVar7 + 1;\n                            uStack48 = uStack48 - 1;\n                            *puStack24 = uVar1;\n                            puStack24 = puVar2;\n                        } while (uStack48 != 0);\n                    }\n                }\n                bVar3 = true;\n                uVar8 = uStack40;\n            }\n            else {\n                iVar5 = fcn.0099e8df();\n                if (iVar5 == 0) {\n                    return -1;\n                }\n                if (iStack44 != 0) {\n                    uStack40 = 0;\n                    iVar5 = 4;\n                    do {\n                        iVar6 = fcn.0099e8df();\n                        if (iVar6 == 0) {\n                            return -1;\n                        }\n                        iVar5 = iVar5 + -1;\n                        uStack40 = iStack44 + uStack40 * 2;\n                    } while (iVar5 != 0);\n                    if (uStack40 == 0) {\n                        if (uStack20 == 0) {\n                            return -1;\n                        }\n                        *puStack24 = 0;\n                    }\n                    else {\n                        if (arg_ch - uStack20 < uStack40) {\n                            return -1;\n                        }\n                        if (uStack20 == 0) {\n                            return -1;\n                        }\n                        *puStack24 = puStack24[-uStack40];\n                    }\n                    goto code_r0x0099ec91;\n                }\n                iVar5 = iStack28 + -1;\n                if (iStack28 == 0) {\n                    return -1;\n                }\n                uVar1 = *puStack32;\n                puStack32 = puStack32 + 1;\n                bVar3 = true;\n                uStack48 = (uVar1 & 1) + 2;\n                uVar8 = uVar1 >> 1;\n                uStack40 = uVar8;\n                iStack28 = iVar5;\n                if (uVar8 == 0) {\n                    bVar4 = true;\n                }\n                else {\n                    if (arg_ch - uStack20 < uVar8) {\n                        return -1;\n                    }\n                    if (uStack20 < uStack48) {\n                        return -1;\n                    }\n                    uStack20 = uStack20 - uStack48;\n                    if (uStack48 != 0) {\n                        puVar7 = puStack24 + -uVar8;\n                        do {\n                            uVar1 = *puVar7;\n                            puVar2 = puStack24 + 1;\n                            puVar7 = puVar7 + 1;\n                            uStack48 = uStack48 - 1;\n                            *puStack24 = uVar1;\n                            puStack24 = puVar2;\n                        } while (uStack48 != 0);\n                    }\n                }\n            }\n        }\n        if (bVar4) {\n            return puStack24 - arg_8h;\n        }\n    } while( true );\n}\n",
        "token_count": 1732
    },
    "00a55ca0": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00a55ca0(uint param_1, uint32_t param_2, uint param_3, unkbyte3 param_4)\n\n{\n    uint8_t *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint8_t uVar4;\n    int32_t extraout_ECX;\n    uint16_t extraout_DX;\n    uint8_t *puVar5;\n    uint8_t unaff_BP;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint32_t unaff_ESI;\n    uint32_t uVar8;\n    uint32_t unaff_EDI;\n    bool bVar9;\n    ushort unaff_retaddr;\n    ushort unaff_retaddr_00;\n    uchar uStack0000000c;\n    ushort uStack0000000d;\n    uchar uStack00000017;\n    \n    uVar8 = CONCAT22(((unaff_ESI & 0xff00) << 8) >> 0x10 | (unaff_ESI << 0x18) >> 0x10, \n                     ~(unaff_ESI >> 0x18 | unaff_ESI >> 8 & 0xff00));\n    param_3._0_1_ = unaff_retaddr_00;\n    param_3._1_1_ = unaff_retaddr_00 >> 8;\n    param_3._3_1_ = ~unaff_BP;\n    uStack0000000d = param_2 >> 0x10;\n    iVar2 = 0;\n    if (unaff_EDI != 0) {\n        for (; (unaff_EDI >> iVar2 & 1) == 0; iVar2 = iVar2 + 1) {\n        }\n    }\n    uVar4 = 0;\n    bVar9 = false;\n    puVar5 = _param_4 & 0xffff0000 | param_3._1_1_;\n    uVar6 = 0x2d6401b2;\n    do {\n        uVar3 = CONCAT14(bVar9, puVar5) >> 0x11;\n        uStack00000017 = uVar3;\n        uStack0000000c = unaff_retaddr >> 8;\n        uVar7 = uVar6 & 0xffff0000 | uVar8 & 0xffff;\n        uVar8 = ~(uVar8 >> 0x18 | (uVar8 & 0xff0000) >> 8 | (uVar6 & 0xff00) << 8 | uVar6 << 0x18);\n        puVar5 = param_2 & 0xff | uVar3 & 0xffffff00 | CONCAT11((uVar4 & 1) != 0, puVar5) << 0x10;\n        uVar4 = fcn.00a55d7e();\n        param_2 = extraout_DX & 0xff | (extraout_DX >> 8 ^ *(extraout_ECX + 0x53b34021)) << 8;\n        *puVar5 = *puVar5 ^ param_2 >> 8;\n        puVar1 = uVar7 - 0xc;\n        bVar9 = uVar4 < *puVar1;\n        uVar4 = POPCOUNT(uVar4 - *puVar1);\n        uVar6 = uVar7;\n    } while( true );\n}\n",
        "token_count": 744
    },
    "009b92cb": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009b92cb(uchar *arg_8h, uchar *arg_ch)\n\n{\n    uint32_t *puVar1;\n    uint32_t *in_ECX;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t in_EDX;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar5 = CONCAT31(CONCAT21(CONCAT11(arg_8h[4], arg_8h[5]), arg_8h[6]), arg_8h[7]) ^ in_ECX[1];\n    uVar8 = CONCAT31(CONCAT21(CONCAT11(arg_8h[8], arg_8h[9]), arg_8h[10]), arg_8h[0xb]) ^ in_ECX[2];\n    uVar2 = CONCAT31(CONCAT21(CONCAT11(*arg_8h, arg_8h[1]), arg_8h[2]), arg_8h[3]) ^ *in_ECX;\n    uVar6 = CONCAT31(CONCAT21(CONCAT11(arg_8h[0xc], arg_8h[0xd]), arg_8h[0xe]), arg_8h[0xf]) ^ in_ECX[3];\n    uVar4 = *((uVar6 >> 0x10 & 0xff) * 4 + 0x9a8b78) ^ *((uVar8 >> 8 & 0xff) * 4 + 0x9a8f78) ^\n            *((uVar2 >> 0x18) * 4 + 0x9a8778) ^ *((uVar5 & 0xff) * 4 + 0x9a9378) ^ in_ECX[4];\n    uVar3 = *((uVar5 >> 0x10 & 0xff) * 4 + 0x9a8b78) ^ *((uVar2 >> 8 & 0xff) * 4 + 0x9a8f78) ^\n            *((uVar8 >> 0x18) * 4 + 0x9a8778) ^ *((uVar6 & 0xff) * 4 + 0x9a9378) ^ in_ECX[6];\n    uVar9 = *((uVar6 >> 8 & 0xff) * 4 + 0x9a8f78) ^ *((uVar2 >> 0x10 & 0xff) * 4 + 0x9a8b78) ^\n            *((uVar5 >> 0x18) * 4 + 0x9a8778) ^ *((uVar8 & 0xff) * 4 + 0x9a9378) ^ in_ECX[5];\n    uVar2 = *((uVar8 >> 0x10 & 0xff) * 4 + 0x9a8b78) ^ *((uVar5 >> 8 & 0xff) * 4 + 0x9a8f78) ^\n            *((uVar6 >> 0x18) * 4 + 0x9a8778) ^ *((uVar2 & 0xff) * 4 + 0x9a9378) ^ in_ECX[7];\n    iVar7 = in_EDX >> 1;\n    puVar1 = in_ECX + 8;\n    while (iVar7 = iVar7 + -1,  iVar7 != 0) {\n        uVar5 = *((uVar2 >> 0x10 & 0xff) * 4 + 0x9a8b78) ^ *((uVar3 >> 8 & 0xff) * 4 + 0x9a8f78) ^\n                *((uVar4 >> 0x18) * 4 + 0x9a8778) ^ *((uVar9 & 0xff) * 4 + 0x9a9378) ^ *puVar1;\n        uVar8 = *((uVar9 >> 0x10 & 0xff) * 4 + 0x9a8b78) ^ *((uVar4 >> 8 & 0xff) * 4 + 0x9a8f78) ^\n                *((uVar3 >> 0x18) * 4 + 0x9a8778) ^ *((uVar2 & 0xff) * 4 + 0x9a9378) ^ puVar1[2];\n        uVar6 = *((uVar2 >> 8 & 0xff) * 4 + 0x9a8f78) ^ *((uVar4 >> 0x10 & 0xff) * 4 + 0x9a8b78) ^\n                *((uVar9 >> 0x18) * 4 + 0x9a8778) ^ *((uVar3 & 0xff) * 4 + 0x9a9378) ^ puVar1[1];\n        uVar2 = *((uVar3 >> 0x10 & 0xff) * 4 + 0x9a8b78) ^ *((uVar9 >> 8 & 0xff) * 4 + 0x9a8f78) ^\n                *((uVar2 >> 0x18) * 4 + 0x9a8778) ^ *((uVar4 & 0xff) * 4 + 0x9a9378) ^ puVar1[3];\n        uVar4 = *((uVar2 >> 0x10 & 0xff) * 4 + 0x9a8b78) ^ *((uVar8 >> 8 & 0xff) * 4 + 0x9a8f78) ^\n                *((uVar5 >> 0x18) * 4 + 0x9a8778) ^ *((uVar6 & 0xff) * 4 + 0x9a9378) ^ puVar1[4];\n        uVar9 = *((uVar2 >> 8 & 0xff) * 4 + 0x9a8f78) ^ *((uVar5 >> 0x10 & 0xff) * 4 + 0x9a8b78) ^\n                *((uVar6 >> 0x18) * 4 + 0x9a8778) ^ *((uVar8 & 0xff) * 4 + 0x9a9378) ^ puVar1[5];\n        uVar3 = *((uVar6 >> 0x10 & 0xff) * 4 + 0x9a8b78) ^ *((uVar5 >> 8 & 0xff) * 4 + 0x9a8f78) ^\n                *((uVar8 >> 0x18) * 4 + 0x9a8778) ^ *((uVar2 & 0xff) * 4 + 0x9a9378) ^ puVar1[6];\n        uVar2 = *((uVar8 >> 0x10 & 0xff) * 4 + 0x9a8b78) ^ *((uVar6 >> 8 & 0xff) * 4 + 0x9a8f78) ^\n                *((uVar2 >> 0x18) * 4 + 0x9a8778) ^ *((uVar5 & 0xff) * 4 + 0x9a9378) ^ puVar1[7];\n        puVar1 = puVar1 + 8;\n    }\n    uVar5 = *((uVar2 >> 0x10 & 0xff) * 4 + 0x9a9778) & 0xff0000 ^ *((uVar3 >> 8 & 0xff) * 4 + 0x9a9778) & 0xff00 ^\n            *((uVar4 >> 0x18) * 4 + 0x9a9778) & 0xff000000 ^ *((uVar9 & 0xff) * 4 + 0x9a9778) ^ *puVar1;\n    *arg_ch = uVar5 >> 0x18;\n    arg_ch[1] = uVar5 >> 0x10;\n    arg_ch[2] = uVar5 >> 8;\n    arg_8h._0_1_ = uVar5;\n    arg_ch[3] = arg_8h._0_1_;\n    uVar5 = *((uVar4 >> 0x10 & 0xff) * 4 + 0x9a9778) & 0xff0000 ^ *((uVar2 >> 8 & 0xff) * 4 + 0x9a9778) & 0xff00 ^\n            *((uVar9 >> 0x18) * 4 + 0x9a9778) & 0xff000000 ^ *((uVar3 & 0xff) * 4 + 0x9a9778) ^ puVar1[1];\n    arg_ch[4] = uVar5 >> 0x18;\n    arg_ch[5] = uVar5 >> 0x10;\n    arg_ch[6] = uVar5 >> 8;\n    arg_ch[7] = uVar5;\n    uVar5 = *((uVar9 >> 0x10 & 0xff) * 4 + 0x9a9778) & 0xff0000 ^ *((uVar4 >> 8 & 0xff) * 4 + 0x9a9778) & 0xff00 ^\n            *((uVar3 >> 0x18) * 4 + 0x9a9778) & 0xff000000 ^ *((uVar2 & 0xff) * 4 + 0x9a9778) ^ puVar1[2];\n    arg_ch[8] = uVar5 >> 0x18;\n    arg_ch[0xb] = uVar5;\n    arg_ch[9] = uVar5 >> 0x10;\n    arg_ch[10] = uVar5 >> 8;\n    uVar4 = *((uVar3 >> 0x10 & 0xff) * 4 + 0x9a9778) & 0xff0000 ^ *((uVar9 >> 8 & 0xff) * 4 + 0x9a9778) & 0xff00 ^\n            *((uVar2 >> 0x18) * 4 + 0x9a9778) & 0xff000000 ^ *((uVar4 & 0xff) * 4 + 0x9a9778) ^ puVar1[3];\n    arg_ch[0xc] = uVar4 >> 0x18;\n    arg_ch[0xd] = uVar4 >> 0x10;\n    arg_ch[0xe] = uVar4 >> 8;\n    arg_ch[0xf] = uVar4;\n    return;\n}\n",
        "token_count": 2496
    },
    "00a2cf98": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454",
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454",
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Removing unreachable block (ram,0x009ab911)\n// WARNING: Removing unreachable block (ram,0x009ab913)\n// WARNING: Removing unreachable block (ram,0x009ab956)\n// WARNING: Removing unreachable block (ram,0x009ab95f)\n// WARNING: Removing unreachable block (ram,0x009ab999)\n// WARNING: Removing unreachable block (ram,0x009ab99b)\n// WARNING: Removing unreachable block (ram,0x009aba02)\n// WARNING: Removing unreachable block (ram,0x009aba35)\n// WARNING: Removing unreachable block (ram,0x009aba08)\n// WARNING: Removing unreachable block (ram,0x009aba4f)\n// WARNING: Removing unreachable block (ram,0x009abf82)\n// WARNING: Removing unreachable block (ram,0x009aba5c)\n// WARNING: Removing unreachable block (ram,0x009abf85)\n// WARNING: Removing unreachable block (ram,0x009abe88)\n// WARNING: Removing unreachable block (ram,0x009abe8a)\n// WARNING: Removing unreachable block (ram,0x009abf92)\n// WARNING: Removing unreachable block (ram,0x009abf98)\n// WARNING: Removing unreachable block (ram,0x009abfbe)\n// WARNING: Removing unreachable block (ram,0x009abe66)\n// WARNING: Removing unreachable block (ram,0x009abe68)\n// WARNING: Removing unreachable block (ram,0x009abe8e)\n// WARNING: Removing unreachable block (ram,0x009abe95)\n// WARNING: Removing unreachable block (ram,0x009abf0f)\n// WARNING: Removing unreachable block (ram,0x009abe9a)\n// WARNING: Removing unreachable block (ram,0x009abec2)\n// WARNING: Removing unreachable block (ram,0x009abe9f)\n// WARNING: Removing unreachable block (ram,0x009aaa3b)\n// WARNING: Removing unreachable block (ram,0x009ac002)\n// WARNING: Removing unreachable block (ram,0x009abf72)\n// WARNING: Removing unreachable block (ram,0x009ac009)\n\nuint __cdecl\nfcn.00a2cf98(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint arg_40h)\n\n{\n    int16_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint uVar4;\n    uint32_t in_EAX;\n    uint8_t uVar5;\n    uint32_t in_ECX;\n    uint32_t in_EDX;\n    uint16_t uVar7;\n    ushort *unaff_EBX;\n    uint32_t unaff_EDI;\n    bool bVar8;\n    bool in_OF;\n    uint32_t uVar6;\n    \n    *unaff_EBX = in_EAX;\n    uVar7 = CONCAT11(in_EAX, unaff_EBX);\n    iVar1 = 0;\n    if (uVar7 != 0) {\n        for (; (uVar7 >> iVar1 & 1) == 0; iVar1 = iVar1 + 1) {\n        }\n    }\n    if ((((in_ECX & 0xff00) << 8 | in_ECX << 0x18 | CONCAT11(!in_OF, in_ECX >> 0x18)) >> (in_EAX & 0x1f) & 1) == 0 &&\n        uVar7 != 0) {\n        iVar3 = 0x1f;\n        if (in_EAX != 0) {\n            for (; in_EAX >> iVar3 == 0; iVar3 = iVar3 + -1) {\n            }\n        }\n    }\n    else {\n        iVar3 = 0x1f;\n        if (in_EAX != 0) {\n            for (; in_EAX >> iVar3 == 0; iVar3 = iVar3 + -1) {\n            }\n        }\n    }\n    uVar5 = *(unaff_EDI - 1) + in_EDX;\n    uVar6 = uVar5;\n    bVar8 = 0x3e < uVar5;\n    uVar5 = uVar5 - 0x3f;\n    iVar3 = 0x1f;\n    if (unaff_EDI != 0) {\n        for (; unaff_EDI >> iVar3 == 0; iVar3 = iVar3 + -1) {\n        }\n    }\n    if (bVar8) {\n        uVar2 = 0;\n        if (unaff_EDI != 0) {\n            for (; (unaff_EDI >> uVar2 & 1) == 0; uVar2 = uVar2 + 1) {\n            }\n        }\n        bVar8 = (uVar2 & 0xffff0000) < uVar6 || (uVar2 & 0xffff0000) - uVar6 < bVar8;\n    }\n    else {\n        uVar2 = 0;\n        if (unaff_EDI != 0) {\n            for (; (unaff_EDI >> uVar2 & 1) == 0; uVar2 = uVar2 + 1) {\n            }\n        }\n        bVar8 = (uVar2 & 0xffff0000) < uVar6 || (uVar2 & 0xffff0000) - uVar6 < bVar8;\n    }\n    iVar3 = 0x1f;\n    if (*0x10 != 0x20) {\n        for (; &stack0xffffffe0 >> iVar3 == 0; iVar3 = iVar3 + -1) {\n        }\n    }\n    if ((bVar8) || (!bVar8)) {\n        uVar5 = ~uVar5;\n    }\n    uVar4 = fcn.009aba17(in_EDX & 0xff000000 | CONCAT12(~uVar5 + 1, in_EDX));\n    return uVar4;\n}\n",
        "token_count": 1378
    },
    "009aba17": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n\nuint fcn.009aba17(uint32_t param_1)\n\n{\n    int32_t iVar1;\n    int16_t iVar2;\n    char extraout_CL;\n    int32_t extraout_ECX;\n    uint16_t uVar3;\n    uint *puVar4;\n    uint *unaff_EBP;\n    uint *puVar5;\n    uint16_t unaff_SI;\n    bool bVar6;\n    uint8_t uStack16;\n    uint16_t uStack14;\n    ushort uStack12;\n    \n    fcn.009ab9d5();\n    iVar2 = 0xf;\n    if (unaff_SI != 0) {\n        for (; unaff_SI >> iVar2 == 0; iVar2 = iVar2 + -1) {\n        }\n    }\n    bVar6 = SBORROW1(extraout_CL + -0x40, 'U');\n    uVar3 = param_1 << 8;\n    if (bVar6) {\n        iVar2 = 0xf;\n        if (uVar3 != 0) {\n            for (; uVar3 >> iVar2 == 0; iVar2 = iVar2 + -1) {\n            }\n        }\n    }\n    else {\n        if (bVar6) {\n            param_1 = param_1 & 0xffffff00;\n            puVar4 = &param_1 + 2;\n            do {\n                puVar4[-1] = 0x9abfd3;\n                int.009ac18d();\n                puVar5 = *unaff_EBP;\n                *unaff_EBP = 0x7a5d228b;\n                puVar4 = unaff_EBP;\n                unaff_EBP = puVar5;\n            } while( true );\n        }\n        iVar2 = 0xf;\n        if (uVar3 != 0) {\n            for (; uVar3 >> iVar2 == 0; iVar2 = iVar2 + -1) {\n            }\n        }\n    }\n    fcn.009abe72();\n    iVar1 = *(extraout_ECX * 4 + 0x9aba66);\n    uStack16 = extraout_ECX;\n    uStack14 = extraout_ECX >> 0x10;\n    *(unaff_EBP + -2) = unaff_EBP;\n    unaff_EBP[-1] = iVar1 + 0x7dba6bb6;\n    return CONCAT22(uStack12, ~(uStack14 & 0xff | uStack16 << 8));\n}\n",
        "token_count": 553
    },
    "null": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "009e5402": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454",
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x0099de99) overlaps instruction at (ram,0x0099de95)\n// \n// WARNING: Control flow encountered bad instruction data\n// WARNING (jumptable): Unable to track spacebase fully for stack\n// WARNING: Unable to track spacebase fully for stack\n\nvoid __fastcall fcn.009e5402(int32_t param_1, uint param_2)\n\n{\n    uint32_t *puVar1;\n    uint8_t *puVar2;\n    uint32_t uVar3;\n    uchar *puVar4;\n    code *pcVar5;\n    uint16_t uVar6;\n    int32_t iVar7;\n    uint in_EAX;\n    uint32_t uVar8;\n    uint32_t extraout_ECX;\n    uint32_t extraout_ECX_00;\n    int32_t extraout_ECX_01;\n    int32_t extraout_ECX_02;\n    int32_t iVar9;\n    uint32_t *puVar10;\n    uchar *extraout_EDX;\n    uint8_t *unaff_EBX;\n    uint32_t *puVar11;\n    uint32_t **unaff_EBP;\n    uchar *unaff_ESI;\n    uint8_t *puVar12;\n    uchar *unaff_EDI;\n    ushort in_ES;\n    uint16_t in_DS;\n    uint8_t uVar13;\n    uint8_t in_AF;\n    uchar uVar14;\n    char cVar15;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    ulong uVar16;\n    uchar *puStack00000026;\n    uchar *puStack0000002a;\n    uint8_t *puStack0000002e;\n    uint32_t *puStack00000032;\n    uint8_t *puStack00000036;\n    code *pcStack0000003a;\n    uint uStack0000003e;\n    \n    uVar16 = CONCAT44(param_2, in_EAX);\n    while( true ) {\n        puVar10 = (uVar16 >> 0x20) << 8 | unaff_EBX;\n        unaff_EBP[param_1 + -0x10] = puVar10;\n        puStack00000032 = param_1 + 1;\n        puStack0000002e = uVar16 + 4;\n        puStack0000002a = &stack0x0000003e;\n        if (0xf < puStack00000032) break;\n        puStack0000002a = unaff_EBX & 0xffff0000 | CONCAT11(puStack00000032 < 0x11, unaff_EBX);\n        puStack00000026 = &stack0x0000003a;\n        unaff_EBX = *puStack0000002e;\n        pcStack0000003a = fcn.009e5402;\n        puStack00000036 = puStack0000002e;\n        uVar16 = fcn.009e53a6();\n        param_1 = extraout_ECX_01;\n    }\n    puStack00000036 = unaff_ESI + 8;\n    pcStack0000003a = 0x9e548b;\n    puStack0000002e = unaff_EBX;\n    puStack00000032 = puVar10;\n    fcn.009b89a6();\n    uVar13 = 0;\n    pcStack0000003a = 0x99de52;\n    uVar16 = func_0x009e5493();\n    iVar7 = uVar16 >> 0x20;\n    puVar10 = uVar16 - 0x2d;\n    *puVar10 = *puVar10 << 1 | uVar13;\n    iVar9 = iVar7 + -1;\n    cVar15 = iVar9 < 0;\n    uVar14 = iVar9 == 0;\n    in_AF = 9 < (uVar16 & 0xf) | in_AF;\n    uVar6 = CONCAT11((uVar16 >> 8) - in_AF, uVar16 + in_AF * -6) & 0xff0f;\n    uVar8 = uVar16 & 0xffff0000;\n    puVar10 = uVar8 | uVar6;\n    if (in_AF || uVar14) {\n        in_AF = extraout_ECX + *(extraout_ECX + unaff_ESI * 4) + in_AF;\n        puVar11 = *unaff_EBP;\n        puVar1 = iVar7 + 0x5e;\n        uVar13 = in_AF & 0x1f;\n        *puVar1 = *puVar1 >> uVar13 | *puVar1 << 0x20 - uVar13;\n        *unaff_EBP = puVar10;\n        unaff_EBP[-1] = extraout_ECX & 0xffffff00 | in_AF;\n        unaff_EBP[-2] = iVar9;\n        unaff_EBP[-3] = unaff_EBX;\n        unaff_EBP[-4] = unaff_EBP + 1;\n        unaff_EBP[-5] = puVar11;\n        unaff_EBP[-6] = unaff_ESI;\n        unaff_EBP[-7] = unaff_EDI + -1;\n        *(unaff_EBP + -0x1a) = uVar6;\n        return;\n    }\n    if (uVar14) {\n        do {\n            uStack0000003e = 0xa4aa9ab7;\n            puStack00000036 = 0xa2fca9;\n            uVar6 = fcn.009b0d52();\n            uVar8 = *0x4fd0e2f6;\n        } while (!uVar14);\n        puVar12 = *(unaff_EBP + -0x2322a2cf) * -5;\n        puVar10 = unaff_EBP + 0xb;\n        *puVar10 = *puVar10 >> 1 | ((*puVar10 & 1) != 0) << 0x1f;\n        iVar7 = extraout_ECX_02;\n        if (0 < (unaff_ESI & 3) - (uVar6 & 3) || (((*puVar10 & 0x40000000) != 0) != *puVar10 < 0) != cVar15) {\n            *0xc9fe9764 = uVar8;\n            *unaff_EBX = *unaff_EBX & unaff_EBX >> 8;\n            puVar2 = unaff_EBX + -0x36;\n            uVar13 = *puVar2;\n            *puVar2 = *puVar2 + extraout_EDX;\n            uVar8 = CARRY1(uVar13, extraout_EDX);\n            puVar4 = &stack0x00000036 + *(unaff_EBP + -0x11);\n            if ((CARRY4(&stack0x00000036, *(unaff_EBP + -0x11)) || CARRY4(puVar4, uVar8)) || puVar4 + uVar8 == NULL) {\n    // WARNING: Bad instruction - Truncating control flow here\n                halt_baddata();\n            }\n            *(puVar4 + (uVar8 - 4)) = 0xc75d228b;\n            puVar10 = puVar12 + -1;\n            iVar7 = CONCAT31(extraout_ECX_02 + -1 >> 8, 0x55);\n            puVar12 = puVar12 + 3;\n            uVar8 = *puVar10;\n            unaff_EBX = unaff_EBX + -1;\n        }\n        puVar10 = (uVar8 & 0xffffff00 | *puVar12) + 0x399fec89;\n        uVar3 = *puVar10;\n        *puVar10 = *puVar10 + 0xa56acc11;\n        *extraout_EDX = (uVar8 & 0xffffff00) >> 8;\n        *(iVar7 + 0x13) = unaff_EBX >> 8;\n        *(extraout_EDX + 0x42) = *(extraout_EDX + 0x42) >> 1 | (uVar3 < 0x5a9533ef) << 0x1f;\n        do {\n    // WARNING: Do nothing block with infinite loop\n        } while( true );\n    }\n    *(puVar10 + 0x1e9aaf3) = *(puVar10 + 0x1e9aaf3) + extraout_ECX;\n    pcStack0000003a = pcStack0000003a & 0xffff0000 | in_DS;\n    *puVar10 = *puVar10 | puVar10;\n    uVar13 = in(iVar9);\n    *unaff_EDI = *unaff_ESI;\n    puStack00000032 = unaff_EBP - *(extraout_ECX - 0x73);\n    iVar7 = 0x1f;\n    if (*0x10 != 0xffffffce) {\n        for (; &stack0x00000032 >> iVar7 == 0; iVar7 = iVar7 + -1) {\n        }\n    }\n    func_0x0099df3c(unaff_EDI + 1);\n    uVar16 = fcn.0099e011();\n    puVar10 = uVar16 + -0x6f1e9d35;\n    *puVar10 = *puVar10 | &stack0x00000032;\n    if (-1 < *puVar10) {\n        if (uVar16 >> 0x20 < extraout_ECX_00) {\n            *(unaff_ESI + 5) = *(unaff_ESI + 5) + 1;\n        }\n        fcn.009e5221();\n        pcVar5 = swi(0x5c);\n        (*pcVar5)();\n        pcVar5 = swi(3);\n        (*pcVar5)();\n        return;\n    }\n    *(unaff_ESI + 0x21d24a3a) = in_ES;\n    puVar12 = (uVar8 | uVar6 & 0xffffff00 | uVar13 & 0xffffff08) - 0x2e;\n    uVar13 = *puVar12;\n    *puVar12 = *puVar12 >> 1;\n    iVar7 = func_0x0099de77((in_NT & 1) * 0x4000 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | (*puVar12 < '\\0') * 0x80\n                            | (*puVar12 == 0) * 0x40 | (in_AF & 1) * 0x10 | ((POPCOUNT(*puVar12) & 1U) == 0) * 4 |\n                            uVar13 & 1 | (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 |\n                            (in_AC & 1) * 0x40000);\n    // WARNING: Could not recover jumptable at 0x009b96e9. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(iVar7 + 0x2adfb82a))();\n    return;\n}\n",
        "token_count": 2557
    },
    "009e53a6": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x0099de99) overlaps instruction at (ram,0x0099de95)\n// \n// WARNING: Control flow encountered bad instruction data\n// WARNING (jumptable): Unable to track spacebase fully for stack\n// WARNING: Unable to track spacebase fully for stack\n\nvoid fcn.009e53a6(void)\n\n{\n    uint32_t *puVar1;\n    uint8_t *puVar2;\n    uint32_t uVar3;\n    uchar *puVar4;\n    code *pcVar5;\n    uint16_t uVar6;\n    int32_t iVar7;\n    int32_t in_EAX;\n    uint8_t *puVar8;\n    uint32_t extraout_ECX;\n    uint32_t extraout_ECX_00;\n    int32_t extraout_ECX_01;\n    int32_t extraout_ECX_02;\n    uint32_t uVar9;\n    int32_t extraout_ECX_03;\n    int32_t iVar10;\n    uint32_t *puVar11;\n    uchar *extraout_EDX;\n    uchar *puVar12;\n    uint32_t *puVar13;\n    uint32_t **unaff_EBP;\n    uchar *unaff_ESI;\n    uchar *unaff_EDI;\n    ushort in_ES;\n    uint8_t uVar14;\n    uint8_t in_AF;\n    uchar uVar15;\n    char cVar16;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    ulong uVar17;\n    uint64_t uVar18;\n    uint uStack00000006;\n    uint16_t uStack28;\n    ushort uStack6;\n    ushort uStack4;\n    uchar auStack2 [2];\n    \n    uStack4 = in_EAX;\n    auStack2[0] = in_EAX >> 0x10;\n    auStack2[1] = in_EAX >> 0x18;\n    uStack28 = unaff_ESI;\n    uVar14 = *(in_EAX + -2);\n    uVar18 = fcn.009e5402();\n    iVar7 = extraout_ECX_02;\n    while( true ) {\n        puVar12 = uVar14;\n        puVar11 = uVar18 >> 0x20 | puVar12;\n        unaff_EBP[iVar7 + -0x10] = puVar11;\n        uVar9 = iVar7 + 1;\n        puVar8 = uVar18 + 4;\n        if (0xf < uVar9) break;\n        auStack2[0] = SUB41(puVar8, 0);\n        auStack2[1] = puVar8 >> 8;\n        uStack6 = uVar9;\n        uStack4 = uVar9 >> 0x10;\n        uVar14 = *puVar8;\n        uVar18 = fcn.009e53a6();\n        uVar18 = uVar18 & 0xffffffff | ((uVar18 >> 0x20) << 8) << 0x20;\n        iVar7 = extraout_ECX_01;\n    }\n    auStack2[0] = SUB41(unaff_ESI + 8, 0);\n    auStack2[1] = unaff_ESI + 8 >> 8;\n    uStack6 = SUB42(puVar11, 0);\n    uStack4 = uVar18 >> 0x30;\n    fcn.009b89a6();\n    uVar14 = 0;\n    uVar17 = func_0x009e5493();\n    iVar7 = uVar17 >> 0x20;\n    puVar11 = uVar17 - 0x2d;\n    *puVar11 = *puVar11 << 1 | uVar14;\n    iVar10 = iVar7 + -1;\n    cVar16 = iVar10 < 0;\n    uVar15 = iVar10 == 0;\n    in_AF = 9 < (uVar17 & 0xf) | in_AF;\n    uVar6 = CONCAT11((uVar17 >> 8) - in_AF, uVar17 + in_AF * -6) & 0xff0f;\n    uVar9 = uVar17 & 0xffff0000;\n    puVar11 = uVar9 | uVar6;\n    if (in_AF || uVar15) {\n        in_AF = extraout_ECX + *(extraout_ECX + unaff_ESI * 4) + in_AF;\n        puVar13 = *unaff_EBP;\n        puVar1 = iVar7 + 0x5e;\n        uVar14 = in_AF & 0x1f;\n        *puVar1 = *puVar1 >> uVar14 | *puVar1 << 0x20 - uVar14;\n        *unaff_EBP = puVar11;\n        unaff_EBP[-1] = extraout_ECX & 0xffffff00 | in_AF;\n        unaff_EBP[-2] = iVar10;\n        unaff_EBP[-3] = puVar12;\n        unaff_EBP[-4] = unaff_EBP + 1;\n        unaff_EBP[-5] = puVar13;\n        unaff_EBP[-6] = unaff_ESI;\n        unaff_EBP[-7] = unaff_EDI + -1;\n        *(unaff_EBP + -0x1a) = uVar6;\n        return;\n    }\n    if (uVar15) {\n        do {\n            uStack00000006 = 0xa4aa9ab7;\n            auStack2[0] = 0xa9;\n            auStack2[1] = 0xfc;\n            uVar6 = fcn.009b0d52();\n            uVar9 = *0x4fd0e2f6;\n        } while (!uVar15);\n        puVar8 = *(unaff_EBP + -0x2322a2cf) * -5;\n        puVar11 = unaff_EBP + 0xb;\n        *puVar11 = *puVar11 >> 1 | ((*puVar11 & 1) != 0) << 0x1f;\n        iVar7 = extraout_ECX_03;\n        if (0 < (uStack28 & 3) - (uVar6 & 3) || (((*puVar11 & 0x40000000) != 0) != *puVar11 < 0) != cVar16) {\n            *0xc9fe9764 = uVar9;\n            *puVar12 = 0;\n            puVar2 = puVar12 + -0x36;\n            uVar14 = *puVar2;\n            *puVar2 = *puVar2 + extraout_EDX;\n            uVar9 = CARRY1(uVar14, extraout_EDX);\n            puVar4 = auStack2 + *(unaff_EBP + -0x11);\n            if ((CARRY4(auStack2, *(unaff_EBP + -0x11)) || CARRY4(puVar4, uVar9)) || puVar4 + uVar9 == NULL) {\n    // WARNING: Bad instruction - Truncating control flow here\n                halt_baddata();\n            }\n            *(puVar4 + (uVar9 - 4)) = 0xc75d228b;\n            puVar11 = puVar8 + -1;\n            iVar7 = CONCAT31(extraout_ECX_03 + -1 >> 8, 0x55);\n            puVar8 = puVar8 + 3;\n            uVar9 = *puVar11;\n            puVar12 = puVar12 + -1;\n        }\n        puVar11 = (uVar9 & 0xffffff00 | *puVar8) + 0x399fec89;\n        uVar3 = *puVar11;\n        *puVar11 = *puVar11 + 0xa56acc11;\n        *extraout_EDX = (uVar9 & 0xffffff00) >> 8;\n        *(iVar7 + 0x13) = puVar12 >> 8;\n        *(extraout_EDX + 0x42) = *(extraout_EDX + 0x42) >> 1 | (uVar3 < 0x5a9533ef) << 0x1f;\n        do {\n    // WARNING: Do nothing block with infinite loop\n        } while( true );\n    }\n    *(puVar11 + 0x1e9aaf3) = *(puVar11 + 0x1e9aaf3) + extraout_ECX;\n    *puVar11 = *puVar11 | puVar11;\n    uVar14 = in(iVar10);\n    auStack2[0] = SUB41(unaff_EBP, 0);\n    auStack2[1] = unaff_EBP >> 8;\n    *unaff_EDI = *unaff_ESI;\n    iVar7 = unaff_EBP - *(extraout_ECX - 0x73);\n    uStack6 = iVar7;\n    uStack4 = iVar7 >> 0x10;\n    iVar7 = 0x1f;\n    if (*0x10 != 0x6) {\n        for (; &uStack6 >> iVar7 == 0; iVar7 = iVar7 + -1) {\n        }\n    }\n    func_0x0099df3c(unaff_EDI + 1);\n    uVar17 = fcn.0099e011();\n    puVar11 = uVar17 + -0x6f1e9d35;\n    *puVar11 = *puVar11 | &uStack6;\n    if (-1 < *puVar11) {\n        if (uVar17 >> 0x20 < extraout_ECX_00) {\n            *(unaff_ESI + 5) = *(unaff_ESI + 5) + 1;\n        }\n        fcn.009e5221();\n        pcVar5 = swi(0x5c);\n        (*pcVar5)();\n        pcVar5 = swi(3);\n        (*pcVar5)();\n        return;\n    }\n    *(unaff_ESI + 0x21d24a3a) = in_ES;\n    puVar8 = (uVar9 | uVar6 & 0xffffff00 | uVar14 & 0xffffff08) - 0x2e;\n    uVar14 = *puVar8;\n    *puVar8 = *puVar8 >> 1;\n    iVar7 = func_0x0099de77((in_NT & 1) * 0x4000 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | (*puVar8 < '\\0') * 0x80 |\n                            (*puVar8 == 0) * 0x40 | (in_AF & 1) * 0x10 | ((POPCOUNT(*puVar8) & 1U) == 0) * 4 |\n                            uVar14 & 1 | (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 |\n                            (in_AC & 1) * 0x40000);\n    // WARNING: Could not recover jumptable at 0x009b96e9. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(iVar7 + 0x2adfb82a))();\n    return;\n}\n",
        "token_count": 2577
    },
    "009b4f7e": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009b6260) overlaps instruction at (ram,0x009b625d)\n// \n// WARNING: Possible PIC construction at 0x009b5f87: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x009b5f8c)\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Removing unreachable block (ram,0x009b635a)\n\nulong __fastcall fcn.009b4f7e(uint param_1, uint32_t *param_2)\n\n{\n    uchar uVar1;\n    uint *puVar2;\n    uint8_t uVar3;\n    uint8_t uVar4;\n    uint8_t *in_EAX;\n    uint32_t uVar6;\n    char extraout_CH;\n    uint32_t uVar7;\n    uint extraout_ECX;\n    uint uVar8;\n    int32_t iVar9;\n    ushort uVar10;\n    uint uVar11;\n    uint extraout_EDX;\n    uint32_t uVar12;\n    int32_t *piVar13;\n    uint32_t uVar14;\n    uint8_t **ppuVar15;\n    uchar *puVar16;\n    uint8_t **ppuVar17;\n    uint8_t **ppuVar18;\n    uint *puVar19;\n    int32_t unaff_EBP;\n    int32_t iVar20;\n    int32_t unaff_ESI;\n    uchar *puVar21;\n    uchar *puVar22;\n    uint *unaff_EDI;\n    uchar *puVar23;\n    ushort in_SS;\n    ushort in_DS;\n    bool bVar24;\n    bool bVar25;\n    bool bVar26;\n    ulong uVar27;\n    int32_t unaff_retaddr;\n    uint in_stack_00000018;\n    ushort uStack00000020;\n    uint in_stack_00000020;\n    uint in_stack_00000028;\n    uint in_stack_0000002c;\n    uint8_t *puVar5;\n    \n    bVar26 = false;\n    uVar7 = unaff_retaddr + 0xeffe6f02;\n    *(unaff_retaddr + 0xf62) = in_EAX;\n    uVar12 = *in_EAX + 0xc156b475;\n    if (uVar12 != 0xc156b541) {\n        if (uVar12 != 0xc156b541) {\n            return CONCAT44(in_stack_00000018, in_stack_00000020);\n        }\n        piVar13 = in_EAX * 2 + -0x7786e178;\n        *piVar13 = *piVar13 + unaff_EBP + (uVar12 < 0xc156b541);\n        *unaff_EDI = *(unaff_ESI + -1);\n        uVar4 = uVar7;\n        out(*0x10 + 8, uVar4 % 0x47);\n        return CONCAT44(&stack0x00000008, uVar7 & 0xffff0000 | CONCAT11(uVar4 / 0x47, uVar4) & 0xffffff00 | uVar4 % 0x47\n                       );\n    }\n    uVar4 = in_EAX;\n    *in_EAX = *in_EAX + uVar4;\n    puVar21 = unaff_ESI - 1U ^ *param_2;\n    uVar1 = in(param_2);\n    *unaff_EDI = uVar1;\n    uVar1 = in(param_2);\n    *(unaff_EDI + 1) = uVar1;\n    bVar24 = 0xbf < uVar7 >> 8;\n    iVar20 = *(unaff_EBP + 2);\n    puVar16 = unaff_EBP + 6;\n    uVar3 = (uVar4 + 0x91) - bVar24;\n    puVar5 = in_EAX & 0xffffff00 | uVar3;\n    if ((0x6e < uVar4 && bVar24 <= uVar4 + 0x91) && uVar3 != 0) {\n        return CONCAT44(param_2, in_EAX & 0xffffff00 | *0x82444ff);\n    }\n    *(*0xa317e49d + 0x10d7) = puVar5;\n    *(unaff_EBP + 2) = unaff_EDI + 2;\n    uVar4 = *puVar5;\n    puVar23 = *(unaff_EBP + 2);\n    uVar7 = uVar4 + 0xf018827e;\n    bVar24 = uVar7 < 0xf018834a;\n    if (uVar7 == 0xf018834a) {\n        ppuVar15 = unaff_EBP + 2;\n        *(unaff_EBP + 2) = puVar5;\n    }\n    else {\n        if (uVar7 != 0xf018834a) {\n            *(unaff_EBP + 0x2a) = puVar5;\n            *(unaff_EBP + 0x2e) = *(unaff_EBP + 0x2e) + 1;\n            return CONCAT44(*(unaff_EBP + 0x1a), *(unaff_EBP + 0x22));\n        }\n        *(unaff_EBP + 2) = 0x9b6224;\n        uVar27 = fcn.009b6237();\n        uVar7 = uVar27 >> 0x20;\n        uVar12 = uVar4 + 0xf018827f;\n        if (bVar24) {\n            piVar13 = uVar12 & 0xffffff00 | uVar12 + (extraout_ECX >> 8) + bVar24;\n            bVar24 = false;\n            uVar4 = uVar27;\n            uVar12 = uVar27 & 0xffff0000 | CONCAT11(uVar4 / 0x27, uVar4) & 0xffffff00 | uVar4 % 0x27;\n            bVar25 = uVar12 == 0;\n            out(0xed, uVar4 % 0x27);\n            uVar8 = extraout_ECX;\n            puVar22 = puVar21;\n        }\n        else {\n            puVar23 = *(unaff_EBP + 6);\n            puVar22 = *(unaff_EBP + 10);\n            piVar13 = *(unaff_EBP + 0x16);\n            uVar7 = *(unaff_EBP + 0x1a);\n            uVar8 = *(unaff_EBP + 0x1e);\n            uVar6 = *(unaff_EBP + 0x22);\n            if (uVar12 != 0) {\n                out(puVar22[1], uVar7);\n                puVar2 = segment(in_SS, unaff_EBP + 0x22);\n                *puVar2 = puVar23;\n    // WARNING: Bad instruction - Truncating control flow here\n                halt_baddata();\n            }\n            *(uVar6 + 0xc39d62cb) = *(uVar6 + 0xc39d62cb) | *(unaff_EBP + 0xe);\n            puVar16 = unaff_EBP + 0x2a;\n            bVar26 = (*(unaff_EBP + 0x26) & 0x400) != 0;\n            uVar12 = (*(unaff_EBP + 0x26) & 1) != 0;\n            bVar24 = uVar6 < 0xe627d48d || uVar6 + 0x19d82b73 < uVar12;\n            bVar25 = uVar6 + 0x19d82b73 == uVar12;\n            uVar12 = in(uVar7);\n        }\n        puVar21 = puVar22 + bVar26 * -2 + 1;\n        uVar10 = uVar7;\n        out(*puVar22, uVar10);\n        if (!bVar24 && !bVar25) {\n            *piVar13 = *piVar13 + 0x76 + bVar24;\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        uVar1 = in(uVar10);\n        *puVar23 = uVar1;\n        uVar1 = in(uVar10);\n        puVar23[1] = uVar1;\n        uVar14 = puVar16 & uVar7;\n        *(uVar14 - 4) = in_DS;\n        *(puVar23 + 2) = uVar12;\n        *0x2ed3b3f1 = -*0x2ed3b3f1;\n        puVar23 = puVar23 + 7;\n        iVar20 = *(uVar14 - 4);\n        ppuVar15 = uVar14 - 4;\n        *(uVar14 - 4) = uVar8;\n    }\n    ppuVar15[-1] = 0x9b627c;\n    uVar27 = fcn.0099ff64();\n    puVar5 = uVar27;\n    ppuVar15[-1] = 0x9b500b;\n    iVar9 = ppuVar15[-1] + -0x1001918b;\n    *(ppuVar15[-1] + 0x118e) = puVar5;\n    ppuVar15[-1] = uVar27 >> 0x20;\n    uVar8 = ppuVar15[-1];\n    uVar7 = *puVar5 + 0xcf0ad82a;\n    if (uVar7 == 0xcf0ad8f6) {\n        ppuVar17 = ppuVar15 + 1;\n        puVar5 = puVar5 & 0xffffff00 | (puVar5 ^ 199) & 0xff | 0x9c;\n        if (ppuVar15[2] == NULL) {\n            if (ppuVar15[2] != NULL) {\n                *ppuVar15 = puVar5;\n                ppuVar15[-1] = iVar9;\n                ppuVar15[-2] = uVar8;\n                ppuVar15[-3] = 0xcf0ad8f6;\n                ppuVar15[-4] = ppuVar15 + 1;\n                ppuVar15[-5] = iVar20;\n                ppuVar15[-6] = puVar21;\n                ppuVar15[-7] = puVar23;\n                out(uVar8, puVar5);\n    // WARNING: Bad instruction - Truncating control flow here\n                halt_baddata();\n            }\n            *ppuVar15 = puVar5;\n            ppuVar15[-1] = iVar9;\n            ppuVar15[-2] = uVar8;\n            ppuVar15[-3] = 0xcf0ad8f6;\n            ppuVar15[-4] = ppuVar15 + 1;\n            ppuVar15[-5] = iVar20;\n            ppuVar15[-6] = puVar21;\n            ppuVar15[-7] = puVar23;\n            ppuVar18 = ppuVar15 + -8;\n            ppuVar15[-8] = 0x9b5067;\n            do {\n    // WARNING: Call to offcut address within same function\n                *ppuVar18 = 0x9b635c;\n                uVar4 = func_0x009b6367();\n                *(ppuVar18 + -4) = iVar20;\n                *(ppuVar18 + -8) = uVar7;\n                iVar20 = iVar20 + 1;\n                puVar19 = ppuVar18 + -0xc;\n                ppuVar18 = ppuVar18 + -0xc;\n                *puVar19 = extraout_EDX;\n                puVar21 = puVar23 + 1;\n                uVar1 = in(extraout_EDX);\n                *puVar23 = uVar1;\n                puVar23 = puVar23 + 2;\n                uVar1 = in(extraout_EDX);\n                *puVar21 = uVar1;\n                uVar7 = uVar7 & 0xffffff00 | uVar7 + extraout_CH;\n                out(0x11, uVar4 | 0x9f);\n            } while( true );\n        }\n    }\n    else {\n        ppuVar17 = ppuVar15;\n        if (uVar7 != 0xcf0ad8f6) {\n            ppuVar15[9] = puVar5;\n            uVar11 = ppuVar15[5];\n            uVar8 = ppuVar15[7];\n            ppuVar15[10] = ppuVar15[10] + 1;\n            ppuVar15[7] = uVar8;\n            ppuVar15[6] = ppuVar15[6];\n            ppuVar15[5] = uVar11;\n            ppuVar15[4] = ppuVar15[4];\n            ppuVar15[3] = ppuVar15 + 8;\n            ppuVar15[2] = ppuVar15[2];\n            ppuVar15[1] = ppuVar15[1];\n            *ppuVar15 = *ppuVar15;\n            return CONCAT44(uVar11, uVar8);\n        }\n    }\n    *(ppuVar17 + 8) = *(ppuVar17 + 8) + 1;\n    return CONCAT44(uVar8, puVar5);\n}\n",
        "token_count": 3001
    },
    "009fba75": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498",
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Removing unreachable block (ram,0x009fbca5)\n\nulong fcn.009fba75(void)\n\n{\n    uint32_t *puVar1;\n    uchar uVar2;\n    code *pcVar3;\n    uint8_t uVar4;\n    char cVar5;\n    uint32_t uVar6;\n    ushort extraout_var;\n    uint uVar7;\n    uint32_t uVar8;\n    int32_t extraout_ECX;\n    uint extraout_ECX_00;\n    int32_t extraout_ECX_01;\n    uint32_t extraout_ECX_02;\n    int32_t iVar9;\n    char extraout_DH;\n    ushort uVar10;\n    uint16_t *puVar11;\n    uint32_t extraout_EDX;\n    int32_t unaff_EBX;\n    uint *puVar12;\n    uint *puVar13;\n    uchar *puVar14;\n    uchar *puVar15;\n    uchar *puVar16;\n    uchar *puVar17;\n    uchar *puVar18;\n    uchar *puVar19;\n    int32_t unaff_EBP;\n    int32_t unaff_ESI;\n    uint *unaff_EDI;\n    uint8_t in_CF;\n    uint8_t in_AF;\n    bool bVar20;\n    float10 extraout_ST0;\n    ulong uVar21;\n    uint64_t uVar22;\n    unkbyte6 Var23;\n    uint unaff_retaddr;\n    int32_t iStack8;\n    \n    uVar22 = fcn.009fbaa1(unaff_retaddr);\n    puVar11 = uVar22 >> 0x20;\n    puVar1 = puVar11 + -0x1b;\n    uVar4 = extraout_ECX_02 & 0x1f;\n    *puVar1 = *puVar1 >> uVar4 | *puVar1 << 0x20 - uVar4;\n    bVar20 = (extraout_ECX_02 & 0x1f) != 0;\n    cVar5 = uVar22 + -0x27 + (!bVar20 & in_CF | (bVar20 && *puVar1 < 0));\n    iVar9 = extraout_ECX_02 - 1;\n    if (iVar9 == 0) {\n        out(0xcd, cVar5);\n        *0x87f1719c = cVar5;\n        while( true ) {\n            if (-1 < **(unaff_EBP + 8)) {\n                Var23 = fcn.009b8aed();\n                uVar10 = Var23 >> 0x20;\n                *unaff_EDI = Var23;\n                iStack8 = CONCAT22(uVar10, uVar10);\n                func_0x009fbd07();\n                return CONCAT44(*(iStack8 + 0x18), *(iStack8 + 0x20));\n            }\n            uVar7 = fcn.009fbc7f();\n            *(unaff_EBX + 0x5a) = ROUND(extraout_ST0);\n            in_AF = 9 < (uVar7 & 0xf) | in_AF;\n            unaff_EBX = CONCAT31(unaff_EBX >> 8, 0x8d);\n            if ((uVar7 >> 8 & 0xffff00 | extraout_DH - in_AF) << 8 < 1) break;\n            unaff_EDI = *(unaff_EBP + 0x10);\n            *(unaff_EBP + 8) = unaff_ESI + 0x14;\n        }\n        fcn.009fbdac();\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    uVar22 = uVar22 & 0xffffffff00000000 | uVar22 & 0xffffff00 | cVar5 - 0x24;\n    puVar19 = &stack0x00000003;\n    if (unaff_ESI != 0) {\n        if (unaff_ESI != 0) goto code_r0x009fb5ea;\n        while( true ) {\n            unaff_ESI = unaff_ESI + -1;\n            bVar20 = unaff_ESI == 0;\n            puVar14 = puVar19 + 0x1c;\n            *(puVar19 + 0x1c) = 0x9fb6c4;\n            uVar22 = func_0x009fb6a7();\n            puVar11 = uVar22 >> 0x20;\n            puVar19 = puVar14 + 8;\n            iVar9 = extraout_ECX;\n            if (bVar20) break;\ncode_r0x009fb5ea:\n            uVar8 = iVar9 + *puVar11;\n            uVar6 = uVar8 >> 0x10;\n            bVar20 = uVar8 >> 0x10 != 0;\n            if (bVar20) {\n                if (!bVar20) {\n                    puVar18 = puVar19 + -0x104;\n                    puVar16 = puVar19 + -0x108;\n                    *(puVar19 + -0x108) = unaff_EBX;\n                    while( true ) {\n                        cVar5 = puVar18 == NULL;\n                        uVar7 = *(puVar19 + 8);\n                        *(puVar16 + -4) = unaff_ESI;\n                        puVar15 = puVar16 + -8;\n                        *(puVar16 + -8) = 0x9fb787;\n                        func_0x009b52c7();\n                        uVar2 = in(extraout_EDX);\n                        *unaff_EDI = uVar2;\n                        *(puVar15 + -4) = unaff_EDI + 1;\n                        uVar2 = puVar15[-4];\n                        *(puVar19 + -4) = extraout_EDX;\n                        *(puVar15 + -8) = CONCAT31(~CONCAT21(extraout_var, uVar2), puVar15[-4]);\n                        *(puVar15 + -0xc) = extraout_ECX_00;\n                        *(puVar15 + -0x10) = extraout_EDX;\n                        *(puVar15 + -0x14) = uVar7;\n                        *(puVar15 + -0x18) = puVar15 + -4;\n                        *(puVar15 + -0x1c) = puVar19;\n                        *(puVar15 + -0x20) = unaff_ESI;\n                        *(puVar15 + -0x24) =\n                             extraout_EDX >> 0x18 | (extraout_EDX & 0xff0000) >> 8 | (extraout_EDX & 0xff00) << 8 |\n                             extraout_EDX << 0x18;\n                        *(puVar15 + -0x24) = extraout_ECX_00;\n                        unaff_EDI = *(puVar15 + -0x24);\n                        unaff_ESI = *(puVar15 + -0x20);\n                        puVar19 = *(puVar15 + -0x1c);\n                        *(puVar15 + -8) = puVar15 + -4;\n                        *(puVar15 + -8) = 0xff;\n                        *(puVar15 + -0xc) = 0x9fb7ed;\n                        uVar7 = fcn.009fb7cc();\n                        *(puVar15 + 0x18) = uVar7;\n                        *(puVar15 + 0x14) = unaff_EDI;\n                        puVar17 = puVar15 + 0x10;\n                        *(puVar15 + 0x10) = 0x9fb836;\n                        func_0x009b53fb();\n                        if (extraout_ECX_01 == 1 || cVar5 == '\\0') break;\n                        puVar16 = puVar17 + -1;\n                        puVar18 = puVar17 + -1;\n                    }\n                    *(puVar17 + -4) = puVar19 + -0x103;\n                    *(puVar17 + -8) = 0x9fb85e;\n                    func_0x009fb83c();\n                    pcVar3 = swi(3);\n                    uVar21 = (*pcVar3)();\n                    return uVar21;\n                }\n                uVar8 = (uVar8 & 0xffff) + uVar6;\n            }\n            *(puVar19 + -4) = uVar6;\n            *(puVar19 + -8) = uVar8;\n            *(puVar19 + -0xc) = puVar11;\n            *(puVar19 + -0x10) = unaff_EBX;\n            *(puVar19 + -0x14) = puVar19;\n            *(puVar19 + -0x18) = unaff_EBP;\n            *(puVar19 + -0x1c) = unaff_ESI;\n            puVar13 = puVar19 + -0x20;\n            puVar19 = puVar19 + -0x20;\n            *puVar13 = unaff_EDI;\n        }\n        if (!bVar20) goto code_r0x009fb5be;\n    }\n    *(puVar19 + -4) = uVar22;\n    *(puVar19 + -8) = iVar9;\n    *(puVar19 + -0xc) = uVar22 >> 0x20;\n    *(puVar19 + -0x10) = unaff_EBX;\n    *(puVar19 + -0x14) = puVar19;\n    *(puVar19 + -0x18) = unaff_EBP;\n    *(puVar19 + -0x1c) = unaff_ESI;\n    puVar12 = puVar19 + -0x20;\n    puVar19 = puVar19 + -0x20;\n    *puVar12 = unaff_EDI;\ncode_r0x009fb5be:\n    rdtsc();\n    *(puVar19 + 0x1c) = iVar9;\n    return CONCAT44(*(puVar19 + 0x14), (*(puVar19 + 0x1c) >> 0x10) + *(puVar19 + 0x18));\n}\n",
        "token_count": 2253
    },
    "009b498d": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad",
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nchar * fcn.009b498d(void)\n\n{\n    uchar *puVar1;\n    char cVar2;\n    uint32_t uVar3;\n    char *pcVar4;\n    uint8_t uVar5;\n    unkbyte3 unaff_EBX;\n    int32_t unaff_EBP;\n    uchar *unaff_EDI;\n    ushort in_ES;\n    char in_AF;\n    char *pcStack00000013;\n    ulong in_stack_00000010;\n    ushort uStack12;\n    \n    // WARNING: Call to offcut address within same function\n    uVar3 = func_0x009b4b0d();\n    uVar5 = unaff_EBX >> 8;\n    cVar2 = uVar5 * '\\x02';\n    puVar1 = unaff_EDI + 1;\n    *unaff_EDI = uVar3;\n    uStack12 = puVar1 >> 8;\n    *puVar1 = 0xeb;\n    pcVar4 = uVar3 & 0xffff0000 |\n             CONCAT11((cVar2 < '\\0') << 7 | (cVar2 == '\\0') << 6 | in_AF << 4 | ((POPCOUNT(cVar2) & 1U) == 0) << 2 | 2U\n                      | CARRY1(uVar5, uVar5), uVar3);\n    *(unaff_EBP + 0x10018b96) = pcVar4;\n    if (*pcVar4 == -0x34) {\n        while( true ) {\n            pcVar4 = pcVar4 & 0xffffff3f;\n            if (CONCAT22(uStack12, in_ES) != 0) break;\n    // WARNING: Call to offcut address within same function\n            pcVar4 = func_0x009b4c06(puVar1);\n        }\n    }\n    else if (*pcVar4 != -0x34) {\n        return pcStack00000013;\n    }\n    return pcVar4;\n}\n",
        "token_count": 441
    },
    "0099e028": {
        "rules": [
            "encrypt data using Sosemanuk/d9cb91cf002a4780a153bbbb736437ff",
            "encrypt data using Sosemanuk/d9cb91cf002a4780a153bbbb736437ff"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0099e028(int32_t *param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    int32_t iVar10;\n    int32_t iVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    int32_t iVar14;\n    int32_t iVar15;\n    int32_t iVar16;\n    int32_t *in_EAX;\n    uint32_t uVar17;\n    uint32_t uVar18;\n    uint32_t uVar19;\n    uint32_t uVar20;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar20 = param_1[2];\n    uVar19 = param_1[1];\n    iVar1 = *in_EAX;\n    iVar2 = in_EAX[1];\n    uVar18 = (~uVar19 & param_1[3] | uVar20 & uVar19) + iVar1 + -0x28955b88 + *param_1;\n    uVar17 = (uVar18 * 0x80 | uVar18 >> 0x19) + uVar19;\n    uVar18 = (~uVar17 & uVar20 | uVar19 & uVar17) + iVar2 + -0x173848aa + param_1[3];\n    iVar3 = in_EAX[2];\n    uVar18 = (uVar18 * 0x1000 | uVar18 >> 0x14) + uVar17;\n    uVar20 = (~uVar18 & uVar19 | uVar18 & uVar17) + iVar3 + 0x242070db + uVar20;\n    iVar4 = in_EAX[3];\n    uVar20 = (uVar20 * 0x20000 | uVar20 >> 0xf) + uVar18;\n    uVar19 = (~uVar20 & uVar17 | uVar18 & uVar20) + iVar4 + -0x3e423112 + uVar19;\n    uVar19 = (uVar19 * 0x400000 | uVar19 >> 10) + uVar20;\n    iVar5 = in_EAX[4];\n    uVar17 = (~uVar19 & uVar18 | uVar20 & uVar19) + iVar5 + -0xa83f051 + uVar17;\n    iVar6 = in_EAX[5];\n    uVar17 = (uVar17 * 0x80 | uVar17 >> 0x19) + uVar19;\n    uVar18 = (~uVar17 & uVar20 | uVar19 & uVar17) + iVar6 + 0x4787c62a + uVar18;\n    iVar7 = in_EAX[6];\n    uVar18 = (uVar18 * 0x1000 | uVar18 >> 0x14) + uVar17;\n    uVar20 = (~uVar18 & uVar19 | uVar18 & uVar17) + iVar7 + -0x57cfb9ed + uVar20;\n    uVar20 = (uVar20 * 0x20000 | uVar20 >> 0xf) + uVar18;\n    iVar8 = in_EAX[7];\n    uVar19 = (~uVar20 & uVar17 | uVar18 & uVar20) + iVar8 + -0x2b96aff + uVar19;\n    uVar19 = (uVar19 * 0x400000 | uVar19 >> 10) + uVar20;\n    iVar9 = in_EAX[8];\n    uVar17 = (~uVar19 & uVar18 | uVar20 & uVar19) + iVar9 + 0x698098d8 + uVar17;\n    iVar10 = in_EAX[9];\n    uVar17 = (uVar17 * 0x80 | uVar17 >> 0x19) + uVar19;\n    uVar18 = (~uVar17 & uVar20 | uVar19 & uVar17) + iVar10 + -0x74bb0851 + uVar18;\n    uVar18 = (uVar18 * 0x1000 | uVar18 >> 0x14) + uVar17;\n    iVar11 = in_EAX[10];\n    uVar20 = (~uVar18 & uVar19 | uVar18 & uVar17) + iVar11 + -0xa44f + uVar20;\n    iVar12 = in_EAX[0xb];\n    uVar20 = (uVar20 * 0x20000 | uVar20 >> 0xf) + uVar18;\n    uVar19 = (~uVar20 & uVar17 | uVar18 & uVar20) + iVar12 + -0x76a32842 + uVar19;\n    uVar19 = (uVar19 * 0x400000 | uVar19 >> 10) + uVar20;\n    iVar13 = in_EAX[0xc];\n    uVar17 = (~uVar19 & uVar18 | uVar20 & uVar19) + iVar13 + 0x6b901122 + uVar17;\n    iVar14 = in_EAX[0xd];\n    uVar17 = (uVar17 * 0x80 | uVar17 >> 0x19) + uVar19;\n    uVar18 = (~uVar17 & uVar20 | uVar19 & uVar17) + iVar14 + -0x2678e6d + uVar18;\n    uVar18 = (uVar18 * 0x1000 | uVar18 >> 0x14) + uVar17;\n    iVar15 = in_EAX[0xe];\n    iVar16 = in_EAX[0xf];\n    uVar20 = (~uVar18 & uVar19 | uVar18 & uVar17) + iVar15 + -0x5986bc72 + uVar20;\n    uVar20 = (uVar20 * 0x20000 | uVar20 >> 0xf) + uVar18;\n    uVar19 = (~uVar20 & uVar17 | uVar18 & uVar20) + iVar16 + 0x49b40821 + uVar19;\n    uVar19 = (uVar19 * 0x400000 | uVar19 >> 10) + uVar20;\n    uVar17 = (~uVar18 & uVar20 | uVar18 & uVar19) + iVar2 + -0x9e1da9e + uVar17;\n    uVar17 = (uVar17 * 0x20 | uVar17 >> 0x1b) + uVar19;\n    uVar18 = (~uVar20 & uVar19 | uVar20 & uVar17) + iVar7 + -0x3fbf4cc0 + uVar18;\n    uVar18 = (uVar18 * 0x200 | uVar18 >> 0x17) + uVar17;\n    uVar20 = (~uVar19 & uVar17 | uVar18 & uVar19) + iVar12 + 0x265e5a51 + uVar20;\n    uVar20 = (uVar20 * 0x4000 | uVar20 >> 0x12) + uVar18;\n    uVar19 = (~uVar17 & uVar18 | uVar20 & uVar17) + iVar1 + -0x16493856 + uVar19;\n    uVar19 = (uVar19 * 0x100000 | uVar19 >> 0xc) + uVar20;\n    uVar17 = (~uVar18 & uVar20 | uVar18 & uVar19) + iVar6 + -0x29d0efa3 + uVar17;\n    uVar17 = (uVar17 * 0x20 | uVar17 >> 0x1b) + uVar19;\n    uVar18 = (~uVar20 & uVar19 | uVar20 & uVar17) + iVar11 + 0x2441453 + uVar18;\n    uVar18 = (uVar18 * 0x200 | uVar18 >> 0x17) + uVar17;\n    uVar20 = (~uVar19 & uVar17 | uVar18 & uVar19) + iVar16 + -0x275e197f + uVar20;\n    uVar20 = (uVar20 * 0x4000 | uVar20 >> 0x12) + uVar18;\n    uVar19 = (~uVar17 & uVar18 | uVar20 & uVar17) + iVar5 + -0x182c0438 + uVar19;\n    uVar19 = (uVar19 * 0x100000 | uVar19 >> 0xc) + uVar20;\n    uVar17 = (~uVar18 & uVar20 | uVar18 & uVar19) + iVar10 + 0x21e1cde6 + uVar17;\n    uVar17 = (uVar17 * 0x20 | uVar17 >> 0x1b) + uVar19;\n    uVar18 = (~uVar20 & uVar19 | uVar20 & uVar17) + iVar15 + -0x3cc8f82a + uVar18;\n    uVar18 = (uVar18 * 0x200 | uVar18 >> 0x17) + uVar17;\n    uVar20 = (~uVar19 & uVar17 | uVar18 & uVar19) + iVar4 + -0xb2af279 + uVar20;\n    uVar20 = (uVar20 * 0x4000 | uVar20 >> 0x12) + uVar18;\n    uVar19 = (~uVar17 & uVar18 | uVar20 & uVar17) + iVar9 + 0x455a14ed + uVar19;\n    uVar19 = (uVar19 * 0x100000 | uVar19 >> 0xc) + uVar20;\n    uVar17 = (~uVar18 & uVar20 | uVar18 & uVar19) + iVar14 + -0x561c16fb + uVar17;\n    uVar17 = (uVar17 * 0x20 | uVar17 >> 0x1b) + uVar19;\n    uVar18 = (~uVar20 & uVar19 | uVar20 & uVar17) + iVar3 + -0x3105c08 + uVar18;\n    uVar18 = (uVar18 * 0x200 | uVar18 >> 0x17) + uVar17;\n    uVar20 = (~uVar19 & uVar17 | uVar18 & uVar19) + iVar8 + 0x676f02d9 + uVar20;\n    uVar20 = (uVar20 * 0x4000 | uVar20 >> 0x12) + uVar18;\n    uVar19 = (~uVar17 & uVar18 | uVar20 & uVar17) + iVar13 + -0x72d5b376 + uVar19;\n    uVar19 = (uVar19 * 0x100000 | uVar19 >> 0xc) + uVar20;\n    uVar17 = (uVar18 ^ uVar20 ^ uVar19) + iVar6 + -0x5c6be + uVar17;\n    uVar17 = (uVar17 * 0x10 | uVar17 >> 0x1c) + uVar19;\n    uVar18 = (uVar20 ^ uVar19 ^ uVar17) + iVar9 + -0x788e097f + uVar18;\n    uVar18 = (uVar18 * 0x800 | uVar18 >> 0x15) + uVar17;\n    uVar20 = (uVar18 ^ uVar19 ^ uVar17) + iVar12 + 0x6d9d6122 + uVar20;\n    uVar20 = (uVar20 * 0x10000 | uVar20 >> 0x10) + uVar18;\n    uVar19 = (uVar18 ^ uVar20 ^ uVar17) + iVar15 + -0x21ac7f4 + uVar19;\n    uVar19 = (uVar19 * 0x800000 | uVar19 >> 9) + uVar20;\n    uVar17 = (uVar18 ^ uVar20 ^ uVar19) + iVar2 + -0x5b4115bc + uVar17;\n    uVar17 = (uVar17 * 0x10 | uVar17 >> 0x1c) + uVar19;\n    uVar18 = (uVar20 ^ uVar19 ^ uVar17) + iVar5 + 0x4bdecfa9 + uVar18;\n    uVar18 = (uVar18 * 0x800 | uVar18 >> 0x15) + uVar17;\n    uVar20 = (uVar18 ^ uVar19 ^ uVar17) + iVar8 + -0x944b4a0 + uVar20;\n    uVar20 = (uVar20 * 0x10000 | uVar20 >> 0x10) + uVar18;\n    uVar19 = (uVar18 ^ uVar20 ^ uVar17) + iVar11 + -0x41404390 + uVar19;\n    uVar19 = (uVar19 * 0x800000 | uVar19 >> 9) + uVar20;\n    uVar17 = (uVar18 ^ uVar20 ^ uVar19) + iVar14 + 0x289b7ec6 + uVar17;\n    uVar17 = (uVar17 * 0x10 | uVar17 >> 0x1c) + uVar19;\n    uVar18 = (uVar20 ^ uVar19 ^ uVar17) + iVar1 + -0x155ed806 + uVar18;\n    uVar18 = (uVar18 * 0x800 | uVar18 >> 0x15) + uVar17;\n    uVar20 = (uVar18 ^ uVar19 ^ uVar17) + iVar4 + -0x2b10cf7b + uVar20;\n    uVar20 = (uVar20 * 0x10000 | uVar20 >> 0x10) + uVar18;\n    uVar19 = (uVar18 ^ uVar20 ^ uVar17) + iVar7 + 0x4881d05 + uVar19;\n    uVar19 = (uVar19 * 0x800000 | uVar19 >> 9) + uVar20;\n    uVar17 = (uVar18 ^ uVar20 ^ uVar19) + iVar10 + -0x262b2fc7 + uVar17;\n    uVar17 = (uVar17 * 0x10 | uVar17 >> 0x1c) + uVar19;\n    uVar18 = (uVar20 ^ uVar19 ^ uVar17) + iVar13 + -0x1924661b + uVar18;\n    uVar18 = (uVar18 * 0x800 | uVar18 >> 0x15) + uVar17;\n    uVar20 = (uVar18 ^ uVar19 ^ uVar17) + iVar16 + 0x1fa27cf8 + uVar20;\n    uVar20 = (uVar20 * 0x10000 | uVar20 >> 0x10) + uVar18;\n    uVar19 = (uVar18 ^ uVar20 ^ uVar17) + iVar3 + -0x3b53a99b + uVar19;\n    uVar19 = (uVar19 * 0x800000 | uVar19 >> 9) + uVar20;\n    uVar17 = ((~uVar18 | uVar19) ^ uVar20) + iVar1 + -0xbd6ddbc + uVar17;\n    uVar17 = (uVar17 * 0x40 | uVar17 >> 0x1a) + uVar19;\n    uVar18 = ((~uVar20 | uVar17) ^ uVar19) + iVar8 + 0x432aff97 + uVar18;\n    uVar18 = (uVar18 * 0x400 | uVar18 >> 0x16) + uVar17;\n    uVar20 = ((~uVar19 | uVar18) ^ uVar17) + iVar15 + -0x546bdc59 + uVar20;\n    uVar20 = (uVar20 * 0x8000 | uVar20 >> 0x11) + uVar18;\n    uVar19 = ((~uVar17 | uVar20) ^ uVar18) + iVar6 + -0x36c5fc7 + uVar19;\n    uVar19 = (uVar19 * 0x200000 | uVar19 >> 0xb) + uVar20;\n    uVar17 = ((~uVar18 | uVar19) ^ uVar20) + iVar13 + 0x655b59c3 + uVar17;\n    uVar17 = (uVar17 * 0x40 | uVar17 >> 0x1a) + uVar19;\n    uVar18 = ((~uVar20 | uVar17) ^ uVar19) + iVar4 + -0x70f3336e + uVar18;\n    uVar18 = (uVar18 * 0x400 | uVar18 >> 0x16) + uVar17;\n    uVar20 = ((~uVar19 | uVar18) ^ uVar17) + iVar11 + -0x100b83 + uVar20;\n    uVar20 = (uVar20 * 0x8000 | uVar20 >> 0x11) + uVar18;\n    uVar19 = ((~uVar17 | uVar20) ^ uVar18) + iVar2 + -0x7a7ba22f + uVar19;\n    uVar19 = (uVar19 * 0x200000 | uVar19 >> 0xb) + uVar20;\n    uVar17 = ((~uVar18 | uVar19) ^ uVar20) + iVar9 + 0x6fa87e4f + uVar17;\n    uVar17 = (uVar17 * 0x40 | uVar17 >> 0x1a) + uVar19;\n    uVar18 = ((~uVar20 | uVar17) ^ uVar19) + iVar16 + -0x1d31920 + uVar18;\n    uVar18 = (uVar18 * 0x400 | uVar18 >> 0x16) + uVar17;\n    uVar20 = ((~uVar19 | uVar18) ^ uVar17) + iVar7 + -0x5cfebcec + uVar20;\n    uVar20 = (uVar20 * 0x8000 | uVar20 >> 0x11) + uVar18;\n    uVar19 = ((~uVar17 | uVar20) ^ uVar18) + iVar14 + 0x4e0811a1 + uVar19;\n    uVar19 = (uVar19 * 0x200000 | uVar19 >> 0xb) + uVar20;\n    uVar17 = ((~uVar18 | uVar19) ^ uVar20) + iVar5 + -0x8ac817e + uVar17;\n    uVar17 = (uVar17 * 0x40 | uVar17 >> 0x1a) + uVar19;\n    *param_1 = *param_1 + uVar17;\n    uVar18 = ((~uVar20 | uVar17) ^ uVar19) + iVar12 + -0x42c50dcb + uVar18;\n    uVar18 = (uVar18 * 0x400 | uVar18 >> 0x16) + uVar17;\n    uVar20 = ((~uVar19 | uVar18) ^ uVar17) + iVar3 + 0x2ad7d2bb + uVar20;\n    uVar20 = (uVar20 * 0x8000 | uVar20 >> 0x11) + uVar18;\n    param_1[2] = param_1[2] + uVar20;\n    uVar19 = ((~uVar17 | uVar20) ^ uVar18) + iVar10 + -0x14792c6f + uVar19;\n    param_1[1] = param_1[1] + (uVar19 * 0x200000 | uVar19 >> 0xb) + uVar20;\n    param_1[3] = param_1[3] + uVar18;\n    return;\n}\n",
        "token_count": 4804
    },
    "00a19b52": {
        "rules": [
            "encrypt data using Sosemanuk/d9cb91cf002a4780a153bbbb736437ff"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009ba028) overlaps instruction at (ram,0x009ba027)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nuint32_t fcn.00a19b52(uint param_1, uchar param_2, uint param_3, uint param_4, int32_t *param_5, uint param_6, \n                     uint param_7)\n\n{\n    uint32_t *puVar1;\n    uint8_t *puVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    code *pcVar5;\n    uint32_t *puVar6;\n    int32_t in_EAX;\n    uint32_t uVar7;\n    uint32_t extraout_ECX;\n    uint32_t *extraout_ECX_00;\n    int32_t extraout_ECX_01;\n    uint32_t uVar8;\n    ushort uVar9;\n    int32_t iVar10;\n    uint32_t unaff_EBX;\n    char *unaff_EBP;\n    uint32_t *puVar11;\n    uint32_t *unaff_ESI;\n    uint32_t *unaff_EDI;\n    bool bVar12;\n    uint8_t uVar13;\n    bool bVar14;\n    float10 extraout_ST0;\n    ulong uVar15;\n    unkbyte6 Var16;\n    \n    param_1 = 0xa19b5f;\n    (**(in_EAX + 0x98))();\n    while( true ) {\n        do {\n            do {\n                param_1 = 0x9ba030;\n                fcn.009a1954();\n                *0x9b92fb69 = in(0x14);\n                puVar2 = *(unaff_EDI + -0x12d4ea27);\n                puVar11 = unaff_ESI & extraout_ECX;\n                unaff_ESI = puVar11;\n            } while (puVar11 == NULL);\n            puVar1 = puVar2 + 1;\n            puVar6 = (*0x9b92fb69 & 0xffffff00 | *0x9b92fb69 + 0x7a) + 0x6a;\n            *puVar6 = *puVar6 << 1 | *puVar11 < *puVar2;\n            pcVar5 = swi(0xac);\n            param_1 = puVar2;\n            Var16 = (*pcVar5)();\n            uVar9 = Var16 >> 0x20;\n            puVar6 = Var16;\n            unaff_EDI = puVar1;\n            if ((POPCOUNT(*puVar6 - unaff_EBX & 0xff) & 1U) == 0) goto code_r0x009ba05b;\n            uVar8 = *puVar6 < unaff_EBX;\n            bVar12 = CARRY4(unaff_EBX, *extraout_ECX_00);\n            bVar14 = SCARRY4(unaff_EBX, *extraout_ECX_00);\n            uVar7 = unaff_EBX + *extraout_ECX_00;\n            unaff_EBX = uVar7 + uVar8;\n            unaff_ESI = puVar11 + 1;\n        } while (bVar14 == SCARRY4(uVar7, uVar8));\n        unaff_EDI = puVar2 + 5;\n        *puVar1 = *(puVar11 + 1);\n        if (unaff_EBX == 0) {\n            *(puVar6 + -0x2d) = *(puVar6 + -0x2d) << 1;\n            uVar13 = 1;\n            uVar15 = func_0x8bff181c();\n            iVar10 = CONCAT31(uVar15 >> 0x28, 0xad);\n            uVar8 = *(uVar15 + 0x16da6a91);\n            out(*(puVar11 + 5), iVar10);\n            if (&stack0x00000006 + uVar13 + *(extraout_ECX_01 * 5 + -0x1d338ece) != 0x1) {\n    // WARNING: Bad instruction - Truncating control flow here\n                halt_baddata();\n            }\n            *unaff_EBP = *unaff_EBP + unaff_EBP;\n            *unaff_EBP = *unaff_EBP + unaff_EBP;\n            uVar7 = 0;\n            if (*0x28 != 0) {\n                do {\n                    uVar8 = (uVar8 << 7 | uVar8 >> 0x19) ^ *(uVar7 + iVar10);\n                    uVar7 = uVar7 + 1;\n                    *0x20 = puVar11 + 9;\n                } while (uVar7 < *0x28);\n            }\n            return uVar8;\n        }\n        *(extraout_ECX_00 + -0xf447270) = extraout_ST0;\n        puVar6 = puVar6 & 0xffff0000 | CONCAT11(0xec, Var16);\n        uVar3 = bVar12 || CARRY4(uVar7, uVar8);\n        uVar8 = *unaff_EDI;\n        uVar7 = *unaff_EDI;\n        uVar4 = *unaff_EDI + extraout_ECX_00;\n        *unaff_EDI = uVar4 + uVar3;\n        out(*(puVar11 + 5), uVar9);\n        if (*unaff_EDI != 0 && (SCARRY4(uVar7, extraout_ECX_00) != SCARRY4(uVar4, uVar3)) == *unaff_EDI < 0) break;\n        *(unaff_EBX + 0xd6851e0a) =\n             *(unaff_EBX + 0xd6851e0a) + (Var16 >> 0x20) + (CARRY4(uVar8, extraout_ECX_00) || CARRY4(uVar4, uVar3));\n        out(uVar9, puVar6);\n        pcVar5 = swi(0x96);\n        (*pcVar5)();\n        unaff_EBX = 0xe5136aa;\n        unaff_ESI = puVar11 + 9;\n    }\ncode_r0x009ba05b:\n    uVar13 = unaff_EDI;\n    out(uVar9, uVar13);\n    *(puVar6 + -0x7f5bcba6) = *(puVar6 + -0x7f5bcba6) + 0x29818966 + (uVar13 < 0x36);\n    out(uVar9, uVar13 % 0x47);\n    *param_5 = *param_5 << (param_7 & 0x1f);\n    do {\n    // WARNING: Do nothing block with infinite loop\n    } while( true );\n}\n",
        "token_count": 1523
    },
    "00a54d66": {
        "rules": [
            "encrypt data using Sosemanuk/d9cb91cf002a4780a153bbbb736437ff"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00a54501) overlaps instruction at (ram,0x00a544fe)\n// \n\nvoid __fastcall fcn.00a54d66(uint32_t param_1, uint param_2)\n\n{\n    int16_t iVar1;\n    uint32_t uVar2;\n    uint32_t extraout_EDX;\n    uint16_t unaff_DI;\n    ushort in_ES;\n    uchar uVar3;\n    uint uStack0000001b;\n    ushort uStack0000001f;\n    uchar uStack00000021;\n    uchar uStack00000022;\n    uchar uStack00000023;\n    uchar uStack00000024;\n    uchar uStack00000025;\n    uchar uStack00000026;\n    uchar uStack00000027;\n    uchar in_stack_00000028;\n    \n    uStack00000026 = param_1 >> 0x10;\n    uStack00000023 = param_2 >> 8;\n    uStack00000024 = param_2 >> 0x10;\n    uStack00000025 = param_2 >> 0x18;\n    uStack00000027 = in_stack_00000028;\n    uVar2 = -(param_1 & 0xffff0000 | 0xfc55);\n    uStack0000001f = param_2 >> 8;\n    uStack00000022 = uStack00000026;\n    uStack00000021 = uStack00000025;\n    do {\n        uVar3 = uVar2 < 0;\n        iVar1 = 0xf;\n        if (unaff_DI != 0) {\n            for (; unaff_DI >> iVar1 == 0; iVar1 = iVar1 + -1) {\n            }\n        }\n        do {\n            uStack0000001b = 0xa544ee;\n            fcn.00a54515();\n        } while (!uVar3);\n        uVar2 = extraout_EDX | 0x24748b9c;\n        uStack0000001f = in_ES;\n    } while( true );\n}\n",
        "token_count": 452
    },
    "00a56402": {
        "rules": [
            "encrypt data using Sosemanuk/d9cb91cf002a4780a153bbbb736437ff"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "0099e8df": {
        "rules": [
            "encrypt data using HC-128/f6b71aea27f34766a10ff27131cf0227"
        ],
        "decompiled_code": "\nuint8_t * __fastcall fcn.0099e8df(uint8_t **param_1, uint32_t *param_2)\n\n{\n    uint8_t *puVar1;\n    \n    puVar1 = param_1[5];\n    param_1[5] = puVar1 + -1;\n    if (puVar1 == NULL) {\n        puVar1 = param_1[1];\n        param_1[1] = puVar1 + -1;\n        if (puVar1 == NULL) {\n            return puVar1;\n        }\n        param_1[4] = **param_1;\n        *param_1 = *param_1 + 1;\n        param_1[5] = 0x7;\n    }\n    puVar1 = param_1[4];\n    param_1[4] = puVar1 * 2;\n    *param_2 = puVar1 >> 7 & 1;\n    return 0x1;\n}\n",
        "token_count": 214
    },
    "00a55d7e": {
        "rules": [
            "encrypt data using HC-128/f6b71aea27f34766a10ff27131cf0227"
        ],
        "decompiled_code": "\nvoid fcn.00a55d7e(uchar param_1)\n\n{\n    uint8_t *puVar1;\n    uint8_t uVar2;\n    int16_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    uint32_t uVar7;\n    int16_t iVar8;\n    uchar uVar9;\n    uchar uVar10;\n    unkbyte10 *pVar11;\n    uint16_t uVar12;\n    uint32_t extraout_ECX;\n    uint32_t extraout_ECX_00;\n    uint extraout_ECX_01;\n    uint extraout_ECX_02;\n    uint extraout_ECX_03;\n    uint extraout_ECX_04;\n    uint uVar13;\n    uint32_t uVar14;\n    uint32_t uVar15;\n    uint32_t uVar16;\n    uint16_t uVar17;\n    uint32_t unaff_EDI;\n    bool bVar19;\n    uint8_t in_AF;\n    uchar uVar20;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    char cVar21;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint32_t uVar22;\n    unkbyte10 extraout_ST0;\n    unkbyte10 extraout_ST0_00;\n    unkbyte10 Var23;\n    ulong uVar24;\n    uchar uStack00000006;\n    uchar uStack00000007;\n    uint8_t uStack00000009;\n    uchar uStack0000000a;\n    uint16_t uStack0000000b;\n    int16_t iStack0000000d;\n    ushort uStack0000000f;\n    uchar uStack00000011;\n    uchar uStack00000012;\n    uchar uStack00000013;\n    uchar in_stack_00000014;\n    char cStack00000015;\n    char cStack00000016;\n    uchar uStack00000017;\n    uchar in_stack_00000018;\n    char cStack00000019;\n    uchar uStack0000001a;\n    uchar uStack0000001b;\n    uint8_t in_stack_0000001c;\n    char cStack0000001d;\n    char cStack0000001e;\n    uchar uStack0000001f;\n    uint8_t in_stack_00000020;\n    uchar uStack00000021;\n    uchar uStack00000022;\n    uchar uStack00000023;\n    uchar in_stack_00000024;\n    uchar uStack00000025;\n    uchar uStack00000026;\n    char cStack00000027;\n    uchar in_stack_00000028;\n    uchar uStack00000029;\n    uchar uStack0000002a;\n    uchar uStack0000002b;\n    uchar uStack0000002c;\n    uchar uStack0000002d;\n    uchar uStack0000002e;\n    uint in_stack_0000002c;\n    uint8_t uStack0000002f;\n    uchar uStack00000030;\n    uchar uStack00000031;\n    uchar uStack00000032;\n    uint in_stack_00000030;\n    uchar uStack00000033;\n    uint8_t in_stack_00000034;\n    uchar uStack00000035;\n    uchar uStack00000036;\n    uchar uStack00000037;\n    uchar uStack00000038;\n    uchar uStack00000039;\n    char cStack0000003a;\n    uint in_stack_00000038;\n    uchar uStack0000003b;\n    uchar in_stack_0000003c;\n    uchar uStack0000003d;\n    uint8_t uStack0000003e;\n    uchar uStack0000003f;\n    uchar uStack00000040;\n    uchar uStack00000041;\n    uint in_stack_00000040;\n    uint16_t uStack00000042;\n    int32_t in_stack_00000044;\n    unkbyte10 *in_stack_00000048;\n    uint32_t in_stack_00000054;\n    int32_t in_stack_00000058;\n    uint in_stack_0000005c;\n    int16_t iVar18;\n    \n    func_0x00a55d4d();\n    cStack0000001d = param_1;\n    for (iVar5 = 0x1f; 0x43f43d3fU >> iVar5 == 0; iVar5 = iVar5 + -1) {\n    }\n    cStack00000019 = param_1;\n    uStack0000000a = extraout_ECX;\n    uStack00000022 = extraout_ECX >> 8;\n    uStack00000023 = extraout_ECX >> 0x10;\n    in_stack_00000024 = extraout_ECX >> 0x18;\n    iVar5 = 0x1f;\n    if (extraout_ECX != 0) {\n        for (; extraout_ECX >> iVar5 == 0; iVar5 = iVar5 + -1) {\n        }\n    }\n    cStack00000027 = 0xa3;\n    in_stack_00000028 = 0x5e;\n    uStack00000029 = 0xa5;\n    uStack0000002a = 0;\n    uStack00000021 = uStack0000000a;\n    uVar24 = fcn.00a55e7f();\n    uVar22 = uVar24 >> 0x20;\n    uVar14 = uVar24;\n    cVar21 = uVar24 >> 0x20;\n    iVar5 = 0x1f;\n    if (uVar14 != 0) {\n        for (; uVar14 >> iVar5 == 0; iVar5 = iVar5 + -1) {\n        }\n    }\n    iVar5 = 0;\n    if (uVar22 != 0) {\n        for (; (uVar22 >> iVar5 & 1) == 0; iVar5 = iVar5 + 1) {\n        }\n    }\n    iVar5 = 0;\n    if (uVar22 != 0) {\n        for (; (uVar22 >> iVar5 & 1) == 0; iVar5 = iVar5 + 1) {\n        }\n    }\n    in_stack_0000001c = extraout_ECX_00 >> 0x18;\n    uVar12 = extraout_ECX_00 >> 8 & 0xff00 | ~in_stack_0000001c;\n    iVar3 = 0;\n    if (uVar12 != 0) {\n        for (; (uVar12 >> iVar3 & 1) == 0; iVar3 = iVar3 + 1) {\n        }\n    }\n    iVar3 = 0;\n    if (uVar24 != 0) {\n        for (; (uVar24 >> iVar3 & 1) == 0; iVar3 = iVar3 + 1) {\n        }\n    }\n    uVar12 = extraout_ECX_00;\n    uStack0000002d = extraout_ECX_00 >> 8;\n    uStack0000001a = uStack0000002d;\n    iVar5 = 0x1f;\n    if (uVar22 != 0) {\n        for (; uVar22 >> iVar5 == 0; iVar5 = iVar5 + -1) {\n        }\n    }\n    cStack00000027 = uVar24 >> 0x28;\n    cStack00000016 = cStack00000027;\n    in_stack_00000028 = uVar24 >> 0x30;\n    uStack00000017 = in_stack_00000028;\n    uStack00000029 = uVar24 >> 0x38;\n    in_stack_00000018 = uStack00000029;\n    cStack0000001e = uVar24 >> 8;\n    cStack0000001d = uVar24;\n    cStack00000019 = extraout_ECX_00;\n    uStack00000023 = uStack00000029;\n    uVar15 = uVar22 >> 8 & 0xffff;\n    cStack00000027 = uVar15;\n    in_stack_00000028 = (uVar15 << 8) >> 0x10;\n    in_stack_00000024 = uStack00000029;\n    iVar5 = (uVar14 & 0xffff0000 | uVar15) + 0x279d;\n    in_stack_00000020 = iVar5 >> 8;\n    uStack00000025 = cStack00000027;\n    uStack00000026 = in_stack_00000028;\n    uStack0000002a = uStack0000002d;\n    iVar4 = 0;\n    if (extraout_ECX_00 != 0) {\n        for (; (extraout_ECX_00 >> iVar4 & 1) == 0; iVar4 = iVar4 + 1) {\n        }\n    }\n    iVar3 = 0;\n    if (uVar12 != 0) {\n        for (; (uVar12 >> iVar3 & 1) == 0; iVar3 = iVar3 + 1) {\n        }\n    }\n    uVar15 = CONCAT13(uStack00000031, \n                      CONCAT12(uStack00000030, CONCAT11(uStack0000002f, -CONCAT11(cVar21, cVar21 * '\\x04') >> 8))) &\n             ~(1 << (unaff_EDI & 0x1f));\n    in_stack_00000028 = uVar15;\n    uStack00000029 = uVar15 >> 8;\n    uVar16 = (uVar15 & 0xffff0000 | uVar12 & 0xff00 | uStack0000002f) + 1 ^ 1 << (uVar22 & 0x1f);\n    cStack00000015 = uVar16;\n    uVar7 = CONCAT11(cStack00000015, cStack0000001d + cStack00000019 + -0x6f);\n    uVar15 = (uVar7 & 0xff00) << 8;\n    iVar4 = unaff_EDI + (uVar16 >> 0x18 | (uVar16 & 0xff0000) >> 8 | uVar15);\n    iVar3 = 0;\n    uVar12 = iVar4;\n    if (uVar12 != 0) {\n        for (; (uVar12 >> iVar3 & 1) == 0; iVar3 = iVar3 + 1) {\n        }\n    }\n    uStack00000007 = iVar4 >> 0x10;\n    uStack00000009 =\n         (cStack0000001e - cStack00000016) * '@' |\n         CONCAT11(&stack0x0000002b < 0xc, cStack0000001e - cStack00000016) >> 3;\n    uStack0000000b = uVar15 >> 0x10 | (uVar7 << 0x18) >> 0x10;\n    iVar8 = *0x10;\n    iStack0000000d = iVar8 + 0x21;\n    uStack0000000a = CONCAT11(0xd0, cStack0000001e) >> 8;\n    uStack00000021 = iVar3;\n    uStack00000022 = iVar3 >> 8;\n    uStack00000006 = iVar5 >> 0x18;\n    iVar5 = (uVar7 & 0xff |\n            (CONCAT22(((uVar14 * 4 & 0xff00) << 8) >> 0x10 | ((uVar22 >> 8) << 0x18) >> 0x10, \n                      CONCAT11(0xd0, cStack0000001e)) >> 8 & 0xffff00 | in_stack_00000020) << 8) * -4;\n    uStack0000001f = uVar24 >> 0x10;\n    in_stack_00000020 = uVar24 >> 0x18;\n    uStack0000001b = extraout_ECX_00 >> 0x10;\n    uStack00000011 = iVar5;\n    uStack00000012 = iVar5 >> 8;\n    uStack00000013 = iVar5 >> 0x10;\n    in_stack_00000014 = iVar5 >> 0x18;\n    uStack0000000f = &stack0x00000021 >> 0x10;\n    param_1 = unaff_EDI >> 0x18;\n    bVar19 = (POPCOUNT(-(uStack00000009 - 0xf) - 1 & 0xff) & 1U) == 0;\n    uStack0000002b = 2;\n    uStack0000002c = 100;\n    uStack0000002d = 0xa5;\n    uStack0000002e = 0;\n    cStack00000015 = cVar21;\n    cStack00000027 = cStack0000001d;\n    fcn.00a563bd();\n    uStack0000003b = in_stack_0000003c;\n    uVar12 = CONCAT11(uStack00000039, uStack00000038);\n    uStack00000038 = 0xd6;\n    iVar3 = 0;\n    if (uVar12 != 0) {\n        for (; (uVar12 >> iVar3 & 1) == 0; iVar3 = iVar3 + 1) {\n        }\n    }\n    in_stack_0000003c = uStack00000030;\n    cStack0000003a = !bVar19 + -0x62;\n    uVar20 = cStack0000003a == '\\0';\n    uStack00000031 = 0xac;\n    uStack00000032 = 100;\n    uStack00000033 = 0xa5;\n    in_stack_00000034 = 0;\n    uVar24 = fcn.00a56487();\n    uStack0000003d = uVar24 >> 0x30;\n    uStack0000002a = uVar24 >> 0x20;\n    iVar3 = 0xf;\n    if (iVar8 + 0x30U != 0) {\n        for (; iVar8 + 0x30U >> iVar3 == 0; iVar3 = iVar3 + -1) {\n        }\n    }\n    uStack00000039 = 3;\n    in_stack_0000003c = 0;\n    iVar5 = 0;\n    if (unaff_EDI != 0) {\n        for (; (unaff_EDI >> iVar5 & 1) == 0; iVar5 = iVar5 + 1) {\n        }\n    }\n    iVar5 = iVar5 * 4;\n    cStack0000003a = 0x87;\n    uStack00000022 = 0x36;\n    uStack00000026 = unaff_EDI == 0 || &stack0x00000040 < 0x1f;\n    uVar14 = uVar24 * 4 & 0xffffff00;\n    uStack00000033 = uVar24 >> 8;\n    in_stack_00000034 = uVar24 >> 0x10;\n    uStack00000035 = uVar24 >> 0x18;\n    uStack0000002e = extraout_ECX_01;\n    uVar10 = uStack0000002e;\n    uStack0000002b = uVar24 >> 0x28;\n    cStack00000027 = uVar14 >> 8;\n    in_stack_00000028 = uVar14 >> 0x10;\n    uStack00000029 = uVar14 >> 0x18;\n    uStack00000023 = &stack0x00000036 >> 8;\n    in_stack_00000024 = &stack0x00000036 >> 0x10;\n    uStack00000025 = &stack0x00000036 >> 0x18;\n    cStack0000001e = iVar5;\n    uStack0000001f = iVar5 >> 8;\n    in_stack_00000020 = iVar5 >> 0x10;\n    uStack00000021 = iVar5 >> 0x18;\n    cStack00000016 = unaff_EDI;\n    uVar9 = cStack00000016;\n    uStack00000017 = uStack0000002e;\n    cStack00000015 = uVar24 >> 0x38;\n    uStack00000012 = iVar8 + 0x14;\n    uStack00000013 = iVar8 + 0x14 >> 8;\n    uVar14 = 0;\n    if (*0x10 != 0xffffffee) {\n        for (; (&stack0x00000012 >> uVar14 & 1) == 0; uVar14 = uVar14 + 1) {\n        }\n    }\n    uVar14 = uVar14 & 0xffff00ff;\n    uStack0000002f = uVar14;\n    uStack00000031 = uVar14 >> 0x10;\n    uStack00000032 = uVar14 >> 0x18;\n    in_stack_0000001c = extraout_ECX_01 >> 8;\n    uStack0000001a = uStack0000002e;\n    uStack0000001b = uStack0000002f;\n    iVar3 = 0;\n    if (uVar24 != 0) {\n        for (; (uVar24 >> iVar3 & 1) == 0; iVar3 = iVar3 + 1) {\n        }\n    }\n    uStack0000003f = extraout_ECX_01 >> 0x10;\n    uStack00000040 = extraout_ECX_01 >> 0x18;\n    uStack0000002d = 0xa7;\n    uStack0000002e = 0x66;\n    uStack0000002f = 0xa5;\n    uStack00000030 = 0;\n    in_stack_00000014 = uStack0000003d;\n    in_stack_00000018 = uStack0000003d;\n    cStack00000019 = cStack00000015;\n    cStack0000001d = uStack0000001f;\n    uStack0000002c = uStack0000003d;\n    uStack00000036 = uStack0000002a;\n    uStack0000003b = uVar20;\n    uStack0000003d = uVar10;\n    uStack0000003e = in_stack_0000001c;\n    uVar24 = fcn.00a56663();\n    pVar11 = in_stack_00000048;\n    iVar4 = in_stack_00000044;\n    in_stack_00000058 = uVar24;\n    iVar5 = 0x1f;\n    if (in_stack_00000058 + 0x22153310U != 0) {\n        for (; in_stack_00000058 + 0x22153310U >> iVar5 == 0; iVar5 = iVar5 + -1) {\n        }\n    }\n    uStack00000041 = uStack00000042 >> 8;\n    uStack00000040 = 0xa2;\n    uVar12 = (iVar5 & ~(1 << (extraout_ECX_02 & 0xf))) != 1;\n    iVar18 = uVar24 >> 0x20;\n    iVar3 = iVar18 + 0x6847;\n    uVar17 = iVar3 + uVar12;\n    in_stack_00000034 = extraout_ECX_02;\n    uStack00000042 = uStack00000042 & 0xff00 | in_stack_00000034;\n    iVar5 = 0x1f;\n    if (unaff_EDI != 0) {\n        for (; unaff_EDI >> iVar5 == 0; iVar5 = iVar5 + -1) {\n        }\n    }\n    uVar14 = (in_NT & 1) * 0x4000 | (SCARRY2(iVar18, 0x6847) != SCARRY2(iVar3, uVar12)) * 0x800 | (in_IF & 1) * 0x200 |\n             (in_TF & 1) * 0x100 | (uVar17 < 0) * 0x80;\n    uVar22 = uVar14 | (unaff_EDI == 0) * 0x40 | (in_AF & 1) * 0x10 | ((POPCOUNT(uVar17 & 0xff) & 1U) == 0) * 4 |\n             (iVar8 + 0x40U >> (uVar24 & 0xf) & 1) != 0;\n    uStack0000003e =\n         (in_ID & 1) * 0x200000 >> 0x10 | (in_VIP & 1) * 0x100000 >> 0x10 | (in_VIF & 1) * 0x80000 >> 0x10 |\n         (in_AC & 1) * 0x40000 >> 0x10;\n    in_stack_00000028 = 0x3c;\n    in_stack_0000003c = uVar22;\n    uStack0000003d = uVar14 >> 8;\n    uStack0000003f = 0;\n    uStack00000038 = uVar24;\n    uStack00000039 = uVar24 >> 8;\n    cStack0000003a = uVar24 >> 0x10;\n    uStack0000003b = uVar24 >> 0x18;\n    uStack00000035 = extraout_ECX_02 >> 8;\n    uStack00000036 = extraout_ECX_02 >> 0x10;\n    uStack00000037 = extraout_ECX_02 >> 0x18;\n    uStack00000030 = uVar24 >> 0x20;\n    uStack00000031 = uVar24 >> 0x28;\n    uStack00000032 = uVar24 >> 0x30;\n    uStack00000033 = uVar24 >> 0x38;\n    uStack0000002c = in_stack_00000044;\n    uStack0000002d = in_stack_00000044 >> 8;\n    uStack0000002e = in_stack_00000044 >> 0x10;\n    uStack0000002f = in_stack_00000044 >> 0x18;\n    uStack00000029 = &stack0x0000003c >> 8;\n    uStack0000002a = &stack0x0000003c >> 0x10;\n    uStack0000002b = &stack0x0000003c >> 0x18;\n    in_stack_00000024 = 0xe3;\n    uStack00000025 = 0xf8;\n    cStack00000027 = (uVar22 << 0x10) >> 0x18;\n    in_stack_00000020 = in_stack_00000048;\n    uStack00000021 = in_stack_00000048 >> 8;\n    uStack00000022 = in_stack_00000048 >> 0x10;\n    uStack00000023 = in_stack_00000048 >> 0x18;\n    cStack0000001d = unaff_EDI >> 8;\n    cStack0000001e = unaff_EDI >> 0x10;\n    cVar21 = (in_stack_00000054 & 0x800) != 0;\n    in_stack_0000001c = uVar9;\n    uStack0000001f = param_1;\n    uStack00000026 = in_stack_0000003c;\n    do {\n        in_stack_00000054 = 0xa567d0;\n        uVar24 = fcn.00a56855();\n        in_stack_00000054 = uVar24;\n        pcVar6 = swi(4);\n        uVar13 = extraout_ECX_03;\n        Var23 = extraout_ST0;\n        if (cVar21 == '\\x01') {\n            uVar24 = (*pcVar6)();\n            uVar13 = extraout_ECX_04;\n            Var23 = extraout_ST0_00;\n        }\n        in_stack_00000058 = uVar24;\n        *pVar11 = Var23;\n        puVar1 = iVar4 + -0x36;\n        uVar2 = *puVar1;\n        *puVar1 = *puVar1 << 1 | uVar24 >> 0x20 < pVar11;\n        cVar21 = uVar2 < '\\0' != *puVar1 < '\\0';\n        in_stack_0000005c = uVar13;\n    } while( true );\n}\n",
        "token_count": 5488
    },
    "009aaa50": {
        "rules": [
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "009b05ee": {
        "rules": [
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009b0604) overlaps instruction at (ram,0x009b0601)\n// \n// WARNING: Control flow encountered bad instruction data\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Removing unreachable block (ram,0x009b0831)\n\nuint64_t __thiscall fcn.009b05ee(char param_1, ulong param_2)\n\n{\n    uint8_t *puVar1;\n    uint32_t uVar2;\n    int16_t iVar3;\n    unkbyte6 Var4;\n    ushort *puVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint32_t *puVar8;\n    char *pcVar9;\n    char extraout_CL;\n    uint8_t uVar10;\n    uint32_t uVar11;\n    uint32_t extraout_ECX;\n    uint32_t uVar12;\n    uint32_t extraout_ECX_00;\n    ushort uVar13;\n    int32_t iVar14;\n    uint uVar15;\n    uint8_t *puVar16;\n    ushort uVar17;\n    uchar *puVar18;\n    uint16_t *puVar19;\n    uint *puVar20;\n    uint8_t *unaff_EBP;\n    uchar *unaff_ESI;\n    uchar *unaff_EDI;\n    uchar *puVar21;\n    uint16_t in_ES;\n    ushort in_CS;\n    ushort in_DS;\n    bool bVar22;\n    uint8_t uVar23;\n    char cVar24;\n    bool bVar25;\n    uint8_t in_AF;\n    bool bVar26;\n    uchar uVar27;\n    bool bVar28;\n    uint8_t uVar29;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    bool bVar30;\n    uint8_t uVar31;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    ushort in_FPUControlWord;\n    uint64_t uVar32;\n    ulong uVar33;\n    uint16_t uVar34;\n    uint32_t unaff_retaddr;\n    uchar auStack10 [2];\n    uchar auStack8 [4];\n    uint32_t uStack4;\n    \n    while( true ) {\n        puVar21 = unaff_EDI + 1;\n        uVar17 = unaff_retaddr >> 0x10;\n        if (!SCARRY4(unaff_EDI, 1)) break;\n        puVar16 = CONCAT22(uVar17, 0xead3);\n        uStack4 = 0x9b066d;\n        uVar32 = fcn.009b0796();\n        iVar14 = uVar32 >> 0x20;\n        uVar12 = uVar32;\n        uVar34 = unaff_retaddr;\n        uVar6 = uVar12 + 0x4bbadd54;\n        if (uVar12 < 0xb44522ac) {\n            *puVar21 = *unaff_ESI;\n            goto code_r0x009b06b6;\n        }\n        uVar11 = 0xfbb4829;\n        uVar2 = uVar12 < 0xb44522ac;\n        uVar12 = uVar12 + 0xb14bd4ba;\n        bVar22 = uVar6 < 0x9a6f089a || uVar12 < uVar2;\n        bVar30 = SBORROW4(uVar6, -0x6590f766) != SBORROW4(uVar12, uVar2);\n        uVar7 = uVar12 - uVar2;\n        bVar28 = uVar7 < 0;\n        bVar26 = uVar7 == 0;\n        bVar25 = (POPCOUNT(uVar7 & 0xff) & 1U) == 0;\n        if (bVar25) {\n            if (bVar26) {\n                uVar13 = uVar32 >> 0x20;\n                if ((uVar6 < 0x9a6f089a || uVar12 < uVar2) || bVar26) {\n                    puVar1 = unaff_ESI + 0x21;\n                    *puVar1 = *puVar1 << 1 | *puVar1 < '\\0';\n                    unaff_ESI[-0x36] = unaff_ESI[-0x36] << 1;\n                    unaff_EBP = unaff_EBP + -1;\n                    in_FPUControlWord = *(unaff_EDI + iVar14 * 2 + -0x50a36f);\n                    if (unaff_EBP == NULL) {\n                        *puVar21 = *0x3fcca535;\n                        *(*puVar16 + 0x87d98b51) = *(*puVar16 + 0x87d98b51);\n                        uVar27 = in(uVar13);\n                        unaff_EDI[2] = uVar27;\n                        uVar34 = 0;\n                        goto code_r0x009b06e9;\n                    }\n                    *0xc2 = *0xc2 | 0xc2;\n                    goto code_r0x009b06bd;\n                }\n                if (!bVar26 && bVar30 == bVar28) {\n                    uVar10 = in(uVar13);\n                    unaff_EBP = unaff_EBP + puVar16 + bVar22;\n                    uVar23 = 0;\n                    uVar31 = 0;\n                    uVar32 = uVar32 & 0xffffffff00000000 | uVar10 & 0xffffffffffffff01;\n                    uVar29 = 0;\n                    uVar27 = (uVar10 & 1) == 0;\n                    uVar10 = (uVar10 & 1) == 0;\n                    goto code_r0x009b0707;\n                }\n                bVar22 = false;\n                bVar30 = false;\n                uVar7 = 0;\n                bVar28 = false;\n                bVar26 = true;\n                bVar25 = true;\n            }\n            else {\n                uStack4 = uStack4 & 0xffff0000 | in_ES;\n            }\n        }\n        else {\n            uStack4 = param_2._2_4_;\n        }\n        *(uVar7 - 4) = (in_NT & 1) * 0x4000 | bVar30 * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | bVar28 * 0x80\n                       | bVar26 * 0x40 | (in_AF & 1) * 0x10 | bVar25 * 4 | bVar22 | (in_ID & 1) * 0x200000 |\n                       (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n        unaff_EBP = puVar16 + (uVar7 - 0x40);\n        *(uVar7 - 0xc) = fcn.009b05c7;\n        puVar18 = unaff_ESI;\n        fcn.009b053b();\n        in_ES = puVar18;\n        unaff_retaddr = 0x9b060b;\n        fcn.009b05ee();\n        unaff_EDI = puVar21;\n        param_1 = extraout_CL;\n    }\n    puVar16 = unaff_retaddr & 0xffff0000;\n    uVar10 = param_1 + 0x66;\n    uVar11 = uVar10;\n    if (&stack0xfffffff6 < 0) {\ncode_r0x009b06bd:\n        uVar10 = uVar11;\n        uVar17 = puVar16 >> 0x10;\n        puVar18 = &stack0x00000002;\n    }\n    else {\n        puVar18 = &stack0xfffffff8;\n    }\n    uVar34 = unaff_retaddr;\n    uVar23 = false;\n    uVar31 = 0;\n    uVar10 = uVar10 ^ 0xea;\n    uVar29 = uVar10 < '\\0';\n    uVar27 = uVar10 == 0;\n    uVar10 = (POPCOUNT(uVar10) & 1U) == 0;\n    *(puVar18 + 4) = 0x9b072b;\n    uVar32 = fcn.009b06f9();\n    uVar11 = extraout_ECX;\n    if (uVar23 || uVar27) {\n        *(puVar18 + 6) = *(puVar18 + 8);\n        puVar5 = puVar18 + 8;\n    }\n    else {\ncode_r0x009b0707:\n        uStack4 = uStack4 & 0xffff | uVar34 << 0x10;\n        puVar5 = *0x10;\n    }\n    puVar8 = ~uVar32;\n    *(puVar5 + -5) =\n         (in_NT & 1) * 0x4000 | (uVar31 & 1) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | (uVar29 & 1) * 0x80 |\n         (uVar27 & 1) * 0x40 | (in_AF & 1) * 0x10 | (uVar10 & 1) * 4 | uVar23 & 1 | (in_ID & 1) * 0x200000 |\n         (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    *(puVar5 + -5) = unaff_ESI;\n    uVar12 = CONCAT31(CONCAT22(uVar17, 0xbb76) >> 8, 0xf);\n    uVar10 = ~uVar11;\n    uVar11 = uVar11 & 0xffffff00;\n    bVar22 = (uVar12 >> (puVar21 & 0x1f) & 1) != 0;\n    if ((!bVar22 && !uVar27) && (bVar22 || uVar27)) {\n        if (-1 < (uVar12 ^ 1 << (puVar21 & 0x1f) | *(unaff_EDI + 0x10996a10))) {\n            *puVar8 = *puVar8 << 0x17 | *puVar8 >> 9;\n            unaff_ESI[-0x45] = unaff_ESI[-0x45] << 1;\n            uVar12 = puVar8 + (puVar8 >> 8) * '\\x16';\n            Var4 = *((uVar32 >> 0x20) + -0x53 + (uVar11 | uVar10) * 8);\n            out(Var4, puVar8 & 0xffff0000 | uVar12);\n            *0x5eafebc2 = *0x5eafebc2 << (uVar10 & 0x1f) | *0x5eafebc2 >> 0x20 - (uVar10 & 0x1f);\n            return CONCAT44(Var4, puVar8 & 0xffffff00 | uVar12) & 0xffffffffffff00ff;\n        }\n        uStack4 = 0x9b074a;\n        uVar33 = func_0x578320c8();\n        iVar14 = uVar33 >> 0x20;\n        *uVar33 = in_FPUControlWord;\n        uVar34 = uVar33 >> 0x10;\ncode_r0x009b06e9:\n        uVar6 = &stack0xfffffffc & 0xffff | uVar34 << 0x10;\ncode_r0x009b06b6:\n        return CONCAT44(iVar14, uVar6);\n    }\n    uVar12 = uVar11 | uVar10 - 0x31;\n    puVar20 = puVar5 + 0x13;\n    *(puVar5 + 0x13) = fcn.009b0812;\n    func_0x009b07f3();\n    *puVar20 = 0x9b0818;\n    uVar33 = func_0x009b0838();\n    uVar15 = uVar33 >> 0x20;\n    pcVar9 = uVar33 & 0xffffff00 | extraout_ECX_00 & 0xff;\n    uVar6 = extraout_ECX_00;\n    if (extraout_ECX_00 == 0) {\n        *pcVar9 = *pcVar9 + (extraout_ECX_00 & 0xff);\n        *0x6caf5c35 = *0x6caf5c35 + (uVar11 >> 8);\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    while( true ) {\n        puVar21 = unaff_EDI + 0x3eaff39f;\n        if (uVar12 != 0x4b3f2ba0 && SCARRY4(uVar12, -0x4b3f2ba0) == uVar12 + 0xb4c0d460 < 0) {\n            do {\n                *(puVar20 + -4) = 0x9b093a;\n                fcn.009b224f();\n                puVar20 = puVar20 + *(unaff_ESI + -0x6b);\n                *(uVar12 + 0x882784de) = *(uVar12 + 0x882784de);\n            } while( true );\n        }\n        uVar10 = (uVar6 & 0x1f) % 0x11;\n        uVar11 = ((puVar21 >> (puVar21 & 0xf) & 1) != 0) << 0x10 | puVar21 & 0xffff;\n        uVar11 = (puVar21 & 0xffff0000 | uVar11 >> uVar10 | uVar11 << 0x11 - uVar10) & ~(1 << (puVar20 & 0x1f));\n        uVar11 = uVar11 & 0xffffff00 | uVar11 + 1;\n        uVar12 = *(uVar12 + 0x9afaab);\n        if (!SBORROW4(puVar20, 10)) break;\n        if (SBORROW4(puVar20, 10)) {\n            *(puVar20 + -9) = uVar11;\n            goto code_r0x009b0981;\n        }\n        uVar15 = 0xd1e82cdd;\n        *(puVar20 + -0xe) = uVar11;\n        *(puVar20 + -0x12) = in_DS;\n        puVar19 = puVar20 + -0x16;\n        puVar20 = puVar20 + -0x16;\n        *puVar19 = in_ES;\n        uVar6 = 0xb0;\n    }\n    *(puVar20 + -9) = uVar11;\ncode_r0x009b0981:\n    cVar24 = 0xa4ecac5e < uVar12;\n    iVar3 = 0;\n    bVar22 = unaff_ESI != 0;\n    if (bVar22) {\n        for (; (unaff_ESI >> iVar3 & 1) == 0; iVar3 = iVar3 + 1) {\n        }\n    }\n    if (bVar22) {\n        puVar21 = unaff_ESI + -0x23;\n        uVar11 = puVar21 & 0xffff0000 | CONCAT11((puVar21 >> 8) << 1, puVar21);\n    }\n    else {\n        if (bVar22) {\n            *(puVar20 + -0xc) = 0x9b0d57;\n            uVar11 = fcn.009b0d86();\n            *(puVar20 + -0xc) = in_ES;\n            *((uVar11 & 0xffffff00 | uVar11 + -0x6b + cVar24) + 0x865f9f68) = in_CS;\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        puVar21 = unaff_ESI + -0x23;\n        uVar11 = puVar21 & 0xffff0000 | CONCAT11((puVar21 >> 8) << 1, puVar21);\n    }\n    *(unaff_EBP + -4) = uVar12 + 0x5b1353a1;\n    return CONCAT44(uVar15, ~(uVar11 >> 0x18 | (uVar11 & 0xff0000) >> 8 | (uVar11 & 0xff00) << 8 | uVar11 << 0x18));\n}\n",
        "token_count": 3785
    },
    "0099e93b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0099e93b(int32_t param_1, int32_t *param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint var_4h;\n    \n    iVar2 = 1;\n    while( true ) {\n        iVar1 = fcn.0099e8df();\n        if (iVar1 == 0) {\n            return 0;\n        }\n        iVar2 = param_1 + iVar2 * 2;\n        iVar1 = fcn.0099e8df();\n        if (iVar1 == 0) break;\n        if (param_1 == 0) {\n            *param_2 = iVar2;\n            return 1;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 166
    },
    "009b3035": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009b3101) overlaps instruction at (ram,0x009b3100)\n// \n\nvoid fcn.009b3035(uint param_1)\n\n{\n    uchar uVar1;\n    ushort extraout_CX;\n    uint8_t uVar2;\n    ushort uVar3;\n    uint unaff_ESI;\n    uchar *unaff_EDI;\n    unkbyte6 Var4;\n    uchar *puVar5;\n    \n    puVar5 = NULL;\n    while (puVar5 == NULL) {\n    // WARNING: Call to offcut address within same function\n        Var4 = func_0x009b30f5(unaff_EDI);\n        uVar3 = Var4 >> 0x20;\n        puVar5 = unaff_EDI + 1;\n        uVar1 = in(uVar3);\n        *unaff_EDI = uVar1;\n        unaff_EDI = unaff_EDI + 2;\n        uVar1 = in(uVar3);\n        *puVar5 = uVar1;\n        uVar2 = extraout_CX >> 8;\n        param_1 = unaff_ESI;\n        puVar5 = *0x10;\n        if (!CARRY1(extraout_CX, uVar2) && extraout_CX + uVar2 != '\\0') {\n            *Var4 = *Var4 + Var4;\n        }\n    }\n    return;\n}\n",
        "token_count": 313
    },
    "009b59b5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009b5ee8) overlaps instruction at (ram,0x009b5ee5)\n// \n// WARNING: Possible PIC construction at 0x009b5b5f: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x009b5b64)\n// WARNING: Removing unreachable block (ram,0x009b5e9f)\n// WARNING: Removing unreachable block (ram,0x009b5b9d)\n// WARNING: Removing unreachable block (ram,0x009b5e6c)\n\nuint8_t * __thiscall fcn.009b59b5(uint32_t *param_1)\n\n{\n    uchar uVar1;\n    uint8_t uVar2;\n    uint32_t uVar3;\n    uchar *puVar4;\n    uint8_t uVar5;\n    uint32_t uVar7;\n    uint8_t *puVar8;\n    uint8_t extraout_CH;\n    ushort extraout_DX;\n    uint32_t *extraout_EDX;\n    uint8_t uVar9;\n    char cVar10;\n    uint8_t *unaff_EBP;\n    uint32_t unaff_ESI;\n    uchar *unaff_EDI;\n    ushort in_CS;\n    uint8_t in_CF;\n    bool bVar11;\n    uint8_t in_PF;\n    uint8_t in_AF;\n    uint8_t in_ZF;\n    bool bVar12;\n    uint8_t in_SF;\n    bool bVar13;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_OF;\n    bool bVar14;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    ulong uVar15;\n    uint8_t in_stack_0000001c;\n    uchar *in_stack_00000020;\n    uint32_t uStack64;\n    uint uStack60;\n    uint8_t *puStack56;\n    uint uStack52;\n    uchar *puStack48;\n    uint32_t uStack44;\n    uint8_t *puStack40;\n    uchar *puStack36;\n    uint32_t uStack32;\n    uint8_t *puStack28;\n    uint uStack24;\n    uint8_t *puStack20;\n    uint32_t uStack16;\n    uint32_t *puStack12;\n    uint32_t uStack8;\n    uint8_t *puVar6;\n    \n    while( true ) {\n        puVar4 = in_stack_00000020;\n        uStack8 = (in_NT & 1) * 0x4000 | (in_OF & 1) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n                  (in_SF & 1) * 0x80 | (in_ZF & 1) * 0x40 | (in_AF & 1) * 0x10 | (in_PF & 1) * 4 | in_CF & 1 |\n                  (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n        uStack16 = 0x9b5c51;\n        puStack12 = param_1;\n        fcn.009b59ef();\n        uStack16 = 0x9b5c7a;\n        uVar15 = fcn.0099ff64();\n        uVar3 = uStack8;\n        puStack28 = uVar15 >> 0x20;\n        puVar8 = uVar15;\n        uStack16 = 0x9b4e8d;\n        uStack24 = 0xf099be80;\n        uStack32 = *puVar8 + 0x2f5c021e;\n        bVar11 = uStack32 < 0x2f5c02ea;\n        *0x9b5be1 = puVar8;\n        if (uStack32 == 0x2f5c02ea) {\n            uVar5 = uVar15 + 0x68;\n            puStack20 = puVar8 & 0xffffff00 | uVar5;\n            *puStack20 = *puStack20 + uVar5;\n            uVar2 = *puStack20;\n            uVar9 = *puStack20;\n            *puStack20 = *puStack20 + uVar5;\n            uStack16 = (in_NT & 1) * 0x4000 | SCARRY1(uVar9, uVar5) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100\n                       | (*puStack20 < '\\0') * 0x80 | (*puStack20 == 0) * 0x40 | (in_AF & 1) * 0x10 |\n                       ((POPCOUNT(*puStack20) & 1U) == 0) * 4 | CARRY1(uVar2, uVar5) | (in_ID & 1) * 0x200000 |\n                       (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n            puStack36 = &stack0xfffffff0;\n            if (puStack12 != NULL) {\n                return puStack20;\n            }\n            uStack52 = 0x9b4ead;\n            puStack56 = (in_NT & 1) * 0x4000 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | (puStack12 < 0) * 0x80 |\n                        (puStack12 == NULL) * 0x40 | (in_AF & 1) * 0x10 | ((POPCOUNT(puStack12 & 0xff) & 1U) == 0) * 4 |\n                        (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 |\n                        (in_AC & 1) * 0x40000;\n            uStack60 = 0x9b5da7;\n            puStack48 = unaff_EDI;\n            uStack44 = unaff_ESI;\n            puStack40 = unaff_EBP;\n            fcn.009b5d69();\n            uStack60 = 0x9b5dac;\n            uVar15 = fcn.0099ff64();\n            *0x9b5d2e = uVar15;\n            uVar7 = **0x9b5d2e + 0x7de6d310;\n            bVar11 = uVar7 < 0x7de6d3dc;\n            bVar14 = SBORROW4(uVar7, 0x7de6d3dc);\n            uVar3 = **0x9b5d2e - 0xcc;\n            bVar13 = uVar3 < 0;\n            bVar12 = uVar3 == 0;\n            uVar9 = POPCOUNT(uVar3 & 0xff);\n            if (bVar12) {\n                bVar11 = false;\n                cVar10 = uVar15;\n                bVar14 = SCARRY1(cVar10, '\\0');\n                bVar13 = cVar10 < '\\0';\n                bVar12 = cVar10 == '\\0';\n                uVar9 = POPCOUNT(cVar10);\n            }\n            else {\n                puStack56 = unaff_EBP;\n                if (!bVar12) {\n                    return puStack28;\n                }\n            }\n            uStack60 = 0;\n            uStack64 = (in_NT & 1) * 0x4000 | bVar14 * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | bVar13 * 0x80\n                       | bVar12 * 0x40 | (in_AF & 1) * 0x10 | ((uVar9 & 1) == 0) * 4 | bVar11 | (in_ID & 1) * 0x200000 |\n                       (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    // WARNING: Call to offcut address within same function\n            func_0x009b5f14(unaff_EDI, unaff_ESI, unaff_EBP, &stack0xffffffc0, uVar7, uVar15 >> 0x20, 0xf099be80, \n                            *0x9b5d2e);\n            uVar1 = in(extraout_DX);\n            *unaff_EDI = uVar1;\n            uVar1 = in(extraout_DX);\n            unaff_EDI[1] = uVar1;\n            func_0xeb535ecf(in_CS);\n            LOCK();\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        if (uStack32 == 0x2f5c02ea) break;\n        uVar9 = in_stack_0000001c + 1;\n    // WARNING: Call to offcut address within same function\n        uVar7 = func_0x009b5bad();\n        if (!bVar11) {\n            return uVar7 & 0xffffff04;\n        }\n        uVar5 = (uVar7 + 'c') - bVar11;\n        puVar6 = uVar7 & 0xffffff00 | uVar5;\n        *puVar6 = *puVar6 + uVar5;\n        uVar2 = *puVar6;\n        *puVar6 = *puVar6 + uVar5;\n        in_stack_00000020 = NULL;\n        in_stack_0000001c =\n             (*puVar6 < '\\0') * -0x80 | (*puVar6 == 0) * '@' | (in_AF & 1) * '\\x10' |\n             ((POPCOUNT(*puVar6) & 1U) == 0) * '\\x04' | CARRY1(uVar2, uVar5);\n        uStack8 = 0x9b5c2c;\n        func_0x009b5c37();\n        unaff_EBP = puVar8 + 1;\n        unaff_ESI = uVar3 ^ *extraout_EDX;\n        uVar1 = in(extraout_EDX);\n        *puVar4 = uVar1;\n        unaff_EDI = puVar4 + 2;\n        uVar1 = in(extraout_EDX);\n        puVar4[1] = uVar1;\n        in_CF = CARRY1(uVar9, extraout_CH);\n        in_OF = SCARRY1(uVar9, extraout_CH);\n        cVar10 = uVar9 + extraout_CH;\n        in_SF = cVar10 < '\\0';\n        in_ZF = cVar10 == '\\0';\n        in_PF = (POPCOUNT(cVar10) & 1U) == 0;\n        param_1 = extraout_EDX;\n    }\n    return puVar8;\n}\n",
        "token_count": 2569
    },
    "009b52b0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.009b52b0(uint param_1, int32_t param_2)\n\n{\n    uchar *puVar1;\n    uchar uVar2;\n    ushort extraout_DX;\n    uchar *unaff_EDI;\n    \n    fcn.009b52ce();\n    if (param_2 != 0) {\n        return;\n    }\n    do {\n    // WARNING: Call to offcut address within same function\n        func_0x009b5344();\n        puVar1 = unaff_EDI + 1;\n        uVar2 = in(extraout_DX);\n        *unaff_EDI = uVar2;\n        unaff_EDI = unaff_EDI + 2;\n        uVar2 = in(extraout_DX);\n        *puVar1 = uVar2;\n    } while( true );\n}\n",
        "token_count": 177
    },
    "009b55c6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint32_t fcn.009b55c6(void)\n\n{\n    uchar uVar1;\n    uint8_t uVar2;\n    uint32_t in_EAX;\n    ushort uVar3;\n    uint8_t uVar4;\n    uint unaff_EBX;\n    uchar *unaff_EDI;\n    uint8_t in_AF;\n    unkbyte6 Var5;\n    uint in_stack_00000010;\n    uchar uVar6;\n    unkbyte3 in_stack_00000014;\n    uchar *puStack0000001c;\n    uint uStack00000024;\n    int32_t in_stack_00000034;\n    uint in_stack_00000038;\n    \n    uStack00000024 = CONCAT31(in_stack_00000014, uVar6);\n    puStack0000001c = &stack0x00000030;\n    if (in_stack_00000034 == 0) {\n    // WARNING: Call to offcut address within same function\n        Var5 = func_0x009b565f();\n        uVar3 = Var5 >> 0x20;\n        uVar1 = in(uVar3);\n        *unaff_EDI = uVar1;\n        uVar1 = in(uVar3);\n        unaff_EDI[1] = uVar1;\n        uVar4 = unaff_EBX >> 8;\n        in_AF = 9 < (Var5 & 0xf) | in_AF;\n        uVar2 = Var5 + in_AF * -6;\n        return Var5 & 0xffffff00 |\n               uVar2 + (0x9f < uVar2 | CARRY1(uVar4, uVar4) | in_AF * (uVar2 < 6)) * -0x60 & 0xffffffeb;\n    }\n    return in_EAX;\n}\n",
        "token_count": 392
    },
    "009b5e92": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Removing unreachable block (ram,0x009b5e9f)\n// WARNING: Removing unreachable block (ram,0x009b5e6c)\n\nvoid fcn.009b5e92(void)\n\n{\n    uchar uVar1;\n    ushort extraout_DX;\n    uchar *unaff_EDI;\n    ushort in_CS;\n    \n    // WARNING: Call to offcut address within same function\n    func_0x009b5f14();\n    uVar1 = in(extraout_DX);\n    *unaff_EDI = uVar1;\n    uVar1 = in(extraout_DX);\n    unaff_EDI[1] = uVar1;\n    func_0xeb535ecf(in_CS);\n    LOCK();\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 187
    },
    "009b56e7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009b57b1) overlaps instruction at (ram,0x009b57ae)\n// \n\nvoid fcn.009b56e7(uint param_1)\n\n{\n    uchar uVar1;\n    ushort uVar2;\n    uchar *unaff_EDI;\n    float10 extraout_ST0;\n    unkbyte6 Var3;\n    ushort uStack00000012;\n    int32_t in_stack_00000018;\n    \n    fcn.009b5708();\n    if (in_stack_00000018 == 0) {\n        uStack00000012 = param_1 >> 0x10;\n    // WARNING: Call to offcut address within same function\n        Var3 = func_0x009b579c();\n        uVar2 = Var3 >> 0x20;\n        uVar1 = in(uVar2);\n        *unaff_EDI = uVar1;\n        uVar1 = in(uVar2);\n        unaff_EDI[1] = uVar1;\n        *(Var3 + -0x31) = extraout_ST0;\n        do {\n    // WARNING: Do nothing block with infinite loop\n        } while( true );\n    }\n    return;\n}\n",
        "token_count": 266
    },
    "009b4d9f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009b58e4) overlaps instruction at (ram,0x009b58e2)\n// \n// WARNING: Control flow encountered bad instruction data\n\nuint8_t * fcn.009b4d9f(uint param_1, uint param_2, uint param_3, uint param_4, uint param_5, ushort param_6)\n\n{\n    uint8_t *puVar1;\n    uchar uVar2;\n    uint uVar3;\n    uint32_t uVar4;\n    uint *puVar5;\n    char *pcVar6;\n    uint *puVar7;\n    uchar *puVar8;\n    uint16_t extraout_CX;\n    int32_t extraout_ECX;\n    ushort uVar9;\n    uint32_t *extraout_EDX;\n    uint32_t *puVar10;\n    uint32_t unaff_EBX;\n    uint32_t uVar11;\n    int32_t unaff_EBP;\n    uint32_t unaff_ESI;\n    uint *puVar12;\n    uchar *unaff_EDI;\n    uint *puVar13;\n    uint16_t in_ES;\n    ushort in_CS;\n    ushort uVar14;\n    char cVar15;\n    bool bVar16;\n    ulong uVar17;\n    unkbyte6 Var18;\n    uchar uVar19;\n    uchar uVar20;\n    int16_t iVar21;\n    ushort uStack0000001a;\n    uchar uStack0000001d;\n    uchar uStack8;\n    uchar uStack7;\n    ushort uStack6;\n    ushort uStack4;\n    \n    // WARNING: Call to offcut address within same function\n    func_0x009b58db();\n    uVar19 = unaff_EBP;\n    uVar20 = unaff_EBP >> 8;\n    uStack4 = unaff_EBX;\n    uStack8 = SUB41(extraout_EDX, 0);\n    uStack7 = extraout_EDX >> 8;\n    uStack6 = extraout_EDX >> 0x10;\n    puVar12 = unaff_ESI ^ *extraout_EDX;\n    uVar2 = in(extraout_EDX);\n    *unaff_EDI = uVar2;\n    puVar1 = unaff_EDI + 2;\n    uVar2 = in(extraout_EDX);\n    unaff_EDI[1] = uVar2;\n    uVar14 = 0x1690;\n    func_0xffe2eb43();\n    // WARNING: Call to offcut address within same function\n    Var18 = func_0x009b591f();\n    puVar13 = unaff_EDI + 1;\n    if (!SBORROW4(puVar1, 1)) {\ncode_r0x009b5914:\n        uVar14 = Var18 >> 0x20;\n        uVar11 = Var18;\n        out(*puVar12, uVar14);\n        uVar2 = in(uVar14);\n        *puVar13 = uVar2;\n        cVar15 = Var18 >> 0x20;\n        *(uVar11 - 0x15) = *(uVar11 - 0x15) + cVar15;\n        *(uVar11 + 0x23906106) = *(uVar11 + 0x23906106) + cVar15;\n        return (uVar11 | 0xa517e49d) & 0xffffff00 | (uVar11 | 0xa517e49d) + 0x73 & 0xffffff04;\n    }\n    uVar2 = in(Var18 >> 0x20);\n    *puVar13 = uVar2;\n    puVar8 = CONCAT31(Var18 >> 8, 0xff);\n    *(extraout_ECX + 0x100199db) = puVar1;\n    uVar11 = *puVar1 + 0x1e368fc2;\n    cVar15 = uVar11 < 0x1e36908e;\n    if (uVar11 != 0x1e36908e) {\n        if (uVar11 != 0x1e36908e) {\n            uStack0000001a = SUB42(puVar1, 0);\n            uStack0000001d = puVar1 >> 0x18;\n            pcVar6 = CONCAT13(uStack7, CONCAT12(uStack8, in_CS));\n            iVar21 = *0x10 + 0x16;\n            uVar11 = fcn.009b594a();\n            *pcVar6 = *pcVar6 + uVar11 + cVar15;\n            bVar16 = CONCAT13(param_2._1_1_, CONCAT12(param_2, param_1 >> 0x10)) != 0xcc;\n            if (bVar16) {\n                if (bVar16) {\n                    uStack0000001d = 0x58;\n    // WARNING: Call to offcut address within same function\n                    func_0x009b5935();\n    // WARNING: Bad instruction - Truncating control flow here\n                    halt_baddata();\n                }\n                return uVar11 & 0xffff0000 | extraout_CX;\n            }\n            puVar7 = unaff_EBX & 0xffff0000 | in_ES;\n            puVar5 = CONCAT22(iVar21, CONCAT11(uVar20, uVar19));\n            Var18 = CONCAT24(CONCAT11(param_4._1_1_, param_3._2_1_), CONCAT22(uStack0000001a, param_6));\n            puVar13 = puVar7 + 1;\n            puVar12 = puVar5 + 1;\n            *puVar7 = *puVar5;\n            goto code_r0x009b5914;\n        }\n        if (CONCAT22(uStack4, uStack6) != 0) {\n            return puVar1;\n        }\n    }\n    // WARNING: Call to offcut address within same function\n    uVar17 = func_0x009b5a1b();\n    puVar10 = uVar17 >> 0x20;\n    uVar4 = *puVar10;\n    uVar9 = uVar17 >> 0x20;\n    uVar2 = in(uVar9);\n    *puVar8 = uVar2;\n    uVar2 = in(uVar9);\n    puVar8[1] = uVar2;\n    out(uVar9, uVar17);\n    // WARNING: Call to offcut address within same function\n    Var18 = func_0x009b5a64(puVar10, uVar11, unaff_EBP + 1);\n    uVar9 = Var18 >> 0x20;\n    uVar3 = in(uVar9);\n    *(puVar8 + 2) = uVar3;\n    if (SCARRY4(unaff_EBP + 3, 1)) {\n        return Var18;\n    }\n    if (-1 < unaff_EBP + 4) {\n        out(*(puVar12 ^ uVar4), uVar9);\n        func_0xb8e87b2c(uVar14);\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    uVar2 = in(uVar9);\n    puVar8[6] = uVar2;\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 1625
    },
    "009cca36": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x009cca36: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x009cca3b)\n// WARNING: Removing unreachable block (ram,0x009cca6e)\n// WARNING: Removing unreachable block (ram,0x009cca78)\n// WARNING: Removing unreachable block (ram,0x0099c6e5)\n// WARNING: Removing unreachable block (ram,0x0099c6ea)\n// WARNING: Removing unreachable block (ram,0x009cca8d)\n// WARNING: Removing unreachable block (ram,0x0099c716)\n// WARNING: Removing unreachable block (ram,0x0099c742)\n// WARNING: Removing unreachable block (ram,0x009cca97)\n// WARNING: Removing unreachable block (ram,0x0099c72c)\n// WARNING: Removing unreachable block (ram,0x009ccaad)\n// WARNING: Removing unreachable block (ram,0x009cca9d)\n// WARNING: Removing unreachable block (ram,0x009cca7e)\n\nvoid fcn.009cca36(void)\n\n{\n    return;\n}\n",
        "token_count": 243
    },
    "00a01eaa": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00a01e8c) overlaps instruction at (ram,0x00a01e8b)\n// \n// WARNING (jumptable): Unable to track spacebase fully for stack\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Removing unreachable block (ram,0x009b0831)\n// WARNING: Type propagation algorithm not settling\n\nint32_t * __fastcall fcn.00a01eaa(int32_t **param_1, int32_t param_2)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    code **ppcVar3;\n    code cVar4;\n    uint16_t uVar5;\n    int32_t iVar6;\n    int16_t iVar7;\n    uint8_t uVar8;\n    uchar uVar9;\n    ushort uVar10;\n    uint32_t uVar11;\n    ushort *puVar12;\n    uint32_t *puVar13;\n    uint32_t uVar14;\n    char *pcVar15;\n    int32_t *piVar16;\n    int32_t *in_EAX;\n    char extraout_CL;\n    char extraout_CL_00;\n    uint8_t uVar17;\n    int32_t extraout_ECX;\n    int32_t *piVar18;\n    uint uVar19;\n    uint32_t extraout_ECX_00;\n    uint extraout_ECX_01;\n    uint32_t uVar20;\n    uint32_t extraout_ECX_02;\n    int32_t extraout_ECX_03;\n    int32_t **extraout_ECX_04;\n    int32_t **extraout_ECX_05;\n    int32_t **extraout_ECX_06;\n    ushort uVar21;\n    uint8_t *puVar22;\n    uchar *puVar23;\n    int32_t unaff_EBX;\n    uchar *puVar24;\n    uint8_t **ppuVar25;\n    uint8_t **ppuVar26;\n    uint *puVar27;\n    ushort *puVar28;\n    uint *puVar29;\n    uchar *puVar30;\n    uchar *puVar31;\n    uint *puVar32;\n    uint *puVar35;\n    uchar *puVar36;\n    int32_t *piVar37;\n    uint8_t *puVar38;\n    int32_t *unaff_EBP;\n    uchar *puVar39;\n    int32_t iVar40;\n    code *pcVar41;\n    uint8_t *unaff_ESI;\n    code *pcVar42;\n    uint8_t *unaff_EDI;\n    ushort in_ES;\n    ushort in_CS;\n    ushort in_DS;\n    int32_t in_FS_OFFSET;\n    uint8_t uVar44;\n    char cVar45;\n    bool in_CF;\n    uint8_t in_PF;\n    uint8_t in_AF;\n    bool in_ZF;\n    bool bVar46;\n    uint8_t uVar47;\n    bool bVar48;\n    uint8_t in_SF;\n    uint8_t uVar49;\n    uint8_t in_TF;\n    uint8_t uVar50;\n    uint8_t in_IF;\n    bool bVar51;\n    bool bVar52;\n    uint8_t uVar53;\n    bool bVar54;\n    bool in_OF;\n    bool bVar55;\n    uint8_t uVar56;\n    uint8_t in_NT;\n    uint8_t uVar57;\n    uint8_t in_AC;\n    uint8_t uVar58;\n    uint8_t in_VIF;\n    uint8_t uVar59;\n    uint8_t in_VIP;\n    uint8_t uVar60;\n    uint8_t in_ID;\n    uint32_t uVar61;\n    ushort in_FPUControlWord;\n    ulong uVar62;\n    uint64_t uVar63;\n    uint *puVar33;\n    uint *puVar34;\n    code *pcVar43;\n    \n    puVar23 = &stack0x00000018;\n    do {\n        puVar24 = puVar23;\n        if (in_CF || in_ZF) {\n            *(puVar24 + -4) =\n                 (in_NT & 1) * 0x4000 | (in_OF & 1) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n                 (in_SF & 1) * 0x80 | (in_ZF & 1) * 0x40 | (in_AF & 1) * 0x10 | (in_PF & 1) * 4 | in_CF & 1 |\n                 (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n            return in_EAX + param_1[3];\n        }\n        if (!in_CF && !in_ZF) goto code_r0x0099fe3b;\n        piVar16 = puVar24 + -4;\n        puVar39 = puVar24 + -4;\n        *(puVar24 + -4) = unaff_EBP;\n        cVar45 = '\\x04';\n        do {\n            unaff_EBP = unaff_EBP + -1;\n            piVar16 = piVar16 + -1;\n            *piVar16 = *unaff_EBP;\n            cVar45 = cVar45 + -1;\n        } while ('\\0' < cVar45);\n        *(puVar24 + -0x18) = puVar24 + -4;\n        puVar35 = puVar24 + -0xf3f5;\n        puVar30 = puVar24 + -0xf3f5;\n        *(puVar24 + -0xf3f5) = in_EAX;\n        if (!in_CF && !in_ZF) {\n            if (!in_OF) {\n                return in_EAX;\n            }\n            uVar8 = in(0x17);\n            piVar16 = in_EAX & 0xffffff00 | uVar8;\n            while( true ) {\n                if (param_1 == NULL) {\n                    return piVar16;\n                }\n                iVar7 = 0xf;\n                if (piVar16 != 0) {\n                    for (; piVar16 >> iVar7 == 0; iVar7 = iVar7 + -1) {\n                    }\n                }\n                puVar24 = puVar30 + 0xc;\n                *(puVar30 + 0xc) = unaff_ESI;\n                unaff_EBP = in_EAX;\n                if (*param_1 < piVar16) {\n                    *(puVar30 + 8) = 0xa01e83;\n                    fcn.00a01e5b();\n                    *(puVar30 + 8) = 0xa01e8a;\n                    fcn.00a01eaa();\n    // WARNING: Bad instruction - Truncating control flow here\n                    halt_baddata();\n                }\ncode_r0x0099fe3b:\n                in_EAX = unaff_EBP;\n                *(puVar24 + -4) = 0x99fe43;\n                uVar62 = fcn.00a01fea();\n                uVar61 = *uVar62 - unaff_EBX;\n                bVar46 = uVar61 < 0;\n                uVar10 = uVar62 >> 0x20;\n                if ((POPCOUNT(uVar61 & 0xff) & 1U) != 0) break;\n                in(uVar10);\n                pcVar43 = swi(0xd4);\n                uVar10 = (*pcVar43)();\n                *(puVar24 + -4) = in_ES;\n                if (!bVar46) {\n                    *unaff_ESI = *unaff_ESI & uVar10;\n                    return *(puVar24 + -4);\n                }\n                unaff_ESI = unaff_ESI + -1;\n                *(puVar24 + -6) = uVar10;\n                *(puVar24 + -8) = *(puVar24 + -6);\n                *(puVar24 + -0xc) = 0xa01ded;\n                fcn.00a01e1c();\n                unaff_EDI = 0x826bfe4a;\n                puVar30 = puVar24 + -10;\n                *(puVar24 + -10) = puVar24 + -8;\n                *(puVar24 + -0xe) = fcn.00a01e06;\n                piVar16 = fcn.00a01dcf();\n                param_1 = extraout_ECX_04;\n            }\n            in(uVar10);\n            iVar40 = extraout_ECX + (uVar62 >> 0x20);\n            in_EAX[-3] = iVar40;\n            *(puVar24 + -4) = 0x99fea5;\n            uVar62 = fcn.0099eeab();\n            iVar6 = *(uVar62 + 0xa4);\n            piVar16 = *(uVar62 + 0xa0);\n            in_EAX[-2] = iVar6;\n            if ((piVar16 == NULL) || (iVar6 < 1)) {\n                piVar18 = NULL;\n            }\n            else {\n                piVar18 = piVar16 + iVar40;\n            }\n            if (piVar18 == NULL) {\n                return piVar16;\n            }\n            *(puVar24 + -4) = unaff_EBX;\n            *(puVar24 + -8) = unaff_EDI;\n            do {\n                piVar16 = piVar18[1];\n                if (piVar16 == NULL) {\n                    return NULL;\n                }\n                if (piVar16 < 0x8) {\n                    return piVar16;\n                }\n                if (in_EAX[-2] < piVar16) {\n                    return piVar16;\n                }\n                piVar1 = piVar16 + -2;\n                in_EAX[-1] = 0;\n                if (piVar1 >> 1 != 0) {\n                    do {\n                        uVar5 = *(piVar18 + in_EAX[-1] * 2 + 8);\n                        piVar16 = uVar5;\n                        if ((uVar5 & 0xf000) == 0x3000) {\n                            piVar16 = (piVar16 & 0xfff) + in_EAX[-3] + *piVar18;\n                            iVar40 = *piVar16 + (uVar62 >> 0x20);\n                            if (iVar40 == in_EAX[2]) {\n                                *piVar16 = iVar40;\n                            }\n                        }\n                        in_EAX[-1] = in_EAX[-1] + 1;\n                    } while (in_EAX[-1] < piVar1 >> 1);\n                }\n                piVar18 = piVar18 + piVar18[1];\n            } while (piVar18 != NULL);\n            return piVar16;\n        }\n        puVar23 = puVar24 + -4;\n        if (in_CF || in_ZF) goto code_r0x00a01f65;\n        puVar23 = puVar24 + -0xf3f5;\n        unaff_EBP = puVar24 + -4;\n    } while (in_OF != in_SF);\n    puVar31 = *(param_2 + -0x3ca1d323) | 0x230cc7b4;\n    iVar40 = *(unaff_ESI + 0x20);\n    *(puVar31 + -4) = puVar31;\n    iVar6 = *(unaff_ESI + 0x24);\n    *(puVar24 + -0xc) = *(puVar24 + -0xc) & unaff_EDI;\n    iVar40 = iVar40 + param_1;\n    *(puVar31 + -4) = param_1;\n    puVar31[-4] = iVar40 >> 8;\n    *(puVar24 + -0x14) = iVar40;\n    *(puVar31 + -8) = iVar40;\n    *(puVar31 + -0xc) = param_1;\n    *(puVar31 + -0x10) = param_2;\n    *(puVar31 + -0x14) = iVar6;\n    *(puVar31 + -0x18) = puVar31 + -4;\n    *(puVar31 + -0x1c) = puVar24 + -4;\n    *(puVar31 + -0x20) = unaff_ESI;\n    *(puVar31 + -0x24) = unaff_EDI;\n    puVar31[-0x20] = iVar6 >> 8;\n    iVar40 = *(unaff_ESI + 0x18);\n    unaff_EBX = iVar6 + param_1;\n    bVar46 = iVar40 + -1 < 0;\n    *(puVar24 + -0x10) = unaff_EBX;\n    puVar35 = puVar31 + -4;\n    puVar32 = puVar31 + -4;\n    *(puVar31 + -4) = puVar24 + -4;\n    *(puVar31 + -8) = unaff_EDI;\n    *(puVar24 + -8) = iVar40 + -1;\n    unaff_EDI = *(puVar31 + -8);\n    *(puVar31 + -8) = 0xa0238e;\n    uVar63 = fcn.00a02369();\n    uVar19 = uVar63;\n    if (!bVar46) {\n        *(puVar31 + -6) = puVar31 + -4;\n        *(puVar31 + -8) = uVar19;\n        puVar35 = puVar24 + -4;\n        do {\n            puVar32[-1] = 0xa023f1;\n            fcn.00a023bb(*puVar32, puVar32[1]);\n            puVar32[-1] = 0xa023f6;\n            fcn.009b8bd0();\n            puVar32[-1] = 0xa02431;\n            uVar9 = fcn.00a02414();\n            out(0x11, uVar9);\n            puVar33 = puVar32 + -1;\n            puVar34 = puVar32 + -1;\n            puVar32[-1] = puVar35;\n            cVar45 = '\\x05';\n            do {\n                puVar35 = puVar35 + -1;\n                puVar33 = puVar33 + -1;\n                *puVar33 = *puVar35;\n                cVar45 = cVar45 + -1;\n            } while ('\\0' < cVar45);\n            puVar32[-7] = puVar32 + -1;\n            puVar32 = puVar32 + -0x6176;\n            puVar35 = puVar34;\n        } while( true );\n    }\n    *(puVar24 + -8) = 0;\n    iVar40 = *(unaff_ESI + 0x18);\n    *(puVar31 + -8) = uVar19;\n    *(puVar31 + -0xc) = extraout_ECX_05;\n    *(puVar31 + -0x10) = uVar63 >> 0x20;\n    *(puVar31 + -0x14) = unaff_EBX;\n    *(puVar31 + -0x18) = puVar31 + -4;\n    *(puVar31 + -0x1c) = puVar24 + -4;\n    *(puVar31 + -0x20) = unaff_ESI;\n    *(puVar31 + -0x24) = unaff_EDI;\n    *(puVar31 + -0x1d) = uVar19;\n    param_1 = extraout_ECX_05;\n    if (iVar40 == 0) goto code_r0x00a01f47;\n    puVar35 = puVar31 + -4;\n    piVar16 = puVar31;\n    puVar39 = puVar24 + -4;\n    puVar23 = puVar24 + -4;\n    if (iVar40 != 0) goto code_r0x00a0223b;\ncode_r0x00a0269b:\n    do {\n        puVar35 = piVar16 + -4;\n        *(piVar16 + -4) = 0xa026df;\n        uVar63 = func_0x009b8c87();\n        uVar19 = uVar63 >> 0x20;\n        if (uVar63 == 0) {\n            uVar5 = *(unaff_EBX + *(puVar39 + -4) * 2);\n            uVar61 = *(unaff_ESI + 0x1c);\n            puVar35[-1] = unaff_EBX;\n            puVar35[-2] = uVar5 & 0xff |\n                          (-1 < (extraout_ECX_06 + 0xc263U & 0xffff0000 | ~(extraout_ECX_06 + 0xc263U) | uVar61)) << 8;\n            puVar35[-3] = uVar61 + uVar5 * 4;\n            puVar35[-4] = uVar19;\n            puVar35[-5] = unaff_EBX;\n            puVar35[-6] = puVar35 + -1;\n            puVar35[-7] = puVar39;\n            puVar35[-8] = unaff_ESI;\n            puVar35[-9] = *puVar35;\n            puVar35[-5] = puVar39;\n            unaff_ESI = puVar35[-8];\n            puVar39 = puVar35[-7];\n            param_1 = puVar35[-3];\n            iVar40 = *(puVar35[-5] + 8);\n            uVar63 = CONCAT44(puVar35[-4], iVar40);\n            puVar35[-1] = puVar35[-1];\n            unaff_EBX = puVar35[-1];\n            unaff_EDI = *(iVar40 + param_1) + iVar40;\n        }\n        else {\n            puVar35[-1] = puVar35;\n            puVar35[-2] = extraout_ECX_06;\n            puVar35[-3] = uVar19;\n            puVar35[-4] = unaff_EBX;\n            puVar35[-5] = puVar35;\n            puVar35[-6] = puVar39;\n            puVar35[-7] = unaff_ESI;\n            puVar35[-8] = unaff_EDI;\n            *(puVar39 + -4) = *(puVar39 + -4) + 1;\n            uVar20 = *(puVar39 + -4);\n            uVar63 = uVar63 & 0xffffffff00000000 | uVar20;\n            uVar61 = *(unaff_ESI + 0x18);\n            puVar35[-1] = uVar20;\n            puVar35[-2] = extraout_ECX_06;\n            puVar35[-3] = uVar19;\n            puVar35[-4] = unaff_EBX;\n            puVar35[-5] = puVar35;\n            puVar35[-6] = puVar39;\n            puVar35[-7] = unaff_ESI;\n            puVar35[-8] = unaff_EDI;\n            *(puVar35 + -0x22) = *(puVar35 + -4);\n            param_1 = extraout_ECX_06;\n            puVar23 = puVar39;\n            if (uVar20 < uVar61) {\ncode_r0x00a0223b:\n                puVar39 = puVar23;\n                *(puVar35 + -4) = *(puVar39 + -0x10);\n                piVar16 = puVar35;\n                goto code_r0x00a0269b;\n            }\n        }\ncode_r0x00a01f47:\n        param_2 = uVar63 >> 0x20;\n        *(puVar35 + -4) = uVar63;\n        *(puVar35 + -8) = param_1;\n        *(puVar35 + -0xc) = param_2;\n        *(puVar35 + -0x10) = unaff_EBX;\n        *(puVar35 + -0x14) = puVar35;\n        *(puVar35 + -0x18) = puVar39;\n        *(puVar35 + -0x1c) = unaff_ESI;\n        *(puVar35 + -0x20) = unaff_EDI;\n        *(puVar35 + -0xc) = *(puVar35 + -0x20);\n        puVar23 = puVar39;\n        if (unaff_EDI < unaff_ESI) {\ncode_r0x00a0215f:\n            *(puVar35 + -4) = uVar63;\n            *(puVar35 + -8) = param_1;\n            *(puVar35 + -0xc) = uVar63 >> 0x20;\n            *(puVar35 + -0x10) = unaff_EBX;\n            *(puVar35 + -0x14) = puVar35;\n            *(puVar35 + -0x18) = puVar39;\n            *(puVar35 + -0x1c) = unaff_ESI;\n            *(puVar35 + -0x20) = unaff_EDI;\n            if (unaff_EDI != NULL) {\n                *(puVar35 + -4) = 0xa039f2;\n                piVar16 = fcn.009b8c3d();\n                return piVar16;\n            }\ncode_r0x0099ff3b:\n            *(*(in_FS_OFFSET + 0x18) + 0x34) = 0x7f;\n            return NULL;\n        }\ncode_r0x00a01f65:\n        puVar39 = puVar23;\n        *(puVar35 + -0x20) = *(puVar35 + -0x1b);\n        uVar61 = *(puVar39 + -0x14);\n        uVar63 = CONCAT44(param_2, uVar61);\n        bVar46 = CARRY4(unaff_ESI, uVar61);\n        bVar55 = SCARRY4(unaff_ESI, uVar61);\n        unaff_ESI = unaff_ESI + uVar61;\n        *(puVar35 + -0x40) =\n             (in_NT & 1) * 0x4000 | bVar55 * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | (unaff_ESI < 0) * 0x80\n             | (unaff_ESI == NULL) * 0x40 | (in_AF & 1) * 0x10 | ((POPCOUNT(unaff_ESI & 0xff) & 1U) == 0) * 4 | bVar46 |\n             (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n        if (unaff_ESI <= unaff_EDI) goto code_r0x00a0215f;\n        *(puVar35 + -4) = 0x2e;\n        *(puVar35 + -8) = uVar61 & 0xffff0000 | CONCAT11(*puVar35, uVar61);\n        *(puVar35 + -0xc) = param_1;\n        *(puVar35 + -0x10) = param_2;\n        *(puVar35 + -0x14) = unaff_EBX;\n        *(puVar35 + -0x18) = puVar35 + -4;\n        *(puVar35 + -0x1c) = puVar39;\n        *(puVar35 + -0x20) = unaff_ESI;\n        *(puVar35 + -0x24) = unaff_EDI;\n        *(puVar35 + -8) = unaff_EDI;\n        unaff_EDI = *(puVar35 + -0x24);\n        unaff_ESI = *(puVar35 + -0x20);\n        puVar39 = *(puVar35 + -0x1c);\n        puVar36 = puVar35 + -8;\n        *(puVar35 + -8) = 0xa027bd;\n        func_0x009b8c25();\n        piVar37 = puVar36 + -4;\n        *(puVar36 + -4) = 0xa027c2;\n        iVar40 = func_0x00a027a2();\n        if (iVar40 == 0) goto code_r0x0099ff3b;\n        if (iVar40 != 0) break;\n        out(0xe, 0);\n        unaff_EBX = *(*piVar37 + -0x25);\n        piVar16 = piVar37 + 1;\n    } while( true );\n    *(piVar37 + -7) = *(piVar37 + -0xf);\n    iVar40 = iVar40 - unaff_EDI;\n    *piVar37 = iVar40;\n    piVar37[-1] = unaff_EDI;\n    *(piVar37 + -1) = *(piVar37 + -1);\n    *(piVar37 + -2) = iVar40;\n    piVar37[-1] = 0xa04095;\n    fcn.009b8bf7();\n    piVar37[-1] = 0xa0409a;\n    uVar62 = fcn.00a03983();\n    uVar19 = uVar62 >> 0x20;\n    *(iVar40 + 4) = uVar62;\n    puVar23 = puVar39 + 0x50;\n    iVar6 = 0x1f;\n    if (piVar37 != 0x1c) {\n        for (; piVar37 + -7 >> iVar6 == 0; iVar6 = iVar6 + -1) {\n        }\n    }\n    if ((POPCOUNT((uVar62 >> 8) + -1) & 1U) == 0) {\n        piVar37[-8] = 0x7a835196;\n        piVar37[-9] = puVar23;\n        piVar37[-10] = uVar19;\n        piVar37[-0xb] = iVar6;\n        piVar37[-0xc] = piVar37 + -7;\n        piVar37[-0xd] = puVar39;\n        piVar37[-0xe] = iVar40;\n        piVar37[-0xf] = unaff_EDI;\n    }\n    else {\n        piVar37[-8] = 0x7a835196;\n        piVar37[-9] = puVar23;\n        piVar37[-10] = uVar19;\n        piVar37[-0xb] = iVar6;\n        piVar37[-0xc] = piVar37 + -7;\n        piVar37[-0xd] = puVar39;\n        piVar37[-0xe] = iVar40;\n        piVar37[-0xf] = unaff_EDI;\n    }\n    uVar9 = SBORROW4(iVar40, puVar23);\n    piVar37[-0x10] = fcn.009bfaac;\n    fcn.009bfa67();\n    piVar37[-0xf] = 0x9bfb0f;\n    uVar62 = fcn.009bfab9(piVar37[-0xe], piVar37[-0xd], piVar37[-0xc], piVar37[-0xb], piVar37[-10], piVar37[-9], \n                          piVar37[-8], piVar37[-7], piVar37[-6], piVar37[-5], piVar37[-4], piVar37[-3], piVar37[-2], \n                          piVar37[-1], *piVar37);\n    uVar20 = uVar62;\n    uVar61 = iVar40 - 0x80;\n    if (uVar9) {\n        piVar37[-0x11] = piVar37[-0x12];\n    }\n    else {\n        piVar37[-0x11] = piVar37[-0x12];\n    }\n    uVar8 = uVar61 & 0xfc;\n    uVar14 = uVar61 & 0xfffffffc;\n    piVar37[-0x12] =\n         (in_NT & 1) * 0x4000 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | (uVar8 < '\\0') * 0x80 |\n         ((uVar61 & 0xfc) == 0) * 0x40 | (in_AF & 1) * 0x10 | ((POPCOUNT(uVar8) & 1U) == 0) * 4 | (in_ID & 1) * 0x200000\n         | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    bVar46 = uVar20 <= uVar14;\n    puVar23 = uVar14 - uVar20;\n    if ((bVar46) || (piVar16 = piVar37 + -0x12,  !bVar46)) {\n        piVar16 = puVar23;\n    }\n    *(piVar16 + -4) =\n         (in_NT & 1) * 0x4000 | SBORROW4(uVar14, uVar20) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n         (puVar23 < 0) * 0x80 | (puVar23 == NULL) * 0x40 | (in_AF & 1) * 0x10 |\n         ((POPCOUNT(puVar23 & 0xff) & 1U) == 0) * 4 | bVar46 | (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 |\n         (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    *(piVar16 + -8) = iVar40;\n    *(piVar16 + -0xc) = unaff_EDI;\n    *(piVar16 + -0x10) = extraout_ECX_03;\n    *(piVar16 + -0x14) = uVar20;\n    *(piVar16 + -0x18) = extraout_ECX_03;\n    *(piVar16 + -0x1c) = uVar62 >> 0x20;\n    *(piVar16 + -0x20) = puVar23;\n    *(piVar16 + -0x24) = piVar16 + -0x10;\n    *(piVar16 + -0x28) = puVar23 + (uVar20 - 0x40);\n    *(piVar16 + -0x2c) = extraout_ECX_03;\n    *(piVar16 + -0x30) = unaff_EDI;\n    uVar8 = (extraout_ECX_03 & 0x1f) % 0x11;\n    uVar61 = bVar46 << 0x10 | unaff_EDI & 0xffff;\n    if (puVar23 == NULL) {\n        *(piVar16 + -0x34) = 0x9bfbb2;\n        fcn.009bfbd5();\n        puVar38 = (unaff_EDI & 0xffff0000 | uVar61 >> uVar8 | uVar61 << 0x11 - uVar8) - 0x29;\n        *puVar38 = *puVar38 << 1 | *puVar38 < '\\0';\n    // WARNING: Could not recover jumptable at 0x009bfbb7. Too many branches\n    // WARNING: Treating indirect jump as call\n        piVar16 = (**(extraout_ECX_03 + -8))();\n        return piVar16;\n    }\n    rdtsc();\n    *(piVar16 + -0x30) = puVar23;\n    puVar38 = *(piVar16 + -0x28);\n    puVar23 = *(piVar16 + -0x2c);\n    puVar39 = *(piVar16 + -0x30);\n    for (iVar40 = *(piVar16 + -0x14); iVar40 != 0; iVar40 = iVar40 + -1) {\n        *puVar39 = *puVar23;\n        puVar23 = puVar23 + 1;\n        puVar39 = puVar39 + 1;\n    }\n    pcVar43 = *(piVar16 + -0xc);\n    ppcVar3 = piVar16 + -8;\n    if (ppcVar3 < 0xe) {\n        pcVar41 = *ppcVar3;\n    }\n    else {\n        pcVar41 = *ppcVar3;\n    }\n    uVar61 = *(piVar16 + -4);\n    uVar56 = (uVar61 & 0x4000) != 0;\n    bVar54 = (uVar61 & 0x800) != 0;\n    bVar51 = (uVar61 & 0x400) != 0;\n    uVar50 = (uVar61 & 0x200) != 0;\n    uVar49 = (uVar61 & 0x100) != 0;\n    bVar48 = (uVar61 & 0x80) != 0;\n    bVar55 = (uVar61 & 0x40) != 0;\n    uVar8 = (uVar61 & 0x10) != 0;\n    bVar46 = (uVar61 & 4) != 0;\n    uVar60 = (uVar61 & 0x200000) != 0;\n    uVar57 = (uVar61 & 0x40000) != 0;\n    uVar59 = 0;\n    uVar58 = 0;\n    if (bVar55) {\n        *(piVar16 + -4) =\n             uVar56 * 0x4000 | bVar54 * 0x800 | bVar51 * 0x400 | uVar50 * 0x200 | uVar49 * 0x100 | bVar48 * 0x80 |\n             bVar55 * 0x40 | uVar8 * 0x10 | bVar46 * 4 | uVar60 * 0x200000 | uVar57 * 0x40000;\n    }\n    else {\n        *(piVar16 + -4) =\n             uVar56 * 0x4000 | bVar54 * 0x800 | bVar51 * 0x400 | uVar50 * 0x200 | uVar49 * 0x100 | bVar48 * 0x80 |\n             bVar55 * 0x40 | uVar8 * 0x10 | bVar46 * 4 | uVar60 * 0x200000 | uVar57 * 0x40000;\n    }\n    *ppcVar3 = 0x9b04b5;\n    fcn.009b0498();\n    ppuVar25 = piVar16 + -4;\n    *ppcVar3 = fcn.009b05ee;\n    fcn.009b05c7();\n    cVar45 = extraout_CL;\n    while( true ) {\n        pcVar42 = pcVar43 + 1;\n        uVar10 = *ppuVar25 >> 0x10;\n        if (!SCARRY4(pcVar43, 1)) break;\n        puVar22 = CONCAT22(uVar10, 0xead3);\n        ppuVar25[-1] = 0x9b066d;\n        uVar63 = fcn.009b0796();\n        uVar20 = uVar63;\n        piVar16 = uVar20 + 0x4bbadd54;\n        if (uVar20 < 0xb44522ac) {\n            *pcVar42 = *pcVar41;\n            ppuVar25[-1] = pcVar43 + bVar51 * -2 + 2;\n            ppuVar26 = ppuVar25[-1] + 4;\n            goto code_r0x009b06b6;\n        }\n        uVar61 = 0xfbb4829;\n        uVar14 = uVar20 < 0xb44522ac;\n        uVar20 = uVar20 + 0xb14bd4ba;\n        bVar46 = piVar16 < 0x9a6f089a || uVar20 < uVar14;\n        bVar52 = SBORROW4(piVar16, -0x6590f766) != SBORROW4(uVar20, uVar14);\n        uVar11 = uVar20 - uVar14;\n        bVar54 = uVar11 < 0;\n        bVar48 = uVar11 == 0;\n        bVar55 = (POPCOUNT(uVar11 & 0xff) & 1U) == 0;\n        if (bVar55) {\n            if (bVar48) {\n                uVar21 = uVar63 >> 0x20;\n                if ((piVar16 < 0x9a6f089a || uVar20 < uVar14) || bVar48) {\n                    pcVar2 = pcVar41 + 0x21;\n                    *pcVar2 = *pcVar2 << 1 | *pcVar2 < '\\0';\n                    pcVar41[-0x36] = pcVar41[-0x36] << 1;\n                    puVar38 = puVar38 + -1;\n                    in_FPUControlWord = *(pcVar43 + (uVar63 >> 0x20) * 2 + -0x50a36f);\n                    if (puVar38 != NULL) {\n                        *0xc2 = *0xc2 | 0xc2;\n                        puVar13 = ppuVar25;\n                        goto code_r0x009b06bd;\n                    }\n                    uVar19 = 0xfbb482a;\n                    *pcVar42 = *0x3fcca535;\n                    *(*puVar22 + 0x87d98b51) = *(*puVar22 + 0x87d98b51);\n                    cVar4 = in(uVar21);\n                    pcVar43[bVar51 * -2 + 2] = cVar4;\n                    uVar5 = 0;\n                    goto code_r0x009b06e9;\n                }\n                if (!bVar48 && bVar52 == bVar54) {\n                    uVar17 = in(uVar21);\n                    puVar38 = puVar38 + puVar22 + bVar46;\n                    uVar44 = 0;\n                    uVar53 = 0;\n                    uVar63 = uVar63 & 0xffffffff00000000 | uVar17 & 0xffffffffffffff01;\n                    uVar47 = 0;\n                    uVar9 = (uVar17 & 1) == 0;\n                    uVar17 = (uVar17 & 1) == 0;\n                    goto code_r0x009b0707;\n                }\n                bVar46 = false;\n                bVar52 = false;\n                uVar11 = 0;\n                bVar54 = false;\n                bVar48 = true;\n                bVar55 = true;\n            }\n            else {\n                *(ppuVar25 + -1) = in_ES;\n            }\n        }\n        else {\n            ppuVar25[-1] = *(ppuVar25 + 6);\n        }\n        *(uVar11 - 4) =\n             (uVar56 & 1) * 0x4000 | bVar52 * 0x800 | bVar51 * 0x400 | (uVar50 & 1) * 0x200 | (uVar49 & 1) * 0x100 |\n             bVar54 * 0x80 | bVar48 * 0x40 | (uVar8 & 1) * 0x10 | bVar55 * 4 | bVar46 | (uVar60 & 1) * 0x200000 |\n             (uVar59 & 1) * 0x100000 | (uVar58 & 1) * 0x80000 | (uVar57 & 1) * 0x40000;\n        puVar38 = puVar22 + (uVar11 - 0x40);\n        *(uVar11 - 8) = pcVar41;\n        *(uVar11 - 0xc) = fcn.009b05c7;\n        fcn.009b053b();\n        in_ES = *(uVar11 - 8);\n        ppuVar25 = uVar11 - 4;\n        *(uVar11 - 8) = 0x9b060b;\n        fcn.009b05ee();\n        pcVar43 = pcVar42;\n        cVar45 = extraout_CL_00;\n    }\n    puVar22 = *ppuVar25 & 0xffff0000;\n    uVar17 = cVar45 + 0x66;\n    uVar61 = uVar17;\n    puVar13 = ppuVar25 + -10;\n    if (ppuVar25 + -10 < 0) {\ncode_r0x009b06bd:\n        uVar17 = uVar61;\n        uVar10 = puVar22 >> 0x10;\n        puVar13 = puVar13 + 2;\n    }\n    else {\n        puVar13 = ppuVar25 + -2;\n    }\n    ppuVar25 = puVar13 + 2;\n    uVar44 = false;\n    uVar53 = 0;\n    uVar17 = uVar17 ^ 0xea;\n    uVar47 = uVar17 < '\\0';\n    uVar9 = uVar17 == 0;\n    uVar17 = (POPCOUNT(uVar17) & 1U) == 0;\n    puVar13[1] = 0x9b072b;\n    uVar63 = fcn.009b06f9();\n    uVar61 = extraout_ECX_00;\n    if (uVar44 || uVar9) {\n        *(puVar13 + 6) = *ppuVar25;\n    }\n    else {\ncode_r0x009b0707:\n        *(ppuVar25 + -2) = *ppuVar25;\n    }\n    puVar13 = ~uVar63;\n    *(ppuVar25 + -5) =\n         (uVar56 & 1) * 0x4000 | (uVar53 & 1) * 0x800 | bVar51 * 0x400 | (uVar50 & 1) * 0x200 | (uVar49 & 1) * 0x100 |\n         (uVar47 & 1) * 0x80 | (uVar9 & 1) * 0x40 | (uVar8 & 1) * 0x10 | (uVar17 & 1) * 4 | uVar44 & 1 |\n         (uVar60 & 1) * 0x200000 | (uVar59 & 1) * 0x100000 | (uVar58 & 1) * 0x80000 | (uVar57 & 1) * 0x40000;\n    *(ppuVar25 + -5) = pcVar41;\n    uVar20 = CONCAT31(CONCAT22(uVar10, 0xbb76) >> 8, 0xf);\n    uVar8 = ~uVar61;\n    uVar61 = uVar61 & 0xffffff00;\n    bVar46 = (uVar20 >> (pcVar42 & 0x1f) & 1) != 0;\n    if ((!bVar46 && !uVar9) && (bVar46 || uVar9)) {\n        if (-1 < (uVar20 ^ 1 << (pcVar42 & 0x1f) | *(pcVar43 + 0x10996a10))) {\n            *puVar13 = *puVar13 << 0x17 | *puVar13 >> 9;\n            pcVar41[-0x45] = pcVar41[-0x45] << 1;\n            piVar16 = puVar13 & 0xffff0000 | puVar13 + (puVar13 >> 8) * '\\x16';\n            out(*((uVar63 >> 0x20) + -0x53 + (uVar61 | uVar8) * 8), piVar16);\n            *0x5eafebc2 = *0x5eafebc2 << (uVar8 & 0x1f) | *0x5eafebc2 >> 0x20 - (uVar8 & 0x1f);\n            return piVar16;\n        }\n        puVar27 = ppuVar25 + 0x12;\n        ppuVar25 = ppuVar25 + 0x12;\n        *puVar27 = 0x9b074a;\n        puVar12 = func_0x578320c8();\n        *puVar12 = in_FPUControlWord;\n        puVar38 = puVar38 + 0x1f1;\n        uVar5 = puVar12 >> 0x10;\n        uVar19 = extraout_ECX_01;\ncode_r0x009b06e9:\n        ppuVar26 = ppuVar25 + -1;\n        ppuVar25[-1] = uVar19;\n        *ppuVar25 = puVar38;\n        piVar16 = ppuVar25 + -1 & 0xffff | uVar5 << 0x10;\ncode_r0x009b06b6:\n        *(ppuVar26 + -4) = *(ppuVar26 + 4);\n        return piVar16;\n    }\n    uVar20 = uVar61 | uVar8 - 0x31;\n    puVar29 = ppuVar25 + 0x13;\n    *(ppuVar25 + 0x13) = fcn.009b0812;\n    func_0x009b07f3();\n    *puVar29 = 0x9b0818;\n    uVar14 = func_0x009b0838();\n    pcVar15 = uVar14 & 0xffffff00 | extraout_ECX_02 & 0xff;\n    uVar14 = extraout_ECX_02;\n    if (extraout_ECX_02 == 0) {\n        *pcVar15 = *pcVar15 + (extraout_ECX_02 & 0xff);\n        *0x6caf5c35 = *0x6caf5c35 + (uVar61 >> 8);\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    while( true ) {\n        pcVar42 = pcVar43 + 0x3eaff39f;\n        if (uVar20 != 0x4b3f2ba0 && SCARRY4(uVar20, -0x4b3f2ba0) == uVar20 + 0xb4c0d460 < 0) {\n            do {\n                *(puVar29 + -4) = 0x9b093a;\n                fcn.009b224f();\n                puVar29 = puVar29 + *(pcVar41 + -0x6b);\n                *(uVar20 + 0x882784de) = *(uVar20 + 0x882784de);\n            } while( true );\n        }\n        uVar8 = (uVar14 & 0x1f) % 0x11;\n        uVar61 = ((pcVar42 >> (pcVar42 & 0xf) & 1) != 0) << 0x10 | pcVar42 & 0xffff;\n        uVar61 = (pcVar42 & 0xffff0000 | uVar61 >> uVar8 | uVar61 << 0x11 - uVar8) & ~(1 << (puVar29 & 0x1f));\n        uVar61 = uVar61 & 0xffffff00 | uVar61 + 1;\n        uVar20 = *(uVar20 + 0x9afaab);\n        if (!SBORROW4(puVar29, 10)) break;\n        if (SBORROW4(puVar29, 10)) {\n            *(puVar29 + -9) = uVar61;\n            goto code_r0x009b0981;\n        }\n        *(puVar29 + -0xe) = uVar61;\n        *(puVar29 + -0x12) = in_DS;\n        puVar28 = puVar29 + -0x16;\n        puVar29 = puVar29 + -0x16;\n        *puVar28 = in_ES;\n        uVar14 = 0xb0;\n    }\n    *(puVar29 + -9) = uVar61;\ncode_r0x009b0981:\n    cVar45 = 0xa4ecac5e < uVar20;\n    iVar7 = 0;\n    bVar46 = pcVar41 != 0;\n    if (bVar46) {\n        for (; (pcVar41 >> iVar7 & 1) == 0; iVar7 = iVar7 + 1) {\n        }\n    }\n    if (bVar46) {\n        pcVar41 = pcVar41 + -0x23;\n        uVar61 = pcVar41 & 0xffff0000 | CONCAT11((pcVar41 >> 8) << 1, pcVar41);\n    }\n    else {\n        if (bVar46) {\n            *(puVar29 + -0xc) = 0x9b0d57;\n            uVar61 = fcn.009b0d86();\n            *(puVar29 + -0xc) = in_ES;\n            *((uVar61 & 0xffffff00 | uVar61 + -0x6b + cVar45) + 0x865f9f68) = in_CS;\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        pcVar41 = pcVar41 + -0x23;\n        uVar61 = pcVar41 & 0xffff0000 | CONCAT11((pcVar41 >> 8) << 1, pcVar41);\n    }\n    *(puVar38 + -4) = uVar20 + 0x5b1353a1;\n    return ~(uVar61 >> 0x18 | (uVar61 & 0xff0000) >> 8 | (uVar61 & 0xff00) << 8 | uVar61 << 0x18);\n}\n",
        "token_count": 11301
    },
    "00a5406b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00a53c1e) overlaps instruction at (ram,0x00a53c1a)\n// \n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nvoid __thiscall fcn.00a5406b(int32_t param_1)\n\n{\n    int32_t *piVar1;\n    char *pcVar2;\n    int32_t iVar3;\n    int16_t iVar4;\n    uint16_t uVar5;\n    ushort extraout_var;\n    char extraout_CL;\n    uint8_t extraout_CL_00;\n    ushort extraout_CX;\n    char extraout_DL;\n    int32_t unaff_EBX;\n    int32_t unaff_EBP;\n    char cVar6;\n    bool bVar7;\n    uchar unaff_retaddr;\n    ushort unaff_retaddr_00;\n    uchar unaff_retaddr_01;\n    uchar uStack00000012;\n    uint in_stack_00000010;\n    int32_t in_stack_00000014;\n    uint in_stack_00000018;\n    uint8_t uStack0000001b;\n    int32_t in_stack_0000001c;\n    char in_stack_00000024;\n    char *in_stack_00000028;\n    \n    iVar3 = CONCAT13(unaff_retaddr_01, CONCAT21(unaff_retaddr_00, unaff_retaddr));\n    cVar6 = '\\0';\n    bVar7 = *(iVar3 + -0xc005f) == 0;\n    if (bVar7) {\n        piVar1 = iVar3 + -0xc005f;\n        *piVar1 = *piVar1 + 1;\n        fcn.00a53bf6();\n        in_stack_0000001c = unaff_EBX;\n        in_stack_00000014 = unaff_EBP;\n        in_stack_00000024 = extraout_CL;\n    }\n    else {\n        if (bVar7) {\n            *(param_1 + 0x6b8b7819) = *(param_1 + 0x6b8b7819) - param_1;\n            return;\n        }\n        cVar6 = in_stack_00000028;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        *in_stack_00000028 = *in_stack_00000028 + cVar6;\n        in_stack_00000024 = in_stack_00000024 + (in_stack_0000001c >> 8);\n        cVar6 = &stack0x0000003a < 0x19;\n    }\n    fcn.00a53c2a(in_stack_00000010);\n    *(in_stack_0000001c + -0x7f005af6) = *(in_stack_0000001c + -0x7f005af6) + extraout_DL + cVar6;\n    pcVar2 = ((CONCAT22(extraout_var, extraout_CX) & 0xffffff00 | extraout_CX | 0x40) - 0x34) + in_stack_00000014 * 8;\n    *pcVar2 = *pcVar2 + in_stack_0000001c;\n    fcn.00a53c95(in_stack_00000024 + in_stack_0000001c);\n    uVar5 = CONCAT11(extraout_CL_00 & ~(1 << (uStack0000001b & 0x1f)), uStack00000012);\n    iVar4 = 0xf;\n    if (uVar5 != 0) {\n        for (; uVar5 >> iVar4 == 0; iVar4 = iVar4 + -1) {\n        }\n    }\n    iVar3 = 0;\n    if (*0x10 != 0xffffffff) {\n        for (; (&stack0x00000001 >> iVar3 & 1) == 0; iVar3 = iVar3 + 1) {\n        }\n    }\n    fcn.00a53d55();\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 73778
    },
    "009aa99a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "009b0812": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009b081e) overlaps instruction at (ram,0x009b081c)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nuint32_t fcn.009b0812(ushort param_1)\n\n{\n    int16_t iVar1;\n    ushort uVar2;\n    uint32_t uVar3;\n    char *pcVar4;\n    uint32_t extraout_ECX;\n    uint32_t unaff_EBX;\n    int32_t unaff_EBP;\n    int32_t unaff_ESI;\n    ushort in_ES;\n    ushort in_CS;\n    char cVar5;\n    bool bVar6;\n    \n    uVar3 = func_0x009b0838();\n    pcVar4 = uVar3 & 0xffffff00 | extraout_ECX & 0xff;\n    uVar2 = param_1;\n    if (extraout_ECX == 0) {\n        *pcVar4 = *pcVar4 + (extraout_ECX & 0xff);\n        *0x6caf5c35 = *0x6caf5c35 + (unaff_EBX >> 8);\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    do {\n        param_1 = uVar2;\n        if (unaff_EBX != 0x4b3f2ba0 && SCARRY4(unaff_EBX, -0x4b3f2ba0) == unaff_EBX + 0xb4c0d460 < 0) {\n            do {\n                fcn.009b224f();\n                *(unaff_EBX + 0x882784de) = *(unaff_EBX + 0x882784de);\n            } while( true );\n        }\n        unaff_EBX = *(unaff_EBX + 0x9afaab);\n    } while ((SBORROW4(&param_1, 10)) && (uVar2 = in_ES,  !SBORROW4(&param_1, 10)));\n    cVar5 = 0xa4ecac5e < unaff_EBX;\n    iVar1 = 0;\n    bVar6 = unaff_ESI != 0;\n    if (bVar6) {\n        for (; (unaff_ESI >> iVar1 & 1) == 0; iVar1 = iVar1 + 1) {\n        }\n    }\n    if (bVar6) {\n        uVar3 = unaff_ESI - 0x23;\n        uVar3 = uVar3 & 0xffff0000 | CONCAT11((uVar3 >> 8) << 1, uVar3);\n    }\n    else {\n        if (bVar6) {\n            uVar3 = fcn.009b0d86();\n            *((uVar3 & 0xffffff00 | uVar3 + -0x6b + cVar5) + 0x865f9f68) = in_CS;\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        uVar3 = unaff_ESI - 0x23;\n        uVar3 = uVar3 & 0xffff0000 | CONCAT11((uVar3 >> 8) << 1, uVar3);\n    }\n    *(unaff_EBP + -4) = unaff_EBX + 0x5b1353a1;\n    return ~(uVar3 >> 0x18 | (uVar3 & 0xff0000) >> 8 | (uVar3 & 0xff00) << 8 | uVar3 << 0x18);\n}\n",
        "token_count": 810
    },
    "009aaa0b": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009abfd8) overlaps instruction at (ram,0x009abfd4)\n// \n// WARNING: Possible PIC construction at 0x009ab4b6: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x009ab4bb)\n// WARNING: Removing unreachable block (ram,0x009ab51e)\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Removing unreachable block (ram,0x009ab911)\n// WARNING: Removing unreachable block (ram,0x009ab913)\n// WARNING: Removing unreachable block (ram,0x009ab489)\n// WARNING: Removing unreachable block (ram,0x009ab5bf)\n// WARNING: Removing unreachable block (ram,0x009ab563)\n// WARNING: Removing unreachable block (ram,0x009ab5c1)\n// WARNING: Removing unreachable block (ram,0x009ab645)\n// WARNING: Removing unreachable block (ram,0x009ab6b8)\n// WARNING: Removing unreachable block (ram,0x009ab6f9)\n// WARNING: Removing unreachable block (ram,0x009ab6e3)\n// WARNING: Removing unreachable block (ram,0x009ab736)\n// WARNING: Removing unreachable block (ram,0x009ab7b5)\n// WARNING: Removing unreachable block (ram,0x009ab7c0)\n// WARNING: Removing unreachable block (ram,0x009ab71e)\n// WARNING: Removing unreachable block (ram,0x009abfb5)\n// WARNING: Removing unreachable block (ram,0x009abfda)\n// WARNING: Removing unreachable block (ram,0x009ab738)\n// WARNING: Removing unreachable block (ram,0x009ab73e)\n// WARNING: Removing unreachable block (ram,0x009ab764)\n// WARNING: Removing unreachable block (ram,0x009ab744)\n// WARNING: Removing unreachable block (ram,0x009ab798)\n// WARNING: Removing unreachable block (ram,0x009ab7dc)\n// WARNING: Removing unreachable block (ram,0x009ab7a4)\n// WARNING: Removing unreachable block (ram,0x009ab7c6)\n// WARNING: Removing unreachable block (ram,0x009ab7de)\n// WARNING: Removing unreachable block (ram,0x009ab824)\n// WARNING: Removing unreachable block (ram,0x009ab7ed)\n// WARNING: Removing unreachable block (ram,0x009ab836)\n// WARNING: Removing unreachable block (ram,0x009ab848)\n// WARNING: Removing unreachable block (ram,0x009ab87a)\n// WARNING: Removing unreachable block (ram,0x009ab853)\n// WARNING: Removing unreachable block (ram,0x009ab889)\n// WARNING: Removing unreachable block (ram,0x009ab855)\n// WARNING: Removing unreachable block (ram,0x009ab856)\n// WARNING: Removing unreachable block (ram,0x009ab88e)\n// WARNING: Removing unreachable block (ram,0x009ab915)\n// WARNING: Removing unreachable block (ram,0x009ab8cb)\n// WARNING: Removing unreachable block (ram,0x009ab862)\n// WARNING: Removing unreachable block (ram,0x009ab8e7)\n// WARNING: Removing unreachable block (ram,0x009ab8a0)\n// WARNING: Removing unreachable block (ram,0x009ab8d1)\n// WARNING: Removing unreachable block (ram,0x009ab8af)\n// WARNING: Removing unreachable block (ram,0x009ab8e9)\n// WARNING: Removing unreachable block (ram,0x009ab8ff)\n// WARNING: Removing unreachable block (ram,0x009ab90f)\n// WARNING: Removing unreachable block (ram,0x009ab921)\n// WARNING: Removing unreachable block (ram,0x009ab5d2)\n// WARNING: Removing unreachable block (ram,0x009ab590)\n// WARNING: Removing unreachable block (ram,0x009ab5ab)\n// WARNING: Removing unreachable block (ram,0x009ab5db)\n// WARNING: Removing unreachable block (ram,0x009ab956)\n// WARNING: Removing unreachable block (ram,0x009ab95f)\n// WARNING: Removing unreachable block (ram,0x009ab940)\n// WARNING: Removing unreachable block (ram,0x009ab96b)\n// WARNING: Removing unreachable block (ram,0x009ab999)\n// WARNING: Removing unreachable block (ram,0x009ab99b)\n// WARNING: Removing unreachable block (ram,0x009aba02)\n// WARNING: Removing unreachable block (ram,0x009aba35)\n// WARNING: Removing unreachable block (ram,0x009aba08)\n// WARNING: Removing unreachable block (ram,0x009aba4f)\n// WARNING: Removing unreachable block (ram,0x009abf82)\n// WARNING: Removing unreachable block (ram,0x009aba5c)\n// WARNING: Removing unreachable block (ram,0x009abf85)\n// WARNING: Removing unreachable block (ram,0x009abe88)\n// WARNING: Removing unreachable block (ram,0x009abe8a)\n// WARNING: Removing unreachable block (ram,0x009abf92)\n// WARNING: Removing unreachable block (ram,0x009abf98)\n// WARNING: Removing unreachable block (ram,0x009abfbe)\n// WARNING: Removing unreachable block (ram,0x009abfe1)\n// WARNING: Removing unreachable block (ram,0x009abe66)\n// WARNING: Removing unreachable block (ram,0x009abe68)\n// WARNING: Removing unreachable block (ram,0x009abe8e)\n// WARNING: Removing unreachable block (ram,0x009abe95)\n// WARNING: Removing unreachable block (ram,0x009abf0f)\n// WARNING: Removing unreachable block (ram,0x009abe9a)\n// WARNING: Removing unreachable block (ram,0x009abec2)\n// WARNING: Removing unreachable block (ram,0x009abe9f)\n// WARNING: Removing unreachable block (ram,0x009aaa3b)\n// WARNING: Removing unreachable block (ram,0x009ac002)\n// WARNING: Removing unreachable block (ram,0x009abf72)\n// WARNING: Removing unreachable block (ram,0x009ac009)\n\nvoid __cdecl\nfcn.009aaa0b(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint noname_14, uint noname_15, uint noname_16, uint noname_17, uint arg_50h)\n\n{\n    uint32_t *puVar1;\n    uchar uVar2;\n    int32_t unaff_EBP;\n    int16_t unaff_SI;\n    uchar *unaff_EDI;\n    ushort in_SS;\n    \n    fcn.009aaa30();\n    do {\n        *(unaff_EBP + -4) = 0x9ab442;\n        fcn.009ab2e5();\n        *(unaff_EBP + -4) = 0x9ab4bb;\n        *(unaff_EBP + -0x1f) = 0x9ab4c5;\n        uVar2 = fcn.009ab53f();\n        *unaff_EDI = uVar2;\n        puVar1 = segment(in_SS, unaff_EBP + unaff_SI + -0x569f);\n        *puVar1 = ~*puVar1;\n        unaff_EDI = unaff_EDI + 1;\n    } while( true );\n}\n",
        "token_count": 1719
    },
    "009af54d": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009b013d) overlaps instruction at (ram,0x009b0138)\n// \n// WARNING: Possible PIC construction at 0x009b0147: Changing call to branch\n// WARNING: Possible PIC construction at 0x009afeda: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x009b014c)\n// WARNING: Removing unreachable block (ram,0x009afedf)\n// WARNING: Removing unreachable block (ram,0x009afee8)\n// WARNING: Removing unreachable block (ram,0x009afe6e)\n// WARNING: Removing unreachable block (ram,0x009afeea)\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: This function may have set the stack pointer\n// WARNING: Removing unreachable block (ram,0x009b0831)\n\nchar * fcn.009af54d(void)\n\n{\n    uint8_t *puVar1;\n    uint *puVar2;\n    code *pcVar3;\n    char cVar4;\n    int16_t iVar5;\n    uint16_t uVar6;\n    unkuint3 Var13;\n    ushort uVar14;\n    uint32_t uVar7;\n    char *pcVar8;\n    ushort *puVar9;\n    uint32_t *puVar10;\n    uint32_t uVar11;\n    uchar *puVar12;\n    char extraout_CL;\n    char extraout_CH;\n    uint32_t extraout_ECX;\n    uint32_t extraout_ECX_00;\n    uint32_t uVar15;\n    uint32_t uVar16;\n    int32_t extraout_ECX_01;\n    uint uVar17;\n    uint32_t extraout_ECX_02;\n    uint extraout_ECX_03;\n    uint32_t extraout_ECX_04;\n    uchar extraout_DL;\n    ushort uVar18;\n    uint32_t extraout_EDX;\n    uint16_t uVar19;\n    uint32_t uVar20;\n    uint32_t uVar21;\n    uint8_t *puVar22;\n    int32_t *piVar23;\n    uchar *puVar24;\n    uchar *puVar25;\n    ushort *puVar26;\n    int32_t *piVar27;\n    int32_t *piVar28;\n    uchar *puVar29;\n    uchar *puVar30;\n    uint8_t **ppuVar31;\n    uchar *puVar32;\n    uint8_t **ppuVar33;\n    ushort *puVar34;\n    uint *puVar35;\n    char **unaff_EBP;\n    uint8_t *puVar36;\n    int32_t unaff_ESI;\n    int32_t iVar37;\n    char **ppcVar38;\n    char **ppcVar39;\n    int32_t unaff_EDI;\n    int32_t *piVar40;\n    int32_t *piVar41;\n    ushort in_ES;\n    ushort in_CS;\n    ushort in_SS;\n    ushort in_DS;\n    bool bVar42;\n    uint8_t in_AF;\n    bool bVar44;\n    bool bVar45;\n    uchar uVar46;\n    bool bVar47;\n    uint8_t uVar48;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    bool bVar49;\n    uint8_t uVar50;\n    bool bVar51;\n    uint8_t uVar52;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    ushort in_FPUControlWord;\n    float10 fVar53;\n    float10 extraout_ST0;\n    float10 extraout_ST0_00;\n    float10 extraout_ST0_01;\n    float10 extraout_ST1;\n    ulong uVar54;\n    uint64_t uVar55;\n    uint32_t unaff_retaddr;\n    char *pcStack28;\n    uint32_t uStack4;\n    uint8_t uVar43;\n    \n    bVar49 = false;\n    uStack4 = 0x9af552;\n    fcn.009aeec9();\n    uStack4 = 0x9af578;\n    fVar53 = fcn.009af601();\n    piVar40 = unaff_EDI + -1;\n    *(extraout_EDX + 0x9d62e849) = ROUND(fVar53);\n    in(extraout_EDX);\n    iVar37 = unaff_ESI + 1;\n    bVar44 = (piVar40 >> 2 & 1) != 0;\n    uVar19 = *0x10;\n    if (bVar44 || iVar37 == 0) {\n        iVar5 = 0xf;\n        if (uVar19 != 0) {\n            for (; uVar19 >> iVar5 == 0; iVar5 = iVar5 + -1) {\n            }\n        }\n    }\n    else {\n        iVar5 = 0xf;\n        if (uVar19 != 0) {\n            for (; uVar19 >> iVar5 == 0; iVar5 = iVar5 + -1) {\n            }\n        }\n    }\n    uVar11 = (extraout_ECX & 0xffffff00 | 0x2a) + iVar37 & 0xffff | 0x75910000;\n    uStack4 = extraout_ECX & 0xff00 | 0xd5 | (extraout_ECX & 0xff00 | 0xd5) << 0x10;\n    uVar20 = extraout_ECX & 0xffffff00 | 0xd6;\n    bVar42 = CARRY4(uVar11, *0x10);\n    bVar44 = CARRY4(&stack0x00000000 + uVar11, bVar44);\n    uVar43 = bVar42 || bVar44;\n    uVar11 = extraout_EDX;\n    fVar53 = extraout_ST1;\n    if (bVar42 || bVar44) {\n        if (!bVar42 && !bVar44) {\n            iVar5 = 0xf;\n            if (uVar20 != 0) {\n                for (; uVar20 >> iVar5 == 0; iVar5 = iVar5 + -1) {\n                }\n            }\n            iVar37 = 0x1f;\n            if (extraout_EDX != 0) {\n                for (; extraout_EDX >> iVar37 == 0; iVar37 = iVar37 + -1) {\n                }\n            }\n            return unaff_EBP * 4;\n        }\n        uStack4 = 0x9af68e;\n        uVar54 = fcn.009af6d1();\n        uVar11 = uVar54 >> 0x20;\n        piVar41 = uVar54 + 0x8d258a13;\n        *piVar41 = *piVar41 + uVar11 + uVar43;\n        uVar43 = uVar54 + 0xad;\n        pcVar8 = uVar54 & 0xffffff00 | uVar43;\n        *pcVar8 = *pcVar8 + uVar43;\n        *pcVar8 = *pcVar8 + uVar43;\n        uVar20 = extraout_ECX_00;\n        fVar53 = extraout_ST0;\n    }\n    uVar15 = CONCAT21(unaff_retaddr >> 0x10, unaff_retaddr) << 8 | unaff_retaddr >> 8 & 0xff;\n    puVar10 = &stack0xffffffe4;\n    if ((uVar15 < 0) && (uVar15 < 0x80000000)) {\n        do {\n    // WARNING: Do nothing block with infinite loop\n        } while( true );\n    }\n    if ((uVar15 < 1) && (uVar15 >= 1)) {\n        pcVar8 = unaff_ESI + -0xe21e716;\n        *pcVar8 = (*pcVar8 - uVar20) - ((pcStack28 >> (puVar10 & 0x1f) & 1) != 0);\n        if (*pcVar8 != '\\0') {\n            return pcStack28;\n        }\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    uVar15 = uVar20 & 0x3c;\n    uVar50 = SBORROW4(iVar37, 4);\n    ppcVar38 = unaff_ESI + -3;\n    uVar43 = ppcVar38 < 0;\n    if (uVar50 == uVar43) {\n        iVar37 = 0x1f;\n        if ((uVar20 & 0x3c) != 0) {\n            for (; uVar15 >> iVar37 == 0; iVar37 = iVar37 + -1) {\n            }\n        }\n    }\n    else {\n        iVar37 = 0x1f;\n        if ((uVar20 & 0x3c) != 0) {\n            for (; uVar15 >> iVar37 == 0; iVar37 = iVar37 + -1) {\n            }\n        }\n    }\n    uVar55 = CONCAT44(uVar11, *(uVar15 + unaff_EBP));\n    iVar5 = 0xf;\n    if (uVar11 != 0) {\n        for (; uVar11 >> iVar5 == 0; iVar5 = iVar5 + -1) {\n        }\n    }\n    if ((pcStack28 >> 5 | pcStack28 << 0x1b) < 0) goto code_r0x009af97b;\n    uVar20 = 0;\n    bVar44 = uVar11 == 0;\n    ppcVar39 = ppcVar38;\n    piVar41 = piVar40;\n    if (!bVar44) {\n        for (; (uVar11 >> uVar20 & 1) == 0; uVar20 = uVar20 + 1) {\n        }\n    }\ncode_r0x009af7f4:\n    uVar11 = uVar55 >> 0x20;\n    pcVar8 = uVar55;\n    *ppcVar39 = pcVar8;\n    puVar12 = piVar41 - 0x89;\n    uVar14 = (pcVar8 & 0xffff0000) >> 0x10;\n    uVar18 = uVar55 >> 0x20;\n    if ((bVar44 || (uVar50 & 1) != uVar43) || (!bVar44 && (uVar50 & 1) == uVar43)) {\n        Var13 = (pcVar8 & 0xffff0000) >> 8;\n        if (bVar44) {\n            puVar12 = puVar12 & 0xffffff00 | uVar20 & 0xff;\n            uVar14 = (Var13 << 8) >> 0x10;\n            goto code_r0x009af7f8;\n        }\n        puVar12 = puVar12 & 0xffffff00 | uVar20 & 0xff;\n        uVar14 = (Var13 << 8) >> 0x10;\n    }\n    else {\ncode_r0x009af7f8:\n        ppcVar39 = ppcVar39 & *(puVar12 + -0x1b1eda2a);\n        uVar15 = *puVar10;\n        puVar10 = puVar10 + 1;\n        in_NT = (uVar15 & 0x4000) != 0;\n        bVar49 = (uVar15 & 0x400) != 0;\n        in_IF = (uVar15 & 0x200) != 0;\n        in_TF = (uVar15 & 0x100) != 0;\n        in_AF = (uVar15 & 0x10) != 0;\n        in_ID = (uVar15 & 0x200000) != 0;\n        in_AC = (uVar15 & 0x40000) != 0;\n        in_VIP = 0;\n        in_VIF = 0;\n        uVar46 = in(uVar18);\n        *piVar41 = uVar46;\n        *((pcVar8 & 0xffff) << 0x19 | (uVar20 & 0xffff0000 | pcVar8 & 0xffff) >> 7) = ROUND(fVar53);\n        piVar41 = piVar41 + bVar49 * -2 + 1;\n    }\n    ppcVar38 = unaff_EBP + 0x14;\n    uVar20 = -puVar12;\n    bVar44 = (POPCOUNT(uVar20 & 0xff) & 1U) != 0;\n    if (bVar44) {\n        uVar20 = uVar20 & 0xffff0000 | uVar20 ^ 1 << (ppcVar38 & 0xf);\n    }\n    else {\n        if (bVar44) {\n            *(unaff_EBP + 0x46cbac8e) = *(unaff_EBP + 0x46cbac8e) ^ 0x84;\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        uVar20 = uVar20 & 0xffff0000 | uVar20 ^ 1 << (ppcVar38 & 0xf);\n    }\n    bVar44 = ppcVar39 < ppcVar38;\n    bVar42 = (POPCOUNT(ppcVar39 - ppcVar38 & 0xff) & 1U) == 0;\n    if (!bVar44 && ppcVar39 - ppcVar38 != 0) {\n        uVar20 = uVar20 & 0xffff0000 | CONCAT11(0x1f, uVar20);\n        if (bVar44) {\n            if (bVar44) {\n                iVar37 = 0;\n                if (uVar11 != 0) {\n                    for (; (uVar11 >> iVar37 & 1) == 0; iVar37 = iVar37 + 1) {\n                    }\n                }\n                uVar20 = uVar20 + 1;\n                uVar20 = uVar20 >> 0x18 | (uVar20 & 0xff0000) >> 8 | (uVar20 & 0xff00) << 8 | uVar20 * 0x1000000;\n            }\n        }\n        else {\n            iVar37 = 0;\n            if (uVar11 != 0) {\n                for (; (uVar11 >> iVar37 & 1) == 0; iVar37 = iVar37 + 1) {\n                }\n            }\n            uVar20 = uVar20 + 1;\n            uVar20 = uVar20 >> 0x18 | (uVar20 & 0xff0000) >> 8 | (uVar20 & 0xff00) << 8 | uVar20 * 0x1000000;\n        }\n        uVar20 = -uVar20;\n        uVar50 = uVar55 >> 0x20;\n        uVar43 = *piVar41 + uVar50;\n        uVar16 = uVar43;\n        uVar7 = *puVar10 << 0x1d;\n        uVar15 = CONCAT14(CARRY1(*piVar41, uVar50), *puVar10 * 2) >> 5;\n        uVar21 = uVar15 | uVar7;\n        if ((uVar43 == 0) || (uVar43 != 0)) {\n            uVar21 = uVar15 & 0xffffff00 | uVar7 | uVar43;\n            iVar5 = uVar43 + 0xcf53;\n            uVar20 = CONCAT22(0xfeb2, iVar5);\n            if ((-1 >= iVar5) && (-1 < iVar5)) goto code_r0x009af9e6;\n        }\n        uVar48 = uVar21 + 1;\n        uVar21 = uVar21 & 0xffffff00 | uVar48;\n        bVar44 = (uVar43 & 0x1f) == 0;\n        if (bVar44 && uVar48 < '\\0' || !bVar44 && ~(uVar20 & 0xffff0000 | *puVar10) << (uVar43 & 0x1f) < 0)\n        goto code_r0x009af9e6;\n        piVar23 = puVar10 + -1;\n        puVar10[-1] = 0x9af966;\n        uVar55 = func_0x009af9d8();\n        puVar24 = piVar23 + -4;\n        *(piVar23 + -4) = 0xd76899fe;\n        uVar55 = uVar55 & 0x8f7c1585 |\n                 ((uVar55 & 0xffff00008f7c1585) >> 0x20 |\n                 CONCAT11(uVar55 >> 0x28 | *(ppcVar39 * 2 + -0x2c13c5c), uVar55 >> 0x20)) << 0x20;\n        piVar40 = piVar41 + bVar49 * -2 + 1;\n        ppcVar38 = ppcVar39 + bVar49 * -2 + 1;\n        uVar50 = SBORROW4(*ppcVar39, *piVar41);\n        uVar43 = *ppcVar39 - *piVar41 < 0;\n        pcVar3 = swi(4);\n        puVar12 = piVar23 + -4;\n        fVar53 = extraout_ST0_00;\n        if (uVar50 == true) {\n            uVar55 = (*pcVar3)();\n            puVar12 = puVar24;\n            fVar53 = extraout_ST0_01;\n        }\n        puVar10 = puVar12 + 4;\ncode_r0x009af97b:\n        uVar11 = uVar55 >> 0x20;\n        uVar20 = 0;\n        bVar44 = uVar11 == 0;\n        ppcVar39 = ppcVar38;\n        piVar41 = piVar40;\n        if (!bVar44) {\n            for (; (uVar11 >> uVar20 & 1) == 0; uVar20 = uVar20 + 1) {\n            }\n        }\n        goto code_r0x009af7f4;\n    }\n    piVar40 = puVar10 + -1;\n    puVar10[-1] = 0x9b014c;\n    uVar20 = 0xe45b8dad;\n    uVar11 = CONCAT22(uVar14, 0x4e9a) >> 5;\n    if ((!bVar42) && (bVar42)) {\n        if (ppcVar38 <= ppcVar39) goto code_r0x009b0169;\n        uVar43 = uVar11 + 0xb5;\n        pcVar8 = CONCAT22(uVar14, 0x4e9a) << 0x1b | uVar11 & 0xffffff00 | uVar43;\n        *pcVar8 = *pcVar8 + uVar43;\n        *pcVar8 = *pcVar8 + uVar43;\n        goto code_r0x009b001c;\n    }\n    puVar10[-2] = unaff_EBP;\n    puVar22 = (unaff_EBP + 0x10) - unaff_EBP;\n    if (SBORROW4(unaff_EBP + 0x10, unaff_EBP)) {\n        iVar37 = 0;\n        if (ppcVar39 != NULL) {\n            for (; (ppcVar39 >> iVar37 & 1) == 0; iVar37 = iVar37 + 1) {\n            }\n        }\n    }\n    else {\n        iVar37 = 0;\n        if (ppcVar39 != NULL) {\n            for (; (ppcVar39 >> iVar37 & 1) == 0; iVar37 = iVar37 + 1) {\n            }\n        }\n    }\n    piVar28 = puVar10 + -3;\n    // WARNING: Call to offcut address within same function\n    puVar10[-3] = 0x9b02a2;\n    cVar4 = func_0x009b02a3();\n    if (cVar4 + '\\b' < '\\0') {\n        while( true ) {\n            *(piVar28 + -4) = 0x9b02d4;\n            pcVar8 = fcn.009b034a();\n            piVar28 = 0xf66e8c4f;\n            piVar41 = piVar41 + ppcVar39;\n            puVar9 = segment(in_DS, puVar22 + piVar41);\n            in_DS = *puVar9;\n            if (-1 < extraout_ECX_01 + 1) break;\n            *pcVar8 = *pcVar8 + pcVar8;\n        }\n        *0xf66e8c4b = 0x9b02ea;\n        pcVar8 = func_0x7f83ff0e();\n        *pcVar8 = *pcVar8 + pcVar8;\n        *puVar22 = *puVar22 + extraout_CH;\n        return pcVar8;\n    }\n    puVar29 = piVar28 + -4;\n    *(piVar28 + -4) = 0x9b02ed;\n    iVar37 = func_0x009b036b();\n    uVar20 = iVar37 - puVar22;\n    if ((POPCOUNT(uVar20 & 0xff) & 1U) == 0) {\n        bVar44 = puVar29 < 0xc;\n        bVar51 = SBORROW4(puVar29, 0xc);\n        puVar30 = puVar29 + -0xc;\n        bVar47 = puVar29 + -0xc < 0;\n        bVar45 = puVar29 == 0xc;\n        bVar42 = (POPCOUNT(puVar29 + -0xc & 0xff) & 1U) == 0;\n        goto code_r0x009b0680;\n    }\n    bVar44 = puVar29 < 0xc;\n    bVar51 = SBORROW4(puVar29, 0xc);\n    bVar47 = puVar29 + -0xc < 0;\n    bVar45 = puVar29 == 0xc;\n    bVar42 = (POPCOUNT(puVar29 + -0xc & 0xff) & 1U) == 0;\n    *(puVar29 + -0x10) = *(puVar29 + -6);\n    uVar11 = uVar20;\n    piVar40 = piVar41;\n    while( true ) {\n        *(uVar11 - 4) =\n             (in_NT & 1) * 0x4000 | bVar51 * 0x800 | bVar49 * 0x400 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n             bVar47 * 0x80 | bVar45 * 0x40 | (in_AF & 1) * 0x10 | bVar42 * 4 | bVar44 | (in_ID & 1) * 0x200000 |\n             (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n        puVar36 = puVar22 + (uVar11 - 0x40);\n        puVar30 = uVar11 - 8;\n        puVar32 = uVar11 - 8;\n        ppuVar33 = uVar11 - 8;\n        puVar9 = uVar11 - 8;\n        *(uVar11 - 8) = ppcVar39;\n        *(uVar11 - 0xc) = fcn.009b05c7;\n        fcn.009b053b();\n        *(uVar11 - 0xc) = 0x9b060b;\n        fcn.009b05ee();\n        piVar41 = piVar40 + 1;\n        uVar14 = *(uVar11 - 8) >> 0x10;\n        if (!SCARRY4(piVar40, 1)) break;\n        puVar22 = CONCAT22(uVar14, 0xead3);\n        *(uVar11 - 0xc) = 0x9b066d;\n        uVar55 = fcn.009b0796();\n        uVar7 = uVar55;\n        pcVar8 = uVar7 + 0x4bbadd54;\n        if (uVar7 < 0xb44522ac) {\n            *piVar41 = *ppcVar39;\n            *(uVar11 - 0xc) = piVar40 + bVar49 * -2 + 2;\n            ppuVar31 = *(uVar11 - 0xc) + 4;\n            goto code_r0x009b06b6;\n        }\n        uVar15 = 0xfbb4829;\n        uVar16 = uVar7 < 0xb44522ac;\n        uVar7 = uVar7 + 0xb14bd4ba;\n        bVar44 = pcVar8 < 0x9a6f089a || uVar7 < uVar16;\n        bVar51 = SBORROW4(pcVar8, -0x6590f766) != SBORROW4(uVar7, uVar16);\n        uVar20 = uVar7 - uVar16;\n        bVar47 = uVar20 < 0;\n        bVar45 = uVar20 == 0;\n        bVar42 = (POPCOUNT(uVar20 & 0xff) & 1U) == 0;\n        if (bVar42) {\n            if (bVar45) {\n                uVar18 = uVar55 >> 0x20;\n                if ((pcVar8 < 0x9a6f089a || uVar7 < uVar16) || bVar45) {\n                    puVar1 = ppcVar39 + 0x21;\n                    *puVar1 = *puVar1 << 1 | *puVar1 < '\\0';\n                    *(ppcVar39 + -0x36) = *(ppcVar39 + -0x36) << 1;\n                    puVar36 = puVar36 + -1;\n                    in_FPUControlWord = *(piVar40 + (uVar55 >> 0x20) * 2 + -0x50a36f);\n                    if (puVar36 != NULL) {\n                        *0xc2 = *0xc2 | 0xc2;\n                        goto code_r0x009b06bd;\n                    }\n                    uVar17 = 0xfbb482a;\n                    *piVar41 = *0x3fcca535;\n                    *(*puVar22 + 0x87d98b51) = *(*puVar22 + 0x87d98b51);\n                    uVar46 = in(uVar18);\n                    *(piVar40 + bVar49 * -2 + 2) = uVar46;\n                    uVar19 = 0;\n                    goto code_r0x009b06e9;\n                }\n                if (!bVar45 && bVar51 == bVar47) {\n                    uVar43 = in(uVar18);\n                    puVar36 = puVar36 + puVar22 + bVar44;\n                    uVar50 = 0;\n                    uVar52 = 0;\n                    uVar55 = uVar55 & 0xffffffff00000000 | uVar43 & 0xffffffffffffff01;\n                    uVar48 = 0;\n                    uVar46 = (uVar43 & 1) == 0;\n                    uVar43 = (uVar43 & 1) == 0;\n                    goto code_r0x009b0707;\n                }\n                bVar44 = false;\n                bVar51 = false;\n                uVar11 = 0;\n                bVar47 = false;\n                bVar45 = true;\n                bVar42 = true;\n                piVar40 = piVar41;\n            }\n            else {\n                *(uVar11 - 0xc) = in_ES;\n                uVar11 = uVar20;\n                piVar40 = piVar41;\n            }\n        }\n        else {\ncode_r0x009b0680:\n            piVar40 = piVar41;\n            uVar11 = uVar20;\n            *(puVar30 + -4) = *(puVar30 + 6);\n        }\n    }\n    puVar22 = *(uVar11 - 8) & 0xffff0000;\n    uVar43 = extraout_CL + 0x66;\n    uVar15 = uVar43;\n    puVar32 = uVar11 - 0x12;\n    if (uVar11 - 0x12 < 0) {\ncode_r0x009b06bd:\n        uVar43 = uVar15;\n        uVar14 = puVar22 >> 0x10;\n        puVar12 = puVar32 + 2;\n    }\n    else {\n        puVar12 = uVar11 - 0x10;\n    }\n    puVar9 = puVar12 + 8;\n    uVar50 = false;\n    uVar52 = 0;\n    uVar43 = uVar43 ^ 0xea;\n    uVar48 = uVar43 < '\\0';\n    uVar46 = uVar43 == 0;\n    uVar43 = (POPCOUNT(uVar43) & 1U) == 0;\n    *(puVar12 + 4) = 0x9b072b;\n    uVar55 = fcn.009b06f9();\n    uVar15 = extraout_ECX_02;\n    if (uVar50 || uVar46) {\n        *(puVar12 + 6) = *puVar9;\n    }\n    else {\ncode_r0x009b0707:\n        puVar9[-1] = *puVar9;\n    }\n    puVar10 = ~uVar55;\n    *(puVar9 + -5) =\n         (in_NT & 1) * 0x4000 | (uVar52 & 1) * 0x800 | bVar49 * 0x400 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n         (uVar48 & 1) * 0x80 | (uVar46 & 1) * 0x40 | (in_AF & 1) * 0x10 | (uVar43 & 1) * 4 | uVar50 & 1 |\n         (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    *(puVar9 + -5) = ppcVar39;\n    uVar20 = CONCAT31(CONCAT22(uVar14, 0xbb76) >> 8, 0xf);\n    uVar43 = ~uVar15;\n    uVar15 = uVar15 & 0xffffff00;\n    bVar44 = (uVar20 >> (piVar41 & 0x1f) & 1) != 0;\n    if ((!bVar44 && !uVar46) && (bVar44 || uVar46)) {\n        if (-1 < (uVar20 ^ 1 << (piVar41 & 0x1f) | piVar40[0x4265a84])) {\n            *puVar10 = *puVar10 << 0x17 | *puVar10 >> 9;\n            *(ppcVar39 + -0x45) = *(ppcVar39 + -0x45) << 1;\n            pcVar8 = puVar10 & 0xffff0000 | puVar10 + (puVar10 >> 8) * '\\x16';\n            out(*((uVar55 >> 0x20) + -0x53 + (uVar15 | uVar43) * 8), pcVar8);\n            *0x5eafebc2 = *0x5eafebc2 << (uVar43 & 0x1f) | *0x5eafebc2 >> 0x20 - (uVar43 & 0x1f);\n            return pcVar8;\n        }\n        ppuVar33 = puVar9 + 9;\n        *(puVar9 + 9) = 0x9b074a;\n        puVar9 = func_0x578320c8();\n        *puVar9 = in_FPUControlWord;\n        puVar36 = puVar36 + 0x1f1;\n        uVar19 = puVar9 >> 0x10;\n        uVar17 = extraout_ECX_03;\ncode_r0x009b06e9:\n        ppuVar31 = ppuVar33 + -1;\n        ppuVar33[-1] = uVar17;\n        *ppuVar33 = puVar36;\n        pcVar8 = ppuVar33 + -1 & 0xffff | uVar19 << 0x10;\ncode_r0x009b06b6:\n        *(ppuVar31 + -4) = *(ppuVar31 + 4);\n        return pcVar8;\n    }\n    uVar20 = uVar15 | uVar43 - 0x31;\n    puVar35 = puVar9 + 0x13;\n    *(puVar9 + 0x13) = fcn.009b0812;\n    func_0x009b07f3();\n    *puVar35 = 0x9b0818;\n    uVar11 = func_0x009b0838();\n    pcVar8 = uVar11 & 0xffffff00 | extraout_ECX_04 & 0xff;\n    uVar11 = extraout_ECX_04;\n    if (extraout_ECX_04 == 0) {\n        *pcVar8 = *pcVar8 + (extraout_ECX_04 & 0xff);\n        *0x6caf5c35 = *0x6caf5c35 + (uVar15 >> 8);\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    while( true ) {\n        puVar12 = piVar40 + 0x3eaff39f;\n        if (uVar20 != 0x4b3f2ba0 && SCARRY4(uVar20, -0x4b3f2ba0) == uVar20 + 0xb4c0d460 < 0) {\n            do {\n                *(puVar35 + -4) = 0x9b093a;\n                fcn.009b224f();\n                puVar35 = puVar35 + *(ppcVar39 + -0x6b);\n                *(uVar20 + 0x882784de) = *(uVar20 + 0x882784de);\n            } while( true );\n        }\n        uVar43 = (uVar11 & 0x1f) % 0x11;\n        uVar11 = ((puVar12 >> (puVar12 & 0xf) & 1) != 0) << 0x10 | puVar12 & 0xffff;\n        uVar11 = (puVar12 & 0xffff0000 | uVar11 >> uVar43 | uVar11 << 0x11 - uVar43) & ~(1 << (puVar35 & 0x1f));\n        uVar11 = uVar11 & 0xffffff00 | uVar11 + 1;\n        uVar20 = *(uVar20 + 0x9afaab);\n        if (!SBORROW4(puVar35, 10)) break;\n        if (SBORROW4(puVar35, 10)) {\n            *(puVar35 + -9) = uVar11;\n            goto code_r0x009b0981;\n        }\n        *(puVar35 + -0xe) = uVar11;\n        *(puVar35 + -0x12) = in_DS;\n        puVar34 = puVar35 + -0x16;\n        puVar35 = puVar35 + -0x16;\n        *puVar34 = in_ES;\n        uVar11 = 0xb0;\n    }\n    *(puVar35 + -9) = uVar11;\ncode_r0x009b0981:\n    cVar4 = 0xa4ecac5e < uVar20;\n    iVar5 = 0;\n    bVar44 = ppcVar39 != 0;\n    if (bVar44) {\n        for (; (ppcVar39 >> iVar5 & 1) == 0; iVar5 = iVar5 + 1) {\n        }\n    }\n    if (bVar44) {\n        puVar12 = ppcVar39 - 0x23;\n        uVar11 = puVar12 & 0xffff0000 | CONCAT11((puVar12 >> 8) << 1, puVar12);\n    }\n    else {\n        if (bVar44) {\n            *(puVar35 + -0xc) = 0x9b0d57;\n            uVar20 = fcn.009b0d86();\n            *(puVar35 + -0xc) = in_ES;\n            *((uVar20 & 0xffffff00 | uVar20 + -0x6b + cVar4) + 0x865f9f68) = in_CS;\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        puVar12 = ppcVar39 - 0x23;\n        uVar11 = puVar12 & 0xffff0000 | CONCAT11((puVar12 >> 8) << 1, puVar12);\n    }\n    *(puVar36 + -4) = uVar20 + 0x5b1353a1;\n    return ~(uVar11 >> 0x18 | (uVar11 & 0xff0000) >> 8 | (uVar11 & 0xff00) << 8 | uVar11 << 0x18);\ncode_r0x009af9e6:\n    cVar4 = uVar21;\n    uVar43 = cVar4 - 10;\n    uVar20 = uVar21 & 0xffffff00;\n    puVar10[-1] = uVar11;\n    puVar10[-2] = CONCAT22((((uVar16 + piVar41 >> 8 & 0xff) << 8 | (~(uVar16 + piVar41) << 0x18) >> 8) << 8) >> 0x10, \n                           0x60db);\n    puVar10[-3] = uVar16;\n    puVar10[-4] = uVar11;\n    puVar10[-5] = uVar20 | uVar43;\n    puVar10[-6] = puVar10 + -1;\n    puVar10[-7] = unaff_EBP;\n    puVar10[-8] = ppcVar39;\n    puVar10[-9] = piVar41;\n    if (uVar43 == 0 || SCARRY1(cVar4 + -9, -1) != uVar43 < '\\0') {\n        *(puVar10 + -0x17) = *(puVar10 + -0x16);\n    }\n    else {\n        *(puVar10 + -0x17) = *(puVar10 + -0x16);\n    }\n    uVar43 = cVar4 - 0xb;\n    uVar21 = uVar20 | uVar43;\n    iVar37 = 0;\n    bVar44 = piVar41 == NULL;\n    if (!bVar44) {\n        for (; (piVar41 >> iVar37 & 1) == 0; iVar37 = iVar37 + 1) {\n        }\n    }\n    uVar46 = uVar20 >> 8;\n    if (bVar44) {\n        iVar37 = 0;\n        if (puVar10 != NULL) {\n            for (; (puVar10 >> iVar37 & 1) == 0; iVar37 = iVar37 + 1) {\n            }\n        }\n        uVar19 = iVar37 >> 0x10;\n        *(puVar10 + -9) = uVar46;\n        goto code_r0x009afa53;\n    }\n    if (!bVar44) {\n        iVar37 = 0;\n        if (puVar10 != NULL) {\n            for (; (puVar10 >> iVar37 & 1) == 0; iVar37 = iVar37 + 1) {\n            }\n        }\n        uVar19 = iVar37 >> 0x10;\n        *(puVar10 + -9) = uVar46;\ncode_r0x009afa53:\n        uVar17 = CONCAT31(puVar10 + -5 >> 8 & 0xff | (uVar19 << 0x10) >> 8, 0xcf);\n        bVar45 = SCARRY1(uVar50, uVar43);\n        uVar50 = uVar50 + uVar43;\n        uVar11 = uVar11 & 0xffffff00 | uVar50;\n        bVar42 = uVar50 < '\\0';\n        bVar49 = uVar50 == 0;\n        uVar20 = uVar20 | bVar45 == bVar42;\n        puVar10[-6] = uVar17;\n        puVar10[-7] = uVar16;\n        puVar10[-8] = uVar11;\n        puVar10[-9] = uVar20;\n        puVar10[-10] = puVar10 + -5;\n        puVar10[-0xb] = unaff_EBP;\n        puVar10[-0xc] = ppcVar39;\n        piVar27 = puVar10 + -0xd;\n        puVar10[-0xd] = piVar41;\n        uVar6 = uVar17;\n        puVar22 = CONCAT22(uVar19, uVar6 >> 5 | uVar6 << 0xb);\n        bVar44 = false;\n        piVar40 = puVar10 + -0xd;\n        if (!bVar49 && bVar45 == bVar42) goto code_r0x009afef3;\n        while (piVar40 = piVar27,  bVar49 || bVar45 != bVar42) {\ncode_r0x009afef3:\n            uVar11 = puVar22 & 0xffff0000 | uVar20 * 4 & 0xffff;\n            uVar50 = uVar16;\n            uVar43 = uVar50 & 0x1f;\n            uVar15 = uVar11 << uVar43;\n            bVar49 = (uVar16 & 0x1f) != 0;\n            uVar48 = !bVar49 & bVar44 | (bVar49 && uVar11 << uVar43 - 1 < 0);\n            if (uVar43 != 1 & SCARRY4(piVar41, 1) | uVar43 == 1 & (uVar48 ^ uVar15 < 0)) {\n                uVar43 = (uVar50 & 0x1f) % 0x11;\n                uVar11 = uVar48 << 0x10 | uVar15 & 0xffff;\n                uVar11 = uVar11 >> uVar43 | uVar11 << 0x11 - uVar43;\n            }\n            else {\n                uVar43 = (uVar50 & 0x1f) % 0x11;\n                uVar11 = uVar48 << 0x10 | uVar15 & 0xffff;\n                uVar11 = uVar11 >> uVar43 | uVar11 << 0x11 - uVar43;\n            }\n            uVar43 = (uVar11 & 0x10000) != 0;\n            puVar25 = piVar40 + -4;\n            *(piVar40 + -4) = 0x9afeb3;\n            pcVar8 = func_0x009afec9();\n            uVar19 = uVar43;\n            while( true ) {\n                *ppcVar39 = *ppcVar39 + uVar43 * ((pcVar8 & 3) - (*ppcVar39 & 3));\n                if ((POPCOUNT(puVar25 + 1 & 0xff) & 1U) == 0) break;\n                puVar26 = puVar25 + -3;\n                puVar25 = puVar25 + -3;\n                *puVar26 = in_SS;\n                *pcVar8 = *pcVar8 + pcVar8;\n                puVar36 = (uVar20 * 4 & 0xffff0000 | puVar22 + uVar19 * ((ppcVar39 & 3) - (puVar22 & 3))) - 0xd;\n                uVar50 = pcVar8 >> 8;\n                uVar43 = CARRY1(*puVar36, uVar50);\n                *puVar36 = *puVar36 + uVar50;\n            }\n            *(puVar25 + -3) = 0xd;\n            piVar41 = *(puVar25 + -3);\n            ppcVar39 = *(puVar25 + 1);\n            unaff_EBP = *(puVar25 + 5);\n            uVar20 = *(puVar25 + 0xd);\n            uVar11 = *(puVar25 + 0x11);\n            uVar16 = *(puVar25 + 0x15);\n            piVar27 = puVar25 + 0x1d;\n            puVar22 = *(puVar25 + 0x19) & 0xffffff00 | *0x808f0f;\n            bVar44 = CARRY1(*puVar22, *0x808f0f);\n            bVar45 = SCARRY1(*puVar22, *0x808f0f);\n            *puVar22 = *puVar22 + *0x808f0f;\n            bVar42 = *puVar22 < '\\0';\n            bVar49 = *puVar22 == 0;\n        }\n        piVar27[-1] = *piVar27;\n        piVar27[-2] = 0x9afedf;\n        puVar2 = piVar27 + 1;\n        uVar43 = uVar16 + 0x66;\n        if (uVar11 * 4 + 1 < 0) {\n            uVar19 = (uVar20 & 0xff00 | uVar20 - 1) ^ piVar41;\n            uVar20 = uVar20 & 0xffff0000 | uVar19 & 0xff | -(uVar19 >> 8) << 8;\n        }\n        else {\n            uVar19 = (uVar20 & 0xff00 | uVar20 - 1) ^ piVar41;\n            uVar20 = uVar20 & 0xffff0000 | uVar19 & 0xff | -(uVar19 >> 8) << 8;\n        }\n        uVar50 = uVar43 ^ 0xea;\n        uVar11 = (uVar16 & 0xffffff00 | uVar43) ^ 0xea;\n        bVar44 = (POPCOUNT(uVar50) & 1U) == 0;\n        uVar19 = uVar20 >> 0x18 | uVar20 >> 8 & 0xff00;\n        uVar50 = uVar50 & 0xf;\n        uVar20 = CONCAT22(((uVar20 & 0xff00) << 8) >> 0x10 | (uVar20 << 0x18) >> 0x10, \n                          uVar19 >> uVar50 | uVar19 << 0x10 - uVar50);\n        if (((bVar44) && (!bVar44)) || (uVar11 = uVar16 & 0xffffff00 | uVar11 & 0xff,  bVar44)) {\n            iVar37 = 0x1f;\n            if (uVar20 != 0) {\n                for (; uVar20 >> iVar37 == 0; iVar37 = iVar37 + -1) {\n                }\n            }\n            uVar20 = uVar11 + unaff_EBP & 0xffff0000 | CONCAT11(*puVar2, uVar11 + unaff_EBP);\n        }\n        else {\n            if (bVar44) {\n    // WARNING: Bad instruction - Truncating control flow here\n                halt_baddata();\n            }\n            iVar37 = 0x1f;\n            if (uVar20 != 0) {\n                for (; uVar20 >> iVar37 == 0; iVar37 = iVar37 + -1) {\n                }\n            }\n            uVar20 = uVar11 + unaff_EBP & 0xffff0000 | CONCAT11(*puVar2, uVar11 + unaff_EBP);\n        }\n        if (puVar2 < 0xe || piVar27 == 0xa) {\n            for (iVar5 = 0; (0x751dU >> iVar5 & 1) == 0; iVar5 = iVar5 + 1) {\n            }\n        }\n        else {\n            for (iVar5 = 0; (0x751dU >> iVar5 & 1) == 0; iVar5 = iVar5 + 1) {\n            }\n        }\n        uVar20 = uVar20 + 0xef;\n        piVar40 = piVar27 + 1;\n        pcVar8 = ppcVar39 * 4;\ncode_r0x009b001c:\n        if (-pcVar8 < 0) {\n            uVar20 = uVar20 & 0xffff0000 | ppcVar39 & 0xffff;\n        }\n        else {\n            uVar20 = uVar20 & 0xffff0000 | ppcVar39 & 0xffff;\n        }\n        uVar17 = CONCAT31(uVar20 >> 8, 0x5f);\n        if (piVar40 != 0x5) {\n            *(piVar40 + -5) = uVar17;\n            uVar17 = _pe_dos_header;\n        }\n        _pe_dos_header = uVar17;\n        piVar40[-2] = 0x9b006b;\n        fcn.009b0050();\n        *(piVar40 + -1) = extraout_DL;\ncode_r0x009b0169:\n        unaff_EBP[-1] = 0x9b0130;\n        uVar54 = fcn.009b0173();\n        uVar20 = piVar41 ^ *((uVar54 >> 0x20) + 0x7cba4f28);\n        pcVar8 = uVar54 & 0xffff0000 |\n                 CONCAT11((uVar20 < 0) << 7 | (uVar20 == 0) << 6 | in_AF << 4 |\n                          ((POPCOUNT(uVar20 & 0xff) & 1U) == 0) << 2, uVar54) | 0x200;\n        *unaff_EBP = pcVar8;\n        return pcVar8;\n    }\n    out(*ppcVar39, uVar18);\n    in(0x7a);\n    ppcVar39 = ppcVar39 + bVar49 * -2 + 1;\n    goto code_r0x009af9e6;\n}\n",
        "token_count": 11396
    },
    "009cb29b": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n\nvoid __fastcall fcn.009cb29b(uint param_1, uint param_2, uint param_3, uint param_4, uint param_5)\n\n{\n    int32_t iVar1;\n    uchar *puVar2;\n    uint unaff_EBX;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    uint in_FS_OFFSET;\n    uint8_t uVar3;\n    uint8_t uVar4;\n    uint8_t in_AF;\n    uint8_t uVar5;\n    uint8_t uVar6;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t uVar7;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint var_8h;\n    uint var_bp_4h;\n    uint uStack4;\n    \n    *in_FS_OFFSET = *0x10;\n    uStack4 = 0x9cb2e5;\n    var_bp_4h = param_2;\n    puVar2 = fcn.009cb2c6();\n    uVar3 = &stack0x00000004 < puVar2;\n    uVar7 = SBORROW4(&stack0x00000004, puVar2);\n    iVar1 = -puVar2;\n    uVar6 = &stack0x00000004 + iVar1 < 0;\n    uVar5 = &stack0x00000004 == puVar2;\n    uVar4 = (POPCOUNT(&stack0x00000004 + iVar1 & 0xff) & 1U) == 0;\n    *(&stack0x00000000 + iVar1) = unaff_EBX;\n    *(&stack0xfffffffc + iVar1) = unaff_ESI;\n    *(&fcn.009cb29b::var_bp_4h + iVar1) = unaff_EDI;\n    *(&fcn.009cb29b::var_8h + iVar1) = unaff_EDI;\n    *(&fcn.009cb29b::var_8h + iVar1) = 0x9cb379;\n    fcn.009cb32a();\n    *(&fcn.009cb29b::var_bp_4h + iVar1) =\n         (in_NT & 1) * 0x4000 | (uVar7 & 1) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | (uVar6 & 1) * 0x80 |\n         (uVar5 & 1) * 0x40 | (in_AF & 1) * 0x10 | (uVar4 & 1) * 4 | uVar3 & 1 | (in_ID & 1) * 0x200000 |\n         (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    return;\n}\n",
        "token_count": 697
    },
    "00a01e1c": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n\nvoid fcn.00a01e1c(void)\n\n{\n    uchar uVar1;\n    ushort extraout_DX;\n    int32_t unaff_EBX;\n    uchar *unaff_EDI;\n    \n    fcn.00a01e06();\n    uVar1 = in(extraout_DX);\n    *unaff_EDI = uVar1;\n    *(unaff_EBX + -0x17) = *(unaff_EBX + -0x17) | unaff_EBX;\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 135
    },
    "00a557ac": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00a55bc8) overlaps instruction at (ram,0x00a55bc7)\n// \n\nvoid __thiscall fcn.00a557ac(uint16_t param_1)\n\n{\n    char *pcVar1;\n    int32_t iVar2;\n    int16_t iVar3;\n    int64_t iVar4;\n    uchar uVar5;\n    ushort uVar6;\n    ushort uVar7;\n    int32_t extraout_ECX;\n    int32_t extraout_ECX_00;\n    ushort extraout_DX;\n    int32_t extraout_EDX;\n    uint32_t unaff_EBX;\n    uint16_t uVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    uint32_t unaff_EDI;\n    bool bVar12;\n    bool bVar13;\n    uint8_t in_AF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    ulong uVar14;\n    uchar unaff_retaddr;\n    uint in_stack_00000002;\n    ushort uStack00000004;\n    uint in_stack_00000018;\n    uint32_t in_stack_0000001c;\n    uint32_t in_stack_00000020;\n    int32_t in_stack_00000024;\n    ushort in_stack_00000028;\n    uchar uStack0000002b;\n    uchar in_stack_0000002c;\n    uchar uStack0000002d;\n    uchar uStack0000002e;\n    uchar in_stack_00000030;\n    uchar uStack00000031;\n    uchar uStack00000032;\n    uchar uStack00000033;\n    uchar in_stack_00000034;\n    ushort uStack00000035;\n    uchar uStack00000037;\n    uchar uStack00000038;\n    ushort uStack00000039;\n    uint in_stack_00000038;\n    uchar uStack0000003b;\n    uchar in_stack_0000003c;\n    uint uStack0000003d;\n    uchar uStack00000040;\n    uint in_stack_00000048;\n    ushort in_stack_0000004c;\n    uchar uStack0000004e;\n    uchar uStack0000004f;\n    uchar in_stack_00000050;\n    uchar uStack00000051;\n    ushort uStack00000052;\n    uchar uStack00000054;\n    uchar uStack00000055;\n    uchar uStack00000056;\n    uint in_stack_00000054;\n    uchar uStack00000057;\n    uchar uStack00000058;\n    uint uStack00000059;\n    ulong in_stack_00000058;\n    uint32_t in_stack_00000060;\n    uchar in_stack_00000064;\n    uchar uStack00000065;\n    uchar uStack00000066;\n    uchar uStack00000067;\n    uchar in_stack_00000068;\n    \n    uStack00000004 = in_stack_00000002 >> 0x10;\n    iVar3 = 0xf;\n    if (param_1 != 0) {\n        for (; param_1 >> iVar3 == 0; iVar3 = iVar3 + -1) {\n        }\n    }\n    uVar7 = fcn.00a55819();\n    uVar6 = uStack00000039;\n    in_stack_00000018 = CONCAT22(uStack00000004, 0x8060);\n    uStack0000002d = uVar7 >> 8;\n    uVar5 = uStack0000002d;\n    in_stack_0000001c =\n         (in_NT & 1) * 0x4000 | SCARRY4(&stack0x00000001, 0x18) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n         (&stack0x00000019 < 0) * 0x80 | (*0x10 == 0xffffffe7) * 0x40 | (in_AF & 1) * 0x10 |\n         ((POPCOUNT(&stack0x00000019 & 0xff) & 1U) == 0) * 4 | 0xffffffe7 < &stack0x00000001 | (in_ID & 1) * 0x200000 |\n         (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    uVar8 = extraout_EDX + 0xd9;\n    iVar3 = 0;\n    if (uVar8 != 0) {\n        for (; (uVar8 >> iVar3 & 1) == 0; iVar3 = iVar3 + 1) {\n        }\n    }\n    uStack00000032 = uStack0000002d;\n    uStack0000002e = uVar7;\n    uStack00000031 = uStack00000038;\n    uStack0000002b = uStack0000002d;\n    uStack0000002d = uStack0000002e;\n    uStack0000002e = uVar5;\n    uVar9 = unaff_EDI * 4 ^ &stack0x00000039 + extraout_EDX;\n    uStack00000037 = uVar9 >> 0x10;\n    uStack00000038 = uVar9 >> 0x18;\n    uStack00000033 = 0xda;\n    in_stack_00000034 = 0x59;\n    uStack00000035 = 0xa5;\n    in_stack_00000020 = (unaff_EBX >> 8 & 0xffff00) << 8 | CONCAT11(unaff_EBX, unaff_retaddr);\n    in_stack_00000024 = extraout_EDX;\n    uVar14 = fcn.00a55969();\n    uStack00000051 = uStack00000037;\n    uStack00000052 = CONCAT22(uStack00000039, CONCAT11(uStack00000038, uStack00000037)) >> 8;\n    uStack00000054 = uStack00000039 >> 8;\n    uStack0000003d = uStack00000059;\n    uStack00000040 = uStack00000059 >> 0x18;\n    iVar3 = 0;\n    if (uVar14 != 0) {\n        for (; (uVar14 >> iVar3 & 1) == 0; iVar3 = iVar3 + 1) {\n        }\n    }\n    uStack0000003b = in_stack_00000048 >> 0x10;\n    in_stack_0000003c = in_stack_00000048 >> 0x18;\n    iVar3 = 0;\n    if (unaff_EDI != 0) {\n        for (; (unaff_EDI >> iVar3 & 1) == 0; iVar3 = iVar3 + 1) {\n        }\n    }\n    uStack00000067 = uVar14 >> 8;\n    in_stack_00000060 = (uVar14 >> 0x20) << 0x18;\n    uVar10 = in_stack_00000060;\n    in_stack_00000064 = uVar14 >> 0x28;\n    uStack00000065 = uVar14 >> 0x30;\n    uStack00000066 = uVar14 >> 0x38;\n    uStack00000056 = extraout_ECX;\n    uStack00000057 = extraout_ECX >> 8;\n    in_stack_00000060 =\n         extraout_ECX + CONCAT11(in_stack_00000068, uStack00000067) & 0xffff |\n         uVar14 + CONCAT31(CONCAT21(uVar6, uStack00000040), uStack00000040) & 0xffff0000;\n    uVar9 = uVar14 >> 8 & 0xff;\n    in_stack_00000048 = 0xa55b6a;\n    func_0x00a55b0c();\n    do {\n        uVar11 = uVar9 & 0xffff;\n        uVar9 = uVar10 >> 0x1f;\n        do {\n            bVar12 = (POPCOUNT(uVar11 * 4 + 1 & 0xff) & 1U) == 0;\n            iVar2 = 0;\n            if (unaff_EDI != 0) {\n                for (; (unaff_EDI >> iVar2 & 1) == 0; iVar2 = iVar2 + 1) {\n                }\n            }\n            uStack0000004e = 0xe2;\n            uStack0000004f = 0x5b;\n            in_stack_00000050 = 0xa5;\n            uStack00000051 = 0;\n            bVar13 = bVar12;\n            fcn.00a55c27();\n            uVar11 = uVar9;\n        } while (bVar13);\n        if (!bVar13) {\n            in(extraout_DX);\n            iVar4 = *(extraout_ECX_00 + 0x13e08111) * -0x3b;\n            pcVar1 = CONCAT31(CONCAT21(iVar2 >> 0x10, iVar2), bVar12) + -0x2c995af6;\n            *pcVar1 = *pcVar1 + iVar4 + (iVar4 != iVar4);\n            in(iVar4);\n            uVar9 = CONCAT11(-iVar2, bVar12) * 4;\n        }\n        in_stack_0000004c = CONCAT11(uStack00000057, uStack00000056);\n        uVar10 = 0;\n        uStack00000054 = uVar9;\n        uStack00000055 = uVar9 >> 8;\n    } while( true );\n}\n",
        "token_count": 2206
    },
    "009ac642": {
        "rules": [
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e"
        ],
        "decompiled_code": "\nuint fcn.009ac642(void)\n\n{\n    return 0xbbd4fb55;\n}\n",
        "token_count": 22
    },
    "009eb233": {
        "rules": [
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e",
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e",
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e",
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e",
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e",
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e",
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e",
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009ec881) overlaps instruction at (ram,0x009ec87c)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nuint32_t __fastcall fcn.009eb233(int32_t param_1, uint param_2)\n\n{\n    uint32_t uVar1;\n    uint64_t uVar2;\n    uint64_t uVar3;\n    code *pcVar4;\n    uint32_t uVar5;\n    int32_t extraout_ECX;\n    ushort extraout_DX;\n    uint32_t *unaff_EBX;\n    int32_t unaff_EBP;\n    uchar *puVar6;\n    uint8_t uVar7;\n    uint8_t uVar8;\n    uint8_t in_AF;\n    bool bVar9;\n    uint8_t uVar10;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t uVar11;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    \n    puVar6 = NULL;\n    bVar9 = unaff_EBX < 0;\n    if (bVar9) {\ncode_r0x009eb203:\n        *0xacf235c6 = fcn.009ec95c();\n        pcVar4 = swi(0x3c);\n        uVar5 = (*pcVar4)();\n        *(extraout_ECX + -0x4aa5dc20) = *(extraout_ECX + -0x4aa5dc20) & 3;\n        return uVar5;\n    }\n    if (!bVar9) goto code_r0x009eb32e;\n    puVar6 = 0x1;\n    out(pe_dos_header, param_2);\n    uVar5 = in(param_2);\n    if (bVar9) {\n        uVar1 = *unaff_EBX;\n        uVar2 = CONCAT44(param_2, uVar5);\n        uVar3 = uVar2 / uVar1;\n        uVar5 = uVar3;\n        if (bVar9) {\n            **(unaff_EBP + -8) = **(unaff_EBP + -8) + -1;\n            in_AF = 9 < ((uVar3 | 0xeb) & 0xf) | in_AF;\n            *(param_1 + 0x20936001) = (*(param_1 + 0x20936001) - uVar2 % uVar1) - in_AF;\n            while( true ) {\n                uVar5 = func_0x009b89e1();\n                uVar7 = 0;\n                uVar11 = 0;\n                uVar10 = uVar5 < 0;\n                bVar9 = uVar5 == 0;\n                uVar8 = (POPCOUNT(uVar5 & 0xff) & 1U) == 0;\n                func_0x009ec8a7();\n                if (bVar9) {\n                    func_0x009ec948((in_NT & 1) * 0x4000 | (uVar11 & 1) * 0x800 | (in_IF & 1) * 0x200 |\n                                    (in_TF & 1) * 0x100 | (uVar10 & 1) * 0x80 | (bVar9 & 1) * 0x40 | (in_AF & 1) * 0x10\n                                    | (uVar8 & 1) * 4 | uVar7 & 1 | (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 |\n                                    (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000);\n                    out(*puVar6, extraout_DX);\n                }\n                puVar6 = puVar6 + 1;\n                if (unaff_EBX < puVar6) break;\ncode_r0x009eb32e:\n                rdtsc();\n            }\n            goto code_r0x009eb203;\n        }\n    }\n    return uVar5 & 0xffffff00;\n}\n",
        "token_count": 938
    },
    "009ad2a6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/101d11b5106849ad963488c88a9294b9",
            "validate payment card number using luhn algorithm with no lookup table/101d11b5106849ad963488c88a9294b9",
            "validate payment card number using luhn algorithm with lookup table/77a25ea9f6f245cfb8807f7953974472",
            "validate payment card number using luhn algorithm with lookup table/77a25ea9f6f245cfb8807f7953974472"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009ad4cd) overlaps instruction at (ram,0x009ad4cb)\n// \n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Removing unreachable block (ram,0x009ad401)\n// WARNING: Removing unreachable block (ram,0x009ad2d3)\n\nuint32_t __fastcall fcn.009ad2a6(int32_t param_1)\n\n{\n    uint8_t *puVar1;\n    uint8_t uVar2;\n    uint32_t uVar3;\n    uint8_t uVar4;\n    uint8_t uVar5;\n    uint32_t in_EAX;\n    uint32_t uVar6;\n    int32_t extraout_ECX;\n    int32_t iVar7;\n    int32_t extraout_ECX_00;\n    uint16_t uVar8;\n    int16_t iVar9;\n    uint32_t unaff_EBX;\n    uchar *puVar10;\n    uint32_t unaff_EBP;\n    uint32_t *unaff_ESI;\n    uint32_t unaff_EDI;\n    bool bVar11;\n    uint8_t in_AF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    bool bVar12;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    int32_t unaff_retaddr;\n    ushort uStack4;\n    uint8_t uStack2;\n    \n    if (SCARRY4(param_1, 1) == param_1 + 1 < 0) {\n        uVar6 = unaff_EBX & 0xffff | unaff_EBP & 0xffff0000;\n    }\n    else {\n        uVar6 = unaff_EBX & 0xffff | unaff_EBP & 0xffff0000;\n    }\n    uVar8 = CONCAT11(0x79, uVar6);\n    bVar11 = ((uVar6 & 0xffff0000 | uVar8) >> (unaff_EDI & 0x1f) & 1) != 0;\n    uVar8 = uVar8 | 1 << (unaff_EDI & 0x1f);\n    if ((!bVar11) || (bVar11)) {\n        uVar4 = in_EAX + 0x89;\n        bVar11 = (uVar8 >> (uVar4 & 0xf) & 1) != 0;\n        if ((!bVar11 && uVar4 != 0) && (bVar11 || uVar4 == 0)) {\n            out(*unaff_ESI, uVar8 ^ 1 << (uVar4 & 0xf));\n            out(0x74, uVar4);\n            uVar4 = 1;\n            do {\n                iVar7 = unaff_retaddr + -1;\n                unaff_retaddr = fcn.009ad2a6();\n                *(extraout_ECX + 0x10a713e0) = *(extraout_ECX + 0x10a713e0) + iVar7 + uVar4;\n                uVar4 = 0;\n            } while( true );\n        }\n        in_EAX = in_EAX & 0xffffff00 | -uVar4;\n        uVar6 = uVar4 != 0;\n        bVar12 = SBORROW4(unaff_EBP, unaff_EBP) != false;\n        uVar3 = -uVar6;\n        bVar11 = (POPCOUNT(uVar3 & 0xff) & 1U) == 0;\n        if (bVar12) {\n            uStack4 = (in_NT & 1) * 0x4000 | bVar12 * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n                      (uVar6 != 0) * 0x80 | (uVar3 == 0) * 0x40 | (in_AF & 1) * 0x10 | bVar11 * 4 | uVar6 != 0;\n            uStack2 = (in_ID & 1) * 0x200000 >> 0x10 | (in_VIP & 1) * 0x100000 >> 0x10 | (in_VIF & 1) * 0x80000 >> 0x10\n                      | (in_AC & 1) * 0x40000 >> 0x10;\n        }\n        else {\n            uStack4 = (in_NT & 1) * 0x4000 | bVar12 * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n                      (uVar6 != 0) * 0x80 | (uVar3 == 0) * 0x40 | (in_AF & 1) * 0x10 | bVar11 * 4 | uVar6 != 0;\n            uStack2 = (in_ID & 1) * 0x200000 >> 0x10 | (in_VIP & 1) * 0x100000 >> 0x10 | (in_VIF & 1) * 0x80000 >> 0x10\n                      | (in_AC & 1) * 0x40000 >> 0x10;\n        }\n        if (*0x10 < 0x1e) {\n            iVar7 = 0x1f;\n            if (in_EAX != 0) {\n                for (; in_EAX >> iVar7 == 0; iVar7 = iVar7 + -1) {\n                }\n            }\n            puVar10 = &stack0xffffffe0;\n            goto code_r0x009ad436;\n        }\n    }\n    uStack2 = in_EAX;\n    uStack4 = unaff_EBX >> 0x10;\n    iVar7 = 0x1f;\n    if (in_EAX != 0) {\n        for (; in_EAX >> iVar7 == 0; iVar7 = iVar7 + -1) {\n        }\n    }\n    puVar10 = &stack0xfffffffd;\ncode_r0x009ad436:\n    while( true ) {\n        *(puVar10 + -4) = 0x9ad43b;\n        uVar6 = fcn.009ad412();\n        if ((puVar10 == 0x11) || (puVar10 != 0x11)) break;\n        in_AF = 9 < (*0xd2469453 + 1U & 0xf) | in_AF;\n        uVar5 = *0xd2469453 + 1U + in_AF * '\\x06';\n        puVar1 = unaff_EBX + *(uVar6 - 0x3f) * 8;\n        uVar2 = (uVar6 & 0x1f) % 9;\n        uVar4 = *puVar1;\n        *puVar1 = uVar4 << uVar2 |\n                  CONCAT11(0x90 < (uVar5 & 0xf0) | 0x10 < puVar10 | in_AF * (0xf9 < uVar5), uVar4) >> 9 - uVar2;\n        in(0x14);\n        uVar6 = *unaff_ESI;\n        *unaff_ESI = unaff_EBP;\n        puVar10 = puVar10 + -0x10;\n        unaff_EBP = uVar6;\n    }\n    iVar7 = uVar6 << 2;\n    if (SBORROW4(puVar10, 0x11)) {\n        *(puVar10 + -0x14) = 0x9ad4cb;\n        uVar6 = fcn.009ad551();\n        *(uVar6 + 0x86c6960f) = *(uVar6 + 0x86c6960f) | unaff_EBP;\n        uVar6 = uVar6 & 0xffffff00;\n        iVar7 = extraout_ECX_00;\n    }\n    iVar7 = *(iVar7 + 0x9ad768);\n    iVar9 = unaff_EBP * 4;\n    if ((iVar9 < 2) || (1 < iVar9)) {\n        iVar7 = iVar7 + -0x255af00d;\n    }\n    unaff_ESI[-1] = iVar7;\n    return uVar6;\n}\n",
        "token_count": 1875
    },
    "009aee5e": {
        "rules": [
            "decompress data using LZO/83f2e70ad753438b83eb63e4275895e9",
            "decompress data using LZO/83f2e70ad753438b83eb63e4275895e9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009af23e) overlaps instruction at (ram,0x009af23d)\n// \n\nfloat10 fcn.009aee5e(uint param_1, int16_t param_2, uint param_3, int16_t param_4, uint param_5, uint8_t param_6, \n                    uint32_t param_7, float *param_8)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t extraout_ECX;\n    int16_t extraout_DX;\n    uint8_t uVar4;\n    uint16_t unaff_BX;\n    int16_t unaff_BP;\n    bool bVar5;\n    bool bVar6;\n    float10 extraout_ST0;\n    float10 fVar7;\n    int32_t unaff_retaddr;\n    uchar uStack0000001a;\n    uchar uStack0000001b;\n    \n    fcn.009aea3f();\n    uVar4 = unaff_BX - 2;\n    if (unaff_BP <= (unaff_BX & 0xff00 | unaff_BX - 1) * 4 + extraout_DX) {\n        fcn.009aeffa();\n        do {\n            fcn.009af090();\n            in(0x69);\n        } while( true );\n    }\n    bVar5 = CARRY1(extraout_DX, uVar4);\n    bVar6 = extraout_DX + uVar4 == '\\0';\n    fcn.009aef17();\n    if (!bVar5 && !bVar6) {\n        uVar1 = (param_6 & 0x1f) % 0x11;\n        uVar2 = ((unaff_BX & 0xff00 | uVar4) != 0) << 0x10 | (param_7 & 0xffff) + unaff_retaddr & 0xffff;\n        if (((uVar2 << uVar1 | uVar2 >> 0x11 - uVar1) & 0x10000) != 0 || param_4 + param_2 == -1) {\n            fVar7 = fcn.009af359();\n            return *param_8 / fVar7;\n        }\n        iVar3 = fcn.009af309();\n        *(iVar3 + -0x15) = *(iVar3 + -0x15) - extraout_ECX;\n        return extraout_ST0;\n    }\n    fcn.009af2f9();\n    uStack0000001a = 0x49;\n    uStack0000001b = 0xf2;\n    func_0x82000000();\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 622
    },
    "009edf2b": {
        "rules": [
            "decompress data using LZO/83f2e70ad753438b83eb63e4275895e9"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009b013d) overlaps instruction at (ram,0x009b0138)\n// \n// WARNING: Possible PIC construction at 0x009b0147: Changing call to branch\n// WARNING: Possible PIC construction at 0x009afeda: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x009b014c)\n// WARNING: Removing unreachable block (ram,0x009afedf)\n// WARNING: Removing unreachable block (ram,0x009afee8)\n// WARNING: Removing unreachable block (ram,0x009afe6e)\n// WARNING: Removing unreachable block (ram,0x009afeea)\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: This function may have set the stack pointer\n// WARNING: Removing unreachable block (ram,0x009b0831)\n// WARNING: Removing unreachable block (ram,0x009ee2ad)\n// WARNING: Removing unreachable block (ram,0x009ee2af)\n// WARNING: Removing unreachable block (ram,0x009ee2b8)\n// WARNING: Removing unreachable block (ram,0x009ee3c8)\n// WARNING: Removing unreachable block (ram,0x009c5452)\n// WARNING: Removing unreachable block (ram,0x009c549b)\n// WARNING: Removing unreachable block (ram,0x009c5487)\n// WARNING: Removing unreachable block (ram,0x009c54a9)\n// WARNING: Removing unreachable block (ram,0x009c54d4)\n// WARNING: Removing unreachable block (ram,0x009c5503)\n// WARNING: Removing unreachable block (ram,0x009c554b)\n// WARNING: Removing unreachable block (ram,0x009c5552)\n// WARNING: Removing unreachable block (ram,0x009c5535)\n// WARNING: Removing unreachable block (ram,0x009c5568)\n// WARNING: Removing unreachable block (ram,0x009c558f)\n// WARNING: Removing unreachable block (ram,0x009c5595)\n// WARNING: Removing unreachable block (ram,0x009c55aa)\n// WARNING: Removing unreachable block (ram,0x009c5597)\n// WARNING: Removing unreachable block (ram,0x009c55a5)\n\nuint8_t * __fastcall fcn.009edf2b(uint32_t *param_1, ushort *param_2)\n\n{\n    uint32_t uVar1;\n    code *pcVar2;\n    uint8_t uVar3;\n    char cVar4;\n    uint16_t uVar5;\n    ushort uVar14;\n    char *pcVar6;\n    int32_t iVar7;\n    uint8_t *puVar8;\n    ushort *puVar9;\n    uint32_t *puVar10;\n    uchar *puVar11;\n    ushort *in_EAX;\n    uint8_t *puVar12;\n    uint32_t uVar13;\n    char extraout_CL;\n    int16_t iVar15;\n    int32_t extraout_ECX;\n    char extraout_CH;\n    uint32_t uVar16;\n    uint32_t extraout_ECX_00;\n    uint32_t extraout_ECX_01;\n    unkuint3 Var18;\n    int16_t *piVar17;\n    uint32_t extraout_ECX_02;\n    int32_t extraout_ECX_03;\n    uchar extraout_DL;\n    ushort extraout_DX;\n    ushort extraout_DX_00;\n    uint16_t uVar19;\n    uint32_t uVar20;\n    uint32_t uVar21;\n    uint8_t *unaff_EBX;\n    ushort *puVar22;\n    uint *puVar23;\n    uint8_t **ppuVar24;\n    uint8_t *puVar25;\n    uint8_t **unaff_EBP;\n    uint32_t **ppuVar26;\n    uint32_t **unaff_ESI;\n    int32_t *piVar27;\n    int32_t *piVar28;\n    int32_t *unaff_EDI;\n    ushort in_ES;\n    ushort in_CS;\n    ushort in_SS;\n    ushort in_DS;\n    uint8_t uVar29;\n    bool in_CF;\n    bool bVar30;\n    uint8_t in_AF;\n    bool bVar31;\n    uchar uVar32;\n    bool bVar33;\n    uint8_t uVar34;\n    char in_SF;\n    bool bVar35;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    bool bVar36;\n    uint8_t uVar37;\n    char in_OF;\n    bool bVar38;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    ushort in_FPUControlWord;\n    ushort in_FPUStatusWord;\n    ushort in_FPUTagWord;\n    ushort in_FPULastInstructionOpcode;\n    uint in_FPUDataPointer;\n    uint in_FPUInstructionPointer;\n    float10 extraout_ST0;\n    float10 extraout_ST0_00;\n    float10 in_ST0;\n    float10 extraout_ST0_01;\n    uint64_t uVar39;\n    ulong uVar40;\n    uint32_t unaff_retaddr;\n    uint32_t **ppuStack80;\n    uint8_t **ppuStack76;\n    uint32_t uStack68;\n    uint32_t uStack64;\n    code *pcStack60;\n    uint32_t **ppuVar41;\n    ushort uStack30;\n    ushort uStack28;\n    uchar uStack24;\n    uchar uStack23;\n    uchar uStack22;\n    uchar uStack21;\n    ushort uStack20;\n    uint16_t uStack18;\n    ushort uStack16;\n    ushort uStack14;\n    uint8_t uStack12;\n    uchar uStack11;\n    uchar uStack10;\n    uchar uStack9;\n    uchar uStack8;\n    ushort uStack7;\n    uchar uStack5;\n    ushort *puStack4;\n    \n    bVar31 = false;\n    *unaff_ESI = param_1;\n    Var18 = (param_1 >> 8 & 0xff00) >> 8 | param_1 & 0xff00 | (param_1 << 0x18) >> 8;\n    iVar15 = CONCAT31(Var18, in_OF != in_SF);\n    bVar38 = SBORROW2(iVar15, 1);\n    iVar15 = iVar15 + -1;\n    uVar20 = CONCAT22(Var18 >> 8, iVar15);\n    bVar35 = iVar15 < 0;\n    uVar32 = iVar15 == 0;\n    uVar19 = param_2;\n    if ((!in_CF && !uVar32) && (in_CF || uVar32)) {\n        out(uVar19, in_EAX);\n        *(unaff_EBP + -0x13) = *(unaff_EBP + -0x13);\n        in(CONCAT11(param_2 >> 8 & *(unaff_EDI + 1), param_2));\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    bVar30 = in_CF == false;\n    if (!bVar30 && !uVar32) {\ncode_r0x009ee1ce:\n        puStack4 = 0x9ee1d3;\n        func_0x009ee154();\n        do {\n            uStack11 = uStack22;\n            uStack12 = uStack23;\n            uStack24 = 0x3b;\n            uStack23 = 0xe2;\n            uStack22 = 0x9e;\n            uStack21 = 0;\n            fcn.009ee21d();\n            uStack24 = 0x4d;\n            uStack23 = 0xe2;\n            uStack22 = 0x9e;\n            uStack21 = 0;\n            func_0x009ee28b();\n            uStack24 = 0x53;\n            uStack23 = 0xe2;\n            uStack22 = 0x9e;\n            uStack21 = 0;\n            ppuVar24 = &stack0x000096cd;\n            func_0x009ee275();\n            in(extraout_DX_00);\n            uVar3 = extraout_DX_00 >> 8;\n            *unaff_EDI = *unaff_EDI | uVar3;\n            cVar4 = '\\x16';\n            do {\n                unaff_EBP = unaff_EBP + -1;\n                ppuVar24 = ppuVar24 + -1;\n                *ppuVar24 = *unaff_EBP;\n                cVar4 = cVar4 + -1;\n            } while ('\\0' < cVar4);\n            *(extraout_ECX_03 + 0x70) = *(extraout_ECX_03 + 0x70) & uVar3;\n            *in_EAX = in_FPUControlWord;\n            in_EAX[2] = in_FPUStatusWord;\n            in_EAX[4] = in_FPUTagWord;\n            *(in_EAX + 10) = in_FPUDataPointer;\n            *(in_EAX + 6) = in_FPUInstructionPointer;\n            in_EAX[9] = in_FPULastInstructionOpcode;\n            *in_EAX = 0;\n            unaff_EDI = 0x27fa2038;\n            unaff_EBP = &stack0x000096cd;\n        } while( true );\n    }\n    while( true ) {\n        if (bVar30 || uVar32) goto code_r0x009ee1ce;\n        uVar3 = unaff_EBX;\n        if (bVar38 != bVar35) break;\n        *0x870ff593 = *0x870ff593 + in_EAX;\n        *param_2 = in_ES;\n        bVar30 = CARRY1(*unaff_EBX, uVar3);\n        bVar38 = SCARRY1(*unaff_EBX, uVar3);\n        *unaff_EBX = *unaff_EBX + uVar3;\n        bVar35 = *unaff_EBX < '\\0';\n        uVar32 = *unaff_EBX == 0;\n    }\n    if (bVar38 != bVar35) {\n        *unaff_EBX = *unaff_EBX + uVar3;\n        *unaff_EBX = *unaff_EBX + uVar3;\n        uStack23 = uStack30;\n        uStack22 = uStack30 >> 8;\n        uStack21 = uStack28;\n        uStack20._0_1_ = uStack28 >> 8;\n        puVar10 = *unaff_ESI;\n        iVar15 = 0xf;\n        if (uVar19 != 0) {\n            for (; uVar19 >> iVar15 == 0; iVar15 = iVar15 + -1) {\n            }\n        }\n        pcStack60 = fcn.009ee04e;\n        fcn.009ee021();\n        pcStack60 = 0x9ee053;\n        uVar32 = fcn.009ee0e0();\n        out(extraout_DX, uVar32);\n        *puVar10 = *puVar10 >> (param_2 & 0x1f);\n        out(puVar10, uVar3);\n        return unaff_EBX;\n    }\n    if (uVar32 || bVar38 != bVar35) {\n        pcVar2 = swi(1);\n        puVar12 = (*pcVar2)();\n        return puVar12;\n    }\n    uVar13 = unaff_EBX / *in_EAX & 0xff | unaff_EBX % *in_EAX << 8;\n    pcVar2 = swi(4);\n    if (bVar38 == true) {\n        uVar40 = (*pcVar2)();\n        param_2 = uVar40 >> 0x20;\n        uVar13 = uVar40;\n        uVar20 = extraout_ECX_02;\n        in_ST0 = extraout_ST0_01;\n    }\n    piVar17 = uVar20 >> 0x18 | (uVar20 & 0xff0000) >> 8 | (uVar20 & 0xff00) << 8 | uVar20 << 0x18;\ncode_r0x009af7d9:\n    Var18 = uVar13 >> 8;\n    if (uVar32) {\n        in_EAX = in_EAX & 0xffffff00 | uVar13 & 0xff;\n        uVar13 = Var18 << 8;\n        goto code_r0x009af7f8;\n    }\n    in_EAX = in_EAX & 0xffffff00 | uVar13 & 0xff;\n    uVar14 = (Var18 << 8) >> 0x10;\n    ppuVar26 = unaff_ESI;\n    piVar27 = unaff_EDI;\n    while( true ) {\n        ppuVar41 = unaff_EBP + 0x14;\n        uVar20 = -in_EAX;\n        bVar35 = (POPCOUNT(uVar20 & 0xff) & 1U) != 0;\n        if (bVar35) {\n            uVar20 = uVar20 & 0xffff0000 | uVar20 ^ 1 << (ppuVar41 & 0xf);\n        }\n        else {\n            if (bVar35) {\n                *(unaff_EBP + 0x46cbac8e) = *(unaff_EBP + 0x46cbac8e) ^ 0x84;\n    // WARNING: Bad instruction - Truncating control flow here\n                halt_baddata();\n            }\n            uVar20 = uVar20 & 0xffff0000 | uVar20 ^ 1 << (ppuVar41 & 0xf);\n        }\n        bVar35 = ppuVar26 < ppuVar41;\n        bVar38 = (POPCOUNT(ppuVar26 - ppuVar41 & 0xff) & 1U) == 0;\n        if (bVar35 || ppuVar26 - ppuVar41 == 0) break;\n        uVar20 = uVar20 & 0xffff0000 | CONCAT11(0x1f, uVar20);\n        if (bVar35) {\n            if (bVar35) {\n                iVar7 = 0;\n                if (param_2 != NULL) {\n                    for (; (param_2 >> iVar7 & 1) == 0; iVar7 = iVar7 + 1) {\n                    }\n                }\n                uVar20 = uVar20 + 1;\n                uVar20 = uVar20 >> 0x18 | (uVar20 & 0xff0000) >> 8 | (uVar20 & 0xff00) << 8 | uVar20 * 0x1000000;\n            }\n        }\n        else {\n            iVar7 = 0;\n            if (param_2 != NULL) {\n                for (; (param_2 >> iVar7 & 1) == 0; iVar7 = iVar7 + 1) {\n                }\n            }\n            uVar20 = uVar20 + 1;\n            uVar20 = uVar20 >> 0x18 | (uVar20 & 0xff0000) >> 8 | (uVar20 & 0xff00) << 8 | uVar20 * 0x1000000;\n        }\n        uVar20 = -uVar20;\n        uVar29 = param_2;\n        uVar3 = *piVar27 + uVar29;\n        uVar16 = uVar3;\n        uVar13 = CONCAT14(CARRY1(*piVar27, uVar29), unaff_retaddr * 2) >> 5;\n        uVar21 = uVar13 | unaff_retaddr << 0x1d;\n        if ((uVar3 == 0) || (uVar3 != 0)) {\n            uVar21 = uVar13 & 0xffffff00 | unaff_retaddr << 0x1d | uVar3;\n            iVar15 = uVar3 + 0xcf53;\n            uVar20 = CONCAT22(0xfeb2, iVar15);\n            if ((-1 >= iVar15) && (-1 < iVar15)) goto code_r0x009afa7c;\n        }\n        uVar34 = uVar21 + 1;\n        uVar21 = uVar21 & 0xffffff00 | uVar34;\n        bVar35 = (uVar3 & 0x1f) == 0;\n        if (bVar35 && uVar34 < '\\0' || !bVar35 && ~(uVar20 & 0xffff0000 | unaff_retaddr & 0xffff) << (uVar3 & 0x1f) < 0)\n        goto code_r0x009afa7c;\n        puStack4 = 0x9af966;\n        uVar39 = func_0x009af9d8();\n        puStack4 = 0xd76899fe;\n        uVar39 = uVar39 & 0x8f7c1585 |\n                 ((uVar39 & 0xffff00008f7c1585) >> 0x20 |\n                 CONCAT11(uVar39 >> 0x28 | *(ppuVar26 * 2 + -0x2c13c5c), uVar39 >> 0x20)) << 0x20;\n        unaff_EDI = piVar27 + bVar31 * -2 + 1;\n        unaff_ESI = ppuVar26 + bVar31 * -2 + 1;\n        uVar29 = SBORROW4(*ppuVar26, *piVar27);\n        uVar3 = *ppuVar26 - *piVar27 < 0;\n        pcVar2 = swi(4);\n        in_ST0 = extraout_ST0;\n        if (uVar29 == true) {\n            uVar39 = (*pcVar2)();\n            in_ST0 = extraout_ST0_00;\n        }\n        param_2 = uVar39 >> 0x20;\n        puVar10 = uVar39;\n        uVar20 = 0;\n        uVar32 = param_2 == NULL;\n        if (!uVar32) {\n            for (; (param_2 >> uVar20 & 1) == 0; uVar20 = uVar20 + 1) {\n            }\n        }\n        *unaff_ESI = puVar10;\n        in_EAX = unaff_EDI + -0x89;\n        uVar13 = puVar10 & 0xffff0000 | uVar20 & 0xffff;\n        piVar17 = (puVar10 & 0xffff) << 0x19 | (uVar20 & 0xffff0000 | puVar10 & 0xffff) >> 7;\n        if ((uVar32 || (uVar29 & 1) != uVar3) || (!uVar32 && (uVar29 & 1) == uVar3)) goto code_r0x009af7d9;\ncode_r0x009af7f8:\n        ppuVar26 = unaff_ESI & *(in_EAX + -0xd8f6d15);\n        in_NT = (unaff_retaddr & 0x4000) != 0;\n        bVar31 = (unaff_retaddr & 0x400) != 0;\n        in_IF = (unaff_retaddr & 0x200) != 0;\n        in_TF = (unaff_retaddr & 0x100) != 0;\n        in_AF = (unaff_retaddr & 0x10) != 0;\n        in_ID = (unaff_retaddr & 0x200000) != 0;\n        in_AC = (unaff_retaddr & 0x40000) != 0;\n        in_VIP = 0;\n        in_VIF = 0;\n        piVar27 = unaff_EDI + bVar31 * -2 + 1;\n        uVar32 = in(param_2);\n        *unaff_EDI = uVar32;\n        *piVar17 = ROUND(in_ST0);\n        uVar14 = uVar13 >> 0x10;\n    }\n    puStack4 = 0x9b014c;\n    uVar13 = 0xe45b8dad;\n    uVar20 = CONCAT22(uVar14, 0x4e9a) >> 5;\n    if ((!bVar38) && (bVar38)) {\n        if (ppuVar41 <= ppuVar26) goto code_r0x009b0169;\n        uVar3 = uVar20 + 0xb5;\n        pcVar6 = CONCAT22(uVar14, 0x4e9a) << 0x1b | uVar20 & 0xffffff00 | uVar3;\n        *pcVar6 = *pcVar6 + uVar3;\n        *pcVar6 = *pcVar6 + uVar3;\n        goto code_r0x009b001c;\n    }\n    uStack8 = SUB41(unaff_EBP, 0);\n    uStack7 = unaff_EBP >> 8;\n    uStack5 = unaff_EBP >> 0x18;\n    puVar12 = (unaff_EBP + 0x10) - unaff_EBP;\n    if (SBORROW4(unaff_EBP + 0x10, unaff_EBP)) {\n        iVar7 = 0;\n        if (ppuVar26 != NULL) {\n            for (; (ppuVar26 >> iVar7 & 1) == 0; iVar7 = iVar7 + 1) {\n            }\n        }\n    }\n    else {\n        iVar7 = 0;\n        if (ppuVar26 != NULL) {\n            for (; (ppuVar26 >> iVar7 & 1) == 0; iVar7 = iVar7 + 1) {\n            }\n        }\n    }\n    uStack12 = 0xa2;\n    uStack11 = 2;\n    uStack10 = 0x9b;\n    uStack9 = 0;\n    // WARNING: Call to offcut address within same function\n    cVar4 = func_0x009b02a3();\n    if (cVar4 + '\\b' < '\\0') {\n        while( true ) {\n            uStack12 = 0xd4;\n            uStack11 = 2;\n            uStack10 = 0x9b;\n            uStack9 = 0;\n            pcVar6 = fcn.009b034a();\n            piVar27 = piVar27 + ppuVar26;\n            puVar9 = segment(in_DS, puVar12 + piVar27);\n            in_DS = *puVar9;\n            if (-1 < extraout_ECX + 1) break;\n            *pcVar6 = *pcVar6 + pcVar6;\n        }\n        *0xf66e8c4b = 0x9b02ea;\n        puVar25 = func_0x7f83ff0e();\n        *puVar25 = *puVar25 + puVar25;\n        *puVar12 = *puVar12 + extraout_CH;\n        return puVar25;\n    }\n    uStack12 = 0xed;\n    uStack11 = 2;\n    uStack10 = 0x9b;\n    uStack9 = 0;\n    iVar7 = func_0x009b036b();\n    uVar20 = iVar7 - puVar12;\n    if ((POPCOUNT(uVar20 & 0xff) & 1U) == 0) {\n        bVar35 = &stack0xfffffff8 < 0xc;\n        bVar36 = SBORROW4(&stack0xfffffff8, 0xc);\n        bVar33 = &stack0xffffffec < 0;\n        bVar30 = *0x10 == 0x14;\n        bVar38 = (POPCOUNT(&stack0xffffffec & 0xff) & 1U) == 0;\n        goto code_r0x009b0680;\n    }\n    bVar35 = &stack0xfffffff8 < 0xc;\n    bVar36 = SBORROW4(&stack0xfffffff8, 0xc);\n    bVar33 = &stack0xffffffec < 0;\n    bVar30 = *0x10 == 0x14;\n    bVar38 = (POPCOUNT(&stack0xffffffec & 0xff) & 1U) == 0;\n    uStack24 = uStack14;\n    uStack23 = uStack14 >> 8;\n    uStack22 = uStack12;\n    uStack21 = uStack11;\n    uVar13 = uVar20;\n    piVar28 = piVar27;\ncode_r0x009b05bd:\n    while( true ) {\n        *(uVar13 - 4) =\n             (in_NT & 1) * 0x4000 | bVar36 * 0x800 | bVar31 * 0x400 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n             bVar33 * 0x80 | bVar30 * 0x40 | (in_AF & 1) * 0x10 | bVar38 * 4 | bVar35 | (in_ID & 1) * 0x200000 |\n             (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n        puVar25 = puVar12 + (uVar13 - 0x40);\n        uStack20._0_1_ = ppuVar26;\n        uStack20._1_1_ = ppuVar26 >> 8;\n        uStack18 = ppuVar26 >> 0x10;\n        *(uVar13 - 0xc) = fcn.009b05c7;\n        fcn.009b053b();\n        *(uVar13 - 0xc) = 0x9b060b;\n        fcn.009b05ee();\n        uVar19 = uStack18;\n        piVar27 = piVar28 + 1;\n        puVar12 = uStack18 << 0x10;\n        if (!SCARRY4(piVar28, 1)) break;\n        puVar12 = CONCAT22(uStack18, 0xead3);\n        *(uVar13 - 0xc) = 0x9b066d;\n        uVar39 = fcn.009b0796();\n        uVar21 = uVar39;\n        puVar8 = uVar21 + 0x4bbadd54;\n        if (uVar21 < 0xb44522ac) {\n            *piVar27 = *ppuVar26;\n            *(uVar13 - 0xc) = piVar28 + bVar31 * -2 + 2;\n            return puVar8;\n        }\n        uVar16 = 0xfbb4829;\n        uVar1 = uVar21 < 0xb44522ac;\n        uVar21 = uVar21 + 0xb14bd4ba;\n        bVar35 = puVar8 < 0x9a6f089a || uVar21 < uVar1;\n        bVar36 = SBORROW4(puVar8, -0x6590f766) != SBORROW4(uVar21, uVar1);\n        uVar20 = uVar21 - uVar1;\n        bVar33 = uVar20 < 0;\n        bVar30 = uVar20 == 0;\n        bVar38 = (POPCOUNT(uVar20 & 0xff) & 1U) == 0;\n        if (!bVar38) goto code_r0x009b0680;\n        if (bVar30) {\n            uVar14 = uVar39 >> 0x20;\n            if ((puVar8 < 0x9a6f089a || uVar21 < uVar1) || bVar30) {\n                puVar8 = ppuVar26 + 0x21;\n                *puVar8 = *puVar8 << 1 | *puVar8 < '\\0';\n                *(ppuVar26 + -0x36) = *(ppuVar26 + -0x36) << 1;\n                puVar25 = puVar25 + -1;\n                in_FPUControlWord = *(piVar28 + (uVar39 >> 0x20) * 2 + -0x50a36f);\n                if (puVar25 == NULL) {\n                    *piVar27 = *0x3fcca535;\n                    *(*puVar12 + 0x87d98b51) = *(*puVar12 + 0x87d98b51);\n                    uVar32 = in(uVar14);\n                    *(piVar28 + bVar31 * -2 + 2) = uVar32;\n                    uVar19 = 0;\n                    goto code_r0x009b06e9;\n                }\n                *0xc2 = *0xc2 | 0xc2;\n                goto code_r0x009b06bd;\n            }\n            if (!bVar30 && bVar36 == bVar33) {\n                uVar3 = in(uVar14);\n                puVar25 = puVar25 + puVar12 + bVar35;\n                uVar29 = 0;\n                uVar37 = 0;\n                uVar39 = uVar39 & 0xffffffff00000000 | uVar3 & 0xffffffffffffff01;\n                uVar34 = 0;\n                uVar32 = (uVar3 & 1) == 0;\n                uVar3 = (uVar3 & 1) == 0;\ncode_r0x009b0707:\n                puVar9 = &stack0xffffffec;\n                uStack22 = uStack20;\n                uStack21 = uStack20._1_1_;\n                goto code_r0x009b0737;\n            }\n            bVar35 = false;\n            bVar36 = false;\n            uVar13 = 0;\n            bVar33 = false;\n            bVar30 = true;\n            bVar38 = true;\n            piVar28 = piVar27;\n        }\n        else {\n            *(uVar13 - 0xc) = in_ES;\n            uVar13 = uVar20;\n            piVar28 = piVar27;\n        }\n    }\n    uVar3 = extraout_CL + 0x66;\n    uVar16 = uVar3;\n    if (&stack0xffffffec < 0) {\ncode_r0x009b06bd:\n        uVar3 = uVar16;\n        puVar11 = &stack0xffffffee;\n        uVar19 = puVar12 >> 0x10;\n    }\n    else {\n        puVar11 = uVar13 - 0x10;\n    }\n    puVar9 = puVar11 + 8;\n    uVar29 = false;\n    uVar37 = 0;\n    uVar3 = uVar3 ^ 0xea;\n    uVar34 = uVar3 < '\\0';\n    uVar32 = uVar3 == 0;\n    uVar3 = (POPCOUNT(uVar3) & 1U) == 0;\n    *(puVar11 + 4) = 0x9b072b;\n    uVar39 = fcn.009b06f9();\n    uVar16 = extraout_ECX_00;\n    if (!uVar29 && !uVar32) goto code_r0x009b0707;\n    *(puVar11 + 6) = *puVar9;\ncode_r0x009b0737:\n    puVar10 = ~uVar39;\n    *(puVar9 + -5) =\n         (in_NT & 1) * 0x4000 | (uVar37 & 1) * 0x800 | bVar31 * 0x400 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n         (uVar34 & 1) * 0x80 | (uVar32 & 1) * 0x40 | (in_AF & 1) * 0x10 | (uVar3 & 1) * 4 | uVar29 & 1 |\n         (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    *(puVar9 + -5) = ppuVar26;\n    uVar20 = CONCAT31(CONCAT22(uVar19, 0xbb76) >> 8, 0xf);\n    uVar3 = ~uVar16;\n    uVar16 = uVar16 & 0xffffff00;\n    bVar35 = (uVar20 >> (piVar27 & 0x1f) & 1) != 0;\n    if ((!bVar35 && !uVar32) && (bVar35 || uVar32)) {\n        if (-1 < (uVar20 ^ 1 << (piVar27 & 0x1f) | piVar28[0x4265a84])) {\n            *puVar10 = *puVar10 << 0x17 | *puVar10 >> 9;\n            *(ppuVar26 + -0x45) = *(ppuVar26 + -0x45) << 1;\n            puVar12 = puVar10 & 0xffff0000 | puVar10 + (puVar10 >> 8) * '\\x16';\n            out(*((uVar39 >> 0x20) + -0x53 + (uVar16 | uVar3) * 8), puVar12);\n            *0x5eafebc2 = *0x5eafebc2 << (uVar3 & 0x1f) | *0x5eafebc2 >> 0x20 - (uVar3 & 0x1f);\n            return puVar12;\n        }\n        uStack24 = 0x4a;\n        uStack23 = 7;\n        uStack22 = 0x9b;\n        uStack21 = 0;\n        puVar9 = func_0x578320c8();\n        *puVar9 = in_FPUControlWord;\n        uVar19 = puVar9 >> 0x10;\ncode_r0x009b06e9:\n        return &stack0xffffffe8 & 0xffff | uVar19 << 0x10;\n    }\n    uVar20 = uVar16 | uVar3 - 0x31;\n    puVar23 = puVar9 + 0x13;\n    *(puVar9 + 0x13) = fcn.009b0812;\n    func_0x009b07f3();\n    *puVar23 = 0x9b0818;\n    uVar13 = func_0x009b0838();\n    pcVar6 = uVar13 & 0xffffff00 | extraout_ECX_01 & 0xff;\n    uVar13 = extraout_ECX_01;\n    if (extraout_ECX_01 == 0) {\n        *pcVar6 = *pcVar6 + (extraout_ECX_01 & 0xff);\n        *0x6caf5c35 = *0x6caf5c35 + (uVar16 >> 8);\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    while( true ) {\n        puVar11 = piVar28 + 0x3eaff39f;\n        if (uVar20 != 0x4b3f2ba0 && SCARRY4(uVar20, -0x4b3f2ba0) == uVar20 + 0xb4c0d460 < 0) {\n            do {\n                *(puVar23 + -4) = 0x9b093a;\n                fcn.009b224f();\n                puVar23 = puVar23 + *(ppuVar26 + -0x6b);\n                *(uVar20 + 0x882784de) = *(uVar20 + 0x882784de);\n            } while( true );\n        }\n        uVar3 = (uVar13 & 0x1f) % 0x11;\n        uVar13 = ((puVar11 >> (puVar11 & 0xf) & 1) != 0) << 0x10 | puVar11 & 0xffff;\n        uVar13 = (puVar11 & 0xffff0000 | uVar13 >> uVar3 | uVar13 << 0x11 - uVar3) & ~(1 << (puVar23 & 0x1f));\n        uVar13 = uVar13 & 0xffffff00 | uVar13 + 1;\n        uVar20 = *(uVar20 + 0x9afaab);\n        if (!SBORROW4(puVar23, 10)) break;\n        if (SBORROW4(puVar23, 10)) {\n            *(puVar23 + -9) = uVar13;\n            goto code_r0x009b0981;\n        }\n        *(puVar23 + -0xe) = uVar13;\n        *(puVar23 + -0x12) = in_DS;\n        puVar22 = puVar23 + -0x16;\n        puVar23 = puVar23 + -0x16;\n        *puVar22 = in_ES;\n        uVar13 = 0xb0;\n    }\n    *(puVar23 + -9) = uVar13;\ncode_r0x009b0981:\n    cVar4 = 0xa4ecac5e < uVar20;\n    iVar15 = 0;\n    bVar35 = ppuVar26 != 0;\n    if (bVar35) {\n        for (; (ppuVar26 >> iVar15 & 1) == 0; iVar15 = iVar15 + 1) {\n        }\n    }\n    if (bVar35) {\n        puVar11 = ppuVar26 - 0x23;\n        uVar13 = puVar11 & 0xffff0000 | CONCAT11((puVar11 >> 8) << 1, puVar11);\n    }\n    else {\n        if (bVar35) {\n            *(puVar23 + -0xc) = 0x9b0d57;\n            uVar20 = fcn.009b0d86();\n            *(puVar23 + -0xc) = in_ES;\n            *((uVar20 & 0xffffff00 | uVar20 + -0x6b + cVar4) + 0x865f9f68) = in_CS;\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        puVar11 = ppuVar26 - 0x23;\n        uVar13 = puVar11 & 0xffff0000 | CONCAT11((puVar11 >> 8) << 1, puVar11);\n    }\n    *(puVar25 + -4) = uVar20 + 0x5b1353a1;\n    return ~(uVar13 >> 0x18 | (uVar13 & 0xff0000) >> 8 | (uVar13 & 0xff00) << 8 | uVar13 << 0x18);\ncode_r0x009b0680:\n    piVar28 = piVar27;\n    uVar13 = uVar20;\n    uStack24 = uStack14;\n    uStack23 = uStack14 >> 8;\n    uStack22 = uStack12;\n    uStack21 = uStack11;\n    goto code_r0x009b05bd;\ncode_r0x009afa7c:\n    iVar7 = ((uVar16 + piVar27 >> 8 & 0xff) << 8 | (~(uVar16 + piVar27) << 0x18) >> 8) << 8;\n    uStack20._0_1_ = uVar21 + -10;\n    uVar20 = uVar21 & 0xffffff00;\n    uStack8 = 0xdb;\n    uStack7 = CONCAT22(iVar7 >> 0x10, 0x60db) >> 8;\n    uStack5 = iVar7 >> 0x18;\n    uStack11 = 0;\n    uStack10 = 0;\n    uStack16 = SUB42(param_2, 0);\n    uStack14 = param_2 >> 0x10;\n    uStack20._1_1_ = uVar20 >> 8;\n    uStack18 = uVar20 >> 0x10;\n    uVar34 = uVar21 - 0xb;\n    uVar21 = uVar20 | uVar34;\n    iVar7 = 0;\n    bVar35 = piVar27 == NULL;\n    if (!bVar35) {\n        for (; (piVar27 >> iVar7 & 1) == 0; iVar7 = iVar7 + 1) {\n        }\n    }\n    if (bVar35) {\n        iVar7 = 0;\n        if (*0x10 != NULL) {\n            for (; (*0x10 >> iVar7 & 1) == 0; iVar7 = iVar7 + 1) {\n            }\n        }\n        uVar19 = iVar7 >> 0x10;\n        goto code_r0x009afa53;\n    }\n    if (!bVar35) {\n        iVar7 = 0;\n        if (*0x10 != NULL) {\n            for (; (*0x10 >> iVar7 & 1) == 0; iVar7 = iVar7 + 1) {\n            }\n        }\n        uVar19 = iVar7 >> 0x10;\ncode_r0x009afa53:\n        Var18 = &stack0xffffffec >> 8 & 0xff;\n        bVar30 = SCARRY1(uVar29, uVar34);\n        uVar29 = uVar29 + uVar34;\n        bVar38 = uVar29 < '\\0';\n        bVar31 = uVar29 == 0;\n        uVar20 = uVar20 | bVar30 == bVar38;\n        uStack24 = 0xcf;\n        uStack23 = Var18;\n        uStack22 = uVar19;\n        uStack21 = (uVar19 << 0x10) >> 0x18;\n        uVar5 = CONCAT31(Var18, 0xcf);\n        puVar12 = CONCAT22(uVar19, uVar5 >> 5 | uVar5 << 0xb);\n        bVar35 = false;\n        uVar13 = param_2 & 0xffffff00 | uVar29;\n        ppuVar41 = ppuVar26;\n        uStack12 = uVar3;\n        uStack9 = uStack20._1_1_;\n        puStack4 = param_2;\n        if (!bVar31 && bVar30 == bVar38) goto code_r0x009afef3;\n        while (bVar31 || bVar30 != bVar38) {\ncode_r0x009afef3:\n            uVar13 = puVar12 & 0xffff0000 | uVar20 * 4 & 0xffff;\n            uVar29 = uVar16;\n            uVar3 = uVar29 & 0x1f;\n            uVar21 = uVar13 << uVar3;\n            bVar31 = (uVar16 & 0x1f) != 0;\n            uVar34 = !bVar31 & bVar35 | (bVar31 && uVar13 << uVar3 - 1 < 0);\n            if (uVar3 != 1 & SCARRY4(piVar27, 1) | uVar3 == 1 & (uVar34 ^ uVar21 < 0)) {\n                uVar3 = (uVar29 & 0x1f) % 0x11;\n                uVar13 = uVar34 << 0x10 | uVar21 & 0xffff;\n                uVar13 = uVar13 >> uVar3 | uVar13 << 0x11 - uVar3;\n            }\n            else {\n                uVar3 = (uVar29 & 0x1f) % 0x11;\n                uVar13 = uVar34 << 0x10 | uVar21 & 0xffff;\n                uVar13 = uVar13 >> uVar3 | uVar13 << 0x11 - uVar3;\n            }\n            uVar3 = (uVar13 & 0x10000) != 0;\n            uVar13 = 0x9afeb3;\n            pcVar6 = func_0x009afec9();\n            uVar19 = uVar3;\n            while (*ppuVar26 = *ppuVar26 + uVar3 * ((pcVar6 & 3) - (*ppuVar26 & 3)), \n                  (POPCOUNT(&stack0xffffffb0 & 0xff) & 1U) != 0) {\n                ppuStack80._0_1_ = in_SS >> 8;\n                ppuStack80 = ppuStack80 & 0xffffff00 | ppuStack80;\n                *pcVar6 = *pcVar6 + pcVar6;\n                puVar25 = (uVar20 * 4 & 0xffff0000 | puVar12 + uVar19 * ((ppuVar26 & 3) - (puVar12 & 3))) - 0xd;\n                uVar29 = pcVar6 >> 8;\n                uVar3 = CARRY1(*puVar25, uVar29);\n                *puVar25 = *puVar25 + uVar29;\n            }\n            piVar27 = 0xd;\n            puVar12 = uVar13 & 0xffffff00 | *0x808f0f;\n            bVar35 = CARRY1(*puVar12, *0x808f0f);\n            bVar30 = SCARRY1(*puVar12, *0x808f0f);\n            *puVar12 = *puVar12 + *0x808f0f;\n            bVar38 = *puVar12 < '\\0';\n            uVar16 = pcStack60;\n            uVar13 = uStack64;\n            uVar20 = uStack68;\n            unaff_EBP = ppuStack76;\n            ppuVar26 = ppuStack80;\n            bVar31 = *puVar12 == 0;\n        }\n        pcStack60 = 0x9afedf;\n        uVar3 = uVar16 + 0x66;\n        if (uVar13 * 4 + 1 < 0) {\n            uVar19 = (uVar20 & 0xff00 | uVar20 - 1) ^ piVar27;\n            uVar20 = uVar20 & 0xffff0000 | uVar19 & 0xff | -(uVar19 >> 8) << 8;\n        }\n        else {\n            uVar19 = (uVar20 & 0xff00 | uVar20 - 1) ^ piVar27;\n            uVar20 = uVar20 & 0xffff0000 | uVar19 & 0xff | -(uVar19 >> 8) << 8;\n        }\n        uVar29 = uVar3 ^ 0xea;\n        uVar13 = (uVar16 & 0xffffff00 | uVar3) ^ 0xea;\n        bVar35 = (POPCOUNT(uVar29) & 1U) == 0;\n        uVar19 = uVar20 >> 0x18 | uVar20 >> 8 & 0xff00;\n        uVar29 = uVar29 & 0xf;\n        uVar20 = CONCAT22(((uVar20 & 0xff00) << 8) >> 0x10 | (uVar20 << 0x18) >> 0x10, \n                          uVar19 >> uVar29 | uVar19 << 0x10 - uVar29);\n        if (((bVar35) && (!bVar35)) || (uVar13 = uVar16 & 0xffffff00 | uVar13 & 0xff,  bVar35)) {\n            iVar7 = 0x1f;\n            if (uVar20 != 0) {\n                for (; uVar20 >> iVar7 == 0; iVar7 = iVar7 + -1) {\n                }\n            }\n            uVar13 = uVar13 + unaff_EBP & 0xffff0000 | CONCAT11(ppuVar41, uVar13 + unaff_EBP);\n        }\n        else {\n            if (bVar35) {\n    // WARNING: Bad instruction - Truncating control flow here\n                halt_baddata();\n            }\n            iVar7 = 0x1f;\n            if (uVar20 != 0) {\n                for (; uVar20 >> iVar7 == 0; iVar7 = iVar7 + -1) {\n                }\n            }\n            uVar13 = uVar13 + unaff_EBP & 0xffff0000 | CONCAT11(ppuVar41, uVar13 + unaff_EBP);\n        }\n        if (&stack0xffffffd0 < 0xe || *0x10 == 0x3e) {\n            for (iVar15 = 0; (0x751dU >> iVar15 & 1) == 0; iVar15 = iVar15 + 1) {\n            }\n        }\n        else {\n            for (iVar15 = 0; (0x751dU >> iVar15 & 1) == 0; iVar15 = iVar15 + 1) {\n            }\n        }\n        uVar13 = uVar13 + 0xef;\n        pcVar6 = ppuVar26 * 4;\ncode_r0x009b001c:\n        if (-pcVar6 < 0) {\n            uVar20 = uVar13 & 0xffff0000 | ppuVar26 & 0xffff;\n        }\n        else {\n            uVar20 = uVar13 & 0xffff0000 | ppuVar26 & 0xffff;\n        }\n        uStack7 = uVar20 >> 0x10;\n        uStack8 = uVar20 >> 8;\n        uStack12 = 0x6b;\n        uStack11 = 0;\n        uStack10 = 0x9b;\n        uStack9 = 0;\n        fcn.009b0050();\n        uStack8 = extraout_DL;\ncode_r0x009b0169:\n        unaff_EBP[-1] = 0x9b0130;\n        uVar40 = fcn.009b0173();\n        uVar20 = piVar27 ^ *((uVar40 >> 0x20) + 0x7cba4f28);\n        puVar12 = uVar40 & 0xffff0000 |\n                  CONCAT11((uVar20 < 0) << 7 | (uVar20 == 0) << 6 | in_AF << 4 |\n                           ((POPCOUNT(uVar20 & 0xff) & 1U) == 0) << 2, uVar40) | 0x200;\n        *unaff_EBP = puVar12;\n        return puVar12;\n    }\n    out(*ppuVar26, uStack16);\n    in(0x7a);\n    ppuVar26 = ppuVar26 + bVar31 * -2 + 1;\n    goto code_r0x009afa7c;\n}\n",
        "token_count": 11390
    },
    "009b047c": {
        "rules": [
            "decompress data using LZO/83f2e70ad753438b83eb63e4275895e9",
            "decompress data using LZO/83f2e70ad753438b83eb63e4275895e9",
            "decompress data using LZO/83f2e70ad753438b83eb63e4275895e9"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009b0604) overlaps instruction at (ram,0x009b0601)\n// \n// WARNING: Control flow encountered bad instruction data\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Removing unreachable block (ram,0x009b0831)\n\nuint64_t fcn.009b047c(void)\n\n{\n    uint8_t *puVar1;\n    uint32_t uVar2;\n    int16_t iVar3;\n    unkbyte6 Var4;\n    uint16_t uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint32_t *puVar8;\n    char *pcVar9;\n    char extraout_CL;\n    char extraout_CL_00;\n    uint8_t uVar10;\n    uint32_t uVar11;\n    uint32_t extraout_ECX;\n    uint extraout_ECX_00;\n    uint32_t uVar12;\n    uint32_t extraout_ECX_01;\n    ushort uVar13;\n    int32_t iVar14;\n    uint uVar15;\n    uint8_t *puVar16;\n    ushort uVar17;\n    uint8_t **ppuVar18;\n    uint8_t **ppuVar19;\n    uint *puVar20;\n    ushort *puVar21;\n    uint *puVar22;\n    uint8_t *unaff_EBP;\n    uchar *unaff_ESI;\n    uchar *unaff_EDI;\n    uchar *puVar23;\n    ushort in_ES;\n    ushort in_CS;\n    ushort in_DS;\n    bool bVar24;\n    uint8_t uVar25;\n    char cVar26;\n    uint8_t in_PF;\n    bool bVar27;\n    uint8_t in_AF;\n    bool in_ZF;\n    bool bVar28;\n    uchar uVar29;\n    uint8_t in_SF;\n    bool bVar30;\n    uint8_t uVar31;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_OF;\n    bool bVar32;\n    uint8_t uVar33;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    ushort in_FPUControlWord;\n    uint64_t uVar34;\n    ulong uVar35;\n    uint32_t uStack4;\n    \n    if (in_ZF) {\n        uStack4 = (in_NT & 1) * 0x4000 | (in_OF & 1) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n                  (in_SF & 1) * 0x80 | (in_ZF & 1) * 0x40 | (in_AF & 1) * 0x10 | (in_PF & 1) * 4 |\n                  (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    }\n    else {\n        uStack4 = (in_NT & 1) * 0x4000 | (in_OF & 1) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n                  (in_SF & 1) * 0x80 | (in_ZF & 1) * 0x40 | (in_AF & 1) * 0x10 | (in_PF & 1) * 4 |\n                  (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    }\n    fcn.009b0498();\n    ppuVar18 = &uStack4;\n    fcn.009b05c7();\n    cVar26 = extraout_CL;\n    while( true ) {\n        puVar23 = unaff_EDI + 1;\n        uVar17 = *ppuVar18 >> 0x10;\n        if (!SCARRY4(unaff_EDI, 1)) break;\n        puVar16 = CONCAT22(uVar17, 0xead3);\n        ppuVar18[-1] = 0x9b066d;\n        uVar34 = fcn.009b0796();\n        iVar14 = uVar34 >> 0x20;\n        uVar12 = uVar34;\n        uVar6 = uVar12 + 0x4bbadd54;\n        if (uVar12 < 0xb44522ac) {\n            *puVar23 = *unaff_ESI;\n            ppuVar18[-1] = unaff_EDI + 2;\n            ppuVar19 = ppuVar18[-1] + 4;\n            goto code_r0x009b06b6;\n        }\n        uVar11 = 0xfbb4829;\n        uVar2 = uVar12 < 0xb44522ac;\n        uVar12 = uVar12 + 0xb14bd4ba;\n        bVar24 = uVar6 < 0x9a6f089a || uVar12 < uVar2;\n        bVar32 = SBORROW4(uVar6, -0x6590f766) != SBORROW4(uVar12, uVar2);\n        uVar7 = uVar12 - uVar2;\n        bVar30 = uVar7 < 0;\n        bVar28 = uVar7 == 0;\n        bVar27 = (POPCOUNT(uVar7 & 0xff) & 1U) == 0;\n        if (bVar27) {\n            if (bVar28) {\n                uVar13 = uVar34 >> 0x20;\n                if ((uVar6 < 0x9a6f089a || uVar12 < uVar2) || bVar28) {\n                    puVar1 = unaff_ESI + 0x21;\n                    *puVar1 = *puVar1 << 1 | *puVar1 < '\\0';\n                    unaff_ESI[-0x36] = unaff_ESI[-0x36] << 1;\n                    unaff_EBP = unaff_EBP + -1;\n                    in_FPUControlWord = *(unaff_EDI + iVar14 * 2 + -0x50a36f);\n                    if (unaff_EBP != NULL) {\n                        *0xc2 = *0xc2 | 0xc2;\n                        puVar8 = ppuVar18;\n                        goto code_r0x009b06bd;\n                    }\n                    uVar15 = 0xfbb482a;\n                    *puVar23 = *0x3fcca535;\n                    *(*puVar16 + 0x87d98b51) = *(*puVar16 + 0x87d98b51);\n                    uVar29 = in(uVar13);\n                    unaff_EDI[2] = uVar29;\n                    uVar5 = 0;\n                    goto code_r0x009b06e9;\n                }\n                if (!bVar28 && bVar32 == bVar30) {\n                    uVar10 = in(uVar13);\n                    unaff_EBP = unaff_EBP + puVar16 + bVar24;\n                    uVar25 = 0;\n                    uVar33 = 0;\n                    uVar34 = uVar34 & 0xffffffff00000000 | uVar10 & 0xffffffffffffff01;\n                    uVar31 = 0;\n                    uVar29 = (uVar10 & 1) == 0;\n                    uVar10 = (uVar10 & 1) == 0;\n                    goto code_r0x009b0707;\n                }\n                bVar24 = false;\n                bVar32 = false;\n                uVar7 = 0;\n                bVar30 = false;\n                bVar28 = true;\n                bVar27 = true;\n            }\n            else {\n                *(ppuVar18 + -1) = in_ES;\n            }\n        }\n        else {\n            ppuVar18[-1] = *(ppuVar18 + 6);\n        }\n        *(uVar7 - 4) = (in_NT & 1) * 0x4000 | bVar32 * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | bVar30 * 0x80\n                       | bVar28 * 0x40 | (in_AF & 1) * 0x10 | bVar27 * 4 | bVar24 | (in_ID & 1) * 0x200000 |\n                       (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n        unaff_EBP = puVar16 + (uVar7 - 0x40);\n        *(uVar7 - 8) = unaff_ESI;\n        *(uVar7 - 0xc) = fcn.009b05c7;\n        fcn.009b053b();\n        in_ES = *(uVar7 - 8);\n        ppuVar18 = uVar7 - 4;\n        *(uVar7 - 8) = 0x9b060b;\n        fcn.009b05ee();\n        unaff_EDI = puVar23;\n        cVar26 = extraout_CL_00;\n    }\n    puVar16 = *ppuVar18 & 0xffff0000;\n    uVar10 = cVar26 + 0x66;\n    uVar11 = uVar10;\n    puVar8 = ppuVar18 + -10;\n    if (ppuVar18 + -10 < 0) {\ncode_r0x009b06bd:\n        uVar10 = uVar11;\n        uVar17 = puVar16 >> 0x10;\n        puVar8 = puVar8 + 2;\n    }\n    else {\n        puVar8 = ppuVar18 + -2;\n    }\n    ppuVar18 = puVar8 + 2;\n    uVar25 = false;\n    uVar33 = 0;\n    uVar10 = uVar10 ^ 0xea;\n    uVar31 = uVar10 < '\\0';\n    uVar29 = uVar10 == 0;\n    uVar10 = (POPCOUNT(uVar10) & 1U) == 0;\n    puVar8[1] = 0x9b072b;\n    uVar34 = fcn.009b06f9();\n    uVar11 = extraout_ECX;\n    if (uVar25 || uVar29) {\n        *(puVar8 + 6) = *ppuVar18;\n    }\n    else {\ncode_r0x009b0707:\n        *(ppuVar18 + -2) = *ppuVar18;\n    }\n    puVar8 = ~uVar34;\n    *(ppuVar18 + -5) =\n         (in_NT & 1) * 0x4000 | (uVar33 & 1) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | (uVar31 & 1) * 0x80 |\n         (uVar29 & 1) * 0x40 | (in_AF & 1) * 0x10 | (uVar10 & 1) * 4 | uVar25 & 1 | (in_ID & 1) * 0x200000 |\n         (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    *(ppuVar18 + -5) = unaff_ESI;\n    uVar12 = CONCAT31(CONCAT22(uVar17, 0xbb76) >> 8, 0xf);\n    uVar10 = ~uVar11;\n    uVar11 = uVar11 & 0xffffff00;\n    bVar24 = (uVar12 >> (puVar23 & 0x1f) & 1) != 0;\n    if ((!bVar24 && !uVar29) && (bVar24 || uVar29)) {\n        if (-1 < (uVar12 ^ 1 << (puVar23 & 0x1f) | *(unaff_EDI + 0x10996a10))) {\n            *puVar8 = *puVar8 << 0x17 | *puVar8 >> 9;\n            unaff_ESI[-0x45] = unaff_ESI[-0x45] << 1;\n            uVar12 = puVar8 + (puVar8 >> 8) * '\\x16';\n            Var4 = *((uVar34 >> 0x20) + -0x53 + (uVar11 | uVar10) * 8);\n            out(Var4, puVar8 & 0xffff0000 | uVar12);\n            *0x5eafebc2 = *0x5eafebc2 << (uVar10 & 0x1f) | *0x5eafebc2 >> 0x20 - (uVar10 & 0x1f);\n            return CONCAT44(Var4, puVar8 & 0xffffff00 | uVar12) & 0xffffffffffff00ff;\n        }\n        puVar20 = ppuVar18 + 0x12;\n        ppuVar18 = ppuVar18 + 0x12;\n        *puVar20 = 0x9b074a;\n        uVar35 = func_0x578320c8();\n        iVar14 = uVar35 >> 0x20;\n        *uVar35 = in_FPUControlWord;\n        unaff_EBP = unaff_EBP + 0x1f1;\n        uVar5 = uVar35 >> 0x10;\n        uVar15 = extraout_ECX_00;\ncode_r0x009b06e9:\n        ppuVar19 = ppuVar18 + -1;\n        ppuVar18[-1] = uVar15;\n        *ppuVar18 = unaff_EBP;\n        uVar6 = ppuVar18 + -1 & 0xffff | uVar5 << 0x10;\ncode_r0x009b06b6:\n        *(ppuVar19 + -4) = *(ppuVar19 + 4);\n        return CONCAT44(iVar14, uVar6);\n    }\n    uVar12 = uVar11 | uVar10 - 0x31;\n    puVar22 = ppuVar18 + 0x13;\n    *(ppuVar18 + 0x13) = fcn.009b0812;\n    func_0x009b07f3();\n    *puVar22 = 0x9b0818;\n    uVar35 = func_0x009b0838();\n    uVar15 = uVar35 >> 0x20;\n    pcVar9 = uVar35 & 0xffffff00 | extraout_ECX_01 & 0xff;\n    uVar6 = extraout_ECX_01;\n    if (extraout_ECX_01 == 0) {\n        *pcVar9 = *pcVar9 + (extraout_ECX_01 & 0xff);\n        *0x6caf5c35 = *0x6caf5c35 + (uVar11 >> 8);\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    while( true ) {\n        puVar23 = unaff_EDI + 0x3eaff39f;\n        if (uVar12 != 0x4b3f2ba0 && SCARRY4(uVar12, -0x4b3f2ba0) == uVar12 + 0xb4c0d460 < 0) {\n            do {\n                *(puVar22 + -4) = 0x9b093a;\n                fcn.009b224f();\n                puVar22 = puVar22 + *(unaff_ESI + -0x6b);\n                *(uVar12 + 0x882784de) = *(uVar12 + 0x882784de);\n            } while( true );\n        }\n        uVar10 = (uVar6 & 0x1f) % 0x11;\n        uVar11 = ((puVar23 >> (puVar23 & 0xf) & 1) != 0) << 0x10 | puVar23 & 0xffff;\n        uVar11 = (puVar23 & 0xffff0000 | uVar11 >> uVar10 | uVar11 << 0x11 - uVar10) & ~(1 << (puVar22 & 0x1f));\n        uVar11 = uVar11 & 0xffffff00 | uVar11 + 1;\n        uVar12 = *(uVar12 + 0x9afaab);\n        if (!SBORROW4(puVar22, 10)) break;\n        if (SBORROW4(puVar22, 10)) {\n            *(puVar22 + -9) = uVar11;\n            goto code_r0x009b0981;\n        }\n        uVar15 = 0xd1e82cdd;\n        *(puVar22 + -0xe) = uVar11;\n        *(puVar22 + -0x12) = in_DS;\n        puVar21 = puVar22 + -0x16;\n        puVar22 = puVar22 + -0x16;\n        *puVar21 = in_ES;\n        uVar6 = 0xb0;\n    }\n    *(puVar22 + -9) = uVar11;\ncode_r0x009b0981:\n    cVar26 = 0xa4ecac5e < uVar12;\n    iVar3 = 0;\n    bVar24 = unaff_ESI != 0;\n    if (bVar24) {\n        for (; (unaff_ESI >> iVar3 & 1) == 0; iVar3 = iVar3 + 1) {\n        }\n    }\n    if (bVar24) {\n        puVar23 = unaff_ESI + -0x23;\n        uVar11 = puVar23 & 0xffff0000 | CONCAT11((puVar23 >> 8) << 1, puVar23);\n    }\n    else {\n        if (bVar24) {\n            *(puVar22 + -0xc) = 0x9b0d57;\n            uVar11 = fcn.009b0d86();\n            *(puVar22 + -0xc) = in_ES;\n            *((uVar11 & 0xffffff00 | uVar11 + -0x6b + cVar26) + 0x865f9f68) = in_CS;\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        puVar23 = unaff_ESI + -0x23;\n        uVar11 = puVar23 & 0xffff0000 | CONCAT11((puVar23 >> 8) << 1, puVar23);\n    }\n    *(unaff_EBP + -4) = uVar12 + 0x5b1353a1;\n    return CONCAT44(uVar15, ~(uVar11 >> 0x18 | (uVar11 & 0xff0000) >> 8 | (uVar11 & 0xff00) << 8 | uVar11 << 0x18));\n}\n",
        "token_count": 4391
    },
    "009aeffa": {
        "rules": [
            "check for kernel debugger via shared user data structure/3e5f0b53f7994283abe93631eebb775f"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009aef0b) overlaps instruction at (ram,0x009aef09)\n// \n\nvoid fcn.009aeffa(void)\n\n{\n    uint32_t uVar1;\n    int32_t unaff_EBP;\n    \n    fcn.009aeeda();\n    while( true ) {\n        uVar1 = fcn.009aef6c();\n        if (uVar1 >> 8 != *(unaff_EBP + 0x12af5c35)) break;\n        out(0x11, uVar1 + -0x52 + (0x140c4cf0 < uVar1));\n    }\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 176
    },
    "009cd391": {
        "rules": [
            "check for PEB NtGlobalFlag flag/02e6ad6983154968a9ea3bb4adc24b9d/10fcbce0171842839e4e3d1dbc7c6301"
        ],
        "decompiled_code": "\nvoid fcn.009cd391(void)\n\n{\n    int32_t extraout_ECX;\n    unkbyte6 Var1;\n    \n    Var1 = fcn.009cd3bd();\n    out((Var1 >> 0x20) + *(extraout_ECX + 0x68), Var1);\n    return;\n}\n",
        "token_count": 70
    },
    "009b8de2": {
        "rules": [
            "decompress data using LZO/d8e7b8e532bc4f7fa2e8bf7bf0025ad1",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.009b8de2(void)\n\n{\n    uchar *puVar1;\n    int32_t extraout_ECX;\n    uchar extraout_DH;\n    uint var_4h;\n    \n    do {\n        puVar1 = fcn.009ea034();\n        *(extraout_ECX + 0x5136a039) = *(extraout_ECX + 0x5136a039) | &stack0xfffffffc;\n        *puVar1 = extraout_DH;\n    } while( true );\n}\n",
        "token_count": 112
    },
    "009eb581": {
        "rules": [
            "decompress data using LZO/d8e7b8e532bc4f7fa2e8bf7bf0025ad1",
            "decompress data using LZO/d8e7b8e532bc4f7fa2e8bf7bf0025ad1",
            "decompress data using LZO/d8e7b8e532bc4f7fa2e8bf7bf0025ad1",
            "decompress data using LZO/d8e7b8e532bc4f7fa2e8bf7bf0025ad1",
            "decompress data using LZO/d8e7b8e532bc4f7fa2e8bf7bf0025ad1",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n\nvoid fcn.009eb581(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t unaff_EBX;\n    int32_t unaff_EBP;\n    int32_t unaff_ESI;\n    uchar uVar4;\n    char cVar5;\n    char cVar6;\n    float10 extraout_ST0;\n    unkbyte6 Var7;\n    int16_t *unaff_retaddr;\n    uchar uStack00000004;\n    ushort uStack00000005;\n    uchar uStack00000007;\n    \n    iVar2 = *(unaff_ESI + -4) + unaff_EBX;\n    iVar2 = iVar2 - (iVar2 >> 0x1f);\n    while( true ) {\n        iVar3 = *(*(unaff_EBP + -0x10) + (iVar2 >> 1) * 4);\n        cVar6 = SCARRY4(iVar3, *(unaff_EBP + 8));\n        iVar3 = iVar3 + *(unaff_EBP + 8);\n        cVar5 = iVar3 < 0;\n        uVar4 = iVar3 == 0;\n        uStack00000004 = 0x46;\n        uStack00000005 = 0x9eb6;\n        uStack00000007 = 0;\n        fcn.009b89b0();\n        uStack00000004 = 0x4b;\n        uStack00000005 = 0x9eb6;\n        uStack00000007 = 0;\n        Var7 = fcn.009eb70f();\n        out(0x76, Var7);\n        in(0x83);\n        if (!uVar4 && cVar6 == cVar5) break;\n        iVar2 = (iVar2 >> 1) + 1;\n        unaff_EBP = unaff_EBP + 1;\n    }\n    uVar1 = in(Var7 >> 0x20);\n    *(unaff_EBX * -0x62) = uVar1;\n    *unaff_retaddr = extraout_ST0;\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 489
    },
    "0099ff64": {
        "rules": [
            "decompress data using LZO/d8e7b8e532bc4f7fa2e8bf7bf0025ad1",
            "decompress data using LZO/d8e7b8e532bc4f7fa2e8bf7bf0025ad1",
            "decompress data using LZO/d8e7b8e532bc4f7fa2e8bf7bf0025ad1",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00a027e5) overlaps instruction at (ram,0x00a027e3)\n// \n// WARNING: Control flow encountered bad instruction data\n// WARNING (jumptable): Unable to track spacebase fully for stack\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Removing unreachable block (ram,0x009b0831)\n\nuint64_t __fastcall fcn.0099ff64(uint param_1, uint32_t param_2, int32_t param_3)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    code cVar3;\n    unkbyte6 Var4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t *puVar7;\n    char *pcVar8;\n    int32_t iVar9;\n    char extraout_CL;\n    char extraout_CL_00;\n    uint8_t uVar10;\n    uint32_t extraout_ECX;\n    uint extraout_ECX_00;\n    uint32_t extraout_ECX_01;\n    int32_t extraout_ECX_02;\n    uint32_t extraout_ECX_03;\n    int32_t extraout_ECX_04;\n    int32_t extraout_ECX_05;\n    ushort uVar11;\n    uint uVar12;\n    int32_t iVar13;\n    uint8_t uVar14;\n    uint32_t unaff_EBX;\n    uint8_t *puVar15;\n    ushort uVar17;\n    uint8_t **ppuVar18;\n    uint8_t **ppuVar19;\n    uint *puVar20;\n    ushort *puVar21;\n    uint *puVar22;\n    int32_t *piVar23;\n    uchar *puVar25;\n    int32_t *piVar26;\n    uint8_t *puVar27;\n    uchar *puVar28;\n    uint unaff_ESI;\n    code *pcVar29;\n    uint32_t uVar30;\n    code *pcVar31;\n    uchar *puVar33;\n    uint32_t uVar34;\n    ushort in_ES;\n    ushort in_CS;\n    ushort in_DS;\n    int32_t in_FS_OFFSET;\n    uint8_t uVar35;\n    char cVar36;\n    bool bVar37;\n    uint8_t in_AF;\n    uint8_t uVar38;\n    bool bVar39;\n    uint8_t in_TF;\n    uint8_t uVar40;\n    uint8_t in_IF;\n    uint8_t uVar41;\n    bool bVar42;\n    bool bVar43;\n    uint8_t uVar44;\n    uchar uVar45;\n    bool bVar46;\n    bool bVar47;\n    uint8_t in_NT;\n    uint8_t uVar48;\n    uint8_t in_AC;\n    uint8_t uVar49;\n    uint8_t in_VIF;\n    uint8_t uVar50;\n    uint8_t in_VIP;\n    uint8_t uVar51;\n    uint8_t in_ID;\n    uint8_t uVar52;\n    ushort in_FPUControlWord;\n    uint64_t uVar53;\n    ulong uVar54;\n    uint16_t uVar55;\n    int16_t iVar56;\n    ushort uStack318;\n    uchar *puStack316;\n    uint32_t uVar16;\n    uint *puVar24;\n    code *pcVar32;\n    \n    iVar56 = *0x10 + -4;\n    puStack316 = &stack0xfffffed8;\n    uStack318 = &stack0xfffffffc >> 0x10;\n    uVar55 = unaff_ESI;\n    uVar17 = unaff_ESI >> 0x10;\n    if (param_3 != 0) {\n        uVar34 = 0;\n        iVar9 = fcn.009b8bad();\n        param_2 = *(iVar9 + 0x7c);\n        uVar30 = *(iVar9 + 0x78) + extraout_ECX_03;\n        if (param_2 != 0) {\n            bVar37 = uVar30 < extraout_ECX_03;\n            uVar53 = fcn.00a0219d(extraout_ECX_03 & 0xffff | uVar55 << 0x10, CONCAT22(iVar56, uVar17));\n            iVar13 = uVar53 >> 0x20;\n            piVar23 = &stack0xfffffec2;\n            iVar9 = extraout_ECX_04;\n            puVar28 = &stack0xfffffffc;\n            if ((!bVar37) && (unaff_EBX = *(uVar30 + 0x14) + iVar13,  puVar28 = &stack0xfffffffc,  uVar53 < unaff_EBX))\n            {\n                iVar56 = 0xf;\n                if (piVar23 != 0) {\n                    for (; piVar23 >> iVar56 == 0; iVar56 = iVar56 + -1) {\n                    }\n                }\n                iVar13 = *(uVar30 + 0x1c) + (uVar53 - iVar13) * 4;\n                uVar53 = CONCAT44(*(uVar30 + 0x1c), iVar13);\n                uVar34 = *(iVar13 + extraout_ECX_04) + extraout_ECX_04;\n                puVar28 = &stack0xfffffffc;\n            }\ncode_r0x00a01f47:\n            param_2 = uVar53 >> 0x20;\n            uVar5 = uVar53;\n            *(piVar23 + -4) = uVar5;\n            *(piVar23 + -8) = iVar9;\n            *(piVar23 + -0xc) = param_2;\n            *(piVar23 + -0x10) = unaff_EBX;\n            *(piVar23 + -0x14) = piVar23;\n            *(piVar23 + -0x18) = puVar28;\n            *(piVar23 + -0x1c) = uVar30;\n            *(piVar23 + -0x20) = uVar34;\n            *(piVar23 + -0xc) = *(piVar23 + -0x20);\n            if (uVar34 < uVar30) goto code_r0x00a0215f;\n            *(piVar23 + -0x20) = *(piVar23 + -0x1b);\n            uVar5 = *(puVar28 + -0x14);\n            bVar37 = CARRY4(uVar30, uVar5);\n            bVar47 = SCARRY4(uVar30, uVar5);\n            uVar30 = uVar30 + uVar5;\n            *(piVar23 + -0x40) =\n                 (in_NT & 1) * 0x4000 | bVar47 * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | (uVar30 < 0) * 0x80\n                 | (uVar30 == 0) * 0x40 | (in_AF & 1) * 0x10 | ((POPCOUNT(uVar30 & 0xff) & 1U) == 0) * 4 | bVar37 |\n                 (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n            if (uVar30 <= uVar34) goto code_r0x00a0215f;\n            *(piVar23 + -4) = 0x2e;\n            *(piVar23 + -8) = uVar5 & 0xffff0000 | CONCAT11(*piVar23, uVar5);\n            *(piVar23 + -0xc) = iVar9;\n            *(piVar23 + -0x10) = param_2;\n            *(piVar23 + -0x14) = unaff_EBX;\n            *(piVar23 + -0x18) = piVar23 + -4;\n            *(piVar23 + -0x1c) = puVar28;\n            *(piVar23 + -0x20) = uVar30;\n            *(piVar23 + -0x24) = uVar34;\n            *(piVar23 + -8) = uVar34;\n            uVar34 = *(piVar23 + -0x24);\n            uVar30 = *(piVar23 + -0x20);\n            puVar28 = *(piVar23 + -0x1c);\n            puVar25 = piVar23 + -8;\n            *(piVar23 + -8) = 0xa027bd;\n            func_0x009b8c25();\n            piVar26 = puVar25 + -4;\n            *(puVar25 + -4) = 0xa027c2;\n            uVar54 = func_0x00a027a2();\n            param_2 = uVar54 >> 0x20;\n            iVar9 = uVar54;\n            piVar23 = piVar26 + 1;\n            if (iVar9 == 0) goto code_r0x0099ff3b;\n            if (iVar9 == 0) {\n                out(0xe, 0);\n                unaff_EBX = *(*piVar26 + -0x25);\n                while( true ) {\n                    puVar24 = piVar23 + -4;\n                    piVar23 = piVar23 + -4;\n                    *puVar24 = 0xa026df;\n                    uVar53 = func_0x009b8c87();\n                    uVar12 = uVar53 >> 0x20;\n                    if (uVar53 == 0) break;\n                    piVar23[-1] = piVar23;\n                    piVar23[-2] = extraout_ECX_05;\n                    piVar23[-3] = uVar12;\n                    piVar23[-4] = unaff_EBX;\n                    piVar23[-5] = piVar23;\n                    piVar23[-6] = puVar28;\n                    piVar23[-7] = uVar30;\n                    piVar23[-8] = uVar34;\n                    *(puVar28 + -4) = *(puVar28 + -4) + 1;\n                    uVar16 = *(puVar28 + -4);\n                    uVar53 = uVar53 & 0xffffffff00000000 | uVar16;\n                    uVar5 = *(uVar30 + 0x18);\n                    piVar23[-1] = uVar16;\n                    piVar23[-2] = extraout_ECX_05;\n                    piVar23[-3] = uVar12;\n                    piVar23[-4] = unaff_EBX;\n                    piVar23[-5] = piVar23;\n                    piVar23[-6] = puVar28;\n                    piVar23[-7] = uVar30;\n                    piVar23[-8] = uVar34;\n                    *(piVar23 + -0x22) = *(piVar23 + -4);\n                    iVar9 = extraout_ECX_05;\n                    if (uVar5 <= uVar16) goto code_r0x00a01f47;\n                    piVar23[-1] = *(puVar28 + -0x10);\n                }\n                uVar55 = *(unaff_EBX + *(puVar28 + -4) * 2);\n                uVar34 = *(uVar30 + 0x1c);\n                piVar23[-1] = unaff_EBX;\n                piVar23[-2] = uVar55 & 0xff |\n                              (-1 < (extraout_ECX_05 + 0xc263U & 0xffff0000 | ~(extraout_ECX_05 + 0xc263U) | uVar34)) <<\n                              8;\n                piVar23[-3] = uVar34 + uVar55 * 4;\n                piVar23[-4] = uVar12;\n                piVar23[-5] = unaff_EBX;\n                piVar23[-6] = piVar23 + -1;\n                piVar23[-7] = puVar28;\n                piVar23[-8] = uVar30;\n                piVar23[-9] = *piVar23;\n                piVar23[-5] = puVar28;\n                uVar30 = piVar23[-8];\n                puVar28 = piVar23[-7];\n                iVar9 = piVar23[-3];\n                iVar13 = *(piVar23[-5] + 8);\n                uVar53 = CONCAT44(piVar23[-4], iVar13);\n                piVar23[-1] = piVar23[-1];\n                unaff_EBX = piVar23[-1];\n                uVar34 = *(iVar13 + iVar9) + iVar13;\n                goto code_r0x00a01f47;\n            }\n            *(piVar26 + -7) = *(piVar26 + -0xf);\n            iVar9 = iVar9 - uVar34;\n            *piVar26 = iVar9;\n            piVar26[-1] = uVar34;\n            *(piVar26 + -1) = *(piVar26 + -1);\n            *(piVar26 + -2) = iVar9;\n            piVar26[-1] = 0xa04095;\n            fcn.009b8bf7();\n            piVar26[-1] = 0xa0409a;\n            uVar54 = fcn.00a03983();\n            uVar12 = uVar54 >> 0x20;\n            *(iVar9 + 4) = uVar54;\n            puVar33 = puVar28 + 0x50;\n            iVar13 = 0x1f;\n            if (piVar26 != 0x1c) {\n                for (; piVar26 + -7 >> iVar13 == 0; iVar13 = iVar13 + -1) {\n                }\n            }\n            if ((POPCOUNT((uVar54 >> 8) + -1) & 1U) == 0) {\n                piVar26[-8] = 0x7a835196;\n                piVar26[-9] = puVar33;\n                piVar26[-10] = uVar12;\n                piVar26[-0xb] = iVar13;\n                piVar26[-0xc] = piVar26 + -7;\n                piVar26[-0xd] = puVar28;\n                piVar26[-0xe] = iVar9;\n                piVar26[-0xf] = uVar34;\n            }\n            else {\n                piVar26[-8] = 0x7a835196;\n                piVar26[-9] = puVar33;\n                piVar26[-10] = uVar12;\n                piVar26[-0xb] = iVar13;\n                piVar26[-0xc] = piVar26 + -7;\n                piVar26[-0xd] = puVar28;\n                piVar26[-0xe] = iVar9;\n                piVar26[-0xf] = uVar34;\n            }\n            uVar45 = SBORROW4(iVar9, puVar33);\n            piVar26[-0x10] = fcn.009bfaac;\n            fcn.009bfa67();\n            piVar26[-0xf] = 0x9bfb0f;\n            uVar54 = fcn.009bfab9(piVar26[-0xe], piVar26[-0xd], piVar26[-0xc], piVar26[-0xb], piVar26[-10], piVar26[-9]\n                                  , piVar26[-8], piVar26[-7], piVar26[-6], piVar26[-5], piVar26[-4], piVar26[-3], \n                                  piVar26[-2], piVar26[-1], *piVar26);\n            uVar5 = uVar54;\n            uVar30 = iVar9 - 0x80;\n            if (uVar45) {\n                piVar26[-0x11] = piVar26[-0x12];\n            }\n            else {\n                piVar26[-0x11] = piVar26[-0x12];\n            }\n            uVar14 = uVar30 & 0xfc;\n            uVar16 = uVar30 & 0xfffffffc;\n            piVar26[-0x12] =\n                 (in_NT & 1) * 0x4000 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | (uVar14 < '\\0') * 0x80 |\n                 ((uVar30 & 0xfc) == 0) * 0x40 | (in_AF & 1) * 0x10 | ((POPCOUNT(uVar14) & 1U) == 0) * 4 |\n                 (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n            bVar37 = uVar5 <= uVar16;\n            puVar28 = uVar16 - uVar5;\n            if ((bVar37) || (piVar23 = piVar26 + -0x12,  !bVar37)) {\n                piVar23 = puVar28;\n            }\n            *(piVar23 + -4) =\n                 (in_NT & 1) * 0x4000 | SBORROW4(uVar16, uVar5) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n                 (puVar28 < 0) * 0x80 | (puVar28 == NULL) * 0x40 | (in_AF & 1) * 0x10 |\n                 ((POPCOUNT(puVar28 & 0xff) & 1U) == 0) * 4 | bVar37 | (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000\n                 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n            *(piVar23 + -8) = iVar9;\n            *(piVar23 + -0xc) = uVar34;\n            *(piVar23 + -0x10) = extraout_ECX_02;\n            *(piVar23 + -0x14) = uVar5;\n            *(piVar23 + -0x18) = extraout_ECX_02;\n            *(piVar23 + -0x1c) = uVar54 >> 0x20;\n            *(piVar23 + -0x20) = puVar28;\n            *(piVar23 + -0x24) = piVar23 + -0x10;\n            *(piVar23 + -0x28) = puVar28 + (uVar5 - 0x40);\n            *(piVar23 + -0x2c) = extraout_ECX_02;\n            *(piVar23 + -0x30) = uVar34;\n            uVar14 = (extraout_ECX_02 & 0x1f) % 0x11;\n            uVar30 = bVar37 << 0x10 | uVar34 & 0xffff;\n            if (puVar28 == NULL) {\n                *(piVar23 + -0x34) = 0x9bfbb2;\n                fcn.009bfbd5();\n                puVar27 = (uVar34 & 0xffff0000 | uVar30 >> uVar14 | uVar30 << 0x11 - uVar14) - 0x29;\n                *puVar27 = *puVar27 << 1 | *puVar27 < '\\0';\n    // WARNING: Could not recover jumptable at 0x009bfbb7. Too many branches\n    // WARNING: Treating indirect jump as call\n                uVar53 = (**(extraout_ECX_02 + -8))();\n                return uVar53;\n            }\n            rdtsc();\n            *(piVar23 + -0x30) = puVar28;\n            puVar27 = *(piVar23 + -0x28);\n            puVar28 = *(piVar23 + -0x2c);\n            puVar33 = *(piVar23 + -0x30);\n            for (iVar9 = *(piVar23 + -0x14); iVar9 != 0; iVar9 = iVar9 + -1) {\n                *puVar33 = *puVar28;\n                puVar28 = puVar28 + 1;\n                puVar33 = puVar33 + 1;\n            }\n            pcVar32 = *(piVar23 + -0xc);\n            ppcVar2 = piVar23 + -8;\n            if (ppcVar2 < 0xe) {\n                pcVar29 = *ppcVar2;\n            }\n            else {\n                pcVar29 = *ppcVar2;\n            }\n            uVar30 = *(piVar23 + -4);\n            uVar48 = (uVar30 & 0x4000) != 0;\n            bVar46 = (uVar30 & 0x800) != 0;\n            bVar42 = (uVar30 & 0x400) != 0;\n            uVar41 = (uVar30 & 0x200) != 0;\n            uVar40 = (uVar30 & 0x100) != 0;\n            bVar39 = (uVar30 & 0x80) != 0;\n            bVar47 = (uVar30 & 0x40) != 0;\n            uVar14 = (uVar30 & 0x10) != 0;\n            bVar37 = (uVar30 & 4) != 0;\n            uVar52 = (uVar30 & 0x200000) != 0;\n            uVar49 = (uVar30 & 0x40000) != 0;\n            uVar51 = 0;\n            uVar50 = 0;\n            if (bVar47) {\n                *(piVar23 + -4) =\n                     uVar48 * 0x4000 | bVar46 * 0x800 | bVar42 * 0x400 | uVar41 * 0x200 | uVar40 * 0x100 | bVar39 * 0x80\n                     | bVar47 * 0x40 | uVar14 * 0x10 | bVar37 * 4 | uVar52 * 0x200000 | uVar49 * 0x40000;\n            }\n            else {\n                *(piVar23 + -4) =\n                     uVar48 * 0x4000 | bVar46 * 0x800 | bVar42 * 0x400 | uVar41 * 0x200 | uVar40 * 0x100 | bVar39 * 0x80\n                     | bVar47 * 0x40 | uVar14 * 0x10 | bVar37 * 4 | uVar52 * 0x200000 | uVar49 * 0x40000;\n            }\n            *ppcVar2 = 0x9b04b5;\n            fcn.009b0498();\n            ppuVar18 = piVar23 + -4;\n            *ppcVar2 = fcn.009b05ee;\n            fcn.009b05c7();\n            cVar36 = extraout_CL;\n            while( true ) {\n                pcVar31 = pcVar32 + 1;\n                uVar17 = *ppuVar18 >> 0x10;\n                if (!SCARRY4(pcVar32, 1)) break;\n                puVar15 = CONCAT22(uVar17, 0xead3);\n                ppuVar18[-1] = 0x9b066d;\n                uVar53 = fcn.009b0796();\n                iVar9 = uVar53 >> 0x20;\n                uVar34 = uVar53;\n                uVar5 = uVar34 + 0x4bbadd54;\n                if (uVar34 < 0xb44522ac) {\n                    *pcVar31 = *pcVar29;\n                    ppuVar18[-1] = pcVar32 + bVar42 * -2 + 2;\n                    ppuVar19 = ppuVar18[-1] + 4;\n                    goto code_r0x009b06b6;\n                }\n                uVar30 = 0xfbb4829;\n                uVar16 = uVar34 < 0xb44522ac;\n                uVar34 = uVar34 + 0xb14bd4ba;\n                bVar37 = uVar5 < 0x9a6f089a || uVar34 < uVar16;\n                bVar43 = SBORROW4(uVar5, -0x6590f766) != SBORROW4(uVar34, uVar16);\n                uVar6 = uVar34 - uVar16;\n                bVar46 = uVar6 < 0;\n                bVar39 = uVar6 == 0;\n                bVar47 = (POPCOUNT(uVar6 & 0xff) & 1U) == 0;\n                if (bVar47) {\n                    if (bVar39) {\n                        uVar11 = uVar53 >> 0x20;\n                        if ((uVar5 < 0x9a6f089a || uVar34 < uVar16) || bVar39) {\n                            pcVar1 = pcVar29 + 0x21;\n                            *pcVar1 = *pcVar1 << 1 | *pcVar1 < '\\0';\n                            pcVar29[-0x36] = pcVar29[-0x36] << 1;\n                            puVar27 = puVar27 + -1;\n                            in_FPUControlWord = *(pcVar32 + iVar9 * 2 + -0x50a36f);\n                            if (puVar27 != NULL) {\n                                *0xc2 = *0xc2 | 0xc2;\n                                puVar7 = ppuVar18;\n                                goto code_r0x009b06bd;\n                            }\n                            uVar12 = 0xfbb482a;\n                            *pcVar31 = *0x3fcca535;\n                            *(*puVar15 + 0x87d98b51) = *(*puVar15 + 0x87d98b51);\n                            cVar3 = in(uVar11);\n                            pcVar32[bVar42 * -2 + 2] = cVar3;\n                            uVar55 = 0;\n                            goto code_r0x009b06e9;\n                        }\n                        if (!bVar39 && bVar43 == bVar46) {\n                            uVar10 = in(uVar11);\n                            puVar27 = puVar27 + puVar15 + bVar37;\n                            uVar35 = 0;\n                            uVar44 = 0;\n                            uVar53 = uVar53 & 0xffffffff00000000 | uVar10 & 0xffffffffffffff01;\n                            uVar38 = 0;\n                            uVar45 = (uVar10 & 1) == 0;\n                            uVar10 = (uVar10 & 1) == 0;\n                            goto code_r0x009b0707;\n                        }\n                        bVar37 = false;\n                        bVar43 = false;\n                        uVar6 = 0;\n                        bVar46 = false;\n                        bVar39 = true;\n                        bVar47 = true;\n                    }\n                    else {\n                        *(ppuVar18 + -1) = in_ES;\n                    }\n                }\n                else {\n                    ppuVar18[-1] = *(ppuVar18 + 6);\n                }\n                *(uVar6 - 4) = (uVar48 & 1) * 0x4000 | bVar43 * 0x800 | bVar42 * 0x400 | (uVar41 & 1) * 0x200 |\n                               (uVar40 & 1) * 0x100 | bVar46 * 0x80 | bVar39 * 0x40 | (uVar14 & 1) * 0x10 | bVar47 * 4 |\n                               bVar37 | (uVar52 & 1) * 0x200000 | (uVar51 & 1) * 0x100000 | (uVar50 & 1) * 0x80000 |\n                               (uVar49 & 1) * 0x40000;\n                puVar27 = puVar15 + (uVar6 - 0x40);\n                *(uVar6 - 8) = pcVar29;\n                *(uVar6 - 0xc) = fcn.009b05c7;\n                fcn.009b053b();\n                in_ES = *(uVar6 - 8);\n                ppuVar18 = uVar6 - 4;\n                *(uVar6 - 8) = 0x9b060b;\n                fcn.009b05ee();\n                pcVar32 = pcVar31;\n                cVar36 = extraout_CL_00;\n            }\n            puVar15 = *ppuVar18 & 0xffff0000;\n            uVar10 = cVar36 + 0x66;\n            uVar30 = uVar10;\n            puVar7 = ppuVar18 + -10;\n            if (ppuVar18 + -10 < 0) {\ncode_r0x009b06bd:\n                uVar10 = uVar30;\n                uVar17 = puVar15 >> 0x10;\n                puVar7 = puVar7 + 2;\n            }\n            else {\n                puVar7 = ppuVar18 + -2;\n            }\n            ppuVar18 = puVar7 + 2;\n            uVar35 = false;\n            uVar44 = 0;\n            uVar10 = uVar10 ^ 0xea;\n            uVar38 = uVar10 < '\\0';\n            uVar45 = uVar10 == 0;\n            uVar10 = (POPCOUNT(uVar10) & 1U) == 0;\n            puVar7[1] = 0x9b072b;\n            uVar53 = fcn.009b06f9();\n            uVar30 = extraout_ECX;\n            if (uVar35 || uVar45) {\n                *(puVar7 + 6) = *ppuVar18;\n            }\n            else {\ncode_r0x009b0707:\n                *(ppuVar18 + -2) = *ppuVar18;\n            }\n            puVar7 = ~uVar53;\n            *(ppuVar18 + -5) =\n                 (uVar48 & 1) * 0x4000 | (uVar44 & 1) * 0x800 | bVar42 * 0x400 | (uVar41 & 1) * 0x200 |\n                 (uVar40 & 1) * 0x100 | (uVar38 & 1) * 0x80 | (uVar45 & 1) * 0x40 | (uVar14 & 1) * 0x10 |\n                 (uVar10 & 1) * 4 | uVar35 & 1 | (uVar52 & 1) * 0x200000 | (uVar51 & 1) * 0x100000 |\n                 (uVar50 & 1) * 0x80000 | (uVar49 & 1) * 0x40000;\n            *(ppuVar18 + -5) = pcVar29;\n            uVar34 = CONCAT31(CONCAT22(uVar17, 0xbb76) >> 8, 0xf);\n            uVar14 = ~uVar30;\n            uVar30 = uVar30 & 0xffffff00;\n            bVar37 = (uVar34 >> (pcVar31 & 0x1f) & 1) != 0;\n            if ((!bVar37 && !uVar45) && (bVar37 || uVar45)) {\n                if (-1 < (uVar34 ^ 1 << (pcVar31 & 0x1f) | *(pcVar32 + 0x10996a10))) {\n                    *puVar7 = *puVar7 << 0x17 | *puVar7 >> 9;\n                    pcVar29[-0x45] = pcVar29[-0x45] << 1;\n                    uVar34 = puVar7 + (puVar7 >> 8) * '\\x16';\n                    Var4 = *((uVar53 >> 0x20) + -0x53 + (uVar30 | uVar14) * 8);\n                    out(Var4, puVar7 & 0xffff0000 | uVar34);\n                    *0x5eafebc2 = *0x5eafebc2 << (uVar14 & 0x1f) | *0x5eafebc2 >> 0x20 - (uVar14 & 0x1f);\n                    return CONCAT44(Var4, puVar7 & 0xffffff00 | uVar34) & 0xffffffffffff00ff;\n                }\n                puVar20 = ppuVar18 + 0x12;\n                ppuVar18 = ppuVar18 + 0x12;\n                *puVar20 = 0x9b074a;\n                uVar54 = func_0x578320c8();\n                iVar9 = uVar54 >> 0x20;\n                *uVar54 = in_FPUControlWord;\n                puVar27 = puVar27 + 0x1f1;\n                uVar55 = uVar54 >> 0x10;\n                uVar12 = extraout_ECX_00;\ncode_r0x009b06e9:\n                ppuVar19 = ppuVar18 + -1;\n                ppuVar18[-1] = uVar12;\n                *ppuVar18 = puVar27;\n                uVar5 = ppuVar18 + -1 & 0xffff | uVar55 << 0x10;\ncode_r0x009b06b6:\n                *(ppuVar19 + -4) = *(ppuVar19 + 4);\n                return CONCAT44(iVar9, uVar5);\n            }\n            uVar34 = uVar30 | uVar14 - 0x31;\n            puVar22 = ppuVar18 + 0x13;\n            *(ppuVar18 + 0x13) = fcn.009b0812;\n            func_0x009b07f3();\n            *puVar22 = 0x9b0818;\n            uVar54 = func_0x009b0838();\n            uVar12 = uVar54 >> 0x20;\n            pcVar8 = uVar54 & 0xffffff00 | extraout_ECX_01 & 0xff;\n            uVar5 = extraout_ECX_01;\n            if (extraout_ECX_01 == 0) {\n                *pcVar8 = *pcVar8 + (extraout_ECX_01 & 0xff);\n                *0x6caf5c35 = *0x6caf5c35 + (uVar30 >> 8);\n    // WARNING: Bad instruction - Truncating control flow here\n                halt_baddata();\n            }\n            while( true ) {\n                pcVar31 = pcVar32 + 0x3eaff39f;\n                if (uVar34 != 0x4b3f2ba0 && SCARRY4(uVar34, -0x4b3f2ba0) == uVar34 + 0xb4c0d460 < 0) {\n                    do {\n                        *(puVar22 + -4) = 0x9b093a;\n                        fcn.009b224f();\n                        puVar22 = puVar22 + *(pcVar29 + -0x6b);\n                        *(uVar34 + 0x882784de) = *(uVar34 + 0x882784de);\n                    } while( true );\n                }\n                uVar14 = (uVar5 & 0x1f) % 0x11;\n                uVar30 = ((pcVar31 >> (pcVar31 & 0xf) & 1) != 0) << 0x10 | pcVar31 & 0xffff;\n                uVar30 = (pcVar31 & 0xffff0000 | uVar30 >> uVar14 | uVar30 << 0x11 - uVar14) & ~(1 << (puVar22 & 0x1f));\n                uVar30 = uVar30 & 0xffffff00 | uVar30 + 1;\n                uVar34 = *(uVar34 + 0x9afaab);\n                if (!SBORROW4(puVar22, 10)) break;\n                if (SBORROW4(puVar22, 10)) {\n                    *(puVar22 + -9) = uVar30;\n                    goto code_r0x009b0981;\n                }\n                uVar12 = 0xd1e82cdd;\n                *(puVar22 + -0xe) = uVar30;\n                *(puVar22 + -0x12) = in_DS;\n                puVar21 = puVar22 + -0x16;\n                puVar22 = puVar22 + -0x16;\n                *puVar21 = in_ES;\n                uVar5 = 0xb0;\n            }\n            *(puVar22 + -9) = uVar30;\ncode_r0x009b0981:\n            cVar36 = 0xa4ecac5e < uVar34;\n            iVar56 = 0;\n            bVar37 = pcVar29 != 0;\n            if (bVar37) {\n                for (; (pcVar29 >> iVar56 & 1) == 0; iVar56 = iVar56 + 1) {\n                }\n            }\n            if (bVar37) {\n                pcVar29 = pcVar29 + -0x23;\n                uVar30 = pcVar29 & 0xffff0000 | CONCAT11((pcVar29 >> 8) << 1, pcVar29);\n            }\n            else {\n                if (bVar37) {\n                    *(puVar22 + -0xc) = 0x9b0d57;\n                    uVar30 = fcn.009b0d86();\n                    *(puVar22 + -0xc) = in_ES;\n                    *((uVar30 & 0xffffff00 | uVar30 + -0x6b + cVar36) + 0x865f9f68) = in_CS;\n    // WARNING: Bad instruction - Truncating control flow here\n                    halt_baddata();\n                }\n                pcVar29 = pcVar29 + -0x23;\n                uVar30 = pcVar29 & 0xffff0000 | CONCAT11((pcVar29 >> 8) << 1, pcVar29);\n            }\n            *(puVar27 + -4) = uVar34 + 0x5b1353a1;\n            return CONCAT44(uVar12, ~(uVar30 >> 0x18 | (uVar30 & 0xff0000) >> 8 | (uVar30 & 0xff00) << 8 |\n                                     uVar30 << 0x18));\n        }\n    }\ncode_r0x0099ff3b:\n    *(*(in_FS_OFFSET + 0x18) + 0x34) = 0x7f;\n    return param_2 << 0x20;\ncode_r0x00a0215f:\n    *(piVar23 + -4) = uVar5;\n    *(piVar23 + -8) = iVar9;\n    *(piVar23 + -0xc) = param_2;\n    *(piVar23 + -0x10) = unaff_EBX;\n    *(piVar23 + -0x14) = piVar23;\n    *(piVar23 + -0x18) = puVar28;\n    *(piVar23 + -0x1c) = uVar30;\n    *(piVar23 + -0x20) = uVar34;\n    if (uVar34 != 0) {\n        *(piVar23 + -4) = 0xa039f2;\n        uVar53 = fcn.009b8c3d();\n        return uVar53;\n    }\n    goto code_r0x0099ff3b;\n}\n",
        "token_count": 8932
    },
    "009b98a3": {
        "rules": [
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df"
        ],
        "decompiled_code": "\nvoid fcn.009b98a3(uint param_1, uint param_2, uint param_3, ulong param_4)\n\n{\n    int32_t *piVar1;\n    uint32_t *puVar2;\n    code *pcVar3;\n    int32_t in_EAX;\n    int32_t iVar4;\n    uint32_t extraout_ECX;\n    uchar in_CF;\n    ushort uVar5;\n    int32_t *piVar6;\n    \n    piVar6 = param_4 >> 0x10;\n    uVar5 = param_4;\n    fcn.009e6c45();\n    iVar4 = fcn.009e7e5c();\n    *piVar6 = iVar4;\n    *(piVar6 + 1) = *(in_EAX << 8 | CONCAT14(in_CF, in_EAX) >> 0x19);\n    *(iVar4 + 0x74) = *(iVar4 + 0x74) & &stack0xffffffe6;\n    piVar1 = CONCAT22(uVar5, param_3 >> 0x10) + -0x50a5b7cb;\n    *piVar1 = *piVar1 + (extraout_ECX & 0xffff0000 | CONCAT11(0x71, extraout_ECX)) +\n              (iVar4 + 99 + (0x3c < iVar4) < 0xeb);\n    puVar2 = CONCAT31(iVar4 >> 8, *0x712d8567) + -0x799cc1e5;\n    *puVar2 = *puVar2 | 0x799ccc0e;\n    pcVar3 = swi(1);\n    (*pcVar3)();\n    return;\n}\n",
        "token_count": 378
    },
    "009fbaa1": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009fbcb0) overlaps instruction at (ram,0x009fbcaf)\n// \n// WARNING: Control flow encountered bad instruction data\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Removing unreachable block (ram,0x009fbca5)\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_8h\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nulong __cdecl fcn.009fbaa1(uint arg_bp_8h)\n\n{\n    int16_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    char extraout_DH;\n    ushort uVar4;\n    int32_t in_EDX;\n    uint unaff_EBP;\n    uint16_t unaff_DI;\n    uint8_t in_AF;\n    float10 extraout_ST0;\n    unkbyte6 Var5;\n    ushort uStack00000008;\n    int32_t in_stack_0000000e;\n    uint *in_stack_00000016;\n    int32_t iStack22;\n    uint var_8h;\n    uint var_4h;\n    \n    uStack00000008 = unaff_EBP >> 0x10;\n    iVar1 = 0;\n    if (*0x10 - 6U != 0) {\n        for (; (*0x10 - 6U >> iVar1 & 1) == 0; iVar1 = iVar1 + 1) {\n        }\n    }\n    iVar1 = 0;\n    if (unaff_DI != 0) {\n        for (; (unaff_DI >> iVar1 & 1) == 0; iVar1 = iVar1 + 1) {\n        }\n    }\n    iVar3 = *(in_stack_0000000e + 0xe) + *(in_stack_0000000e + 0xc);\n    while( true ) {\n        if (iVar3 < 1) {\n            fcn.009fbdac();\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        if (-1 < *(in_stack_0000000e + 0x14)) break;\n        uVar2 = fcn.009fbc7f();\n        *(in_EDX + 0x5a) = ROUND(extraout_ST0);\n        in_AF = 9 < (uVar2 & 0xf) | in_AF;\n        in_EDX = CONCAT31(in_EDX >> 8, 0x8d);\n        iVar3 = (uVar2 >> 8 & 0xffff00 | extraout_DH - in_AF) << 8;\n    }\n    Var5 = fcn.009b8aed();\n    uVar4 = Var5 >> 0x20;\n    *in_stack_00000016 = Var5;\n    iStack22 = CONCAT22(uVar4, uVar4);\n    func_0x009fbd07();\n    return CONCAT44(*(iStack22 + 0x18), *(iStack22 + 0x20));\n}\n",
        "token_count": 677
    },
    "00a18ec9": {
        "rules": [
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8",
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009ba028) overlaps instruction at (ram,0x009ba027)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nuint32_t __fastcall fcn.00a18ec9(uint param_1, uint param_2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int16_t iVar4;\n    int64_t iVar5;\n    uint32_t *puVar6;\n    char extraout_AH;\n    uint32_t *puVar7;\n    uint in_EAX;\n    int32_t iVar8;\n    int32_t iVar9;\n    uint32_t *puVar10;\n    uchar extraout_CL;\n    char cVar11;\n    uint8_t extraout_CL_00;\n    uint32_t uVar12;\n    uint32_t extraout_ECX;\n    uint32_t *extraout_ECX_00;\n    int32_t extraout_ECX_01;\n    uint32_t uVar13;\n    uint extraout_ECX_02;\n    int32_t extraout_ECX_03;\n    int32_t extraout_ECX_04;\n    int32_t extraout_ECX_05;\n    int32_t extraout_ECX_06;\n    uint extraout_ECX_07;\n    uint extraout_ECX_08;\n    int32_t extraout_ECX_09;\n    uchar extraout_DL;\n    ushort uVar14;\n    char cVar15;\n    ushort extraout_DX;\n    char *extraout_EDX;\n    uint32_t unaff_EBX;\n    uint *puVar16;\n    uint8_t **ppuVar17;\n    uchar *puVar18;\n    uint *puVar19;\n    uchar *puVar20;\n    uint8_t **ppuVar21;\n    uint *puVar22;\n    uint *puVar23;\n    uint *puVar24;\n    uint *puVar25;\n    uint *puVar26;\n    int32_t unaff_EBP;\n    char *pcVar27;\n    uint uVar28;\n    uint32_t *unaff_ESI;\n    uint32_t *puVar29;\n    uint8_t *puVar30;\n    uint32_t *unaff_EDI;\n    ushort in_CS;\n    uint8_t uVar31;\n    bool in_CF;\n    bool bVar32;\n    uint8_t in_AF;\n    bool in_ZF;\n    bool bVar33;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    float10 extraout_ST0;\n    uint64_t uVar34;\n    ulong uVar35;\n    uint64_t uVar36;\n    unkbyte6 Var37;\n    uint32_t in_stack_00000018;\n    \n    uVar35 = CONCAT44(param_2, in_EAX);\n    puVar22 = &stack0x00000004;\n    if (in_CF || in_ZF) {\n        do {\n            do {\n                puVar29 = uVar35;\n                puVar22[4] = puVar22[4] + 1;\n                uVar13 = puVar22[4];\n                unaff_EDI = unaff_EDI + 3;\n                bVar32 = uVar13 < *puVar29;\n                if (!bVar32) {\n                    if (!bVar32) {\n                        puVar22[-1] = 0xa19084;\n                        uVar35 = fcn.009b91a7();\n                        puVar22[-1] = unaff_EBP;\n                        puVar22[-2] = uVar35;\n                        puVar22[-3] = extraout_ECX_02;\n                        puVar22[-4] = uVar35 >> 0x20;\n                        puVar22[-5] = unaff_EBX;\n                        puVar22[-6] = puVar22 + -1;\n                        puVar22[-7] = unaff_EBP;\n                        puVar22[-8] = unaff_ESI;\n                        puVar22[-9] = unaff_EDI & 0xffff0000 | *puVar22;\n                        cVar15 = uVar35 >> 0x28;\n                        cVar11 = extraout_ECX_02 + cVar15;\n                        puVar22[-7] = uVar35;\n                        puVar22[-10] = (in_NT & 1) * 0x4000 | SCARRY1(extraout_ECX_02, cVar15) * 0x800 |\n                                       (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | (cVar11 < '\\0') * 0x80 |\n                                       (cVar11 == '\\0') * 0x40 | (in_AF & 1) * 0x10 | ((POPCOUNT(cVar11) & 1U) == 0) * 4\n                                       | (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 |\n                                       (in_AC & 1) * 0x40000;\n                        unaff_EBX = puVar22[-5];\n                        unaff_EBP = puVar22[-1];\n                        iVar4 = 0xf;\n                        if (puVar22 != 0) {\n                            for (; puVar22 >> iVar4 == 0; iVar4 = iVar4 + -1) {\n                            }\n                        }\n                        unaff_ESI = NULL;\n                        unaff_EDI = *(puVar22[-2] + 0x78) + unaff_EBX;\n                        puVar22[-1] = fcn.00a190cb;\n                        fcn.00a190ae();\n                        if (extraout_ECX_03 == 0) {\n                            return 0;\n                        }\n                        *puVar22 = 0xa19145;\n                        iVar8 = fcn.00a190cd();\n                        *(iVar8 + 4 + extraout_ECX_04 * 0xc) = unaff_EBX;\n                        puVar22[1] = 0xa19179;\n                        fcn.00a1924d();\n                        *(puVar22 + 6) = *(puVar22 + 9);\n                        iVar4 = 0xf;\n                        if (unaff_EBX != 0) {\n                            for (; unaff_EBX >> iVar4 == 0; iVar4 = iVar4 + -1) {\n                            }\n                        }\n                        uVar35 = CONCAT44(unaff_EDI[6], *0x9aa864);\n                        puVar22 = puVar22 + 4;\n                        uVar13 = **0x9aa864 * 0xc;\n                        bVar32 = uVar13 != **0x9aa864 * 0xc;\n                    }\n                    *(uVar35 + uVar13 + 8) = uVar35 >> 0x20;\n                    bVar32 = !bVar32;\n                    puVar19 = puVar22 + -1;\n    // WARNING: Call to offcut address within same function\n                    puVar22[-1] = 0xa191cd;\n                    uVar34 = func_0x00a191ce();\n                    if (bVar32) {\n                        *(unaff_EBP + 0x485491) = *(unaff_EBP + 0x485491) | extraout_CL_00;\n    // WARNING: Bad instruction - Truncating control flow here\n                        halt_baddata();\n                    }\n                    iVar5 = (uVar34 & 0xffffff04) * 0x14;\n                    bVar32 = iVar5 != iVar5;\n                    *(puVar19 + -4) = iVar5;\n                    *(puVar19 + -8) = uVar34 >> 0x20;\n                    *(puVar19 + -10) = *(puVar19 + -6);\n                    *(puVar19 + -0xe) =\n                         (in_NT & 1) * 0x4000 | bVar32 * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n                         ((uVar34 & 4) == 0) * 0x40 | (in_AF & 1) * 0x10 | (POPCOUNT(uVar34 & 4) == '\\0') * 4 | bVar32 |\n                         (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 |\n                         (in_AC & 1) * 0x40000;\n                    *(puVar19 + -8) = 8;\n                    *(puVar19 + -0xc) = *0x9aa8fc;\n                    puVar20 = puVar19 + -0x10;\n                    *(puVar19 + -0x10) = 0xa19232;\n                    iVar8 = (**0x9aa910)();\n                    *(puVar20 + -4) = unaff_EBP;\n                    uVar28 = *(puVar20 + -4);\n                    *(puVar20 + -8) = CONCAT11(0x49, extraout_DL);\n                    *(puVar20 + -0x16) = *(puVar20 + -10);\n                    (*0x9aa864)[(**0x9aa864 + 1) * 3] = iVar8;\n                    *(puVar20 + -4) = uVar28;\n                    uVar13 = unaff_EDI[8];\n                    pcVar27 = *(puVar20 + -4);\n                    *(puVar20 + -4) = uVar13;\n                    iVar8 = uVar13 + unaff_EBX;\n                    bVar33 = iVar8 == 0;\n                    bVar32 = false;\n                    *(puVar20 + -6) = iVar8;\n                    *(puVar20 + 0x30) = iVar8;\n                    *(puVar20 + 0x14) = unaff_ESI;\n                    ppuVar21 = puVar20 + -4;\n                    *(puVar20 + -4) = 0xa192e9;\n                    func_0x00a192ca();\n                    if (!bVar32 && !bVar33) {\n                        ppuVar21[4] = unaff_ESI;\n                        ppuVar21[-1] = 0xa19337;\n                        fcn.009b9160();\n                        *(ppuVar21 + -2) = extraout_DX;\n                        puVar22 = ppuVar21 + -1;\n                        ppuVar21[-1] = 0xa19502;\n                        uVar35 = func_0x00a193f3();\n                        uVar28 = uVar35 >> 0x20;\n                        iVar9 = uVar35;\n                        iVar8 = *(iVar9 + unaff_EBX);\n                        *(puVar22 + -4) = iVar9;\n                        *(puVar22 + -8) = extraout_ECX_05;\n                        *(puVar22 + -0xc) = uVar28;\n                        *(puVar22 + -0x10) = unaff_EBX;\n                        *(puVar22 + -0x14) = puVar22;\n                        *(puVar22 + -0x18) = pcVar27;\n                        *(puVar22 + -0x1c) = iVar8;\n                        *(puVar22 + -0x20) = unaff_EDI;\n                        *(puVar22 + -0x1b) = puVar22 + -0x20;\n                        puVar29 = iVar8 + unaff_EBX;\n                        *(puVar22 + -0x24) = iVar9;\n                        *(puVar22 + -0x28) = extraout_ECX_05;\n                        *(puVar22 + -0x2c) = uVar28;\n                        *(puVar22 + -0x30) = unaff_EBX;\n                        *(puVar22 + -0x34) = puVar22 + -0x20;\n                        *(puVar22 + -0x38) = pcVar27;\n                        *(puVar22 + -0x3c) = puVar29;\n                        *(puVar22 + -0x40) = unaff_EDI;\n                        if (unaff_EDI <= puVar29) {\n                            if (unaff_EDI > puVar29) {\n                                unaff_EBX = unaff_EBX + 1;\n                                in_IF = 0;\n                            }\n                            *(puVar22 + -2) = unaff_EBX;\n                            puVar10 = *(puVar22 + 0x2c) + unaff_EDI;\n                            bVar32 = puVar29 < puVar10;\n                            uVar13 = puVar29 - puVar10;\n                            puVar24 = puVar22 + -4;\n                            *(puVar22 + -4) =\n                                 (in_NT & 1) * 0x4000 | SBORROW4(puVar29, puVar10) * 0x800 | (in_IF & 1) * 0x200 |\n                                 (in_TF & 1) * 0x100 | (uVar13 < 0) * 0x80 | (uVar13 == 0) * 0x40 | (in_AF & 1) * 0x10 |\n                                 ((POPCOUNT(uVar13 & 0xff) & 1U) == 0) * 4 | bVar32 | (in_ID & 1) * 0x200000 |\n                                 (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n                            iVar8 = extraout_ECX_05;\n                            while( true ) {\n                                puVar24[-1] = puVar10;\n                                puVar24[-2] = iVar8;\n                                puVar24[-3] = uVar28;\n                                puVar24[-4] = unaff_EBX;\n                                puVar24[-5] = puVar24;\n                                puVar24[-6] = pcVar27;\n                                puVar24[-7] = puVar29;\n                                puVar24[-8] = unaff_EDI;\n                                puVar24[-2] = puVar24[-8];\n                                puVar22 = puVar24 + 1;\n                                if (!bVar32) break;\n                                if (!bVar32) {\n                                    puVar24[9] = puVar24 + 0x32;\n                                    puVar25 = puVar24 + 8;\n                                    puVar24[8] = 0xa1971c;\n                                    uVar35 = (*_fcn.009aa90c)();\n                                    uVar28 = uVar35 >> 0x20;\n                                    iVar8 = uVar35;\n                                    *(puVar25 + -4) = iVar8;\n                                    *(puVar25 + -8) = extraout_ECX_07;\n                                    *(puVar25 + -0xc) = uVar28;\n                                    *(puVar25 + -0x10) = unaff_EBX;\n                                    *(puVar25 + -0x14) = puVar25;\n                                    *(puVar25 + -0x18) = pcVar27;\n                                    *(puVar25 + -0x1c) = puVar29;\n                                    *(puVar25 + -0x20) = unaff_EDI;\n                                    *(puVar25 + -0x24) = iVar8;\n                                    *(puVar25 + -0x28) = extraout_ECX_07;\n                                    *(puVar25 + -0x2c) = uVar28;\n                                    *(puVar25 + -0x30) = unaff_EBX;\n                                    *(puVar25 + -0x34) = puVar25 + -0x20;\n                                    *(puVar25 + -0x38) = pcVar27;\n                                    *(puVar25 + -0x3c) = puVar29;\n                                    *(puVar25 + -0x40) = unaff_EDI;\n                                    uVar28 = extraout_ECX_07;\n                                    if (iVar8 == 0) {\n                                        pcVar1 = *(*0x9aa924 + 0x10);\n                                        *(puVar25 + -4) = 0;\n                                        *(puVar25 + -8) = 0;\n                                        *(puVar25 + -0xc) = puVar25 + 0xa0;\n                                        puVar26 = puVar25 + -0x10;\n                                        puVar25 = puVar25 + -0x10;\n                                        *puVar26 = 0xa198f7;\n                                        uVar35 = (*pcVar1)();\n                                        *(puVar25 + -2) = extraout_ECX_08;\n                                        uVar28 = extraout_ECX_08;\n                                    }\n                                    uVar13 = uVar35;\n                                    *(puVar25 + -4) = uVar13;\n                                    *(puVar25 + -8) = uVar28;\n                                    *(puVar25 + -0xc) = uVar35 >> 0x20;\n                                    *(puVar25 + -0x10) = unaff_EBX;\n                                    *(puVar25 + -0x14) = puVar25;\n                                    *(puVar25 + -0x18) = pcVar27;\n                                    *(puVar25 + -0x1c) = uVar13;\n                                    *(puVar25 + -0x20) = unaff_EDI;\n                                    if (uVar13 != unaff_EBX) {\n                                        *(puVar25 + -4) = fcn.00a19b7f;\n                                        iVar8 = fcn.00a19b2c();\n                                        *(puVar25 + -7) = *(puVar25 + -0x11);\n                                        iVar8 = *(iVar8 * 0xc + extraout_ECX_09);\n                                        *(puVar25 + -4) = unaff_EDI;\n                                        return *(iVar8 + uVar13 * 0x14 + 0x10);\n                                    }\n                                    *(puVar25 + 0x26) = 0x3c;\n                                    *(puVar25 + 0x25) = 0x50;\n                                    *(puVar25 + -4) = 0xa197c2;\n                                    fcn.00a1979c();\n                                    *unaff_EDI = *(unaff_EBX - 0x577f);\n    // WARNING: Bad instruction - Truncating control flow here\n                                    halt_baddata();\n                                }\n                                *puVar24 = 0x2e;\n                                puVar24[-1] = 0xa19611;\n                                iVar8 = fcn.00a1958c();\n                                puVar10 = iVar8 - puVar29;\n                                puVar24[-1] = puVar10;\n                                puVar7 = puVar29;\n                                do {\n                                    puVar24[-2] = unaff_EBX;\n                                    puVar24[10] = puVar10;\n                                    puVar24[-2] = 0xa1967e;\n                                    fcn.009b9165();\n                                    puVar24[-2] = 0xa19683;\n                                    uVar36 = fcn.00a1965f();\n                                    puVar29 = uVar36;\n                                    puVar6 = extraout_ECX_06 * 2;\n                                    bVar32 = CARRY4(*puVar6, puVar7);\n                                    *puVar6 = *puVar6 + puVar7;\n                                    uVar34 = *(extraout_ECX_06 + puVar29 * 2);\n                                    uVar36 = uVar36 & 0xffffffff00000000 | ZEXT48(puVar7);\n                                    puVar10 = uVar36 / uVar34;\n                                    uVar28 = uVar36 % uVar34;\n                                    puVar7 = puVar29;\n                                } while (!bVar32 && *puVar6 != 0);\n                                puVar23 = puVar24 + -2;\n                                puVar24 = puVar24 + -2;\n                                *puVar23 = uVar28;\n                                bVar32 = false;\n                                iVar8 = extraout_ECX_06;\n                            }\n                        }\n                        puVar16 = puVar22 + -1;\n                        puVar22[-1] = 0x9a18af;\n                        func_0x009b918a();\n                        *(puVar16 + -4) = 0xa19a66;\n                        fcn.00a19a9b();\n    // WARNING: Bad instruction - Truncating control flow here\n                        halt_baddata();\n                    }\n                    **0x9aa864 = **0x9aa864 + 1;\n                    ppuVar21[-1] = 0x9aa898;\n                    ppuVar21[-2] = fcn.00a19b52;\n                    iVar8 = fcn.00a19b32();\n                    *(ppuVar21 + -1) = iVar8 >> 8;\n                    pcVar1 = *(iVar8 + 0x98);\n                    *ppuVar21 = 0xa19b5f;\n                    (*pcVar1)();\n                    while( true ) {\n                        *(ppuVar21 + -4) = unaff_EBX;\n                        *(ppuVar21 + -6) = *(ppuVar21 + -4);\n                        puVar29 = unaff_EDI;\n                        ppuVar17 = ppuVar21 + -4;\n                        do {\n                            do {\n                                ppuVar21 = ppuVar17 + 1;\n                                *ppuVar17 = 0x9ba030;\n                                fcn.009a1954();\n                                *0x9b92fb69 = in(0x14);\n                                *ppuVar17 = *(puVar29 + -0x12d4ea27);\n                                puVar10 = unaff_ESI & extraout_ECX;\n                                unaff_ESI = puVar10;\n                            } while (puVar10 == NULL);\n                            puVar30 = *ppuVar17;\n                            puVar29 = puVar30 + 1;\n                            puVar7 = (*0x9b92fb69 & 0xffffff00 | *0x9b92fb69 + 0x7a) + 0x6a;\n                            *puVar7 = *puVar7 << 1 | *puVar10 < *puVar30;\n                            pcVar1 = swi(0xac);\n                            Var37 = (*pcVar1)();\n                            uVar14 = Var37 >> 0x20;\n                            puVar7 = Var37;\n                            unaff_EDI = puVar29;\n                            if ((POPCOUNT(*puVar7 - unaff_EBX & 0xff) & 1U) == 0) goto code_r0x009ba05b;\n                            uVar13 = *puVar7 < unaff_EBX;\n                            bVar32 = CARRY4(unaff_EBX, *extraout_ECX_00);\n                            bVar33 = SCARRY4(unaff_EBX, *extraout_ECX_00);\n                            uVar12 = unaff_EBX + *extraout_ECX_00;\n                            unaff_EBX = uVar12 + uVar13;\n                            unaff_ESI = puVar10 + 1;\n                            ppuVar17 = ppuVar21;\n                        } while (bVar33 == SCARRY4(uVar12, uVar13));\n                        unaff_EDI = puVar30 + 5;\n                        *puVar29 = *(puVar10 + 1);\n                        if (unaff_EBX == 0) {\n                            *(puVar7 + -0x2d) = *(puVar7 + -0x2d) << 1;\n                            uVar31 = 1;\n                            *(ppuVar21 + -2) = in_CS;\n                            puVar18 = ppuVar21 + -6;\n                            *(ppuVar21 + -6) = 0x9ba130;\n                            uVar35 = func_0x8bff181c();\n                            iVar8 = CONCAT31(uVar35 >> 0x28, 0xad);\n                            uVar13 = *(uVar35 + 0x16da6a91);\n                            out(*(puVar10 + 5), iVar8);\n                            if (puVar18 + uVar31 + *(extraout_ECX_01 * 5 + -0x1d338ece) + 4 != 0x1) {\n    // WARNING: Bad instruction - Truncating control flow here\n                                halt_baddata();\n                            }\n                            *pcVar27 = *pcVar27 + pcVar27;\n                            *pcVar27 = *pcVar27 + pcVar27;\n                            uVar12 = 0;\n                            if (*0x28 != 0) {\n                                do {\n                                    uVar13 = (uVar13 << 7 | uVar13 >> 0x19) ^ *(uVar12 + iVar8);\n                                    uVar12 = uVar12 + 1;\n                                    *0x20 = puVar10 + 9;\n                                } while (uVar12 < *0x28);\n                            }\n                            return uVar13;\n                        }\n                        *(extraout_ECX_00 + -0xf447270) = extraout_ST0;\n                        puVar7 = puVar7 & 0xffff0000 | CONCAT11(0xec, Var37);\n                        uVar2 = bVar32 || CARRY4(uVar12, uVar13);\n                        uVar12 = *unaff_EDI;\n                        uVar13 = *unaff_EDI;\n                        uVar3 = *unaff_EDI + extraout_ECX_00;\n                        *unaff_EDI = uVar3 + uVar2;\n                        unaff_ESI = puVar10 + 9;\n                        out(*(puVar10 + 5), uVar14);\n                        if (*unaff_EDI != 0 &&\n                            (SCARRY4(uVar13, extraout_ECX_00) != SCARRY4(uVar3, uVar2)) == *unaff_EDI < 0) break;\n                        *(unaff_EBX + 0xd6851e0a) =\n                             *(unaff_EBX + 0xd6851e0a) + (Var37 >> 0x20) +\n                             (CARRY4(uVar12, extraout_ECX_00) || CARRY4(uVar3, uVar2));\n                        out(uVar14, puVar7);\n                        pcVar1 = swi(0x96);\n                        (*pcVar1)();\n                        unaff_EBX = 0xe5136aa;\n                    }\ncode_r0x009ba05b:\n                    uVar31 = unaff_EDI;\n                    out(uVar14, uVar31);\n                    *(puVar7 + -0x7f5bcba6) = *(puVar7 + -0x7f5bcba6) + 0x29818966 + (uVar31 < 0x36);\n                    out(uVar14, uVar31 % 0x47);\n                    *ppuVar21[4] = *ppuVar21[4] << (ppuVar21[6] & 0x1f);\n                    do {\n    // WARNING: Do nothing block with infinite loop\n                    } while( true );\n                }\n            } while (unaff_EBX != *(puVar29 + 1 + unaff_EDI));\n            puVar22[-1] = puVar29;\n            puVar22[-2] = uVar13;\n            puVar22[-3] = uVar35 >> 0x20;\n            puVar22[-4] = unaff_EBX;\n            puVar22[-5] = puVar22;\n            puVar22[-6] = unaff_EBP;\n            puVar22[-7] = unaff_ESI & 0xffff0000 | *puVar22;\n            puVar22[-8] = unaff_EDI;\n            puVar22[-1] = 0xa18fc5;\n            fcn.00a18ec9();\n            *puVar22 = extraout_CL;\n            unaff_ESI = 0x1;\n            *(puVar22 + -0x13) = 0xa19000;\n            uVar35 = fcn.00a18fe1();\n            puVar22 = puVar22 + 5;\n        } while (*(uVar35 + 8 + unaff_EDI) < 2);\n    }\n    else {\n        iVar8 = 0x1f;\n        if (unaff_ESI != NULL) {\n            for (; unaff_ESI >> iVar8 == 0; iVar8 = iVar8 + -1) {\n            }\n        }\n        in_stack_00000018 = in_stack_00000018 & unaff_ESI;\n    }\n    *(puVar22 + -4) = unaff_EBX;\n    *(puVar22 + -4) = 0xa18f88;\n    fcn.009b933d();\n    *(puVar22 + -4) = 0xa18f4c;\n    fcn.00a18f69();\n    *extraout_EDX = *extraout_EDX + extraout_EDX;\n    *(unaff_ESI + 0x3e) = *(unaff_ESI + 0x3e) + extraout_AH;\n    *(puVar22 + -4) = extraout_EDX;\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 6455
    },
    "00a53e24": {
        "rules": [
            "encrypt data using HC-128/01272f7612224ac7bcc403d9d7459f40"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00a540d1) overlaps instruction at (ram,0x00a540cf)\n// \n\nvoid __fastcall fcn.00a53e24(uint param_1, uint param_2)\n\n{\n    uint8_t *puVar1;\n    bool bVar2;\n    int16_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint16_t uVar6;\n    uint32_t unaff_EBX;\n    uint32_t unaff_EBP;\n    int32_t unaff_EDI;\n    uint8_t uVar7;\n    char cVar8;\n    char in_AF;\n    char cVar9;\n    char cVar10;\n    ulong uVar11;\n    uint uStack00000006;\n    ushort uStack0000000d;\n    uchar uStack0000000f;\n    uchar uStack00000010;\n    uchar uStack00000011;\n    int16_t iStack00000014;\n    uchar uStack00000016;\n    uint8_t uStack00000017;\n    ushort uStack00000018;\n    uchar uStack0000001a;\n    ushort uStack0000001b;\n    uchar uStack0000001d;\n    uchar uStack0000001e;\n    uchar uStack0000001f;\n    uchar uStack00000020;\n    uchar uStack00000021;\n    uchar uStack00000022;\n    uchar uStack00000023;\n    uchar uStack00000024;\n    uchar uStack00000025;\n    uchar uStack00000026;\n    uchar uStack00000027;\n    uchar uStack00000029;\n    uchar uStack0000002a;\n    uint8_t uStack0000002b;\n    uchar uStack0000002d;\n    uchar uStack0000002e;\n    uint8_t uStack00000030;\n    uchar uStack00000031;\n    uchar uStack00000032;\n    uint8_t uStack00000033;\n    uchar uStack00000034;\n    uchar uStack00000035;\n    uchar uStack00000036;\n    uchar uStack00000038;\n    uchar uStack00000039;\n    uint in_stack_00000038;\n    \n    iStack00000014 = *0x10 + 4;\n    iVar4 = 0;\n    if (&stack0x00000038 != NULL) {\n        for (; (&stack0x00000038 >> iVar4 & 1) == 0; iVar4 = iVar4 + 1) {\n        }\n    }\n    uStack00000036 = uStack00000038;\n    uStack0000002e = uStack00000038;\n    uStack0000002a = param_2;\n    uStack0000002b = param_2 >> 8;\n    uStack00000016 = unaff_EDI;\n    uStack00000017 = unaff_EDI >> 8;\n    uVar6 = &stack0x00000036 >> 8;\n    uStack0000000d = CONCAT21(uVar6, uStack00000017);\n    uStack0000000f = &stack0x00000036 >> 0x10;\n    uStack00000010 = uStack00000038;\n    uStack0000001a = 0x9d;\n    uStack0000001b = in_stack_00000038 >> 8;\n    iVar3 = 0;\n    if (unaff_EBP != 0) {\n        for (; (unaff_EBP >> iVar3 & 1) == 0; iVar3 = iVar3 + 1) {\n        }\n    }\n    uStack0000002d = uStack00000038;\n    uStack00000018 = CONCAT31(((unaff_EBP >> 0x18) << 0x10) >> 0x10, uStack00000039);\n    uStack0000001d = iVar3;\n    uStack00000011 = uVar6 >> 8;\n    uStack00000006 = CONCAT13(uStack0000002b, CONCAT12(uStack0000002a, unaff_EBX >> 0x10));\n    uStack00000034 = unaff_EDI >> 0x10;\n    uStack00000035 = unaff_EDI >> 0x18;\n    uStack00000032 = uStack00000016;\n    uStack00000033 = uStack00000017;\n    do {\n        uStack00000030 = uStack0000002b;\n        uStack00000031 = 8;\n        uStack0000001e = uStack0000000f;\n        uStack0000001f = param_2;\n        uStack00000020 = param_2 >> 8;\n        uStack0000002b = uStack00000033;\n        uStack0000002a = uStack00000032;\n        uStack00000029 = 8;\n        uStack00000025 = uStack00000034;\n        uStack00000026 = uStack00000035;\n        uStack00000027 = uStack00000036;\n        uStack00000032 = unaff_EDI + -0x7b0ab649;\n        uStack00000033 = (unaff_EDI + -0x7b0ab649 >> 8) >> (unaff_EBX & 0xffff & 0x1f);\n        bVar2 = (unaff_EBX & 0x1f) != 0;\n        cVar10 = !bVar2 && &stack0x00000025 < 0 || bVar2 && uStack00000033 < '\\0';\n        cVar9 = !bVar2 && *0x10 == 0xffffffdb || bVar2 && uStack00000033 == 0;\n        cVar8 = !bVar2 && (POPCOUNT(&stack0x00000025 & 0xff) & 1U) == 0 || bVar2 && (POPCOUNT(uStack00000033) & 1U) == 0\n        ;\n        uVar7 = 1;\n        uVar6 = ~(unaff_EBX & 0xffff);\n        uStack00000035 = uVar6;\n        uStack00000036 = uVar6 >> 8;\n        uStack00000021 = 0xbe;\n        uStack00000022 = 0x40;\n        uStack00000023 = 0xa5;\n        uStack00000024 = 0;\n        uVar11 = fcn.00a54094();\n        param_2 = uVar11 >> 0x20;\n        uVar5 = CONCAT11(cVar10 << 7 | cVar9 << 6 | in_AF << 4 | cVar8 << 2 | 2U | uVar7, uVar11);\n        puVar1 = (uVar11 & 0xffff0000 | uVar5) + 0x41a05136;\n        *puVar1 = *puVar1 & uVar5 >> 8;\n        unaff_EDI = -0x78992909;\n    } while( true );\n}\n",
        "token_count": 1548
    },
    "00a54956": {
        "rules": [
            "hash data using djb2/86fcf1c18148478ab58e8c52ba43c8d5",
            "hash data using jshash/2d43aa00ef9c47beadbc2522c99f9e7b"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n\nvoid fcn.00a54956(void)\n\n{\n    char *pcVar1;\n    int32_t iVar2;\n    uint16_t extraout_CX;\n    uint32_t uVar3;\n    uint32_t unaff_EBX;\n    uint32_t unaff_EBP;\n    uint32_t unaff_ESI;\n    int32_t unaff_EDI;\n    ushort in_DS;\n    ulong uVar4;\n    uint16_t unaff_retaddr;\n    uint32_t uStack00000013;\n    uchar uStack00000017;\n    uint32_t in_stack_00000018;\n    \n    uVar4 = fcn.00a549bf();\n    uVar3 = uVar4 >> 0x20;\n    *(unaff_EDI + -4) = in_DS;\n    pcVar1 = (unaff_ESI & 0xffff0000 | unaff_retaddr) - 0x7b;\n    *pcVar1 = *pcVar1 + (extraout_CX >> 8) + (uVar4 < 0xf247b4ad);\n    uStack00000013 = uVar4 & 0xffff0000 | extraout_CX & 0xffffff00 | in_stack_00000018 >> 0x18;\n    uStack00000017 = uVar4 >> 0x20;\n    iVar2 = 0x1f;\n    if (unaff_EBP != 0) {\n        for (; unaff_EBP >> iVar2 == 0; iVar2 = iVar2 + -1) {\n        }\n    }\n    iVar2 = 0;\n    if (&stack0x00000034 != NULL) {\n        for (; (&stack0x00000034 >> iVar2 & 1) == 0; iVar2 = iVar2 + 1) {\n        }\n    }\n    iVar2 = 0;\n    if (unaff_EBX != 0) {\n        for (; (unaff_EBX >> iVar2 & 1) == 0; iVar2 = iVar2 + 1) {\n        }\n    }\n    iVar2 = 0x1f;\n    if (uVar3 != 0) {\n        for (; uVar3 >> iVar2 == 0; iVar2 = iVar2 + -1) {\n        }\n    }\n    fcn.00a54956();\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 532
    },
    "00a55969": {
        "rules": [
            "hash data using djb2/86fcf1c18148478ab58e8c52ba43c8d5",
            "hash data using jshash/2d43aa00ef9c47beadbc2522c99f9e7b"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "00a55842": {
        "rules": [
            "hash data using aphash/0253f481fbfe42f6972c4d360912dc99"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00a55bc8) overlaps instruction at (ram,0x00a55bc7)\n// \n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00a55842(uint param_1, uint param_2, uint param_3, uchar param_4, uint param_5, uint param_6, uint param_7, \n                 ushort param_8, uchar param_9, uint param_10, ulong param_11, uint32_t param_12, uchar param_13, \n                 uchar param_14)\n\n{\n    char *pcVar1;\n    int16_t iVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    ushort uVar5;\n    uint16_t in_AX;\n    ushort uVar6;\n    int32_t extraout_ECX;\n    int32_t extraout_ECX_00;\n    ushort extraout_DX;\n    uint32_t extraout_EDX;\n    uint16_t uVar7;\n    uint32_t unaff_EBP;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    uint32_t unaff_ESI;\n    uint32_t uVar10;\n    uint32_t unaff_EDI;\n    bool bVar11;\n    bool bVar12;\n    uint8_t in_AF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    ulong uVar13;\n    uint uStack00000011;\n    uchar uStack00000022;\n    uchar uStack00000023;\n    uchar uStack00000025;\n    ushort uStack00000026;\n    uchar uStack00000039;\n    uchar uStack0000003a;\n    uchar uStack0000003b;\n    uchar auStack45 [2];\n    uchar uStack43;\n    uint32_t uStack42;\n    uchar uStack38;\n    uint32_t uStack37;\n    uint uStack21;\n    uchar uStack17;\n    uint32_t uStack16;\n    uint uStack12;\n    uint32_t uStack8;\n    uchar uStack1;\n    \n    uVar8 = unaff_ESI & 0xffff0000 | in_AX;\n    uVar6 = fcn.00a5582c();\n    uVar5 = param_3._1_2_;\n    uStack38 = unaff_EBP >> 0x18;\n    uStack43 = (unaff_ESI & 0xffff0000) >> 0x10;\n    uStack42 = unaff_EBP << 8;\n    bVar11 = POPCOUNT((unaff_EBP & 1) << 7) != '\\0';\n    iVar3 = 0;\n    if (uVar8 != 0) {\n        for (; (uVar8 >> iVar3 & 1) == 0; iVar3 = iVar3 + 1) {\n        }\n    }\n    uStack12 = CONCAT31(CONCAT21(0xf268, bVar11), bVar11);\n    uStack37._0_3_ = CONCAT21(in_AX, 0xef);\n    uStack37 = &uStack17 & 0xff000000 | uStack37;\n    param_1._2_1_ = uVar6 >> 8;\n    uStack17 = uStack42 >> 0x18;\n    uStack16 = (in_NT & 1) * 0x4000 | SCARRY4(&uStack43, 0x18) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n               (&uStack21 + 2 < 0) * 0x80 | (*0x10 == 0x13) * 0x40 | (in_AF & 1) * 0x10 |\n               ((POPCOUNT(&uStack21 + 2U & 0xff) & 1U) == 0) * 4 | 0xffffffe7 < &uStack43 | (in_ID & 1) * 0x200000 |\n               (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    uVar7 = extraout_EDX + 0xd9;\n    iVar2 = 0;\n    if (uVar7 != 0) {\n        for (; (uVar7 >> iVar2 & 1) == 0; iVar2 = iVar2 + 1) {\n        }\n    }\n    param_1._1_1_ = param_3;\n    uStack1 = uVar6;\n    uVar8 = unaff_EDI * 4 ^ &param_3 + extraout_EDX + 1;\n    param_2._3_1_ = uVar8 >> 0x10;\n    param_1._3_1_ = 0xda;\n    param_2._1_1_ = 0xa5;\n    param_2._2_1_ = 0;\n    uStack42 = unaff_EDI & 0xffff0000 | extraout_EDX & 0xffff;\n    uStack8 = extraout_EDX;\n    uVar13 = fcn.00a55969();\n    uStack00000026 = CONCAT22(param_3._1_2_, uVar8 >> 0x10) >> 8;\n    param_10._0_1_ = param_3._1_2_ >> 8;\n    uStack00000011 = param_11._1_4_;\n    param_5._0_1_ = param_11._1_4_ >> 0x18;\n    iVar2 = 0;\n    if (uVar13 != 0) {\n        for (; (uVar13 >> iVar2 & 1) == 0; iVar2 = iVar2 + 1) {\n        }\n    }\n    param_3._3_1_ = param_7 >> 0x10;\n    param_4 = param_7 >> 0x18;\n    iVar2 = 0;\n    if (unaff_EDI != 0) {\n        for (; (unaff_EDI >> iVar2 & 1) == 0; iVar2 = iVar2 + 1) {\n        }\n    }\n    uStack0000003b = uVar13 >> 8;\n    param_12 = (uVar13 >> 0x20) << 0x18;\n    uVar9 = param_12;\n    param_13 = uVar13 >> 0x28;\n    uStack00000039 = uVar13 >> 0x30;\n    uStack0000003a = uVar13 >> 0x38;\n    param_10._2_1_ = extraout_ECX;\n    param_10._3_1_ = extraout_ECX >> 8;\n    param_12 = extraout_ECX + CONCAT11(param_14, uStack0000003b) & 0xffff |\n               uVar13 + CONCAT31(CONCAT21(uVar5, param_5), param_5) & 0xffff0000;\n    uVar8 = uVar13 >> 8 & 0xff;\n    param_7 = 0xa55b6a;\n    uStack00000025 = param_2._3_1_;\n    func_0x00a55b0c();\n    do {\n        uVar10 = uVar8 & 0xffff;\n        uVar8 = uVar9 >> 0x1f;\n        do {\n            bVar11 = (POPCOUNT(uVar10 * 4 + 1 & 0xff) & 1U) == 0;\n            iVar3 = 0;\n            if (unaff_EDI != 0) {\n                for (; (unaff_EDI >> iVar3 & 1) == 0; iVar3 = iVar3 + 1) {\n                }\n            }\n            uStack00000022 = 0xe2;\n            uStack00000023 = 0x5b;\n            param_9 = 0xa5;\n            uStack00000025 = 0;\n            bVar12 = bVar11;\n            fcn.00a55c27();\n            uVar10 = uVar8;\n        } while (bVar12);\n        if (!bVar12) {\n            in(extraout_DX);\n            iVar4 = *(extraout_ECX_00 + 0x13e08111) * -0x3b;\n            pcVar1 = CONCAT31(CONCAT21(iVar3 >> 0x10, iVar3), bVar11) + -0x2c995af6;\n            *pcVar1 = *pcVar1 + iVar4 + (iVar4 != iVar4);\n            in(iVar4);\n            uVar8 = CONCAT11(-iVar3, bVar11) * 4;\n        }\n        param_8 = CONCAT11(param_10._3_1_, param_10._2_1_);\n        uVar9 = 0;\n        param_10._0_1_ = uVar8;\n        param_10._1_1_ = uVar8 >> 8;\n    } while( true );\n}\n",
        "token_count": 2046
    },
    "0099c2ca": {
        "rules": [
            "hash data using fnv/71d430608aea45068f0f63fc2cdc3004",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x0099c305) overlaps instruction at (ram,0x0099c304)\n// \n// WARNING: Control flow encountered bad instruction data\n// WARNING: Unable to track spacebase fully for stack\n\nvoid fcn.0099c2ca(uint param_1, uint param_2, uchar *param_3)\n\n{\n    uint uVar1;\n    uint8_t uVar2;\n    int32_t iVar3;\n    char *pcVar4;\n    uint32_t *puVar5;\n    int32_t extraout_ECX;\n    int32_t *piVar6;\n    int32_t unaff_EBP;\n    uint32_t *unaff_ESI;\n    uint32_t *puVar7;\n    uint *unaff_EDI;\n    bool bVar8;\n    char cVar9;\n    char cVar10;\n    unkbyte10 extraout_ST0;\n    uint64_t uVar11;\n    uint uStack0000002a;\n    \n    fcn.0099c21d();\n    bVar8 = false;\n    // WARNING: Call to offcut address within same function\n    uVar2 = func_0x0099c2e0();\n    if (bVar8) {\n        fcn.0099c23d();\n        uStack0000002a = 0x99c283;\n        fcn.0099c2aa();\n        LOCK();\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    cVar10 = '\\0';\n    cVar9 = '\\0';\n    if ((uVar2 & 4) != 0) {\n        uVar11 = fcn.009cb0dd();\n        iVar3 = uVar11;\n        puVar7 = unaff_ESI;\n        if (cVar10 != cVar9) {\n            *(extraout_ECX + -0x74) = extraout_ST0;\n            *(unaff_EBP + -0x16e3db9c) = *(unaff_EBP + -0x16e3db9c) + -1;\n            bVar8 = SCARRY4(param_3, &stack0x0000000c);\n            param_3 = &stack0x0000000c + param_3;\n            unaff_EBP = *(iVar3 + 4);\n            if (bVar8 == param_3 < 0) {\n                uVar1 = in(uVar11 >> 0x20);\n                *unaff_EDI = uVar1;\n                *0xfb97efc0 = *0xfb97efc0 >> 9 | *0xfb97efc0 << 0x17;\n                *(CONCAT31(&stack0x0000000c >> 8, 0x8c) + 0x66) = 0;\n                *(iVar3 + 0x1c) = param_3;\n                param_3 = 0x99c38e;\n                *(iVar3 + 0x22) = 0x99c336;\n                uVar11 = fcn.009cb29b();\n                piVar6 = uVar11 >> 0x20;\n                uVar11 = uVar11 & 0x1e2f3f8d | piVar6 + *piVar6 << 0x20;\n                unaff_EDI = unaff_EDI + 1;\n            }\n            else {\n                puVar7 = unaff_ESI + 1;\n                uVar11 = uVar11 & 0xffffffff00000000 | *unaff_ESI;\n            }\n        }\n        pcVar4 = uVar11;\n        out(*puVar7, uVar11 >> 0x20);\n        *unaff_EDI = *unaff_EDI << 1;\n        *pcVar4 = *pcVar4 + uVar11;\n        *(unaff_EBP + -0x52cd1a4e) = *(unaff_EBP + -0x52cd1a4e) - *(pcVar4 + -0x2d1634);\n        puVar5 = pcVar4 + 0x2a0002f1;\n        *puVar5 = *puVar5 ^ puVar7 + 1;\n        piVar6 = puVar5 - (uVar11 >> 0x20);\n        *piVar6 = *piVar6 + piVar6;\n        func_0x11836e68();\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    fcn.009cb111();\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 1018
    },
    "009bb2f6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x009bb32f)\n\nuint fcn.009bb2f6(void)\n\n{\n    code *pcVar1;\n    uint16_t uVar2;\n    uint uVar3;\n    uchar unaff_BL;\n    uint32_t unaff_EBP;\n    bool bVar4;\n    code *pcStack0000000a;\n    uint uStack10;\n    ushort uStack6;\n    uchar uStack4;\n    uchar uStack3;\n    ushort uStack2;\n    \n    uVar2 = CONCAT11(unaff_BL, unaff_EBP);\n    uStack4 = 0x76;\n    uStack3 = 0xb3;\n    uStack2 = 0x9b;\n    fcn.009bb355();\n    if (*0x10 != 0x8 && SBORROW4(&stack0x0000000e, 0x16) == &uStack10 + 2 < 0) {\n        uStack10 = CONCAT13(uStack3, CONCAT12(uStack4, uStack6));\n        fcn.009bb4af();\n        pcVar1 = swi(3);\n        uVar3 = (*pcVar1)();\n        return uVar3;\n    }\n    uStack10 = CONCAT13(uStack3, CONCAT12(uStack4, uStack6));\n    bVar4 = (unaff_EBP & 0x4000) != 0;\n    if ((bVar4) && (!bVar4)) {\n        return CONCAT31(uVar2 & 0xff00 | (uVar2 << 0x18) >> 8 | unaff_EBP >> 8 | 0x40, -bVar4);\n    }\n    pcStack0000000a = fcn.009bbd1c;\n    uVar3 = fcn.009bba10();\n    return uVar3;\n}\n",
        "token_count": 408
    },
    "00a33700": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00a338e0) overlaps instruction at (ram,0x00a338df)\n// \n// WARNING: Possible PIC construction at 0x00a3376a: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x00a3376f)\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: This function may have set the stack pointer\n// WARNING: Removing unreachable block (ram,0x009a46e9)\n\nvoid fcn.00a33700(uint param_1, int32_t param_2)\n\n{\n    char *pcVar1;\n    uchar *puVar2;\n    uint32_t *puVar3;\n    char cVar4;\n    uint32_t uVar5;\n    uint8_t uVar6;\n    uint16_t uVar7;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    uint *puVar10;\n    char extraout_CL;\n    uint32_t extraout_ECX;\n    uint32_t uVar11;\n    int32_t extraout_ECX_00;\n    uint8_t uVar13;\n    uint32_t uVar12;\n    uint32_t uVar14;\n    uint *puVar15;\n    uint8_t *puVar17;\n    uint8_t *unaff_ESI;\n    uint8_t **unaff_EDI;\n    uint8_t uVar18;\n    uchar uVar19;\n    bool bVar20;\n    uint8_t in_AF;\n    uint8_t uVar21;\n    uint8_t uVar22;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t uVar23;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uchar in_YMM1 [32];\n    ulong uVar24;\n    uchar *apuStack49461 [12267];\n    uint uStack392;\n    uint auStack388 [2];\n    uint32_t uStack380;\n    uint *puVar16;\n    \n    fcn.00a33cb6();\n    *unaff_EDI = *unaff_EDI ^ unaff_EDI;\n    uVar14 = 0;\n    puVar10 = func_0x00a337b2();\n    uVar19 = 0;\n    if (param_2 == 0) {\n        uVar18 = 0;\n        uVar23 = 0;\n        uVar22 = 1;\n        uVar21 = 0;\n        bVar20 = true;\n        uStack380 = 0x9a45df;\n        uVar24 = fcn.00a33e13();\n        uVar12 = uVar24 >> 0x20;\n        uStack380 = (in_NT & 1) * 0x4000 | (uVar23 & 1) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n                    (uVar22 & 1) * 0x80 | (uVar21 & 1) * 0x40 | (in_AF & 1) * 0x10 | (bVar20 & 1) * 4 | uVar18 & 1 |\n                    (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n        out(uVar24 >> 0x20, uVar24);\n        uVar9 = uVar24 & 0xffff0000;\n        uVar5 = uVar24 * extraout_ECX;\n        uVar8 = uVar9 | uVar5;\n        uVar11 = extraout_ECX;\n        if (bVar20) {\n            puVar2 = uVar12 + 0xccbc3d2a + ((uVar9 | uVar5 & 0xffffff00 | *unaff_ESI) & 0xb4920613) * 2;\n            *0x3aa4dc4d = uVar8;\n            *puVar2 = *puVar2;\n            *unaff_EDI = unaff_ESI + 1;\n            while( true ) {\n                *0xb60aee51 = 0xa33c37;\n                fcn.00a33bee();\n                if (extraout_ECX_00 == 0) break;\n                *0xb60aee61 = *0xb60aee61 + -1;\n            }\n            if (extraout_ECX_00 == 0) {\n                *0xb60aee61 = *0xb60aee61 + -1;\n            }\n            *0xb60aee7d = *0xb60aee7d + *0xb60aeea5;\n            *0xb60aee51 = fcn.00a350bc;\n            fcn.00a34b0b();\n            *0xb60aee51 = *0xb60aee95;\n            return;\n        }\n        while( true ) {\n            *0x68f106c8 = uVar8;\n            uVar9 = (uVar8 & 0xffff0000 |\n                     CONCAT11(((uVar8 & 0x1a14ba03) == 0) << 6 | in_AF << 4 | ((POPCOUNT(uVar8 & 3) & 1U) == 0) << 2, \n                              *0x68f106c8) | 0x200) - *(puVar10 + 0x1e4682a6);\n            puVar17 = puVar10 + 0xd4e3616;\n            uVar18 = *puVar17;\n            *puVar17 = *puVar17 - uVar11;\n            uVar21 = (uVar9 + '^') - (uVar18 < uVar11);\n            in_YMM1 = vpaddsb_avx2(in_YMM1, *(uVar9 & 0xffffff00 | uVar21));\n            puVar17 = uVar11 + 0xc287c94b;\n            uVar18 = *puVar17;\n            uVar22 = (uVar9 & 0xffffff00) >> 8;\n            *puVar17 = *puVar17 - uVar22;\n            out(0x14, uVar21);\n            if (*puVar17 < '\\0') {\n                in(uVar12);\n    // WARNING: Bad instruction - Truncating control flow here\n                halt_baddata();\n            }\n            in_AF = 9 < (uVar21 & 0xf) | in_AF;\n            uVar21 = uVar21 + in_AF * '\\x06';\n            puVar17 = uVar14 - 0x75;\n            uVar23 = *puVar17;\n            uVar13 = uVar12 >> 8;\n            *puVar17 = *puVar17 + uVar13;\n            uVar6 = in(uVar12);\n            uVar9 = ((uVar9 & 0xffffff00 |\n                      uVar21 + (0x90 < (uVar21 & 0xf0) | uVar18 < uVar22 | in_AF * (0xf9 < uVar21)) * '`' | 0x2bb5689d)\n                    + 0x1cd82b73) - CARRY1(uVar23, uVar13) & 0xffffff00 | uVar6;\n            puVar17 = unaff_ESI + 1;\n            if (!SCARRY4(unaff_ESI, 1)) break;\n            unaff_ESI[-0x65] = unaff_ESI[-0x65] & uVar14 >> 8;\n            puVar15 = &stack0xfffffe7c;\n            puVar16 = &stack0xfffffe7c;\n            cVar4 = '\\x12';\n            do {\n                puVar10 = puVar10 + -1;\n                puVar15 = puVar15 + -1;\n                *puVar15 = *puVar10;\n                cVar4 = cVar4 + -1;\n            } while ('\\0' < cVar4);\n            *(unaff_EDI + 0x23) = CONCAT31(uVar11 >> 8, 0xa2);\n            if (uVar9 == 0) {\n                puVar3 = cpuid_basic_info(0);\n            }\n            else if (uVar9 == 1) {\n                puVar3 = cpuid_Version_info(1);\n            }\n            else if (uVar9 == 2) {\n                puVar3 = cpuid_cache_tlb_info(2);\n            }\n            else if (uVar9 == 3) {\n                puVar3 = cpuid_serial_info(3);\n            }\n            else if (uVar9 == 4) {\n                puVar3 = cpuid_Deterministic_Cache_Parameters_info(4);\n            }\n            else if (uVar9 == 5) {\n                puVar3 = cpuid_MONITOR_MWAIT_Features_info(5);\n            }\n            else if (uVar9 == 6) {\n                puVar3 = cpuid_Thermal_Power_Management_info(6);\n            }\n            else if (uVar9 == 7) {\n                puVar3 = cpuid_Extended_Feature_Enumeration_info(7);\n            }\n            else if (uVar9 == 9) {\n                puVar3 = cpuid_Direct_Cache_Access_info(9);\n            }\n            else if (uVar9 == 10) {\n                puVar3 = cpuid_Architectural_Performance_Monitoring_info(10);\n            }\n            else if (uVar9 == 0xb) {\n                puVar3 = cpuid_Extended_Topology_info(0xb);\n            }\n            else if (uVar9 == 0xd) {\n                puVar3 = cpuid_Processor_Extended_States_info(0xd);\n            }\n            else if (uVar9 == 0xf) {\n                puVar3 = cpuid_Quality_of_Service_info(0xf);\n            }\n            else if (uVar9 == 0x80000002) {\n                puVar3 = cpuid_brand_part1_info(0x80000002);\n            }\n            else if (uVar9 == 0x80000003) {\n                puVar3 = cpuid_brand_part2_info(0x80000003);\n            }\n            else if (uVar9 == 0x80000004) {\n                puVar3 = cpuid_brand_part3_info(0x80000004);\n            }\n            else {\n                puVar3 = cpuid(uVar9);\n            }\n            uVar8 = *puVar3;\n            uVar14 = puVar3[1];\n            uVar12 = puVar3[2];\n            uVar11 = puVar3[3];\n            puVar15 = &stack0xffff3ecf;\n            puVar10 = &stack0xffff3ecf;\n            apuStack49461[1] = &stack0xfffffe7c;\n            cVar4 = '\\a';\n            do {\n                puVar16 = puVar16 + -1;\n                puVar15 = puVar15 + -1;\n                *puVar15 = *puVar16;\n                cVar4 = cVar4 + -1;\n                unaff_ESI = puVar17;\n            } while ('\\0' < cVar4);\n        }\n        uVar14 = *(&stack0xfffffe84 + uVar9 * 8);\n        bVar20 = 9 < (puVar10 & 0xf) || (puVar10 & 0x1000) != 0;\n        uVar7 = CONCAT11((puVar10 >> 8) + bVar20, puVar10 + bVar20 * '\\x06') & 0xff0f;\n        uVar9 = puVar10 & 0xffff0000 | uVar7;\n        *unaff_EDI = uVar7;\n        *((&stack0xfffffe84 ^ uVar14) - 4) = puVar10;\n        *0x486189c8 = uVar9 + 1;\n        uVar9 = uVar9 + 0xa02b213 ^ 0x1ff98c09 | *(uVar12 - 0x2a);\n        **((&stack0xfffffe84 ^ uVar14) - 4) =\n             (in_NT & 1) * 0x4000 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | (uVar9 < 0) * 0x80 | (uVar9 == 0) * 0x40\n             | bVar20 * 0x10 | ((POPCOUNT(uVar9 & 0xff) & 1U) == 0) * 4 | (in_ID & 1) * 0x200000 |\n             (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n        swi(4);\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    if (param_2 == 0) {\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    fcn.00a33836();\n    fcn.009b92ab();\n    uStack380 = 0x9aa880;\n    fcn.009b9288();\n    fcn.009b9272();\n    uVar14 = fcn.00a338e9();\n    if (uVar19) {\n        pcVar1 = (uVar14 & 0xffffff00 | *(uVar14 & 0xff)) * 8 + -0x34fbfa18;\n        *pcVar1 = *pcVar1 + extraout_CL + uVar19;\n        **(unaff_ESI + -0x17b4d777) = *unaff_ESI;\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 3167
    },
    "009a4797": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009a470a) overlaps instruction at (ram,0x009a4709)\n// \n\nvoid fcn.009a4797(void)\n\n{\n    ushort extraout_DX;\n    uint var_7ch;\n    uint var_8h;\n    \n    fcn.009acaa9(0xb81a83da);\n    in(0x5f);\n    in(extraout_DX);\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 123
    },
    "009aaa30": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n\nuint16_t fcn.009aaa30(void)\n\n{\n    uchar uVar1;\n    int32_t unaff_EBX;\n    int32_t unaff_EBP;\n    uchar unaff_retaddr;\n    \n    uVar1 = fcn.009aaa5d();\n    *(unaff_EBP + -2) = unaff_EBP;\n    *(unaff_EBP + -4) = unaff_EBX + 0x7dba6bb6;\n    return ~CONCAT11(unaff_retaddr, uVar1);\n}\n",
        "token_count": 127
    },
    "009c3429": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009aac68) overlaps instruction at (ram,0x009aac67)\n// \n// WARNING: Possible PIC construction at 0x009aae39: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x009aae3e)\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: This function may have set the stack pointer\n// WARNING: Removing unreachable block (ram,0x009c3bee)\n// WARNING: Removing unreachable block (ram,0x009c3bbf)\n// WARNING: Removing unreachable block (ram,0x009bb32f)\n\nuint64_t fcn.009c3429(uint32_t param_1, int32_t param_2, uint param_3, uint16_t param_4, uint param_5, int32_t param_6, \n                     uint32_t param_7)\n\n{\n    char *pcVar1;\n    int32_t *piVar2;\n    uint32_t *puVar3;\n    uint16_t uVar4;\n    uint32_t uVar5;\n    code *pcVar6;\n    uint8_t uVar7;\n    int16_t iVar8;\n    uint8_t *puVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    int32_t iVar12;\n    uint32_t **ppuVar13;\n    char cVar14;\n    uint16_t extraout_CX;\n    uint32_t extraout_ECX;\n    uint32_t uVar15;\n    uint extraout_ECX_00;\n    uint extraout_ECX_01;\n    int16_t iVar16;\n    uint extraout_EDX;\n    uint16_t uVar17;\n    int32_t iVar18;\n    uint32_t unaff_EBP;\n    int32_t unaff_ESI;\n    uint unaff_EDI;\n    uint8_t uVar19;\n    bool bVar20;\n    uchar in_PF;\n    bool bVar21;\n    uint8_t in_AF;\n    bool in_ZF;\n    char in_SF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    char in_OF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint64_t uVar22;\n    uint64_t uVar23;\n    unkbyte6 Var24;\n    uint32_t unaff_retaddr;\n    ushort uStack36;\n    ushort uStack20;\n    ushort uStack16;\n    uchar uStack14;\n    uchar uStack13;\n    ushort uStack12;\n    ushort uStack10;\n    ushort uStack8;\n    uchar uStack4;\n    uchar uStack3;\n    ushort uStack2;\n    \n    uVar11 = unaff_ESI + 0x50;\n    uVar19 = unaff_retaddr;\n    bVar20 = (CONCAT31(0x10dead, uVar19) >> (unaff_retaddr & 0x1f) & 1) != 0;\n    if ((in_ZF || in_OF != in_SF) || (!in_ZF && in_OF == in_SF)) {\n        uStack36 = unaff_EDI >> 0x10;\n        if (uVar11 < unaff_EBP) {\n            uVar7 = unaff_EBP;\n            uVar11 = (CONCAT11(uVar19, uVar7) & 0xff00) << 8 | CONCAT11(uVar19, uVar7) << 0x18;\n            uStack4 = 0x76;\n            uStack3 = 0xb3;\n            uStack2 = 0x9b;\n            fcn.009bb355();\n            uStack13 = extraout_ECX_01 >> 8;\n            uStack14 = extraout_ECX_01;\n            uStack12 = extraout_ECX_01 >> 0x10;\n            uStack20 = uVar11 >> 0x10;\n            if (*0x10 != 0x8 && SBORROW4(&stack0x0000000e, 0x16) == &stack0xfffffff8 < 0) {\n                uStack8 = CONCAT11(uStack3, uStack4);\n                uStack16 = extraout_EDX >> 0x10;\n                fcn.009bb4af();\n                pcVar6 = swi(3);\n                uVar23 = (*pcVar6)();\n                return uVar23;\n            }\n            uStack8 = CONCAT11(uStack3, uStack4);\n            bVar20 = (unaff_EBP & 0x4000) != 0;\n            if ((bVar20) && (!bVar20)) {\n                return CONCAT44(extraout_EDX, CONCAT31(uVar11 >> 8 | unaff_EBP >> 8 | 0x40, -bVar20));\n            }\n            uStack16 = uStack20;\n            uVar23 = fcn.009bba10();\n            uVar11 = uVar23 >> 0x20 & 0xffff0000 | CONCAT11(uVar23 >> 8, uVar23 >> 0x20) + 1;\n            return uVar23 & 0xffffffff |\n                   CONCAT31(0xfc2951, \n                            -1 < (CONCAT22(uStack12, CONCAT11(uStack13, uVar7)) |\n                                 uVar11 << (uVar7 & 0x1f) |\n                                 CONCAT14(0xc1 < unaff_EDI || CARRY1(unaff_EDI + 0x3e, &stack0x0000000e < 0x1b), uVar11)\n                                 >> 0x21 - (uVar7 & 0x1f))) << 0x20;\n        }\n        bVar20 = *0x10 < 0x10;\n        in_ZF = *0x10 == 0x10;\n        in_PF = (POPCOUNT(&stack0xfffffff0 & 0xff) & 1U) == 0;\n        if ((!in_ZF) || (in_ZF)) {\n            uVar11 = uVar11 & 0xffffff00 | 0xab;\n            goto code_r0x009c3482;\n        }\n        in_IF = 0;\n        uStack12 = unaff_EDI;\n        in_PF = (POPCOUNT(*CONCAT13(uStack13, CONCAT12(uStack14, uStack16)) & 0xf9) & 1U) == 0;\n        uStack10 = uStack36;\n    }\n    else {\ncode_r0x009c3482:\n        bVar21 = (unaff_retaddr & 0x1f) != 0;\n        if (!bVar21 & bVar20 | (bVar21 && (uVar11 >> (uVar19 & 0xf) | uVar11 << 0x10 - (uVar19 & 0xf)) < 0) || in_ZF) {\n            param_7 = param_1 & 0xffff | param_6 << 0x10;\n            goto code_r0x009c3b4d;\n        }\n    }\n    param_7 = param_1 & 0xffff | param_6 << 0x10;\ncode_r0x009c3b4d:\n    param_7 = param_7 & 0xffff0000 | param_4;\n    uVar19 = (param_6 & 0x1f) % 0x11;\n    uVar17 = param_7 >> uVar19 | param_7 << 0x11 - uVar19;\n    if ((in_PF) || (!in_PF)) {\n        param_6 = 0x9c3a49;\n        iVar12 = func_0x009c34ec();\n        param_7 = iVar12 + -0x41;\n        param_6 = 0x9c3a7a;\n        fcn.009c3ab7();\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    param_6 = 0xa4a3e9eb;\n    param_5 = 0x9c3b6d;\n    Var24 = fcn.009b0d52();\n    iVar16 = Var24 >> 0x20;\n    ppuVar13 = Var24 + 0x39b4d342;\n    in(iVar16);\n    *0x5266fffe = *0x5266fffe & 0xffffff00 | uVar17 >> 8;\n    *0x5266fffa = 0xfffe;\n    *0x5266fffc = 0x66;\n    *0x5266fffd = 0x52;\n    if (uVar17 < '\\0') {\n        *0x5266fff8 = 0xad;\n        *0x5266fff9 = 0x3b;\n        *0x5266fffa = 0x9c;\n        fcn.009c3bc9();\n        pcVar6 = swi(3);\n        uVar23 = (*pcVar6)();\n        return uVar23;\n    }\n    puVar3 = **ppuVar13;\n    iVar12 = 0x1f;\n    if (puVar3 != NULL) {\n        for (; puVar3 >> iVar12 == 0; iVar12 = iVar12 + -1) {\n        }\n    }\n    iVar8 = iVar12;\n    bVar21 = (POPCOUNT(-iVar8 & 0xff) & 1U) == 0;\n    *ppuVar13 = puVar3;\n    uVar17 = iVar16 + 0x4631;\n    bVar20 = (uVar17 >> (uVar17 & 0xf) & 1) != 0;\n    if ((!bVar20) && (bVar20)) {\n        return CONCAT44(*(param_2 + 0x18), *(param_2 + 0x20));\n    }\n    uVar19 = *(unaff_retaddr - 1);\n    uVar11 = puVar3 & 0xffff0000 | CONCAT11(*0x5266fffd, *0x5266fffc);\n    if ((0 < iVar8) && (0 >= iVar8)) {\n        uVar7 = Var24 >> 0x20;\n        cVar14 = uVar19 + uVar7;\n        *0x5266fffa = (in_NT & 1) * 0x4000 | SCARRY1(uVar19, uVar7) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100\n                      | (cVar14 < '\\0') * 0x80 | (cVar14 == '\\0') * 0x40 | (in_AF & 1) * 0x10 |\n                      ((POPCOUNT(cVar14) & 1U) == 0) * 4 | CARRY1(uVar19, uVar7);\n        *0x5266fffc = (in_ID & 1) * 0x200000 >> 0x10 | (in_VIP & 1) * 0x100000 >> 0x10 | (in_VIF & 1) * 0x80000 >> 0x10\n                      | (in_AC & 1) * 0x40000 >> 0x10;\n        *0x5266fffd = 0;\n        *0x5266fff8 = *0x5266ffee;\n        *0x5266ffee = 0x9aaec5;\n        *0x5266fffe = param_2;\n        uVar23 = fcn.009aae81();\n        uVar11 = CONCAT13(*0x5266fff9, CONCAT12(*0x5266fff8, *0x5266fff6));\n        *0x5266fff6 = uVar23 >> 0x20;\n        *0x5266fff8 = uVar23 >> 0x30;\n        *0x5266fff9 = uVar23 >> 0x38;\n        iVar12 = 0;\n        if (ppuVar13 != NULL) {\n            for (; (ppuVar13 >> iVar12 & 1) == 0; iVar12 = iVar12 + 1) {\n            }\n        }\n        *0x5266ffee = uVar23 >> 0x20;\n        return uVar23 & 0xffffffff | uVar11 << 0x20;\n    }\n    *0x5266fff8 = 0x8f;\n    *0x5266fff9 = 0xad;\n    *0x5266fffa = 0x9a;\n    uVar10 = fcn.009aadeb();\n    if (bVar21) {\n        uVar15 = CONCAT31(extraout_ECX_00 >> 8, 0x2d);\n        uVar23 = CONCAT44(0x5266fffc, uVar10 & 0xffffff00);\n        do {\n            iVar18 = uVar23 >> 0x20;\n            uVar10 = (uVar11 & 0xff00) << 8;\n            uVar5 = uVar11 << 0x18;\n            uVar17 = (uVar23 >> 0x20) - 0x1c;\n            uVar11 = (uVar11 & 0xff0000) >> 8 | uVar10 | uVar5 | uVar23 >> 8 & 0xff;\n            uVar19 = 0;\n            if ((uVar15 | unaff_retaddr + 0x137cae9d) < 0) {\n                uVar4 = 0xf;\n                if (uVar17 != 0) {\n                    for (; uVar17 >> uVar4 == 0; uVar4 = uVar4 - 1) {\n                    }\n                }\n                uVar11 = uVar10 | uVar5 | uVar4;\n                *(iVar18 + -0x20) = 0x9aac73;\n                uVar23 = func_0x009aad1b();\n                uVar15 = extraout_ECX;\n            }\n            else {\n                *(iVar18 + -0x20) = 0x9aac65;\n                uVar22 = fcn.009aacdc();\n                puVar9 = uVar22 & 0xffff0000 | extraout_CX;\n                uVar23 = uVar22 & 0xffffffff00000000 | ZEXT48(puVar9);\n                uVar15 = uVar22 & 0xffff;\n                pcVar1 = Var24 + -0x93bc5fd;\n                uVar7 = extraout_CX;\n                *pcVar1 = *pcVar1 + uVar7 + uVar19;\n                uVar19 = CARRY1(*puVar9, uVar7);\n                *puVar9 = *puVar9 + uVar7;\n            }\n            iVar12 = uVar23 >> 0x20;\n            *(unaff_retaddr + 0x137cae9d) = iVar12;\n            piVar2 = uVar23 + 0x791e8811;\n            *piVar2 = iVar12 + uVar19 + *piVar2;\n            *(uVar11 - 0x5b) = uVar15;\n        } while( true );\n    }\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 3416
    },
    "009aacdc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009aacde) overlaps instruction at (ram,0x009aacdc)\n// \n\nvoid __fastcall\nfcn.009aacdc(uint param_1, uint32_t param_2, uint param_3, uint param_4, uint32_t param_5, uint32_t param_6, \n            uint param_7, uint32_t param_8)\n\n{\n    char *pcVar1;\n    uint32_t in_EAX;\n    uint32_t uVar2;\n    uint32_t unaff_EBX;\n    uchar *unaff_ESI;\n    uchar uVar3;\n    uchar *unaff_retaddr;\n    \n    do {\n        uVar2 = in_EAX & 0xffff0000 | unaff_retaddr & 0xffff;\n        unaff_retaddr = CONCAT14((unaff_EBX >> (param_2 & 0x1f) & 1) != 0, uVar2) >> 0x14 | uVar2 << 0xd;\n    // WARNING: Call to offcut address within same function\n        pcVar1 = func_0x009aacc6(unaff_ESI);\n        uVar3 = SCARRY1(*pcVar1, pcVar1);\n        *pcVar1 = *pcVar1 + pcVar1;\n        fcn.009aad03();\n        *unaff_ESI = uVar3;\n        in_EAX = param_8 & 0xffffff00;\n        param_2 = param_6;\n        unaff_EBX = param_5;\n        unaff_ESI = unaff_retaddr;\n    } while( true );\n}\n",
        "token_count": 355
    },
    "009ac040": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x009ac178: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x009ac17d)\n// WARNING: Unable to track spacebase fully for stack\n\nvoid fcn.009ac040(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uchar *extraout_ECX;\n    uchar *puVar3;\n    ushort extraout_DX;\n    uint *unaff_EBX;\n    int32_t unaff_ESI;\n    uint unaff_EDI;\n    uint8_t in_AF;\n    char in_SF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    char in_OF;\n    bool bVar4;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    ushort uStack34;\n    uchar uStack32;\n    uchar uStack31;\n    uint16_t uStack30;\n    uint uStack12;\n    uchar auStack8 [8];\n    \n    iVar2 = fcn.009ac021();\n    if (in_OF != in_SF) {\n        uStack12 = 0x9ac061;\n        fcn.009ac0c0();\n        do {\n    // WARNING: Do nothing block with infinite loop\n        } while( true );\n    }\n    if (auStack8 < 0x16) {\n        uStack32 = 0x34;\n        uStack31 = 0xc1;\n        uStack30 = 0x9a;\n        iVar2 = fcn.009ac15b();\n        puVar3 = extraout_ECX;\n    }\n    else {\n        puVar3 = (unaff_ESI - 0x80U & 0xfffffffc) - iVar2;\n        uStack30 = (in_ID & 1) * 0x20 | (in_VIP & 1) * 0x10 | (in_VIF & 1) * 8 | (in_AC & 1) * 4;\n        uStack32 = 0x9a;\n        uStack31 = 0;\n    }\n    bVar4 = SCARRY4(&uStack34, 2);\n    if ((!bVar4) || (bVar4)) {\n        *(puVar3 + -4) =\n             (in_NT & 1) * 0x4000 | bVar4 * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | (&uStack32 < 0) * 0x80 |\n             (*0x10 == 0x20) * 0x40 | (in_AF & 1) * 0x10 | ((POPCOUNT(&uStack32 & 0xff) & 1U) == 0) * 4 |\n             0xfffffffd < &uStack34 | (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 |\n             (in_AC & 1) * 0x40000;\n        *(puVar3 + -8) = unaff_ESI;\n        *(puVar3 + -0xc) = unaff_EDI;\n        uStack32 = SUB41(puVar3, 0);\n        uStack31 = puVar3 >> 8;\n        uStack30 = puVar3 >> 0x10;\n    }\n    rdtsc();\n    for (; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = *unaff_EBX;\n        unaff_EBX = unaff_EBX + 1;\n        puVar3 = puVar3 + 1;\n    }\n    uStack34 = 0x9a;\n    fcn.009ac237();\n    out(*unaff_EBX, extraout_DX);\n    pcVar1 = swi(1);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 891
    },
    "009ac0c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009ac061) overlaps instruction at (ram,0x009ac060)\n// \n// WARNING: Possible PIC construction at 0x009ac178: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x009ac17d)\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.009ac0c0(void)\n\n{\n    code *pcVar1;\n    uint *puVar2;\n    int32_t iVar3;\n    uchar *extraout_ECX;\n    uchar *puVar4;\n    ushort extraout_DX;\n    uint *unaff_EBX;\n    uint *puVar5;\n    int32_t unaff_ESI;\n    int32_t unaff_EDI;\n    uint16_t in_DS;\n    uint8_t in_CF;\n    uint8_t in_AF;\n    uchar in_ZF;\n    char cVar6;\n    char in_SF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    char cVar7;\n    char in_OF;\n    bool bVar8;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    ulong uVar9;\n    uint *in_stack_00000020;\n    ushort uStack42;\n    uchar uStack40;\n    uchar uStack39;\n    uint16_t uStack38;\n    uint uStack36;\n    uint uStack20;\n    uchar auStack16 [8];\n    uint32_t uStack8;\n    int32_t iStack4;\n    \n    puVar2 = unaff_EBX;\n    while( true ) {\n        puVar5 = puVar2;\n        iStack4 = 0x9ac0c5;\n        fcn.009ac0aa();\n        iStack4 = 0x9ac0ce;\n        uVar9 = fcn.009ac0ec();\n        iStack4 = uVar9 >> 0x20;\n        *(unaff_ESI + 0x31) = *(unaff_ESI + 0x31) | in_CF >> 1;\n        if ((in_CF & 1) == 0 && !in_ZF) {\n            in(0xff);\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        cVar6 = uVar9;\n        if (in_OF != in_SF) break;\n        *(unaff_EDI + -0x17dfdba4) = *(unaff_EDI + -0x17dfdba4) + 1;\n        uStack8 = uStack8 & 0xffff0000 | in_DS;\n        *uVar9 = *uVar9 + cVar6;\n        *(iStack4 + -0x40) = *(iStack4 + -0x40) + (uVar9 >> 0x20);\n        in_CF = 0;\n        in_OF = '\\0';\n        in_SF = '\\0';\n        in_ZF = 1;\n        puVar2 = in_stack_00000020;\n        in_stack_00000020 = puVar5;\n    }\n    if (!in_ZF) {\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if ((POPCOUNT((uVar9 >> 8) + (uVar9 >> 0x28)) & 1U) != 0) {\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    cVar7 = SCARRY1(cVar6, '$');\n    cVar6 = cVar6 + '$' < '\\0';\n    uStack8 = 0x9ac053;\n    iVar3 = fcn.009ac021();\n    if (cVar7 != cVar6) {\n        uStack20 = 0x9ac061;\n        fcn.009ac0c0();\n        do {\n    // WARNING: Do nothing block with infinite loop\n        } while( true );\n    }\n    uStack42 = uStack36;\n    if (&stack0xfffffff0 < 0x16) {\n        uStack40 = 0x34;\n        uStack39 = 0xc1;\n        uStack38 = 0x9a;\n        iVar3 = fcn.009ac15b();\n        puVar4 = extraout_ECX;\n    }\n    else {\n        puVar4 = (unaff_ESI - 0x80U & 0xfffffffc) - iVar3;\n        uStack38 = (in_ID & 1) * 0x20 | (in_VIP & 1) * 0x10 | (in_VIF & 1) * 8 | (in_AC & 1) * 4;\n        uStack40 = 0x9a;\n        uStack39 = 0;\n    }\n    bVar8 = SCARRY4(&stack0xffffffd6, 2);\n    if ((!bVar8) || (bVar8)) {\n        *(puVar4 + -4) =\n             (in_NT & 1) * 0x4000 | bVar8 * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n             (&stack0xffffffd8 < 0) * 0x80 | (*0x10 == 0x28) * 0x40 | (in_AF & 1) * 0x10 |\n             ((POPCOUNT(&stack0xffffffd8 & 0xff) & 1U) == 0) * 4 | 0xfffffffd < &stack0xffffffd6 |\n             (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n        *(puVar4 + -8) = unaff_ESI;\n        *(puVar4 + -0xc) = unaff_EDI;\n        uStack40 = SUB41(puVar4, 0);\n        uStack39 = puVar4 >> 8;\n        uStack38 = puVar4 >> 0x10;\n    }\n    rdtsc();\n    for (; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar4 = *in_stack_00000020;\n        in_stack_00000020 = in_stack_00000020 + 1;\n        puVar4 = puVar4 + 1;\n    }\n    uStack42 = 0x9a;\n    fcn.009ac237();\n    out(*in_stack_00000020, extraout_DX);\n    pcVar1 = swi(1);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 1522
    },
    "009c52bc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009ac46d) overlaps instruction at (ram,0x009ac46b)\n// \n// WARNING: Removing unreachable block (ram,0x009ac31c)\n// WARNING: Removing unreachable block (ram,0x009ac575)\n\nuint32_t fcn.009c52bc(int32_t param_1, uint32_t *param_2, uint32_t param_3, uint param_4)\n\n{\n    uint16_t *puVar1;\n    char *pcVar2;\n    uint16_t uVar3;\n    unkbyte3 Var4;\n    uint8_t uVar5;\n    uint8_t uVar6;\n    uint32_t uVar7;\n    int32_t *piVar8;\n    uint32_t uVar9;\n    ushort uVar11;\n    int32_t iVar10;\n    char extraout_CL;\n    char extraout_CL_00;\n    uint32_t extraout_ECX;\n    uint32_t extraout_ECX_00;\n    int32_t extraout_ECX_01;\n    ushort extraout_DX;\n    int16_t iVar12;\n    uint16_t uVar13;\n    uint32_t uVar14;\n    uint uVar15;\n    int32_t unaff_EBX;\n    int32_t unaff_EBP;\n    uint32_t *puVar16;\n    uchar *unaff_ESI;\n    uchar *unaff_EDI;\n    char cVar17;\n    bool bVar18;\n    uint8_t uVar19;\n    bool bVar20;\n    bool bVar21;\n    bool bVar22;\n    float10 extraout_ST0;\n    float10 extraout_ST0_00;\n    float10 extraout_ST1;\n    uchar in_YMM10 [32];\n    ulong uVar23;\n    \n    uVar7 = unaff_EBX - 0x2b;\n    iVar10 = fcn.009c52be();\n    for (; iVar10 != 0; iVar10 = iVar10 + -1) {\n        *unaff_EDI = *unaff_ESI;\n        unaff_ESI = unaff_ESI + 1;\n        unaff_EDI = unaff_EDI + 1;\n    }\n    bVar21 = (param_3 & 0x400) != 0;\n    uVar19 = (param_3 & 0x10) != 0;\n    iVar12 = uVar7;\n    if ((param_3 & 0x800) == 0) {\n        cVar17 = iVar12 != 0;\n        uVar7 = uVar7 & 0xffff0000 | -iVar12;\n    }\n    else {\n        cVar17 = iVar12 != 0;\n        uVar7 = uVar7 & 0xffff0000 | -iVar12;\n    }\n    while( true ) {\n        fcn.009ac327();\n        param_3 = 0x9ac2ff;\n        uVar23 = func_0x642bb460();\n        iVar10 = uVar23 >> 0x20;\n        uVar6 = uVar23 >> 8;\n        uVar5 = *(iVar10 + 0x13a25730);\n        puVar1 = iVar10 + -0x1462a10b;\n        iVar12 = (uVar7 & 3) - (*puVar1 & 3);\n        *puVar1 = *puVar1 + (uVar6 < *(iVar10 + 0x13a25730)) * iVar12;\n        if (iVar12 < 1 && uVar5 <= uVar6) break;\n        unaff_EBP = uVar7 * 0x58ed1e7b;\n        puVar16 = iVar10 + (uVar23 & 0xffff0000 | CONCAT11(uVar6 - uVar5, -cVar17)) * 4;\n        *puVar16 = *puVar16 | 0x19aa14e5;\n        if (-1 < *puVar16) {\n            puVar16 = iVar10 + 0xfcb0ffc;\n            *puVar16 = *puVar16 >> 0xb | *puVar16 << 0x15;\n            Var4 = CONCAT21(param_4._1_2_, param_4);\n    // WARNING: Call to offcut address within same function\n            param_3 = 0x9ac381;\n            uVar23 = func_0x009ac3a4();\n            iVar10 = uVar23 >> 0x20;\n            uVar14 = CONCAT13(param_4._3_1_, Var4) * 4 - 1;\n            *(param_1 + 0x2a) = extraout_ST0;\n            *(uVar23 + -0x4e) = extraout_ST1;\n            puVar16 = param_2 + 1 + bVar21 * -2;\n            uVar7 = *param_2;\n            uVar9 = extraout_ECX_00;\n            goto code_r0x009ac38e;\n        }\n        cVar17 = uVar7 != 0;\n        uVar7 = -uVar7;\n    }\n    uVar7 = uVar7 - 1;\n    uVar5 = uVar23 >> 0x20;\n    bVar18 = CARRY1(extraout_ECX, uVar5);\n    uVar9 = extraout_ECX & 0xffffff00 | extraout_ECX + uVar5;\n    cVar17 = (uVar7 >> 8) + '\\x01';\n    uVar14 = CONCAT21(0xa418, cVar17) << 8;\n    if ((bVar18 || cVar17 == '\\0') || (puVar16 = param_2,  !bVar18 && cVar17 != '\\0')) {\n    // WARNING: Call to offcut address within same function\n        uVar7 = func_0x009ac368();\ncode_r0x009ac3e8:\n        if ((*0x10 != 0x9) && (*0x10 == 0x9)) {\n            return uVar7 & 0xffffff00 | uVar7 + 1;\n        }\n        fcn.009ac58a();\n        cVar17 = -extraout_CL - 0x39;\n        iVar12 = 0;\n        if (param_2 != 0) {\n            for (; (param_2 >> iVar12 & 1) == 0; iVar12 = iVar12 + 1) {\n            }\n        }\n        if (-extraout_CL < 0x39) {\n            uVar11 = 0xbbad;\n        }\n        else {\n            uVar11 = 0xbbad;\n        }\n        while( true ) {\n            bVar21 = cVar17 + -7 < '\\0';\n            uVar15 = CONCAT22(uVar11, 0x4000);\n            iVar10 = fcn.009ac642();\n            if (bVar21) break;\n            *(iVar10 + -0x35) = param_1 + -1;\n            uVar11 = iVar10 >> 0x10;\n            vmaxps_avx(in_YMM10, *(CONCAT31(uVar15 >> 8, 0xb1) + -0x72108bc));\n            cVar17 = extraout_CL_00;\n        }\n        return iVar10 + 0x78063e80;\n    }\ncode_r0x009ac38e:\n    while( true ) {\n        uVar5 = uVar7 - 0x3f;\n        uVar13 = uVar14 & 0xff00 | uVar9 >> 8 & 0xff;\n        uVar3 = unaff_EBP & 0xf;\n        bVar18 = (uVar13 >> uVar3 & 1) != 0;\n        if ((bVar18 || uVar5 == 0) || (!bVar18 && uVar5 != 0)) break;\n        uVar19 = (uVar7 & 0x1000) != 0;\n        uVar7 = (uVar7 & 0xffffff00 | uVar5) + *((uVar14 & 0xffff0000 | uVar13 | 1 << uVar3) + 0x16d615e6) +\n                ((uVar7 & 0x100) != 0);\n        *(uVar7 + 3) = *(uVar7 + 3) + 0x224648d;\n        uVar14 = uVar14 & 0xffff0000 | param_4._1_2_;\n    }\n    uVar7 = uVar7 & 0xffffff00 | uVar5;\n    param_2 = puVar16;\n    if (0x2 < &stack0x00000010) goto code_r0x009ac3e8;\n    uVar7 = uVar7 + uVar9;\n    cVar17 = uVar7 >> 8;\n    bVar22 = SBORROW1(cVar17, '\\x01');\n    bVar20 = cVar17 == '\\x01';\n    param_3 = param_3 & 0xffffff00;\n    uVar6 = fcn.009ac441();\n    piVar8 = *0x67a35031;\n    bVar18 = 9 < (uVar6 & 0xf) | uVar19;\n    if (bVar18 || bVar20) {\n        if (!bVar22) {\n            *0xc79e0fda = *0x67a35031;\n            if (extraout_ECX_01 == 1) goto code_r0x009ac46b;\n            **0x67a35031 = unaff_EBP;\n            goto code_r0x009ac493;\n        }\n        uVar9 = *0x67a35031 & 0x3d7ebf4c ^ 0x53;\n        out(*(puVar16 + bVar21 * -2 + 1), extraout_DX);\n        *((uVar7 & 0xffff0000 | CONCAT11(iVar10, uVar7) | 1 << (uVar5 & 0x1f)) + 0x2e) = extraout_ST0_00;\n        pcVar2 = param_1 + bVar21 * -2 + bVar21 * -2 + 0x35b72406;\n        *pcVar2 = *pcVar2 - uVar9;\n    }\n    else {\n        uVar19 = (*0x67a35031 + 'c') - bVar18;\n        piVar8 = *0x67a35031 & 0xffffff00 | uVar19;\n        *piVar8 = *piVar8 + uVar19;\n        *piVar8 = *piVar8 + uVar19;\ncode_r0x009ac493:\n        param_3._1_3_ = param_3 >> 8;\n        uVar9 = CONCAT13(param_4, param_3._1_3_);\n        param_3 = piVar8 << 8;\n        param_4._0_1_ = piVar8 >> 0x18;\n    }\n    iVar10 = 0x1f;\n    if (uVar9 != 0) {\n        for (; uVar9 >> iVar10 == 0; iVar10 = iVar10 + -1) {\n        }\n    }\n    *0xc79e0fda = uVar9 - 0x48;\ncode_r0x009ac46b:\n    return CONCAT13(param_4, param_3._1_3_);\n}\n",
        "token_count": 2516
    },
    "009ac441": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.009ac441(void)\n\n{\n    int32_t iVar1;\n    uint32_t unaff_retaddr;\n    \n    iVar1 = 0x1f;\n    if (unaff_retaddr != 0) {\n        for (; unaff_retaddr >> iVar1 == 0; iVar1 = iVar1 + -1) {\n        }\n    }\n    return;\n}\n",
        "token_count": 82
    },
    "009ac976": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009aac68) overlaps instruction at (ram,0x009aac67)\n// \n// WARNING: Possible PIC construction at 0x009aae39: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x009aae3e)\n// WARNING: Removing unreachable block (ram,0x009aca5d)\n// WARNING: Removing unreachable block (ram,0x009aca85)\n// WARNING: Removing unreachable block (ram,0x009acaa2)\n\nvoid __fastcall fcn.009ac976(char param_1)\n\n{\n    uint16_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint8_t uVar4;\n    uint8_t *puVar5;\n    uint32_t uVar6;\n    uint16_t extraout_CX;\n    uint32_t extraout_ECX;\n    uint32_t uVar7;\n    uint extraout_ECX_00;\n    int32_t iVar8;\n    uint32_t uVar9;\n    int32_t unaff_EBP;\n    uint32_t *unaff_ESI;\n    uint32_t *puVar10;\n    uint32_t unaff_EDI;\n    uint8_t uVar11;\n    bool bVar12;\n    uint64_t uVar13;\n    uint64_t uVar14;\n    \n    uVar9 = *unaff_ESI;\n    *(unaff_EBP + (param_1 + 0x25 & 0x3c)) = uVar9;\n    puVar10 = unaff_ESI + 1;\n    bVar12 = (POPCOUNT(puVar10 & 0xff) & 1U) == 0;\n    uVar9 = uVar9 & 0xffff0000 | unaff_EDI & 0xffff;\n    if ((SCARRY4(unaff_ESI, 4) != puVar10 < 0) && (SCARRY4(unaff_ESI, 4) == puVar10 < 0)) {\n        fcn.009aae81();\n        iVar8 = 0;\n        if (puVar10 != NULL) {\n            for (; (puVar10 >> iVar8 & 1) == 0; iVar8 = iVar8 + 1) {\n            }\n        }\n        return;\n    }\n    uVar6 = fcn.009aadeb();\n    if (bVar12) {\n        uVar7 = CONCAT31(extraout_ECX_00 >> 8, 0x2d);\n        uVar6 = uVar6 & 0xffffff00;\n        do {\n            uVar2 = (uVar9 & 0xff00) << 8;\n            uVar3 = uVar9 << 0x18;\n            uVar9 = (uVar9 & 0xff0000) >> 8 | uVar2 | uVar3 | uVar6 >> 8 & 0xff;\n            uVar11 = 0;\n            if ((uVar7 | unaff_EDI + 0x137cae9d) < 0) {\n                uVar1 = 0xf;\n                if (*0x10 - 0x38U != 0) {\n                    for (; *0x10 - 0x38U >> uVar1 == 0; uVar1 = uVar1 - 1) {\n                    }\n                }\n                uVar9 = uVar2 | uVar3 | uVar1;\n                uVar14 = func_0x009aad1b();\n                uVar7 = extraout_ECX;\n            }\n            else {\n                uVar13 = fcn.009aacdc();\n                puVar5 = uVar13 & 0xffff0000 | extraout_CX;\n                uVar14 = uVar13 & 0xffffffff00000000 | ZEXT48(puVar5);\n                uVar7 = uVar13 & 0xffff;\n                uVar4 = extraout_CX;\n                *(unaff_ESI + -0x42f0993b) = *(unaff_ESI + -0x42f0993b) + uVar4 + uVar11;\n                uVar11 = CARRY1(*puVar5, uVar4);\n                *puVar5 = *puVar5 + uVar4;\n            }\n            iVar8 = uVar14 >> 0x20;\n            uVar6 = uVar14;\n            *(unaff_EDI + 0x137cae9d) = iVar8;\n            *(uVar6 + 0x791e8811) = *(uVar6 + 0x791e8811) + iVar8 + uVar11;\n            *(uVar9 - 0x5b) = uVar7;\n        } while( true );\n    }\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 1066
    },
    "009acaa9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009aac68) overlaps instruction at (ram,0x009aac67)\n// \n// WARNING: Possible PIC construction at 0x009aae39: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x009aae3e)\n// WARNING: Removing unreachable block (ram,0x009aca5d)\n// WARNING: Removing unreachable block (ram,0x009ac9ef)\n// WARNING: Removing unreachable block (ram,0x009aca85)\n// WARNING: Removing unreachable block (ram,0x009acaa2)\n\nvoid fcn.009acaa9(void)\n\n{\n    uint16_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint8_t uVar4;\n    uint8_t *puVar5;\n    uint32_t uVar6;\n    uint8_t extraout_CL;\n    uint16_t extraout_CX;\n    uint32_t extraout_ECX;\n    uint32_t uVar7;\n    uint extraout_ECX_00;\n    int32_t extraout_ECX_01;\n    int32_t iVar8;\n    uint32_t uVar9;\n    uint32_t *unaff_ESI;\n    uint32_t *puVar10;\n    uint32_t unaff_EDI;\n    uint8_t uVar11;\n    bool bVar12;\n    uint64_t uVar13;\n    uint64_t uVar14;\n    \n    fcn.009acc8c();\n    *(extraout_ECX_01 + -0x37) = *(extraout_ECX_01 + -0x37) ^ 0xea;\n    fcn.009ac976();\n    uVar9 = *unaff_ESI;\n    *(extraout_CL & 0x3c) = uVar9;\n    puVar10 = unaff_ESI + 1;\n    bVar12 = (POPCOUNT(puVar10 & 0xff) & 1U) == 0;\n    uVar9 = uVar9 & 0xffff0000 | unaff_EDI & 0xffff;\n    if ((SCARRY4(unaff_ESI, 4) != puVar10 < 0) && (SCARRY4(unaff_ESI, 4) == puVar10 < 0)) {\n        fcn.009aae81();\n        iVar8 = 0;\n        if (puVar10 != NULL) {\n            for (; (puVar10 >> iVar8 & 1) == 0; iVar8 = iVar8 + 1) {\n            }\n        }\n        return;\n    }\n    uVar6 = fcn.009aadeb();\n    if (bVar12) {\n        uVar7 = CONCAT31(extraout_ECX_00 >> 8, 0x2d);\n        uVar6 = uVar6 & 0xffffff00;\n        do {\n            uVar2 = (uVar9 & 0xff00) << 8;\n            uVar3 = uVar9 << 0x18;\n            uVar9 = (uVar9 & 0xff0000) >> 8 | uVar2 | uVar3 | uVar6 >> 8 & 0xff;\n            uVar11 = 0;\n            if ((uVar7 | unaff_EDI + 0x137cae9d) < 0) {\n                uVar1 = 0xf;\n                if (*0x10 - 0x40U != 0) {\n                    for (; *0x10 - 0x40U >> uVar1 == 0; uVar1 = uVar1 - 1) {\n                    }\n                }\n                uVar9 = uVar2 | uVar3 | uVar1;\n                uVar14 = func_0x009aad1b();\n                uVar7 = extraout_ECX;\n            }\n            else {\n                uVar13 = fcn.009aacdc();\n                puVar5 = uVar13 & 0xffff0000 | extraout_CX;\n                uVar14 = uVar13 & 0xffffffff00000000 | ZEXT48(puVar5);\n                uVar7 = uVar13 & 0xffff;\n                uVar4 = extraout_CX;\n                *(unaff_ESI + -0x42f0993b) = *(unaff_ESI + -0x42f0993b) + uVar4 + uVar11;\n                uVar11 = CARRY1(*puVar5, uVar4);\n                *puVar5 = *puVar5 + uVar4;\n            }\n            iVar8 = uVar14 >> 0x20;\n            uVar6 = uVar14;\n            *(unaff_EDI + 0x137cae9d) = iVar8;\n            *(uVar6 + 0x791e8811) = *(uVar6 + 0x791e8811) + iVar8 + uVar11;\n            *(uVar9 - 0x5b) = uVar7;\n        } while( true );\n    }\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 1127
    },
    "009acb3a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "009acb68": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009b013d) overlaps instruction at (ram,0x009b0138)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nvoid fcn.009acb68(void)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    char extraout_CH;\n    uchar extraout_DL;\n    uint32_t *unaff_EBP;\n    uint32_t unaff_EDI;\n    char in_CF;\n    char in_AF;\n    ulong uVar4;\n    uint *puVar5;\n    char *pcVar3;\n    \n    puVar5 = &stack0x00000004;\n    // WARNING: Call to offcut address within same function\n    uVar2 = func_0x009acb95();\n    uVar1 = uVar2 + extraout_CH + in_CF;\n    pcVar3 = uVar2 & 0xffffff00 | uVar1;\n    *pcVar3 = *pcVar3 + uVar1;\n    *0x9b80a286 = *0x9b80a286 + uVar1;\n    *puVar5 = 0x9b006b;\n    fcn.009b0050();\n    *(puVar5 + 1) = extraout_DL;\n    unaff_EBP[-1] = 0x9b0130;\n    uVar4 = fcn.009b0173();\n    uVar2 = unaff_EDI ^ *((uVar4 >> 0x20) + 0x7cba4f28);\n    *unaff_EBP = uVar4 & 0xffff0000 |\n                 CONCAT11((uVar2 < 0) << 7 | (uVar2 == 0) << 6 | in_AF << 4 | ((POPCOUNT(uVar2 & 0xff) & 1U) == 0) << 2\n                          , uVar4) | 0x200;\n    return;\n}\n",
        "token_count": 430
    },
    "009acd24": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009acd0c) overlaps instruction at (ram,0x009acd08)\n// \n\nvoid __fastcall fcn.009acd24(uint param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    uint8_t *in_EAX;\n    int32_t unaff_EBX;\n    uint8_t in_CF;\n    uchar uStack00000005;\n    uint8_t *puStack00000018;\n    \n    uStack00000005 = param_2 >> 8;\n    do {\n        puStack00000018 = in_EAX + 0x13e;\n        iVar1 = func_0x009acd63();\n        in_EAX = *(unaff_EBX + 0x13e808d);\n        *(unaff_EBX + 0x13e808d) = iVar1 + -0x7c8fee7f + in_CF ^ 0xb7d042d5;\n        in_CF = CARRY1(*in_EAX, in_EAX);\n        *in_EAX = *in_EAX + in_EAX;\n    } while( true );\n}\n",
        "token_count": 246
    },
    "009ad0b6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009ad0fc) overlaps instruction at (ram,0x009ad0f8)\n// \n\nvoid fcn.009ad0b6(void)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    int32_t unaff_ESI;\n    \n    do {\n        uVar2 = fcn.009ad111();\n        uVar1 = uVar2 + 0x4c;\n        *0xbd148d = uVar2 & 0xffffff00 | uVar1;\n        **0xbd148d = **0xbd148d + uVar1;\n        *(unaff_ESI + -0x46) = *(unaff_ESI + -0x46) + ((uVar2 & 0xffffff00) >> 8);\n    } while( true );\n}\n",
        "token_count": 183
    },
    "009ad21d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009ad2a1) overlaps instruction at (ram,0x009ad29e)\n// \n// WARNING: Removing unreachable block (ram,0x009ad2d3)\n// WARNING: Removing unreachable block (ram,0x009ad285)\n\nvoid fcn.009ad21d(void)\n\n{\n    int32_t extraout_ECX;\n    int32_t unaff_EDI;\n    int32_t iVar1;\n    uint8_t uVar2;\n    \n    uVar2 = 1;\n    do {\n        iVar1 = unaff_EDI + -1;\n        unaff_EDI = fcn.009ad2a6();\n        *(extraout_ECX + 0x10a713e0) = *(extraout_ECX + 0x10a713e0) + iVar1 + uVar2;\n        uVar2 = 0;\n    } while( true );\n}\n",
        "token_count": 202
    },
    "009ad551": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009ad536) overlaps instruction at (ram,0x009ad534)\n// \n\nvoid fcn.009ad551(void)\n\n{\n    uint8_t uVar1;\n    bool bVar2;\n    \n    do {\n        bVar2 = *0x10 < 0xa;\n        while( true ) {\n            uVar1 = fcn.009ad51e();\n            if (!bVar2) break;\n            bVar2 = 0xdb < uVar1 || CARRY1(uVar1 + 0x24, bVar2);\n        }\n        func_0x95a05ba7();\n    } while( true );\n}\n",
        "token_count": 148
    },
    "009bc412": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009aec71) overlaps instruction at (ram,0x009aec70)\n// \n\nuint32_t __fastcall fcn.009bc412(uint param_1, uint32_t param_2, uint16_t param_3, uint param_4)\n\n{\n    int16_t iVar1;\n    uint16_t uVar2;\n    uint32_t *puVar3;\n    uint8_t uVar4;\n    ulong uVar5;\n    ushort uVar6;\n    uint8_t uVar7;\n    uint32_t uVar8;\n    uchar *puVar9;\n    int32_t iVar10;\n    uint16_t extraout_var;\n    uint8_t extraout_CL;\n    char extraout_CL_00;\n    uint8_t extraout_CL_01;\n    uint32_t uVar11;\n    uint8_t extraout_DH;\n    uint32_t uVar12;\n    uint8_t unaff_BL;\n    uint8_t *puVar13;\n    uint16_t uVar14;\n    uint *puVar15;\n    uint *puVar17;\n    uint *unaff_ESI;\n    uint32_t uVar18;\n    uint32_t unaff_EDI;\n    ushort in_CS;\n    uint8_t in_AF;\n    bool bVar19;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    bool bVar20;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    int32_t unaff_retaddr;\n    uint8_t uStack00000006;\n    uchar uStack00000007;\n    uint32_t in_stack_00000034;\n    uint *puVar16;\n    \n    uVar7 = (unaff_BL >> 6 & 1) != 0;\n    fcn.009bc438();\n    uVar6 = *0xd317e49d;\n    uVar4 = (extraout_CL_01 & 0x1f) % 0x11;\n    uVar8 = uVar7 << 0x10 | param_2 & 0xffff;\n    iVar10 = unaff_EDI + (param_2 & 0xffff0000 | uVar8 >> uVar4 | uVar8 << 0x11 - uVar4);\n    bVar20 = SBORROW4(iVar10, unaff_retaddr);\n    bVar19 = iVar10 - unaff_retaddr < 0;\n    uVar8 = CONCAT22(~extraout_var, param_3);\n    puVar15 = param_3;\n    do {\n        uVar12 = unaff_EDI;\n        uVar14 = puVar15;\n        uVar8 = uVar8 ^ 1 << (uVar8 & 0x1f);\n        uVar18 = uVar12;\n        if (bVar20 == bVar19) {\n            uVar8 = uVar8 & 0xffffd73e;\n            iVar1 = 0;\n            if (uVar14 == 0) goto code_r0x009aeac0;\n            do {\n                if ((uVar14 >> iVar1 & 1) != 0) goto code_r0x009aeac0;\n                iVar1 = iVar1 + 1;\n            } while( true );\n        }\n        uVar8 = uVar8 & 0xffffd73e;\n        iVar1 = 0;\n        puVar16 = puVar15;\n        puVar17 = unaff_ESI;\n        if (uVar14 != 0) {\n            for (; (uVar14 >> iVar1 & 1) == 0; iVar1 = iVar1 + 1) {\n            }\n        }\n        do {\n            uVar14 = puVar16;\n            unaff_ESI = puVar17;\ncode_r0x009aeac0:\n            uVar11 = uVar8 + 1;\n            param_3 = (in_NT & 1) * 0x4000 | SCARRY4(uVar8, 1) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n                      (uVar11 < 0) * 0x80 | (uVar11 == 0) * 0x40 | (in_AF & 1) * 0x10 |\n                      ((POPCOUNT(uVar8 + 1 & 0xff) & 1U) == 0) * 4 | 0xfffffffc < &param_3;\n            uStack00000006 =\n                 (in_ID & 1) * 0x200000 >> 0x10 | (in_VIP & 1) * 0x100000 >> 0x10 | (in_VIF & 1) * 0x80000 >> 0x10 |\n                 (in_AC & 1) * 0x40000 >> 0x10;\n            uStack00000007 = 0;\n            uVar2 = 0;\n            if (uVar14 != 0) {\n                for (; (uVar14 >> uVar2 & 1) == 0; uVar2 = uVar2 + 1) {\n                }\n            }\n            uVar8 = (uVar11 & 0xffff0000 | CONCAT11(param_4._1_1_, param_4)) * -4 & 0xffff0000;\n            puVar9 = unaff_ESI + (uVar8 | uVar2);\n            bVar20 = SCARRY4(~uVar18 + 0x64dacc3a, 0x24796bdc);\n            bVar19 = ((uVar8 | uVar2 & 0xffffff00 | param_4) >> (unaff_ESI & 0x1f) & 1) != 0;\n            uVar14 = unaff_ESI;\n            if (!bVar20) {\n                iVar1 = 0xf;\n                if (uVar14 != 0) {\n                    for (; uVar14 >> iVar1 == 0; iVar1 = iVar1 + -1) {\n                    }\n                }\ncode_r0x009aec52:\n                param_4._0_1_ = 0x5c;\n                param_4._1_1_ = 0xec;\n                param_4._2_2_ = 0x9a;\n                fcn.009aec36();\n                *(unaff_ESI + 0x48a8545) = *(unaff_ESI + 0x48a8545) << (extraout_CL & 0x1f);\n                uStack00000006 = 0x6b;\n                uStack00000007 = 0xec;\n                param_4._0_1_ = 0x9a;\n                param_4._1_1_ = 0;\n                param_4._2_2_ = in_CS;\n                iVar10 = func_0x3cbb0cfd();\n                puVar13 = CONCAT31(unaff_ESI >> 8, 0x73);\n                *puVar13 = *puVar13 ^ extraout_DH;\n                uVar8 = iVar10 + 1U & 0xffffff00;\n                uVar18 = (iVar10 + 1U) - extraout_CL_00;\n                *(uVar8 | uVar18) = 0x8c8dcc86;\n                return uVar8 | uVar18 & 0xffffffe0;\n            }\n            if (bVar20) {\n                iVar1 = 0xf;\n                if (uVar14 != 0) {\n                    for (; uVar14 >> iVar1 == 0; iVar1 = iVar1 + -1) {\n                    }\n                }\n                goto code_r0x009aec52;\n            }\n            puVar13 = puVar9 + 0x23906106;\n            uVar7 = *puVar13 + uVar12;\n            bVar20 = CARRY1(*puVar13, uVar12) || CARRY1(uVar7, bVar19);\n            *puVar13 = uVar7 + bVar19;\n            uVar7 = puVar9 + 0x91;\n            bVar19 = puVar9 < 0x6f || uVar7 < bVar20;\n            uVar7 = uVar7 - bVar20;\n            uVar8 = puVar9 & 0xffffff00 | uVar7;\n            if (bVar19 || uVar7 == 0) {\n                puVar3 = (puVar9 & 0xffff0000 |\n                         CONCAT11((uVar7 < '\\0') << 7 | (uVar7 == 0) << 6 | in_AF << 4 |\n                                  ((POPCOUNT(uVar7) & 1U) == 0) << 2 | 2 | bVar19, uVar7)) + 0x5136a028;\n                *puVar3 = *puVar3 | &param_4;\n                unaff_ESI = CONCAT22(param_4._2_2_, CONCAT11(param_4._1_1_, param_4));\n                in_CS = uVar6;\n                goto code_r0x009aec52;\n            }\n            if (uVar8 == 0) {\n                puVar3 = cpuid_basic_info(0);\n            }\n            else if (uVar8 == 1) {\n                puVar3 = cpuid_Version_info(1);\n            }\n            else if (uVar8 == 2) {\n                puVar3 = cpuid_cache_tlb_info(2);\n            }\n            else if (uVar8 == 3) {\n                puVar3 = cpuid_serial_info(3);\n            }\n            else if (uVar8 == 4) {\n                puVar3 = cpuid_Deterministic_Cache_Parameters_info(4);\n            }\n            else if (uVar8 == 5) {\n                puVar3 = cpuid_MONITOR_MWAIT_Features_info(5);\n            }\n            else if (uVar8 == 6) {\n                puVar3 = cpuid_Thermal_Power_Management_info(6);\n            }\n            else if (uVar8 == 7) {\n                puVar3 = cpuid_Extended_Feature_Enumeration_info(7);\n            }\n            else if (uVar8 == 9) {\n                puVar3 = cpuid_Direct_Cache_Access_info(9);\n            }\n            else if (uVar8 == 10) {\n                puVar3 = cpuid_Architectural_Performance_Monitoring_info(10);\n            }\n            else if (uVar8 == 0xb) {\n                puVar3 = cpuid_Extended_Topology_info(0xb);\n            }\n            else if (uVar8 == 0xd) {\n                puVar3 = cpuid_Processor_Extended_States_info(0xd);\n            }\n            else if (uVar8 == 0xf) {\n                puVar3 = cpuid_Quality_of_Service_info(0xf);\n            }\n            else if (uVar8 == 0x80000002) {\n                puVar3 = cpuid_brand_part1_info(0x80000002);\n            }\n            else if (uVar8 == 0x80000003) {\n                puVar3 = cpuid_brand_part2_info(0x80000003);\n            }\n            else if (uVar8 == 0x80000004) {\n                puVar3 = cpuid_brand_part3_info(0x80000004);\n            }\n            else {\n                puVar3 = cpuid(uVar8);\n            }\n            uVar8 = *puVar3;\n            uVar8 = uVar8 & 0xffff0000 | CONCAT11((uVar8 >> 8) + -0xf, uVar8);\n            bVar20 = SBORROW4(&param_3, 0xbc);\n            bVar19 = &param_4 < 0;\n            if (uVar8 == 0) {\n                cpuid_basic_info(0);\n            }\n            else if (uVar8 == 1) {\n                cpuid_Version_info(1);\n            }\n            else if (uVar8 == 2) {\n                cpuid_cache_tlb_info(2);\n            }\n            else if (uVar8 == 3) {\n                cpuid_serial_info(3);\n            }\n            else if (uVar8 == 4) {\n                cpuid_Deterministic_Cache_Parameters_info(4);\n            }\n            else if (uVar8 == 5) {\n                cpuid_MONITOR_MWAIT_Features_info(5);\n            }\n            else if (uVar8 == 6) {\n                cpuid_Thermal_Power_Management_info(6);\n            }\n            else if (uVar8 == 7) {\n                cpuid_Extended_Feature_Enumeration_info(7);\n            }\n            else if (uVar8 == 9) {\n                cpuid_Direct_Cache_Access_info(9);\n            }\n            else if (uVar8 == 10) {\n                cpuid_Architectural_Performance_Monitoring_info(10);\n            }\n            else if (uVar8 == 0xb) {\n                cpuid_Extended_Topology_info(0xb);\n            }\n            else if (uVar8 == 0xd) {\n                cpuid_Processor_Extended_States_info(0xd);\n            }\n            else if (uVar8 == 0xf) {\n                cpuid_Quality_of_Service_info(0xf);\n            }\n            else if (uVar8 == 0x80000002) {\n                cpuid_brand_part1_info(0x80000002);\n            }\n            else if (uVar8 == 0x80000003) {\n                cpuid_brand_part2_info(0x80000003);\n            }\n            else if (uVar8 == 0x80000004) {\n                cpuid_brand_part3_info(0x80000004);\n            }\n            else {\n                cpuid(uVar8);\n            }\n            uVar5 = rdtsc();\n            uVar12 = uVar5 >> 0x20;\n            uVar8 = uVar5;\n            puVar15 = &param_4;\n            unaff_ESI = &param_4;\n            unaff_EDI = in_stack_00000034;\n            in_CS = *0xd317e49d;\n        } while ((*0x10 == 0xfffffff8) &&\n                (puVar15 = &param_4,  puVar16 = &param_4,  unaff_ESI = &param_4,  puVar17 = &param_4, \n                unaff_EDI = in_stack_00000034,  uVar18 = in_stack_00000034,  *0x10 != 0xfffffff8));\n    } while( true );\n}\n",
        "token_count": 3235
    },
    "009af090": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009af1b0) overlaps instruction at (ram,0x009af1af)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nvoid __fastcall fcn.009af090(uint32_t param_1, uint param_2)\n\n{\n    uint8_t *puVar1;\n    uint32_t in_EAX;\n    uint32_t uVar2;\n    uint8_t uVar3;\n    uint32_t extraout_ECX;\n    uint32_t unaff_EBX;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uchar *puVar7;\n    uint32_t unaff_EBP;\n    uint unaff_ESI;\n    int32_t unaff_EDI;\n    bool bVar8;\n    ulong uVar9;\n    uint32_t unaff_retaddr;\n    uint32_t uVar4;\n    \n    uVar6 = unaff_EBX & 0xffff0000 | in_EAX & 0xff00 | in_EAX >> 0x10 & 0xff;\n    uVar3 = param_1 ^ 0xea;\n    uVar4 = param_1 ^ 0xea;\n    bVar8 = (unaff_retaddr >> (unaff_EBP & 0x1f) & 1) != 0;\n    uVar2 = unaff_retaddr ^ 1 << (unaff_EBP & 0x1f);\n    if ((bVar8 || uVar3 == 0) || (puVar7 = &stack0x00000004,  !bVar8 && uVar3 != 0)) {\n        bVar8 = SBORROW4(&stack0x00000004, 7);\n        uVar2 = param_1 & 0xffffff00 | uVar3;\n        iVar5 = (uVar4 * 4 & 0xffff0000 | in_EAX & 0xffff) * 4;\n        if (bVar8) {\n            iVar5 = unaff_EDI + -0xe6;\n        }\n        else if (!bVar8) goto code_r0x009af14c;\n        while( true ) {\n            puVar7 = &stack0x00000004;\n            uVar3 = ~uVar2;\n            uVar4 = uVar2 & 0xffffff00;\n            uVar2 = uVar4 | uVar3;\n            uVar6 = 0;\n            bVar8 = unaff_EBP * 4 == 0;\n            if (!bVar8) {\n                for (; (unaff_EBP * 4 >> uVar6 & 1) == 0; uVar6 = uVar6 + 1) {\n                }\n            }\n            if ((bVar8) || (!bVar8)) break;\n            *(uVar6 - 0x76) = *(uVar6 - 0x76) & puVar7;\ncode_r0x009af14c:\n            iVar5 = unaff_EDI + -0xe6;\n        }\n        uVar4 = uVar4 | uVar3 - 0x31;\n        uVar2 = uVar6 & 0xffffff00 | uVar6 + 1;\n        if (uVar3 < 0x31) {\n            uVar6 = iVar5 + 1;\n        }\n        else {\n            uVar6 = iVar5 + 1;\n        }\n    }\n    do {\n        *(puVar7 + -4) = uVar2;\n        *(puVar7 + -8) = uVar4;\n        *(puVar7 + -0xc) = param_2;\n        *(puVar7 + -0x10) = uVar6;\n        *(puVar7 + -0x14) = puVar7;\n        *(puVar7 + -0x18) = unaff_EBP;\n        *(puVar7 + -0x1c) = unaff_ESI;\n        *(puVar7 + -0x20) = unaff_EDI;\n        unaff_EDI = unaff_EDI * 4;\n        unaff_ESI = 0x8e6c658c;\n        *(puVar7 + -0x24) = 0x9af1ac;\n        uVar9 = fcn.009af1d0();\n        param_2 = uVar9 >> 0x20;\n        puVar1 = uVar6 - 0x1e;\n        uVar3 = *puVar1;\n        *puVar1 = *puVar1 - extraout_ECX;\n        uVar2 = (uVar9 + 0x1303e80) - (uVar3 < extraout_ECX);\n        *(uVar6 - 0x54) = *(uVar6 - 0x54) << 3;\n        uVar4 = extraout_ECX;\n        puVar7 = puVar7 + -0x20;\n    } while( true );\n}\n",
        "token_count": 1078
    },
    "009af380": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.009af380(void)\n\n{\n    return;\n}\n",
        "token_count": 15
    },
    "009af4a7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.009af4a7(uchar param_1)\n\n{\n    uint8_t *puVar1;\n    uint8_t uVar2;\n    uint8_t uVar3;\n    uint32_t uVar4;\n    uint8_t uVar5;\n    int32_t extraout_ECX;\n    int32_t extraout_EDX;\n    uint8_t uVar6;\n    uint8_t in_AF;\n    float10 fVar7;\n    uint32_t uVar8;\n    uint32_t unaff_retaddr;\n    \n    do {\n        uVar8 = CONCAT13(param_1, unaff_retaddr >> 8);\n        uVar6 = 0;\n        uVar4 = uVar8 & 0xffff0000;\n        fVar7 = fcn.009af4ba();\n        *(extraout_ECX + -0x3f) = ROUND(fVar7);\n        in_AF = 9 < (*0xd25be053 + 1U & 0xf) | in_AF;\n        uVar5 = *0xd25be053 + 1U + in_AF * '\\x06';\n        puVar1 = (uVar4 | CONCAT11(1, unaff_retaddr >> 8)) + extraout_EDX * 8;\n        uVar3 = (extraout_ECX & 0x1f) % 9;\n        uVar2 = *puVar1;\n        *puVar1 = uVar2 << uVar3 | CONCAT11(0x90 < (uVar5 & 0xf0) | uVar6 | in_AF * (0xf9 < uVar5), uVar2) >> 9 - uVar3;\n        unaff_retaddr = uVar8;\n    } while( true );\n}\n",
        "token_count": 382
    },
    "009b0d86": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009b1094) overlaps instruction at (ram,0x009b1093)\n// \n\nvoid fcn.009b0d86(void)\n\n{\n    uint8_t *puVar1;\n    char *pcVar2;\n    uint8_t uVar3;\n    int16_t iVar4;\n    uint16_t in_AX;\n    uint8_t uVar6;\n    int32_t *piVar5;\n    uint16_t uVar7;\n    uint32_t extraout_ECX;\n    uint32_t uVar8;\n    uint32_t extraout_ECX_00;\n    int32_t unaff_EBP;\n    uint8_t *unaff_ESI;\n    uint32_t unaff_EDI;\n    uint32_t uVar9;\n    bool bVar10;\n    \n    func_0x009b0fc0();\n    if ((extraout_ECX & 5) == 0) {\n        uVar8 = extraout_ECX & 0xffff0000 | ~in_AX;\n    }\n    else {\n        uVar8 = extraout_ECX & 0xffff0000 | ~in_AX;\n    }\n    uVar9 = unaff_EDI ^ 0x3e34b20b;\n    while( true ) {\n        bVar10 = 0xc4213161 < uVar9;\n        uVar9 = uVar9 + 0x3bdece9e;\n        uVar7 = uVar8 & 0xff00 | in_AX & 0xff;\n        iVar4 = uVar7 + 0x5928;\n        if ((SCARRY2(uVar7, 0x5928) != SCARRY2(iVar4, bVar10)) != iVar4 + bVar10 < 0) break;\n        piVar5 = fcn.009b10db();\n        *piVar5 = *piVar5;\n        pcVar2 = ~(uVar8 + unaff_EBP) + 0x14e904c4;\n        *pcVar2 = *pcVar2 + piVar5;\n        *piVar5 = *piVar5 + piVar5;\n        uVar3 = *unaff_ESI;\n        uVar6 = piVar5 >> 8;\n        *unaff_ESI = *unaff_ESI + uVar6;\n        in_AX = extraout_ECX_00;\n        puVar1 = ~(uVar8 + unaff_EBP) - 0x36;\n        *puVar1 = *puVar1 << 1 | CARRY1(uVar3, uVar6);\n        uVar8 = extraout_ECX_00;\n    }\n    int.009b1165();\n    return;\n}\n",
        "token_count": 590
    },
    "009b1237": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.009b1237(void)\n\n{\n    fcn.009b1221();\n    do {\n        fcn.009b1281();\n        func_0xfa895a50();\n    } while( true );\n}\n",
        "token_count": 49
    },
    "009b1281": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009b16dd) overlaps instruction at (ram,0x009b16db)\n// \n// WARNING: Removing unreachable block (ram,0x009b16dd)\n\nvoid __fastcall fcn.009b1281(uint16_t param_1, uint8_t param_2)\n\n{\n    uint32_t *puVar1;\n    int32_t iVar2;\n    char cVar3;\n    int16_t iVar4;\n    uint32_t in_EAX;\n    uint8_t uVar5;\n    int16_t extraout_CX;\n    char extraout_DL;\n    int32_t extraout_EDX;\n    uint32_t unaff_ESI;\n    uint32_t unaff_EDI;\n    uint32_t uVar7;\n    bool bVar8;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    bool bVar9;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint8_t uStack00000005;\n    uint8_t uStack00000006;\n    uchar uStack00000007;\n    uint16_t uVar6;\n    \n    uVar7 = in_EAX & 0xffffff;\n    do {\n        iVar4 = uVar7;\n        bVar8 = CARRY1(param_1, param_2);\n        uVar5 = param_1 + param_2;\n        uVar6 = param_1 & 0xff00 | uVar5;\n        if (bVar8) {\n            for (iVar2 = 0x1f; 0x5c3d1a6aU >> iVar2 == 0; iVar2 = iVar2 + -1) {\n            }\ncode_r0x009b16e5:\n            iVar2 = 0x1f;\n            if (unaff_ESI != 0) {\n                for (; unaff_ESI >> iVar2 == 0; iVar2 = iVar2 + -1) {\n                }\n            }\n            if (uVar5 < '\\0') {\n                iVar4 = 0xf;\n                if (uVar6 != 0) {\n                    for (; uVar6 >> iVar4 == 0; iVar4 = iVar4 + -1) {\n                    }\n                }\n            }\n            else {\n                iVar4 = 0xf;\n                if (uVar6 != 0) {\n                    for (; uVar6 >> iVar4 == 0; iVar4 = iVar4 + -1) {\n                    }\n                }\n            }\n            cVar3 = func_0x009b1806();\n            bVar9 = SCARRY1(extraout_DL, cVar3);\n            bVar8 = extraout_DL + cVar3 < '\\0';\n            if (bVar9 == bVar8) {\n                uStack00000005 =\n                     (in_NT & 1) * 0x4000 >> 8 | bVar9 * 0x800 >> 8 | (in_IF & 1) * 0x200 >> 8 |\n                     (in_TF & 1) * 0x100 >> 8 | bVar8 * 0x80 >> 8;\n                uStack00000006 =\n                     (in_ID & 1) * 0x200000 >> 0x10 | (in_VIP & 1) * 0x100000 >> 0x10 | (in_VIF & 1) * 0x80000 >> 0x10 |\n                     (in_AC & 1) * 0x40000 >> 0x10;\n            }\n            else {\n                uStack00000005 =\n                     (in_NT & 1) * 0x4000 >> 8 | bVar9 * 0x800 >> 8 | (in_IF & 1) * 0x200 >> 8 |\n                     (in_TF & 1) * 0x100 >> 8 | bVar8 * 0x80 >> 8;\n                uStack00000006 =\n                     (in_ID & 1) * 0x200000 >> 0x10 | (in_VIP & 1) * 0x100000 >> 0x10 | (in_VIF & 1) * 0x80000 >> 0x10 |\n                     (in_AC & 1) * 0x40000 >> 0x10;\n            }\n            uStack00000007 = 0;\n            uVar7 = unaff_EDI - 1;\n            fcn.009b18e2();\n            do {\n                iVar2 = 0x1f;\n                if (uVar7 != 0) {\n                    for (; uVar7 >> iVar2 == 0; iVar2 = iVar2 + -1) {\n                    }\n                }\n                while( true ) {\n                    fcn.009b1945();\n                    uStack00000005 = unaff_ESI >> 8;\n                    uStack00000006 = unaff_ESI >> 0x10;\n                    uStack00000007 = unaff_ESI >> 0x18;\n                    in(0x55);\n                    if (0 < extraout_CX) break;\n                    if (0 < extraout_CX) {\n                        puVar1 = extraout_EDX + -0x28;\n                        *puVar1 = *puVar1 >> 0x1f | *puVar1 << 1;\n    // WARNING: Bad instruction - Truncating control flow here\n                        halt_baddata();\n                    }\n                    iVar2 = 0x1f;\n                    if (uVar7 != 0) {\n                        for (; uVar7 >> iVar2 == 0; iVar2 = iVar2 + -1) {\n                        }\n                    }\n                }\n            } while( true );\n        }\n        if (!bVar8) {\n            for (iVar2 = 0x1f; 0x5c3d1a6aU >> iVar2 == 0; iVar2 = iVar2 + -1) {\n            }\n            goto code_r0x009b16e5;\n        }\n        param_1 = param_1 & 0xff00 | uVar5 - 1;\n        uVar7 = unaff_EDI;\n        unaff_EDI = iVar4;\n    } while( true );\n}\n",
        "token_count": 1384
    },
    "009b176a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.009b176a(void)\n\n{\n    int32_t iVar1;\n    uint32_t unaff_retaddr;\n    \n    iVar1 = 0;\n    if (unaff_retaddr != 0) {\n        for (; (unaff_retaddr >> iVar1 & 1) == 0; iVar1 = iVar1 + 1) {\n        }\n    }\n    return;\n}\n",
        "token_count": 85
    },
    "009b1f5f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009b1a4d) overlaps instruction at (ram,0x009b1a4b)\n// \n// WARNING: Control flow encountered bad instruction data\n// WARNING: Possible PIC construction at 0x009b21cc: Changing call to branch\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Removing unreachable block (ram,0x009b2044)\n// WARNING: Removing unreachable block (ram,0x009b201f)\n// WARNING: Removing unreachable block (ram,0x009b2244)\n// WARNING: Removing unreachable block (ram,0x009b224d)\n// WARNING: Removing unreachable block (ram,0x009b22b6)\n// WARNING: Removing unreachable block (ram,0x009b229f)\n// WARNING: Removing unreachable block (ram,0x009b22b9)\n// WARNING: Removing unreachable block (ram,0x009b22c2)\n// WARNING: Removing unreachable block (ram,0x009b226a)\n// WARNING: Removing unreachable block (ram,0x009b21b1)\n// WARNING: Removing unreachable block (ram,0x009b2271)\n// WARNING: Removing unreachable block (ram,0x009b2241)\n// WARNING: Removing unreachable block (ram,0x009b19b1)\n// WARNING: Removing unreachable block (ram,0x009b19bd)\n// WARNING: Removing unreachable block (ram,0x009b19e2)\n// WARNING: Removing unreachable block (ram,0x009b1a13)\n// WARNING: Removing unreachable block (ram,0x009b1a3c)\n// WARNING: Removing unreachable block (ram,0x009b1b1c)\n// WARNING: Removing unreachable block (ram,0x009b1a45)\n// WARNING: Removing unreachable block (ram,0x009b1b79)\n// WARNING: Removing unreachable block (ram,0x009b0a06)\n// WARNING: Removing unreachable block (ram,0x009b1c9a)\n// WARNING: Removing unreachable block (ram,0x009b1c86)\n// WARNING: Removing unreachable block (ram,0x009b0a57)\n// WARNING: Removing unreachable block (ram,0x009b1caa)\n// WARNING: Removing unreachable block (ram,0x009b1d0d)\n// WARNING: Removing unreachable block (ram,0x009b1cad)\n// WARNING: Removing unreachable block (ram,0x009b1d28)\n// WARNING: Removing unreachable block (ram,0x009b1cd2)\n// WARNING: Removing unreachable block (ram,0x009b1ce6)\n// WARNING: Removing unreachable block (ram,0x009b1cf0)\n// WARNING: Removing unreachable block (ram,0x009b19ec)\n// WARNING: Removing unreachable block (ram,0x009b1a4d)\n// WARNING: Removing unreachable block (ram,0x009b19d5)\n// WARNING: Removing unreachable block (ram,0x009b19e0)\n// WARNING: Removing unreachable block (ram,0x009b2273)\n// WARNING: Removing unreachable block (ram,0x009b2277)\n// WARNING: Removing unreachable block (ram,0x009b2279)\n// WARNING: Removing unreachable block (ram,0x009b2460)\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nuint32_t fcn.009b1f5f(void)\n\n{\n    bool bVar1;\n    int16_t iVar2;\n    uint32_t uVar3;\n    char cVar6;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint8_t uVar7;\n    uint8_t uVar8;\n    uint32_t extraout_ECX;\n    uint32_t extraout_ECX_00;\n    uint32_t extraout_ECX_01;\n    int32_t iVar10;\n    int16_t unaff_BX;\n    char cVar11;\n    uchar *puVar12;\n    uchar *puVar13;\n    uchar *puVar14;\n    int32_t unaff_EBP;\n    uint16_t uVar15;\n    uint16_t *unaff_ESI;\n    int32_t unaff_EDI;\n    uchar uVar16;\n    uint8_t uVar17;\n    bool bVar18;\n    uint8_t uVar19;\n    ulong uVar20;\n    ushort unaff_retaddr;\n    uchar uStack00000013;\n    uint16_t in_stack_00000014;\n    uint16_t uStack0000001a;\n    uint in_stack_0000001c;\n    uint in_stack_00000020;\n    uint32_t uVar9;\n    \n    uVar15 = unaff_ESI;\n    if ((POPCOUNT(unaff_BX - 1U & 0xff) & 1U) == 0) {\n        iVar2 = 0xf;\n        if (uVar15 != 0) {\n            for (; uVar15 >> iVar2 == 0; iVar2 = iVar2 + -1) {\n            }\n        }\n    }\n    else {\n        iVar2 = 0xf;\n        if (uVar15 != 0) {\n            for (; uVar15 >> iVar2 == 0; iVar2 = iVar2 + -1) {\n            }\n        }\n    }\n    iVar10 = CONCAT22(unaff_retaddr, iVar2 + -1);\n    iVar4 = -iVar10;\n    if ((iVar4 == 0 || 0 < iVar10) && (iVar4 != 0 && 0 >= iVar10)) {\n        in_stack_0000001c = in_stack_00000020;\n        uStack0000001a = *(unaff_EDI + -1);\n        fcn.009b2119();\n        uVar20 = fcn.009b225e();\n        iVar10 = uVar20 >> 0x20;\n        puVar14 = &stack0x00000014;\n        if (puVar14 < 1) {\n            uVar5 = (uVar20 >> 8 & 0xffff00) << 8 | CONCAT11(iVar10 + 0x8c6 >> 8, ~uVar20);\n        }\n        else {\n            uVar5 = uVar20 & 0xffff0000 | CONCAT11(iVar10 + 0x8c6 >> 8, ~uVar20);\n        }\n        uStack00000013 = 0x75;\n        uVar7 = -(extraout_ECX_00 ^ 0x9d);\n        uVar3 = uVar7;\n        uVar9 = extraout_ECX_00 & 0xffffff00 | uVar3;\n        cVar6 = uVar5 >> 8;\n        if (uVar7 == 0) {\n            cVar11 = in_stack_00000014 >> 8;\n            bVar18 = SCARRY1(cVar6, cVar11);\n            cVar6 = cVar6 + cVar11;\n            uVar17 = cVar6 < '\\0';\n            uVar16 = cVar6 == '\\0';\n            uVar7 = ((uVar5 & 0xffff0000 | CONCAT11(cVar6, uVar5)) >> (uVar3 & 0x1f) & 1) != 0;\n            uVar5 = uVar5 & 0xffff0000 | in_stack_00000014;\n        }\n        else {\n            cVar11 = in_stack_00000014 >> 8;\n            bVar18 = SCARRY1(cVar6, cVar11);\n            cVar6 = cVar6 + cVar11;\n            uVar17 = cVar6 < '\\0';\n            uVar16 = cVar6 == '\\0';\n            uVar7 = ((uVar5 & 0xffff0000 | CONCAT11(cVar6, uVar5)) >> (uVar3 & 0x1f) & 1) != 0;\n            uVar5 = uVar5 & 0xffff0000 | in_stack_00000014;\n        }\n        do {\n            uVar8 = ~uVar9;\n            uVar19 = uVar8 & 0x1f;\n            uVar5 = uVar5 >> uVar19 | uVar5 << 0x20 - uVar19;\n            bVar1 = (uVar8 & 0x1f) != 0;\n            uVar7 = !bVar1 & uVar7 | (bVar1 && uVar5 < 0);\n            uVar19 = uVar19 != 1 & bVar18 | (uVar19 == 1 && uVar5 < 0 != uVar5 << 1 < 0);\n            if (uVar7) {\n                puVar12 = puVar14 + -4;\n                *(puVar14 + -4) = uVar9 & 0xffffff00 | uVar8;\n                uVar7 = (uVar5 >> 5 | uVar5 << 0x1b) < 0;\n            }\n            else {\n                puVar12 = puVar14 + -4;\n                *(puVar14 + -4) = 0x9b238f;\n                func_0x009b23d5();\n            }\n            while( true ) {\n                puVar13 = puVar12 + -4;\n                *(puVar12 + -4) = 0x9b2398;\n                uVar5 = func_0x009b28da();\n                puVar12 = puVar13 + -4;\n                *(puVar13 + -4) = 0xf50663f3;\n                if (!uVar16 && uVar19 == uVar17) break;\n                uVar19 = SCARRY4(uVar5, -0xc980000);\n                uVar17 = uVar5 + 0xf3680000 < 0;\n                iVar2 = (uVar5 + 0xf3680000 & 3) - (*unaff_ESI & 3);\n                uVar16 = 0 < iVar2;\n                *unaff_ESI = *unaff_ESI + (0xc97ffff < uVar5) * iVar2;\n                uVar7 = 0xc97ffff >= uVar5;\n            }\n            *(puVar13 + -8) = 0xd;\n            bVar18 = SBORROW4(unaff_EBP, 1);\n            unaff_EBP = unaff_EBP + -1;\n            uVar17 = unaff_EBP < 0;\n            uVar16 = unaff_EBP == 0;\n            *(puVar13 + -0xc) = 0xe31071e1;\n            puVar14 = puVar13 + -0x10;\n            *(puVar13 + -0x10) = unaff_ESI;\n            uVar5 = uVar5 & 0xffffff00 | *0x24048b66;\n            uVar9 = extraout_ECX_01;\n        } while( true );\n    }\n    uVar5 = fcn.009b210d(iVar4);\n    return extraout_ECX & 0xff | uVar5 & 0xffffff00;\n}\n",
        "token_count": 2437
    },
    "009b1ab2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.009b1ab2(uint32_t param_1)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    uint16_t unaff_SI;\n    uint32_t uStack24;\n    \n    iVar2 = 0;\n    if (param_1 != 0) {\n        for (; (param_1 >> iVar2 & 1) == 0; iVar2 = iVar2 + 1) {\n        }\n    }\n    iVar1 = 0;\n    if (unaff_SI != 0) {\n        for (; (unaff_SI >> iVar1 & 1) == 0; iVar1 = iVar1 + 1) {\n        }\n    }\n    return -uStack24 & 0xffff0000 | uStack24 & 0xffff;\n}\n",
        "token_count": 175
    },
    "009b29e3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009b30fd) overlaps instruction at (ram,0x009b30fa)\n// \n\nulong __fastcall fcn.009b29e3(uint param_1, uint param_2, uint param_3, int32_t param_4)\n\n{\n    uchar *puVar1;\n    uchar uVar2;\n    char *in_EAX;\n    char *pcVar3;\n    uint32_t uVar4;\n    char cVar5;\n    ushort extraout_CX;\n    uint8_t uVar6;\n    ushort uVar7;\n    uint uVar8;\n    uchar *unaff_EDI;\n    bool bVar9;\n    char in_AF;\n    ulong uVar10;\n    int32_t unaff_retaddr;\n    uint in_stack_00000018;\n    uint in_stack_00000020;\n    \n    uVar10 = CONCAT44(param_2, in_EAX);\n    *(unaff_retaddr + 0x696) = in_EAX;\n    if (*in_EAX == -0x34) {\n        do {\n            uVar8 = uVar10 >> 0x20;\n            uVar4 = uVar10 & 0xffffff04;\n            while( true ) {\n                if (param_4 != 0) {\n                    return CONCAT44(uVar8, uVar4);\n                }\n    // WARNING: Call to offcut address within same function\n                uVar10 = func_0x009b30f5(unaff_EDI);\n                uVar8 = uVar10 >> 0x20;\n                pcVar3 = uVar10;\n                puVar1 = unaff_EDI + 1;\n                uVar7 = uVar10 >> 0x20;\n                uVar2 = in(uVar7);\n                *unaff_EDI = uVar2;\n                unaff_EDI = unaff_EDI + 2;\n                uVar2 = in(uVar7);\n                *puVar1 = uVar2;\n                uVar6 = extraout_CX >> 8;\n                bVar9 = CARRY1(extraout_CX, uVar6);\n                cVar5 = extraout_CX + uVar6;\n                if (!bVar9 && cVar5 != '\\0') break;\n                uVar4 = pcVar3 & 0xffff0000 |\n                        CONCAT11((cVar5 < '\\0') << 7 | (cVar5 == '\\0') << 6 | in_AF << 4 |\n                                 ((POPCOUNT(cVar5) & 1U) == 0) << 2 | 2U | bVar9, uVar10);\n            }\n            *pcVar3 = *pcVar3 + uVar10;\n        } while( true );\n    }\n    if (*in_EAX == -0x34) {\n        return CONCAT44(in_stack_00000018, in_stack_00000020);\n    }\n    return CONCAT44(in_stack_00000018, in_stack_00000020);\n}\n",
        "token_count": 649
    },
    "009b4a67": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009b5ee8) overlaps instruction at (ram,0x009b5ee5)\n// \n// WARNING: Possible PIC construction at 0x009b5b5f: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x009b5b64)\n// WARNING: Removing unreachable block (ram,0x009b5e6c)\n// WARNING: Removing unreachable block (ram,0x009b5e9f)\n// WARNING: Removing unreachable block (ram,0x009b5b9d)\n\nuint64_t __fastcall\nfcn.009b4a67(uint param_1, uint param_2, uint8_t *param_3, uint32_t param_4, uchar *param_5, uint param_6, uint param_7\n            , uint param_8, uint param_9, uint param_10, uint param_11, uint param_12, uint param_13)\n\n{\n    uchar *puVar1;\n    uchar uVar2;\n    uint8_t uVar3;\n    uchar *puVar4;\n    uint8_t uVar5;\n    uint8_t uVar6;\n    uint8_t *in_EAX;\n    uint8_t extraout_CH;\n    ushort extraout_DX;\n    uint32_t *extraout_EDX;\n    char cVar7;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint8_t *unaff_EBP;\n    uint8_t *puVar11;\n    uint32_t unaff_ESI;\n    ushort in_CS;\n    bool bVar12;\n    bool bVar13;\n    uint8_t in_AF;\n    bool bVar14;\n    bool bVar15;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    bool bVar16;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint64_t uVar17;\n    ulong uVar18;\n    int32_t unaff_retaddr;\n    uint32_t uStack84;\n    uint uStack80;\n    uint8_t *puStack76;\n    uint uStack72;\n    uchar *puStack68;\n    uint32_t uStack64;\n    uint8_t *puStack60;\n    uint32_t *puStack56;\n    uint32_t uStack52;\n    uint uStack48;\n    uint uStack44;\n    uint8_t *puStack40;\n    uint32_t uStack36;\n    uint32_t *puStack32;\n    uint32_t uStack28;\n    uchar *puStack24;\n    uint32_t uStack20;\n    uint8_t *puStack16;\n    uint *puStack12;\n    uint32_t uStack8;\n    uint uStack4;\n    \n    *(unaff_retaddr + 0x224) = in_EAX;\n    if (*in_EAX == 0xcc) {\n        *in_EAX = *in_EAX + in_EAX;\n        uVar8 = *in_EAX + 0x824a5b67;\n        bVar12 = uVar8 < 0x824a5c33;\n        bVar16 = SBORROW4(uVar8, -0x7db5a3cd);\n        uVar9 = *in_EAX - 0xcc;\n        bVar15 = uVar9 < 0;\n        bVar14 = uVar9 == 0;\n        bVar13 = (POPCOUNT(uVar9 & 0xff) & 1U) == 0;\n        uVar9 = param_4;\n        *0x9b5c46 = in_EAX;\n        if ((bVar14) || (uVar9 = uVar8,  param_3 = unaff_EBP,  bVar14)) {\n            while( true ) {\n                puVar4 = param_5;\n                param_5 = NULL;\n                param_4 = (in_NT & 1) * 0x4000 | bVar16 * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n                          bVar15 * 0x80 | bVar14 * 0x40 | (in_AF & 1) * 0x10 | bVar13 * 4 | bVar12 |\n                          (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 |\n                          (in_AC & 1) * 0x40000;\n                puStack12 = &param_4;\n                puStack24 = puVar4;\n                uStack28 = 0x9b5c2c;\n                uStack20 = unaff_ESI;\n                puStack16 = param_3;\n                uStack8 = uVar9;\n                uStack4 = param_2;\n                func_0x009b5c37();\n                puVar11 = param_3 + 1;\n                uVar8 = unaff_ESI ^ *extraout_EDX;\n                uVar2 = in(extraout_EDX);\n                *puVar4 = uVar2;\n                puVar1 = puVar4 + 2;\n                uVar2 = in(extraout_EDX);\n                puVar4[1] = uVar2;\n                uVar5 = uVar9;\n                cVar7 = uVar5 + extraout_CH;\n                puStack24 = NULL;\n                uStack28 = (in_NT & 1) * 0x4000 | SCARRY1(uVar5, extraout_CH) * 0x800 | (in_IF & 1) * 0x200 |\n                           (in_TF & 1) * 0x100 | (cVar7 < '\\0') * 0x80 | (cVar7 == '\\0') * 0x40 | (in_AF & 1) * 0x10 |\n                           ((POPCOUNT(cVar7) & 1U) == 0) * 4 | CARRY1(uVar5, extraout_CH) | (in_ID & 1) * 0x200000 |\n                           (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n                uStack36 = 0x9b5c51;\n                puStack32 = extraout_EDX;\n                uStack20 = uVar9;\n                puStack16 = param_3;\n                fcn.009b59ef();\n                uStack36 = 0x9b5c7a;\n                uVar17 = fcn.0099ff64();\n                unaff_ESI = uStack28;\n                uStack48 = uVar17 >> 0x20;\n                param_3 = uVar17;\n                uStack36 = 0x9b4e8d;\n                uStack44 = 0xf099be80;\n                uStack52 = *param_3 + 0x2f5c021e;\n                bVar12 = uStack52 < 0x2f5c02ea;\n                *0x9b5be1 = param_3;\n                if (uStack52 == 0x2f5c02ea) break;\n                puStack40 = param_3;\n                if (uStack52 == 0x2f5c02ea) goto code_r0x009b5d13;\n                param_4 = param_4 + 1;\n    // WARNING: Call to offcut address within same function\n                uStack4 = 0x9b5bac;\n                uVar17 = func_0x009b5bad();\n                param_2 = uVar17 >> 0x20;\n                if (!bVar12) {\n                    return uVar17 & 0xffffffffffffff04;\n                }\n                uVar5 = (uVar17 + 'c') - bVar12;\n                puVar11 = uVar17 & 0xffffff00 | uVar5;\n                *puVar11 = *puVar11 + uVar5;\n                bVar12 = CARRY1(*puVar11, uVar5);\n                bVar16 = SCARRY1(*puVar11, uVar5);\n                *puVar11 = *puVar11 + uVar5;\n                bVar15 = *puVar11 < '\\0';\n                bVar14 = *puVar11 == 0;\n                bVar13 = (POPCOUNT(*puVar11) & 1U) == 0;\n                uVar9 = param_4;\n            }\n            uVar6 = uVar17 + 0x68;\n            puStack40 = param_3 & 0xffffff00 | uVar6;\n            *puStack40 = *puStack40 + uVar6;\n            uVar5 = *puStack40;\n            uVar3 = *puStack40;\n            *puStack40 = *puStack40 + uVar6;\n            uStack36 = (in_NT & 1) * 0x4000 | SCARRY1(uVar3, uVar6) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100\n                       | (*puStack40 < '\\0') * 0x80 | (*puStack40 == 0) * 0x40 | (in_AF & 1) * 0x10 |\n                       ((POPCOUNT(*puStack40) & 1U) == 0) * 4 | CARRY1(uVar5, uVar6) | (in_ID & 1) * 0x200000 |\n                       (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n            puStack56 = &uStack36;\n            if (puStack32 == NULL) {\n                uStack72 = 0x9b4ead;\n                puStack76 = (in_NT & 1) * 0x4000 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | (puStack32 < 0) * 0x80 |\n                            (puStack32 == NULL) * 0x40 | (in_AF & 1) * 0x10 |\n                            ((POPCOUNT(puStack32 & 0xff) & 1U) == 0) * 4 | (in_ID & 1) * 0x200000 |\n                            (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n                uStack80 = 0x9b5da7;\n                puStack68 = puVar1;\n                uStack64 = uVar8;\n                puStack60 = puVar11;\n                fcn.009b5d69();\n                uStack80 = 0x9b5dac;\n                uVar18 = fcn.0099ff64();\n                *0x9b5d2e = uVar18;\n                uVar10 = **0x9b5d2e + 0x7de6d310;\n                bVar12 = uVar10 < 0x7de6d3dc;\n                bVar15 = SBORROW4(uVar10, 0x7de6d3dc);\n                uVar9 = **0x9b5d2e - 0xcc;\n                bVar14 = uVar9 < 0;\n                bVar13 = uVar9 == 0;\n                uVar5 = POPCOUNT(uVar9 & 0xff);\n                if (bVar13) {\n                    bVar12 = false;\n                    cVar7 = uVar18;\n                    bVar15 = SCARRY1(cVar7, '\\0');\n                    bVar14 = cVar7 < '\\0';\n                    bVar13 = cVar7 == '\\0';\n                    uVar5 = POPCOUNT(cVar7);\n                }\n                else {\n                    puStack76 = puVar11;\n                    if (!bVar13) {\n                        return CONCAT44(puStack56, uStack48);\n                    }\n                }\n                uStack80 = 0;\n                uStack84 = (in_NT & 1) * 0x4000 | bVar15 * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n                           bVar14 * 0x80 | bVar13 * 0x40 | (in_AF & 1) * 0x10 | ((uVar5 & 1) == 0) * 4 | bVar12 |\n                           (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 |\n                           (in_AC & 1) * 0x40000;\n    // WARNING: Call to offcut address within same function\n                func_0x009b5f14(puVar1, uVar8, puVar11, &uStack84, uVar10, uVar18 >> 0x20, 0xf099be80, *0x9b5d2e);\n                uVar2 = in(extraout_DX);\n                *puVar1 = uVar2;\n                uVar2 = in(extraout_DX);\n                puVar4[3] = uVar2;\n                func_0xeb535ecf(in_CS);\n                LOCK();\n    // WARNING: Bad instruction - Truncating control flow here\n                halt_baddata();\n            }\ncode_r0x009b5d13:\n            return uVar17 & 0xffffffff00000000 | ZEXT48(puStack40);\n        }\n    }\n    else if (*in_EAX != 0xcc) {\n        return CONCAT44(param_8, param_10);\n    }\n    return CONCAT44(param_8, param_10);\n}\n",
        "token_count": 3145
    },
    "009b4aa6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009b4e88) overlaps instruction at (ram,0x009b4e85)\n// \n// WARNING: Control flow encountered bad instruction data\n// WARNING: Possible PIC construction at 0x009b5b5f: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x009b5b64)\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Removing unreachable block (ram,0x009b5b9d)\n// WARNING: Removing unreachable block (ram,0x009b5e6c)\n// WARNING: Removing unreachable block (ram,0x009b5e9f)\n\nuint8_t * fcn.009b4aa6(uint32_t param_1)\n\n{\n    uint16_t *puVar1;\n    uchar *puVar2;\n    uchar uVar3;\n    uint uVar4;\n    uint8_t uVar5;\n    int32_t iVar6;\n    uint8_t uVar7;\n    uint8_t *puVar8;\n    uint32_t uVar9;\n    char extraout_CH;\n    uint8_t extraout_CH_00;\n    int32_t extraout_ECX;\n    ushort uVar10;\n    ushort extraout_DX;\n    uint32_t *extraout_EDX;\n    uint32_t *extraout_EDX_00;\n    uint8_t uVar11;\n    char cVar12;\n    int32_t unaff_EBX;\n    uint32_t uVar13;\n    uchar *puVar14;\n    uchar *puVar15;\n    int32_t unaff_EBP;\n    uint8_t *puVar16;\n    int32_t unaff_ESI;\n    uint *puVar17;\n    uint *puVar18;\n    uchar *unaff_EDI;\n    uchar *puVar19;\n    ushort in_CS;\n    bool bVar20;\n    uint8_t in_AF;\n    bool bVar21;\n    bool bVar22;\n    uint8_t in_TF;\n    uint8_t uVar23;\n    bool bVar24;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    ulong uVar25;\n    uint32_t *puVar26;\n    uint8_t in_stack_00000028;\n    uchar *in_stack_0000002c;\n    uint32_t uStack52;\n    uint uStack48;\n    uint8_t *puStack44;\n    uint uStack40;\n    uchar *puStack36;\n    uint *puStack32;\n    uint8_t *puStack28;\n    uchar *puStack24;\n    uint32_t uStack20;\n    uint8_t *puStack16;\n    int32_t iStack12;\n    uint8_t *puStack8;\n    uint8_t uStack4;\n    uint8_t uStack3;\n    uint8_t uStack2;\n    uchar uStack1;\n    \n    // WARNING: Call to offcut address within same function\n    func_0x009b5260();\n    uVar13 = unaff_EBX - 1;\n    puVar16 = unaff_EBP + 2;\n    puVar17 = unaff_ESI - 1U ^ *extraout_EDX;\n    uVar10 = SUB42(extraout_EDX, 0);\n    uVar3 = in(uVar10);\n    *unaff_EDI = uVar3;\n    uVar3 = in(uVar10);\n    unaff_EDI[1] = uVar3;\n    uVar23 = uVar13 >> 8;\n    bVar20 = CARRY1(uVar23, uVar23);\n    uVar9 = uVar13 & 0xffff0000 | CONCAT11(uVar23 * '\\x02', uVar13);\n    bVar21 = uVar23 * '\\x02' == '\\0';\n    uVar23 = 1;\n    puVar19 = unaff_EDI + 6;\n    uVar4 = in(uVar10);\n    *(unaff_EDI + 2) = uVar4;\n    puStack8 = puStack8 & 0xffffff | 0x74000000;\n    uStack4 = 0x4e;\n    uStack3 = 0x9b;\n    uStack2 = 0;\n    puVar26 = extraout_EDX;\n    // WARNING: Call to offcut address within same function\n    uVar25 = func_0x009b4e84();\n    puVar8 = uVar25;\n    puStack8 = puStack8 & 0xffffff | extraout_ECX << 0x18;\n    uStack4 = extraout_ECX >> 8;\n    uStack3 = extraout_ECX >> 0x10;\n    uStack2 = extraout_ECX >> 0x18;\n    if (bVar21) {\n        if (bVar20) goto code_r0x009b4ef2;\n        puVar18 = puVar17 + 1;\n        out(*puVar17, uVar25 >> 0x20);\n        puVar17 = puVar18;\n        if (bVar20) {\n            if (!bVar20 && *0x10 != 0x4) {\n                puVar1 = unaff_EBP + 0x59;\n                *puVar1 = *puVar1 + bVar20 * -(*puVar1 & 3);\n                *(unaff_EBP + 0xe8c5) = *(unaff_EBP + 0xe8c5) >> 1 | CARRY1(uVar13, uStack4) << 7;\n                *puVar8 = *puVar8 + uVar25;\n                while( true ) {\n                    puVar15 = in_stack_0000002c;\n                    puStack16 = uVar25 >> 0x20;\n                    puVar8 = uVar25;\n                    puStack24 = &stack0xfffffffc;\n                    iVar6 = CONCAT13(uStack1, CONCAT12(uStack2, CONCAT11(uStack3, uStack4)));\n                    iStack12 = iVar6 + -0x1001900d;\n                    *(iVar6 + 0xd54) = puVar8;\n                    uStack20 = *puVar8 + 0x2f5c021e;\n                    bVar20 = uStack20 < 0x2f5c02ea;\n                    if (uStack20 == 0x2f5c02ea) {\n                        uVar7 = uVar25 + 0x68;\n                        puStack8 = puVar8 & 0xffffff00 | uVar7;\n                        *puStack8 = *puStack8 + uVar7;\n                        uVar5 = *puStack8;\n                        uVar11 = *puStack8;\n                        *puStack8 = *puStack8 + uVar7;\n                        iVar6 = (*puStack8 < '\\0') * 0x80;\n                        uStack3 = (in_NT & 1) * 0x4000 >> 8 | SCARRY1(uVar11, uVar7) * 0x800 >> 8 |\n                                  (uVar23 & 1) * 0x200 >> 8 | (in_TF & 1) * 0x100 >> 8 | iVar6 >> 8;\n                        uStack4 = iVar6 | (*puStack8 == 0) * '@' | (in_AF & 1) * '\\x10' |\n                                  ((POPCOUNT(*puStack8) & 1U) == 0) * '\\x04' | CARRY1(uVar5, uVar7);\n                        uStack2 = (in_ID & 1) * 0x200000 >> 0x10 | (in_VIP & 1) * 0x100000 >> 0x10 |\n                                  (in_VIF & 1) * 0x80000 >> 0x10 | (in_AC & 1) * 0x40000 >> 0x10;\n                        uStack1 = 0;\n                        if (puVar26 != NULL) {\n                            return puStack8;\n                        }\n                        uStack40 = 0x9b4ead;\n                        puStack44 = (in_NT & 1) * 0x4000 | (uVar23 & 1) * 0x200 | (in_TF & 1) * 0x100 |\n                                    (puVar26 < 0) * 0x80 | (puVar26 == NULL) * 0x40 | (in_AF & 1) * 0x10 |\n                                    ((POPCOUNT(puVar26 & 0xff) & 1U) == 0) * 4 | (in_ID & 1) * 0x200000 |\n                                    (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n                        uStack48 = 0x9b5da7;\n                        puStack36 = puVar19;\n                        puStack32 = puVar18;\n                        puStack28 = puVar16;\n                        fcn.009b5d69();\n                        uStack48 = 0x9b5dac;\n                        uVar25 = fcn.0099ff64();\n                        *0x9b5d2e = uVar25;\n                        uVar13 = **0x9b5d2e + 0x7de6d310;\n                        bVar20 = uVar13 < 0x7de6d3dc;\n                        bVar24 = SBORROW4(uVar13, 0x7de6d3dc);\n                        uVar9 = **0x9b5d2e - 0xcc;\n                        bVar22 = uVar9 < 0;\n                        bVar21 = uVar9 == 0;\n                        uVar11 = POPCOUNT(uVar9 & 0xff);\n                        if (bVar21) {\n                            bVar20 = false;\n                            cVar12 = uVar25;\n                            bVar24 = SCARRY1(cVar12, '\\0');\n                            bVar22 = cVar12 < '\\0';\n                            bVar21 = cVar12 == '\\0';\n                            uVar11 = POPCOUNT(cVar12);\n                        }\n                        else {\n                            puStack44 = puVar16;\n                            if (!bVar21) {\n                                return puStack16;\n                            }\n                        }\n                        uStack48 = 0;\n                        uStack52 = (in_NT & 1) * 0x4000 | bVar24 * 0x800 | (uVar23 & 1) * 0x200 | (in_TF & 1) * 0x100 |\n                                   bVar22 * 0x80 | bVar21 * 0x40 | (in_AF & 1) * 0x10 | ((uVar11 & 1) == 0) * 4 | bVar20\n                                   | (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 |\n                                   (in_AC & 1) * 0x40000;\n    // WARNING: Call to offcut address within same function\n                        func_0x009b5f14(puVar19, puVar18, puVar16, &stack0xffffffcc, uVar13, uVar25 >> 0x20, 0xf099be80\n                                        , *0x9b5d2e);\n                        uVar3 = in(extraout_DX);\n                        *puVar19 = uVar3;\n                        uVar3 = in(extraout_DX);\n                        puVar19[1] = uVar3;\n                        func_0xeb535ecf(in_CS);\n                        LOCK();\n    // WARNING: Bad instruction - Truncating control flow here\n                        halt_baddata();\n                    }\n                    if (uStack20 == 0x2f5c02ea) break;\n                    uVar11 = in_stack_00000028 + 1;\n    // WARNING: Call to offcut address within same function\n                    uVar9 = func_0x009b5bad();\n                    if (!bVar20) {\n                        return uVar9 & 0xffffff04;\n                    }\n                    uVar7 = (uVar9 + 'c') - bVar20;\n                    puVar16 = uVar9 & 0xffffff00 | uVar7;\n                    *puVar16 = *puVar16 + uVar7;\n                    uVar5 = *puVar16;\n                    *puVar16 = *puVar16 + uVar7;\n                    in_stack_0000002c = NULL;\n                    in_stack_00000028 =\n                         (*puVar16 < '\\0') * -0x80 | (*puVar16 == 0) * '@' | (in_AF & 1) * '\\x10' |\n                         ((POPCOUNT(*puVar16) & 1U) == 0) * '\\x04' | CARRY1(uVar5, uVar7);\n                    func_0x009b5c37();\n                    puVar16 = puVar8 + 1;\n                    puVar18 = param_1 ^ *extraout_EDX_00;\n                    uVar3 = in(extraout_EDX_00);\n                    *puVar15 = uVar3;\n                    puVar19 = puVar15 + 2;\n                    uVar3 = in(extraout_EDX_00);\n                    puVar15[1] = uVar3;\n                    cVar12 = uVar11 + extraout_CH_00;\n                    param_1 = (in_NT & 1) * 0x4000 | SCARRY1(uVar11, extraout_CH_00) * 0x800 | (uVar23 & 1) * 0x200 |\n                              (in_TF & 1) * 0x100 | (cVar12 < '\\0') * 0x80 | (cVar12 == '\\0') * 0x40 |\n                              (in_AF & 1) * 0x10 | ((POPCOUNT(cVar12) & 1U) == 0) * 4 | CARRY1(uVar11, extraout_CH_00) |\n                              (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 |\n                              (in_AC & 1) * 0x40000;\n                    uStack4 = 0x51;\n                    uStack3 = 0x5c;\n                    uStack2 = 0x9b;\n                    uStack1 = 0;\n                    puVar26 = extraout_EDX_00;\n                    fcn.009b59ef();\n                    uStack4 = 0x7a;\n                    uStack3 = 0x5c;\n                    uStack2 = 0x9b;\n                    uStack1 = 0;\n                    uVar25 = fcn.0099ff64();\n                    uStack4 = 0x8d;\n                    uStack3 = 0x4e;\n                    uStack2 = 0x9b;\n                    uStack1 = 0;\n                }\n                return puVar8;\n            }\n            puVar8 = puVar8 & 0xffffff04;\n            *(unaff_EBP + -0x49) = *(unaff_EBP + -0x49) + (uVar25 >> 0x28);\n        }\n    }\n    else {\n        if ((*(extraout_ECX + -0x7c000005) & uVar9) < 0) {\n            return puVar8 + 0xa6316c & 0xffffff08;\n        }\n        if (uVar25 != '\\0') {\n            return puVar8;\n        }\n    }\n    puStack8 = puVar8;\n    iStack12 = extraout_ECX;\n    puStack16 = uVar25 >> 0x20;\n    uStack20 = uVar9;\n    puStack24 = &stack0xfffffffc;\n    puStack28 = puVar16;\n    puStack32 = puVar17;\n    puStack36 = puVar19;\n    uStack40 = 0x9b4af3;\ncode_r0x009b4ef2:\n    puVar15 = &stack0xffffffdc;\n    do {\n        puVar14 = puVar15 + -4;\n    // WARNING: Call to offcut address within same function\n        *(puVar15 + -4) = 0x9b4f1d;\n        uVar25 = func_0x009b4f28();\n        *(puVar14 + -4) = uVar9;\n        *(puVar14 + -8) = puVar17;\n        uVar9 = uVar9 + 1;\n        *(puVar14 + -0xc) = uVar25 >> 0x20;\n        puVar15 = puVar14 + -0x10;\n        *(puVar14 + -0x10) = puVar14 + -0xc;\n        puVar2 = puVar19 + 1;\n        uVar10 = uVar25 >> 0x20;\n        uVar3 = in(uVar10);\n        *puVar19 = uVar3;\n        puVar19 = puVar19 + 2;\n        uVar3 = in(uVar10);\n        *puVar2 = uVar3;\n        uVar9 = uVar9 & 0xffff0000 | CONCAT11(uVar9 >> 8 & *(uVar25 + -0x3120d65), uVar9 + extraout_CH);\n    } while( true );\n}\n",
        "token_count": 3877
    },
    "009b4834": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x009b4834: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x009b4839)\n// WARNING: Removing unreachable block (ram,0x009b484c)\n// WARNING: Removing unreachable block (ram,0x009b484d)\n// WARNING: Removing unreachable block (ram,0x009b4852)\n// WARNING: Removing unreachable block (ram,0x009b3524)\n// WARNING: Removing unreachable block (ram,0x009b4830)\n// WARNING: Removing unreachable block (ram,0x009b4812)\n// WARNING: Removing unreachable block (ram,0x009b4946)\n\nvoid fcn.009b4834(void)\n\n{\n    uchar uVar1;\n    uint extraout_ECX;\n    ushort extraout_DX;\n    ushort extraout_DX_00;\n    int32_t unaff_EBX;\n    uint *puVar2;\n    int32_t unaff_ESI;\n    uchar *unaff_EDI;\n    \n    fcn.009b4878();\n    rdtsc();\n    // WARNING: Call to offcut address within same function\n    func_0x009b4c5e();\n    uVar1 = in(extraout_DX_00);\n    *unaff_EDI = uVar1;\n    uVar1 = in(extraout_DX_00);\n    unaff_EDI[1] = uVar1;\n    // WARNING: Call to offcut address within same function\n    func_0x009b49a7();\n    puVar2 = *(unaff_ESI + 0x69) * 0x72657474;\n    in(extraout_DX);\n    *puVar2 = extraout_ECX;\n    *puVar2 = extraout_DX;\n    *puVar2 = extraout_ECX;\n    *(puVar2 + 2) = (unaff_EBX + 1 >> 8) * '\\x02';\n    return;\n}\n",
        "token_count": 425
    },
    "009b4a36": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n\nulong fcn.009b4a36(void)\n\n{\n    char *in_EAX;\n    int32_t unaff_retaddr;\n    uint in_stack_00000018;\n    uint in_stack_00000020;\n    uint var_2bh;\n    \n    *(unaff_retaddr + 0x155) = in_EAX;\n    if (*in_EAX == -0x34) {\n        *in_EAX = *in_EAX + in_EAX;\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    if (*in_EAX == -0x34) {\n        *0x9b52c8 = 0x9b53bc;\n        return CONCAT44(in_stack_00000018, in_stack_00000020);\n    }\n    return CONCAT44(in_stack_00000018, in_stack_00000020);\n}\n",
        "token_count": 201
    },
    "009b4c1e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.009b4c1e(void)\n\n{\n    uchar *puVar1;\n    uchar uVar2;\n    ushort extraout_DX;\n    uchar *unaff_EDI;\n    \n    do {\n    // WARNING: Call to offcut address within same function\n        func_0x009b5344();\n        puVar1 = unaff_EDI + 1;\n        uVar2 = in(extraout_DX);\n        *unaff_EDI = uVar2;\n        unaff_EDI = unaff_EDI + 2;\n        uVar2 = in(extraout_DX);\n        *puVar1 = uVar2;\n    } while( true );\n}\n",
        "token_count": 143
    },
    "009b4d72": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n\nuint64_t __fastcall fcn.009b4d72(uint param_1, uint param_2, uint *param_3)\n\n{\n    char *in_EAX;\n    uint16_t in_ES;\n    uint32_t unaff_retaddr;\n    uint in_stack_00000014;\n    uint32_t in_stack_0000001c;\n    uint uStack00000020;\n    \n    *(unaff_retaddr + 0x9d0) = in_EAX;\n    if (*in_EAX == -0x34) {\n        *(unaff_retaddr & 0xffff0000 | in_ES) = *param_3;\n        return CONCAT44(in_stack_00000014, in_stack_0000001c & 0xffffff00 | in_stack_0000001c + 0x73) &\n               0xffffffffffffff04;\n    }\n    if (*in_EAX == -0x34) {\n        return CONCAT44(param_2, in_EAX);\n    }\n    // WARNING: Call to offcut address within same function\n    uStack00000020 = 0x9b5815;\n    func_0x009b5935();\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 280
    },
    "009b4b3b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "009b50b5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong __fastcall fcn.009b50b5(uint param_1, uint param_2)\n\n{\n    uchar *puVar1;\n    uchar uVar2;\n    char *in_EAX;\n    ushort extraout_DX;\n    uchar *unaff_EDI;\n    int32_t unaff_retaddr;\n    uint in_stack_00000018;\n    uint in_stack_00000020;\n    \n    *(unaff_retaddr + 0x121d) = in_EAX;\n    if (*in_EAX == -0x34) {\n        do {\n    // WARNING: Call to offcut address within same function\n            func_0x009b6441();\n            puVar1 = unaff_EDI + 1;\n            uVar2 = in(extraout_DX);\n            *unaff_EDI = uVar2;\n            unaff_EDI = unaff_EDI + 2;\n            uVar2 = in(extraout_DX);\n            *puVar1 = uVar2;\n        } while( true );\n    }\n    if (*in_EAX == -0x34) {\n        return CONCAT44(param_2, in_EAX);\n    }\n    return CONCAT44(in_stack_00000018, in_stack_00000020);\n}\n",
        "token_count": 264
    },
    "009b4b7c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n\nulong __fastcall fcn.009b4b7c(uint param_1, uint param_2, int32_t param_3)\n\n{\n    uint *puVar1;\n    uint8_t *in_EAX;\n    ushort extraout_DX;\n    uint32_t uVar2;\n    uint *unaff_ESI;\n    int32_t unaff_EDI;\n    int32_t unaff_retaddr;\n    uchar uStack00000019;\n    ushort uStack0000001a;\n    uint in_stack_0000001c;\n    uint in_stack_00000024;\n    uint in_stack_00000038;\n    uint in_stack_00000040;\n    \n    *(unaff_retaddr + 0x466) = in_EAX;\n    if (*in_EAX == 0xcc) {\n        *in_EAX = *in_EAX + in_EAX;\n        *in_EAX = *in_EAX + in_EAX;\n        *(param_3 + 0x13fe) = in_EAX;\n        uVar2 = *in_EAX + 0xe29a0ab7;\n        if (uVar2 == 0xe29a0b83) {\n            return CONCAT44(param_2, in_EAX);\n        }\n        if (uVar2 == 0xe29a0b83) {\n            puVar1 = unaff_ESI + 1;\n            out(*unaff_ESI, param_2);\n            *puVar1 = *puVar1 + (uVar2 < 0xe29a0b83) * ((in_EAX & 3) - (*puVar1 & 3));\n            *(unaff_EDI + -0xc) = *(unaff_EDI + -0xc) ^ param_2 >> 8;\n    // WARNING: Call to offcut address within same function\n            func_0x009b675a();\n            *0xd = in(extraout_DX);\n            *0xe = in(extraout_DX);\n            uStack00000019 = 100;\n            uStack0000001a = 0x9b67;\n            func_0x6fe90ccd();\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n    }\n    else {\n        if (*in_EAX != 0xcc) {\n            fcn.009b50f3();\n            return CONCAT44(in_stack_00000038, in_stack_00000040);\n        }\n        fcn.009b5214();\n    }\n    return CONCAT44(in_stack_0000001c, in_stack_00000024);\n}\n",
        "token_count": 570
    },
    "009b5214": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Unable to track spacebase fully for stack\n\nulong __thiscall fcn.009b5214(int32_t param_1)\n\n{\n    uchar *puVar1;\n    uchar uVar2;\n    uint8_t *in_EAX;\n    char extraout_CH;\n    uint extraout_EDX;\n    uint32_t uVar3;\n    uchar *puVar4;\n    int32_t unaff_EBP;\n    uchar *unaff_EDI;\n    uint in_stack_0000001c;\n    uint in_stack_00000024;\n    uint in_stack_0000002c;\n    uint in_stack_00000030;\n    uchar *puVar5;\n    \n    puVar5 = &stack0x00000008;\n    *(param_1 + 0x560) = in_EAX;\n    uVar3 = *in_EAX + 0x35655643;\n    if (uVar3 == 0x3565570f) {\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    if (uVar3 == 0x3565570f) {\n        do {\n            puVar4 = puVar5 + -4;\n    // WARNING: Call to offcut address within same function\n            *(puVar5 + -4) = 0x9b5339;\n            func_0x009b5344();\n            *(puVar4 + -4) = unaff_EBP;\n            *(puVar4 + -8) = uVar3;\n            unaff_EBP = unaff_EBP + 1;\n            puVar5 = puVar4 + -0xc;\n            *(puVar4 + -0xc) = extraout_EDX;\n            puVar1 = unaff_EDI + 1;\n            uVar2 = in(extraout_EDX);\n            *unaff_EDI = uVar2;\n            unaff_EDI = unaff_EDI + 2;\n            uVar2 = in(extraout_EDX);\n            *puVar1 = uVar2;\n            uVar3 = uVar3 & 0xffffff00 | uVar3 + extraout_CH;\n        } while( true );\n    }\n    return CONCAT44(in_stack_0000001c, in_stack_00000024);\n}\n",
        "token_count": 502
    },
    "009b527e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009b68fa) overlaps instruction at (ram,0x009b68f9)\n// \n\nulong fcn.009b527e(uchar *param_1, int32_t param_2, uint param_3, int32_t param_4, ushort param_5, int32_t param_6, \n                  uint param_7)\n\n{\n    uint16_t *puVar1;\n    uchar uVar2;\n    int64_t iVar3;\n    uint32_t uVar4;\n    uint64_t uVar5;\n    uint8_t uVar6;\n    uint in_EAX;\n    int32_t extraout_ECX;\n    int32_t iVar7;\n    uint32_t *puVar8;\n    char cVar9;\n    uint8_t uVar11;\n    uint32_t uVar10;\n    int32_t unaff_EBP;\n    uchar *unaff_ESI;\n    char *pcVar12;\n    uint32_t *unaff_EDI;\n    uint32_t *puVar13;\n    int32_t in_GS_OFFSET;\n    uint8_t in_AF;\n    bool bVar14;\n    uint64_t uVar15;\n    unkbyte6 Var16;\n    uchar *unaff_retaddr;\n    uint8_t uStack4;\n    ushort uStack3;\n    uchar uStack1;\n    \n    uStack4 = in_EAX;\n    uStack3 = in_EAX >> 8;\n    uStack1 = in_EAX >> 0x18;\n    uVar15 = fcn.0099ff64();\n    puVar8 = uVar15 >> 0x20;\n    *0x9b67a7 = uVar15;\n    iVar7 = -0xf664180;\n    uVar10 = **0x9b67a7 + 0x9d010ca5;\n    bVar14 = uVar10 == 0x9d010d71;\n    puVar13 = unaff_EDI;\n    if (!bVar14) {\n        do {\n            if (!bVar14) {\n                return CONCAT44(param_4, param_6);\n            }\n            uVar6 = uVar15 + (uVar15 >> 8) * 'M';\n            in_AF = 9 < (uVar6 & 0xf) | in_AF;\n            uVar6 = uVar6 + in_AF * '\\x06';\n            uVar5 = uVar15 & 0xffff0000ffff0000;\n            uVar4 = uVar5 | uVar6 + (0x90 < (uVar6 & 0xf0) | &uStack4 < unaff_ESI | in_AF * (0xf9 < uVar6)) * '`';\n            unaff_EDI = puVar13 + 1;\n            bVar14 = uVar4 == *puVar13;\n            uStack4 = uVar15 >> 0x20;\n            puVar8 = uVar5 >> 0x20 | CONCAT11(0xa1, uStack4);\n            uVar15 = CONCAT44(puVar8, uVar4);\n            iVar7 = iVar7 + -1;\n            puVar13 = unaff_EDI;\n        } while (iVar7 != 0 && !bVar14);\n        unaff_EBP = unaff_EBP + 1;\n        uStack1 = uVar5 >> 0x38;\n        unaff_ESI = unaff_ESI + -1;\n    }\n    iVar7 = unaff_EBP + 1;\n    pcVar12 = unaff_ESI ^ *puVar8;\n    uVar2 = in(puVar8);\n    *unaff_EDI = uVar2;\n    uVar2 = in(puVar8);\n    *(unaff_EDI + 1) = uVar2;\n    uVar11 = uVar10 >> 8;\n    uVar6 = CARRY1(uVar11, uVar11);\n    if (SCARRY1(uVar11, uVar11)) {\n        uStack4 = 0;\n        (*puVar8)();\n    }\n    else {\n        uVar6 = uStack4 < uVar6;\n        if (!uVar6) {\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n    }\n    uStack4 = 0x66;\n    uStack3 = 0x9b;\n    // WARNING: Call to offcut address within same function\n    Var16 = func_0x009b668c();\n    uVar2 = in(Var16 >> 0x20);\n    *(unaff_EDI + 2) = uVar2;\n    if (*0x10 == NULL) {\n        pcVar12 = param_1 + 1;\n        out(*param_1, param_5);\n        uVar2 = in(param_5);\n        *unaff_retaddr = uVar2;\n        iVar7 = param_2 + 1;\ncode_r0x009b66e9:\n        if (iVar7 < 0) {\n            func_0x0f5c74e2();\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n    }\n    else {\n        param_4 = (uVar10 & 0xffff0000 | CONCAT11(uVar11 * '\\x02', uVar10)) + 1;\n        param_7 = Var16;\n        param_6 = extraout_ECX;\n        if (uVar6) {\n            iVar7 = unaff_EBP + 2;\n            goto code_r0x009b66e9;\n        }\n        if (param_4 != 0) goto code_r0x009b6681;\n        param_6 = extraout_ECX + 1;\n    }\n    cVar9 = param_4 + (param_6 >> 8);\n    Var16 = CONCAT24(0xeb61, param_7);\n    *pcVar12 = cVar9;\n    if (cVar9 < '\\0') {\n        return 0x2fdcb525162beb61;\n    }\n    iVar3 = *(param_6 + 99 + iVar7 * 2) * 0x65536c61;\n    pcVar12 = iVar3;\n    uVar6 = pcVar12 != iVar3;\n    puVar1 = param_6 + 0x6f + iVar7 * 2;\n    *puVar1 = *puVar1 + uVar6 * ((iVar3 & 3) - (*puVar1 & 3));\ncode_r0x009b6681:\n    puVar1 = param_6 + 0x6c;\n    *puVar1 = *puVar1 + uVar6 * -(*puVar1 & 3);\n    puVar1 = in_GS_OFFSET + param_6 + 0x6f + iVar7 * 2;\n    *puVar1 = *puVar1 + uVar6 * ((pcVar12 & 3) - (*puVar1 & 3));\n    out(*pcVar12, Var16 >> 0x20);\n    pcVar12 = Var16 + -0x17;\n    *pcVar12 = *pcVar12 + (Var16 >> 0x20);\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 1608
    },
    "009b5123": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009b64fb) overlaps instruction at (ram,0x009b64fa)\n// \n// WARNING: Control flow encountered bad instruction data\n\nulong __fastcall fcn.009b5123(uint param_1, uint param_2, uint32_t param_3)\n\n{\n    uint16_t *puVar1;\n    uchar uVar2;\n    bool bVar3;\n    int64_t iVar4;\n    uint8_t *in_EAX;\n    int32_t iVar5;\n    int32_t extraout_ECX;\n    uint32_t *extraout_EDX;\n    char cVar6;\n    uint8_t uVar9;\n    uint32_t uVar7;\n    uint *puVar8;\n    int32_t unaff_EBP;\n    int32_t iVar10;\n    uchar *unaff_ESI;\n    char *pcVar11;\n    uint8_t **unaff_EDI;\n    uint8_t **ppuVar12;\n    uint16_t in_CS;\n    int32_t in_GS_OFFSET;\n    uint8_t uVar13;\n    unkbyte6 Var14;\n    int32_t unaff_retaddr;\n    uint in_stack_00000018;\n    uint in_stack_00000020;\n    uint8_t uStackY37;\n    uint8_t uStackY36;\n    uchar uVar15;\n    uchar *puVar16;\n    int32_t iVar17;\n    \n    iVar5 = unaff_retaddr + -0x100192a3;\n    *(unaff_retaddr + 0x1295) = in_EAX;\ncode_r0x009b647f:\n    uVar7 = *in_EAX;\n    puVar8 = uVar7 + 0xf4507218;\n    if (uVar7 == 0xcc) goto code_r0x009b6564;\n    ppuVar12 = unaff_EDI;\n    if (uVar7 != 0xcc) {\n        return CONCAT44(in_stack_00000018, in_stack_00000020);\n    }\n    do {\n        if (param_3 != 0) {\n            return CONCAT44(param_2, in_EAX);\n        }\n        if (param_3 == 0) {\n            puVar16 = unaff_ESI;\n            iVar17 = unaff_EBP;\n    // WARNING: Call to offcut address within same function\n            func_0x009b68f4();\n            uVar7 = puVar8 - 1;\n            uStackY36 = extraout_EDX;\n            uVar15 = extraout_EDX >> 0x18;\n            iVar10 = unaff_EBP + 2;\n            pcVar11 = unaff_ESI + -1 ^ *extraout_EDX;\n            uVar2 = in(extraout_EDX);\n            *ppuVar12 = uVar2;\n            uVar2 = in(extraout_EDX);\n            *(ppuVar12 + 1) = uVar2;\n            uVar9 = uVar7 >> 8;\n            uVar13 = CARRY1(uVar9, uVar9);\n            if (SCARRY1(uVar9, uVar9)) {\n                (*extraout_EDX)(in_CS);\n            }\n            else {\n                bVar3 = uStackY36 - uStackY37 < uVar13;\n                uVar13 = uStackY36 < uStackY37 || bVar3;\n                if (uStackY36 >= uStackY37 && !bVar3) {\n    // WARNING: Bad instruction - Truncating control flow here\n                    halt_baddata();\n                }\n            }\n    // WARNING: Call to offcut address within same function\n            Var14 = func_0x009b668c(uVar15);\n            uVar2 = in(Var14 >> 0x20);\n            *(ppuVar12 + 2) = uVar2;\n            if (*0x10 == 0x20) {\n                pcVar11 = puVar16 + 1;\n                out(*puVar16, param_2);\n                uVar2 = in(param_2);\n                *ppuVar12 = uVar2;\n                iVar10 = iVar17 + 1;\ncode_r0x009b66e9:\n                if (iVar10 < 0) {\n                    func_0x0f5c74e2();\n    // WARNING: Bad instruction - Truncating control flow here\n                    halt_baddata();\n                }\n            }\n            else {\n                puVar8 = (uVar7 & 0xffff0000 | CONCAT11(uVar9 * '\\x02', uVar7)) + 1;\n                in_EAX = Var14;\n                iVar5 = extraout_ECX;\n                if (uVar13) {\n                    iVar10 = unaff_EBP + 3;\n                    goto code_r0x009b66e9;\n                }\n                if (puVar8 != NULL) goto code_r0x009b6681;\n                iVar5 = extraout_ECX + 1;\n            }\n            cVar6 = puVar8 + (iVar5 >> 8);\n            Var14 = CONCAT24(0xeb61, in_EAX);\n            *pcVar11 = cVar6;\n            if (cVar6 < '\\0') {\n                return 0x2fdcb525162beb61;\n            }\n            iVar4 = *(iVar5 + 99 + iVar10 * 2) * 0x65536c61;\n            pcVar11 = iVar4;\n            uVar13 = pcVar11 != iVar4;\n            puVar1 = iVar5 + 0x6f + iVar10 * 2;\n            *puVar1 = *puVar1 + uVar13 * ((iVar4 & 3) - (*puVar1 & 3));\ncode_r0x009b6681:\n            puVar1 = iVar5 + 0x6c;\n            *puVar1 = *puVar1 + uVar13 * -(*puVar1 & 3);\n            puVar1 = in_GS_OFFSET + iVar5 + 0x6f + iVar10 * 2;\n            *puVar1 = *puVar1 + uVar13 * ((pcVar11 & 3) - (*puVar1 & 3));\n            out(*pcVar11, Var14 >> 0x20);\n            pcVar11 = Var14 + -0x17;\n            *pcVar11 = *pcVar11 + (Var14 >> 0x20);\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        unaff_EDI = ppuVar12 + 1;\n        param_3 = in_CS;\n        puVar8 = *puVar8;\n        if (in_EAX <= *ppuVar12) break;\ncode_r0x009b6564:\n        iVar5 = 0x4dd2fb98;\n        ppuVar12 = unaff_EDI;\n    } while( true );\n    if (in_EAX < *ppuVar12) {\n        return CONCAT44(param_2, in_EAX);\n    }\n    goto code_r0x009b647f;\n}\n",
        "token_count": 1546
    },
    "009b5361": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.009b5361(void)\n\n{\n    char *pcVar1;\n    \n    fcn.009b538d();\n    pcVar1 = fcn.009b53c7();\n    *pcVar1 = *pcVar1 + pcVar1;\n    *pcVar1 = *pcVar1 + pcVar1;\n    return;\n}\n",
        "token_count": 77
    },
    "009b53c7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.009b53c7(uint param_1)\n\n{\n    int32_t unaff_retaddr;\n    uint in_stack_0000001c;\n    uint in_stack_00000024;\n    \n    *(unaff_retaddr + 6) = 0x9b53b8;\n    **(unaff_retaddr + 6) = param_1;\n    *0x9b52c8 = 0x9b53bc;\n    return CONCAT44(in_stack_0000001c, in_stack_00000024);\n}\n",
        "token_count": 119
    },
    "009b4c44": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.009b4c44(int32_t *param_1, uint param_2)\n\n{\n    int32_t unaff_retaddr;\n    uint in_stack_00000020;\n    uint in_stack_00000028;\n    \n    *param_1 = unaff_retaddr + 0x774;\n    **param_1 = param_2;\n    *0x9b52c8 = 0x9b53bc;\n    return CONCAT44(in_stack_00000020, in_stack_00000028);\n}\n",
        "token_count": 115
    },
    "009b4c99": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t int.009b4c99(void)\n\n{\n    uchar uVar1;\n    uint8_t uVar2;\n    ushort uVar3;\n    uint8_t uVar4;\n    uint unaff_EBX;\n    uchar *unaff_EDI;\n    uint8_t in_AF;\n    unkbyte6 Var5;\n    \n    // WARNING: Call to offcut address within same function\n    Var5 = func_0x009b565f();\n    uVar3 = Var5 >> 0x20;\n    uVar1 = in(uVar3);\n    *unaff_EDI = uVar1;\n    uVar1 = in(uVar3);\n    unaff_EDI[1] = uVar1;\n    uVar4 = unaff_EBX >> 8;\n    in_AF = 9 < (Var5 & 0xf) | in_AF;\n    uVar2 = Var5 + in_AF * -6;\n    return Var5 & 0xffffff00 | uVar2 + (0x9f < uVar2 | CARRY1(uVar4, uVar4) | in_AF * (uVar2 < 6)) * -0x60 & 0xffffffeb;\n}\n",
        "token_count": 260
    },
    "009b5649": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009b5ee8) overlaps instruction at (ram,0x009b5ee5)\n// \n// WARNING: Possible PIC construction at 0x009b5b5f: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x009b5b64)\n// WARNING: Removing unreachable block (ram,0x009b5b9d)\n// WARNING: Removing unreachable block (ram,0x009b5e6c)\n// WARNING: Removing unreachable block (ram,0x009b5e9f)\n\nuint8_t * fcn.009b5649(void)\n\n{\n    uchar uVar1;\n    uint8_t uVar2;\n    uchar *puVar3;\n    uint8_t uVar4;\n    uint32_t uVar6;\n    uint8_t *puVar7;\n    uint8_t extraout_CH;\n    ushort extraout_DX;\n    uint32_t *extraout_EDX;\n    uint8_t uVar8;\n    char cVar9;\n    uint32_t uVar10;\n    uint8_t *unaff_EBP;\n    uint32_t unaff_ESI;\n    uchar *unaff_EDI;\n    ushort in_CS;\n    bool bVar11;\n    uint8_t in_AF;\n    bool bVar12;\n    bool bVar13;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    bool bVar14;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    ulong uVar15;\n    uint32_t in_stack_00000018;\n    unkbyte3 Stack00000019;\n    uchar uStack0000001c;\n    uchar *in_stack_0000001c;\n    uint32_t uStack68;\n    uint uStack64;\n    uint8_t *puStack60;\n    uint uStack56;\n    uchar *puStack52;\n    uint32_t uStack48;\n    uint8_t *puStack44;\n    uint32_t *puStack40;\n    uint32_t uStack36;\n    uint8_t *puStack32;\n    uint uStack28;\n    uint8_t *puStack24;\n    uint32_t uStack20;\n    uint32_t *puStack16;\n    uint32_t uStack12;\n    uint8_t *puVar5;\n    \n    *0x9b5686 = fcn.0099ff64();\n    puStack16 = 0xf099be80;\n    uVar10 = **0x9b5686 + 0x11151038;\n    bVar11 = uVar10 < 0x11151104;\n    bVar14 = SBORROW4(uVar10, 0x11151104);\n    uVar10 = **0x9b5686 - 0xcc;\n    bVar13 = uVar10 < 0;\n    bVar12 = uVar10 == 0;\n    uVar8 = POPCOUNT(uVar10 & 0xff);\n    if ((!bVar12) && (bVar12)) {\n        while( true ) {\n            puVar3 = in_stack_0000001c;\n            uStack12 = (in_NT & 1) * 0x4000 | bVar14 * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | bVar13 * 0x80\n                       | bVar12 * 0x40 | (in_AF & 1) * 0x10 | ((uVar8 & 1) == 0) * 4 | bVar11 | (in_ID & 1) * 0x200000 |\n                       (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n            uStack20 = 0x9b5c51;\n            fcn.009b59ef();\n            uStack20 = 0x9b5c7a;\n            uVar15 = fcn.0099ff64();\n            uVar10 = uStack12;\n            puStack32 = uVar15 >> 0x20;\n            puVar7 = uVar15;\n            uStack20 = 0x9b4e8d;\n            uStack28 = 0xf099be80;\n            uStack36 = *puVar7 + 0x2f5c021e;\n            bVar11 = uStack36 < 0x2f5c02ea;\n            *0x9b5be1 = puVar7;\n            if (uStack36 == 0x2f5c02ea) {\n                uVar4 = uVar15 + 0x68;\n                puStack24 = puVar7 & 0xffffff00 | uVar4;\n                *puStack24 = *puStack24 + uVar4;\n                uVar8 = *puStack24;\n                uVar2 = *puStack24;\n                *puStack24 = *puStack24 + uVar4;\n                uStack20 = (in_NT & 1) * 0x4000 | SCARRY1(uVar2, uVar4) * 0x800 | (in_IF & 1) * 0x200 |\n                           (in_TF & 1) * 0x100 | (*puStack24 < '\\0') * 0x80 | (*puStack24 == 0) * 0x40 |\n                           (in_AF & 1) * 0x10 | ((POPCOUNT(*puStack24) & 1U) == 0) * 4 | CARRY1(uVar8, uVar4) |\n                           (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 |\n                           (in_AC & 1) * 0x40000;\n                puStack40 = &uStack20;\n                if (puStack16 != NULL) {\n                    return puStack24;\n                }\n                uStack56 = 0x9b4ead;\n                puStack60 = (in_NT & 1) * 0x4000 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | (puStack16 < 0) * 0x80 |\n                            (puStack16 == NULL) * 0x40 | (in_AF & 1) * 0x10 |\n                            ((POPCOUNT(puStack16 & 0xff) & 1U) == 0) * 4 | (in_ID & 1) * 0x200000 |\n                            (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n                uStack64 = 0x9b5da7;\n                puStack52 = unaff_EDI;\n                uStack48 = unaff_ESI;\n                puStack44 = unaff_EBP;\n                fcn.009b5d69();\n                uStack64 = 0x9b5dac;\n                uVar15 = fcn.0099ff64();\n                *0x9b5d2e = uVar15;\n                uVar6 = **0x9b5d2e + 0x7de6d310;\n                bVar11 = uVar6 < 0x7de6d3dc;\n                bVar14 = SBORROW4(uVar6, 0x7de6d3dc);\n                uVar10 = **0x9b5d2e - 0xcc;\n                bVar13 = uVar10 < 0;\n                bVar12 = uVar10 == 0;\n                uVar8 = POPCOUNT(uVar10 & 0xff);\n                if (bVar12) {\n                    bVar11 = false;\n                    cVar9 = uVar15;\n                    bVar14 = SCARRY1(cVar9, '\\0');\n                    bVar13 = cVar9 < '\\0';\n                    bVar12 = cVar9 == '\\0';\n                    uVar8 = POPCOUNT(cVar9);\n                }\n                else {\n                    puStack60 = unaff_EBP;\n                    if (!bVar12) {\n                        return puStack32;\n                    }\n                }\n                uStack64 = 0;\n                uStack68 = (in_NT & 1) * 0x4000 | bVar14 * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n                           bVar13 * 0x80 | bVar12 * 0x40 | (in_AF & 1) * 0x10 | ((uVar8 & 1) == 0) * 4 | bVar11 |\n                           (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 |\n                           (in_AC & 1) * 0x40000;\n    // WARNING: Call to offcut address within same function\n                func_0x009b5f14(unaff_EDI, unaff_ESI, unaff_EBP, &uStack68, uVar6, uVar15 >> 0x20, 0xf099be80, *0x9b5d2e\n                               );\n                uVar1 = in(extraout_DX);\n                *unaff_EDI = uVar1;\n                uVar1 = in(extraout_DX);\n                unaff_EDI[1] = uVar1;\n                func_0xeb535ecf(in_CS);\n                LOCK();\n    // WARNING: Bad instruction - Truncating control flow here\n                halt_baddata();\n            }\n            if (uStack36 == 0x2f5c02ea) break;\n            uVar8 = in_stack_00000018 + 1;\n    // WARNING: Call to offcut address within same function\n            uVar6 = func_0x009b5bad();\n            if (!bVar11) {\n                return uVar6 & 0xffffff04;\n            }\n            uVar4 = (uVar6 + 'c') - bVar11;\n            puVar5 = uVar6 & 0xffffff00 | uVar4;\n            *puVar5 = *puVar5 + uVar4;\n            uVar2 = *puVar5;\n            *puVar5 = *puVar5 + uVar4;\n            in_stack_0000001c = NULL;\n            in_stack_00000018 =\n                 (*puVar5 < '\\0') * 0x80 | (*puVar5 == 0) * 0x40 | (in_AF & 1) * 0x10 |\n                 ((POPCOUNT(*puVar5) & 1U) == 0) * 4 | CARRY1(uVar2, uVar4);\n            uStack12 = 0x9b5c2c;\n            func_0x009b5c37();\n            unaff_EBP = puVar7 + 1;\n            unaff_ESI = uVar10 ^ *extraout_EDX;\n            uVar1 = in(extraout_EDX);\n            *puVar3 = uVar1;\n            unaff_EDI = puVar3 + 2;\n            uVar1 = in(extraout_EDX);\n            puVar3[1] = uVar1;\n            bVar11 = CARRY1(uVar8, extraout_CH);\n            bVar14 = SCARRY1(uVar8, extraout_CH);\n            cVar9 = uVar8 + extraout_CH;\n            bVar13 = cVar9 < '\\0';\n            bVar12 = cVar9 == '\\0';\n            uVar8 = POPCOUNT(cVar9);\n            puStack16 = extraout_EDX;\n        }\n        return puVar7;\n    }\n    return CONCAT13(uStack0000001c, Stack00000019);\n}\n",
        "token_count": 2687
    },
    "009b4fa7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009b6260) overlaps instruction at (ram,0x009b625d)\n// \n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Removing unreachable block (ram,0x009b635a)\n\nuint8_t * fcn.009b4fa7(void)\n\n{\n    uchar uVar1;\n    uint *puVar2;\n    uint8_t uVar3;\n    uint8_t uVar4;\n    uint8_t *puVar5;\n    uint32_t uVar6;\n    uint8_t extraout_CH;\n    char extraout_CH_00;\n    uint extraout_ECX;\n    uint uVar7;\n    int32_t iVar8;\n    ushort uVar9;\n    uint extraout_EDX;\n    char unaff_BL;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    int32_t *piVar12;\n    uint32_t uVar13;\n    uint8_t **ppuVar14;\n    uchar *puVar15;\n    uint8_t **ppuVar16;\n    uint8_t **ppuVar17;\n    uint *puVar18;\n    int32_t unaff_EBP;\n    int32_t iVar19;\n    int32_t unaff_ESI;\n    uchar *puVar20;\n    uchar *puVar21;\n    uchar *unaff_EDI;\n    uchar *puVar22;\n    ushort in_SS;\n    ushort in_DS;\n    bool bVar23;\n    bool bVar24;\n    bool bVar25;\n    ulong uVar26;\n    \n    bVar25 = false;\n    uVar26 = fcn.009b6021();\n    puVar20 = unaff_ESI - 1U ^ *(uVar26 >> 0x20);\n    uVar9 = uVar26 >> 0x20;\n    uVar1 = in(uVar9);\n    *unaff_EDI = uVar1;\n    uVar1 = in(uVar9);\n    unaff_EDI[1] = uVar1;\n    bVar23 = CARRY1(unaff_BL - 1, extraout_CH);\n    iVar19 = *(unaff_EBP + 2);\n    puVar15 = unaff_EBP + 6;\n    uVar4 = uVar26 + 0x91;\n    uVar3 = uVar4 - bVar23;\n    uVar10 = uVar26 & 0xffffff00;\n    puVar5 = uVar10 | uVar3;\n    if ((0x6e < uVar26 && bVar23 <= uVar4) && uVar3 != 0) {\n        return uVar10 | *0x82444ff;\n    }\n    *(*0xa317e49d + 0x10d7) = puVar5;\n    *(unaff_EBP + 2) = unaff_EDI + 2;\n    uVar4 = *puVar5;\n    puVar22 = *(unaff_EBP + 2);\n    uVar10 = uVar4 + 0xf018827e;\n    bVar23 = uVar10 < 0xf018834a;\n    if (uVar10 == 0xf018834a) {\n        ppuVar14 = unaff_EBP + 2;\n        *(unaff_EBP + 2) = puVar5;\n    }\n    else {\n        if (uVar10 != 0xf018834a) {\n            *(unaff_EBP + 0x2a) = puVar5;\n            *(unaff_EBP + 0x2e) = *(unaff_EBP + 0x2e) + 1;\n            return *(unaff_EBP + 0x22);\n        }\n        *(unaff_EBP + 2) = 0x9b6224;\n        uVar26 = fcn.009b6237();\n        uVar10 = uVar26 >> 0x20;\n        uVar11 = uVar4 + 0xf018827f;\n        if (bVar23) {\n            piVar12 = uVar11 & 0xffffff00 | uVar11 + (extraout_ECX >> 8) + bVar23;\n            bVar23 = false;\n            uVar4 = uVar26;\n            uVar11 = uVar26 & 0xffff0000 | CONCAT11(uVar4 / 0x27, uVar4) & 0xffffff00 | uVar4 % 0x27;\n            bVar24 = uVar11 == 0;\n            out(0xed, uVar4 % 0x27);\n            uVar7 = extraout_ECX;\n            puVar21 = puVar20;\n        }\n        else {\n            puVar22 = *(unaff_EBP + 6);\n            puVar21 = *(unaff_EBP + 10);\n            piVar12 = *(unaff_EBP + 0x16);\n            uVar10 = *(unaff_EBP + 0x1a);\n            uVar7 = *(unaff_EBP + 0x1e);\n            uVar6 = *(unaff_EBP + 0x22);\n            if (uVar11 != 0) {\n                out(puVar21[1], uVar10);\n                puVar2 = segment(in_SS, unaff_EBP + 0x22);\n                *puVar2 = puVar22;\n    // WARNING: Bad instruction - Truncating control flow here\n                halt_baddata();\n            }\n            *(uVar6 + 0xc39d62cb) = *(uVar6 + 0xc39d62cb) | *(unaff_EBP + 0xe);\n            puVar15 = unaff_EBP + 0x2a;\n            bVar25 = (*(unaff_EBP + 0x26) & 0x400) != 0;\n            uVar11 = (*(unaff_EBP + 0x26) & 1) != 0;\n            bVar23 = uVar6 < 0xe627d48d || uVar6 + 0x19d82b73 < uVar11;\n            bVar24 = uVar6 + 0x19d82b73 == uVar11;\n            uVar11 = in(uVar10);\n        }\n        puVar20 = puVar21 + bVar25 * -2 + 1;\n        uVar9 = uVar10;\n        out(*puVar21, uVar9);\n        if (!bVar23 && !bVar24) {\n            *piVar12 = *piVar12 + 0x76 + bVar23;\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        uVar1 = in(uVar9);\n        *puVar22 = uVar1;\n        uVar1 = in(uVar9);\n        puVar22[1] = uVar1;\n        uVar13 = puVar15 & uVar10;\n        *(uVar13 - 4) = in_DS;\n        *(puVar22 + 2) = uVar11;\n        *0x2ed3b3f1 = -*0x2ed3b3f1;\n        puVar22 = puVar22 + 7;\n        iVar19 = *(uVar13 - 4);\n        ppuVar14 = uVar13 - 4;\n        *(uVar13 - 4) = uVar7;\n    }\n    ppuVar14[-1] = 0x9b627c;\n    uVar26 = fcn.0099ff64();\n    puVar5 = uVar26;\n    ppuVar14[-1] = 0x9b500b;\n    iVar8 = ppuVar14[-1] + -0x1001918b;\n    *(ppuVar14[-1] + 0x118e) = puVar5;\n    ppuVar14[-1] = uVar26 >> 0x20;\n    uVar7 = ppuVar14[-1];\n    uVar10 = *puVar5 + 0xcf0ad82a;\n    if (uVar10 == 0xcf0ad8f6) {\n        ppuVar16 = ppuVar14 + 1;\n        puVar5 = puVar5 & 0xffffff00 | (puVar5 ^ 199) & 0xff | 0x9c;\n        if (ppuVar14[2] == NULL) {\n            if (ppuVar14[2] != NULL) {\n                *ppuVar14 = puVar5;\n                ppuVar14[-1] = iVar8;\n                ppuVar14[-2] = uVar7;\n                ppuVar14[-3] = 0xcf0ad8f6;\n                ppuVar14[-4] = ppuVar14 + 1;\n                ppuVar14[-5] = iVar19;\n                ppuVar14[-6] = puVar20;\n                ppuVar14[-7] = puVar22;\n                out(uVar7, puVar5);\n    // WARNING: Bad instruction - Truncating control flow here\n                halt_baddata();\n            }\n            *ppuVar14 = puVar5;\n            ppuVar14[-1] = iVar8;\n            ppuVar14[-2] = uVar7;\n            ppuVar14[-3] = 0xcf0ad8f6;\n            ppuVar14[-4] = ppuVar14 + 1;\n            ppuVar14[-5] = iVar19;\n            ppuVar14[-6] = puVar20;\n            ppuVar14[-7] = puVar22;\n            ppuVar17 = ppuVar14 + -8;\n            ppuVar14[-8] = 0x9b5067;\n            do {\n    // WARNING: Call to offcut address within same function\n                *ppuVar17 = 0x9b635c;\n                uVar4 = func_0x009b6367();\n                *(ppuVar17 + -4) = iVar19;\n                *(ppuVar17 + -8) = uVar10;\n                iVar19 = iVar19 + 1;\n                puVar18 = ppuVar17 + -0xc;\n                ppuVar17 = ppuVar17 + -0xc;\n                *puVar18 = extraout_EDX;\n                puVar20 = puVar22 + 1;\n                uVar1 = in(extraout_EDX);\n                *puVar22 = uVar1;\n                puVar22 = puVar22 + 2;\n                uVar1 = in(extraout_EDX);\n                *puVar20 = uVar1;\n                uVar10 = uVar10 & 0xffffff00 | uVar10 + extraout_CH_00;\n                out(0x11, uVar4 | 0x9f);\n            } while( true );\n        }\n    }\n    else {\n        ppuVar16 = ppuVar14;\n        if (uVar10 != 0xcf0ad8f6) {\n            ppuVar14[9] = puVar5;\n            puVar5 = ppuVar14[7];\n            ppuVar14[10] = ppuVar14[10] + 1;\n            ppuVar14[7] = puVar5;\n            ppuVar14[6] = ppuVar14[6];\n            ppuVar14[5] = ppuVar14[5];\n            ppuVar14[4] = ppuVar14[4];\n            ppuVar14[3] = ppuVar14 + 8;\n            ppuVar14[2] = ppuVar14[2];\n            ppuVar14[1] = ppuVar14[1];\n            *ppuVar14 = *ppuVar14;\n            return puVar5;\n        }\n    }\n    *(ppuVar16 + 8) = *(ppuVar16 + 8) + 1;\n    return puVar5;\n}\n",
        "token_count": 2623
    },
    "009b4ff7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009b6260) overlaps instruction at (ram,0x009b625d)\n// \n// WARNING: Control flow encountered bad instruction data\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Removing unreachable block (ram,0x009b635a)\n\nvoid fcn.009b4ff7(void)\n\n{\n    uchar *puVar1;\n    uchar uVar2;\n    uint8_t uVar3;\n    uint8_t *puVar4;\n    uint32_t uVar5;\n    char extraout_CH;\n    uint extraout_ECX;\n    int32_t iVar6;\n    ushort uVar7;\n    uint32_t *puVar8;\n    uint uVar9;\n    uint extraout_EDX;\n    uint32_t uVar10;\n    uint *puVar11;\n    uint *puVar12;\n    uint *puVar13;\n    uint *puVar14;\n    int32_t iVar15;\n    int32_t unaff_ESI;\n    uint32_t uVar16;\n    uchar *unaff_EDI;\n    uchar *puVar17;\n    ushort in_DS;\n    ulong uVar18;\n    uchar uStack1;\n    \n    // WARNING: Call to offcut address within same function\n    uVar18 = func_0x009b6258();\n    puVar8 = uVar18 >> 0x20;\n    uVar16 = unaff_ESI - 1U ^ *puVar8;\n    uVar7 = uVar18 >> 0x20;\n    uVar2 = in(uVar7);\n    *unaff_EDI = uVar2;\n    uVar2 = in(uVar7);\n    unaff_EDI[1] = uVar2;\n    puVar11 = &uStack1 & puVar8;\n    *(puVar11 + -1) = in_DS;\n    *(unaff_EDI + 2) = uVar18;\n    *0x2ed3b3f1 = -*0x2ed3b3f1;\n    puVar17 = unaff_EDI + 7;\n    iVar15 = puVar11[-1];\n    puVar11[-1] = extraout_ECX;\n    puVar11[-2] = 0x9b627c;\n    uVar18 = fcn.0099ff64();\n    puVar4 = uVar18;\n    puVar11[-2] = 0x9b500b;\n    iVar6 = puVar11[-2] + -0x1001918b;\n    *(puVar11[-2] + 0x118e) = puVar4;\n    puVar11[-2] = uVar18 >> 0x20;\n    uVar9 = puVar11[-2];\n    uVar10 = *puVar4 + 0xcf0ad82a;\n    if (uVar10 == 0xcf0ad8f6) {\n        uVar5 = puVar4 & 0xffffff00 | (puVar4 ^ 199) & 0xff | 0x9c;\n        puVar12 = puVar11;\n        if (puVar11[1] == 0) {\n            if (puVar11[1] != 0) {\n                puVar11[-1] = uVar5;\n                puVar11[-2] = iVar6;\n                puVar11[-3] = uVar9;\n                puVar11[-4] = 0xcf0ad8f6;\n                puVar11[-5] = puVar11;\n                puVar11[-6] = iVar15;\n                puVar11[-7] = uVar16;\n                puVar11[-8] = puVar17;\n                out(uVar9, uVar5);\n    // WARNING: Bad instruction - Truncating control flow here\n                halt_baddata();\n            }\n            puVar11[-1] = uVar5;\n            puVar11[-2] = iVar6;\n            puVar11[-3] = uVar9;\n            puVar11[-4] = 0xcf0ad8f6;\n            puVar11[-5] = puVar11;\n            puVar11[-6] = iVar15;\n            puVar11[-7] = uVar16;\n            puVar11[-8] = puVar17;\n            puVar13 = puVar11 + -9;\n            puVar11[-9] = 0x9b5067;\n            do {\n    // WARNING: Call to offcut address within same function\n                *puVar13 = 0x9b635c;\n                uVar3 = func_0x009b6367();\n                *(puVar13 + -4) = iVar15;\n                *(puVar13 + -8) = uVar10;\n                iVar15 = iVar15 + 1;\n                puVar14 = puVar13 + -0xc;\n                puVar13 = puVar13 + -0xc;\n                *puVar14 = extraout_EDX;\n                puVar1 = puVar17 + 1;\n                uVar2 = in(extraout_EDX);\n                *puVar17 = uVar2;\n                puVar17 = puVar17 + 2;\n                uVar2 = in(extraout_EDX);\n                *puVar1 = uVar2;\n                uVar10 = uVar10 & 0xffffff00 | uVar10 + extraout_CH;\n                out(0x11, uVar3 | 0x9f);\n            } while( true );\n        }\n    }\n    else {\n        puVar12 = puVar11 + -1;\n        if (uVar10 != 0xcf0ad8f6) {\n            puVar11[8] = puVar4;\n            puVar11[9] = puVar11[9] + 1;\n            puVar11[6] = puVar11[6];\n            puVar11[5] = puVar11[5];\n            puVar11[4] = puVar11[4];\n            puVar11[3] = puVar11[3];\n            puVar11[2] = puVar11 + 7;\n            puVar11[1] = puVar11[1];\n            *puVar11 = *puVar11;\n            puVar11[-1] = puVar11[-1];\n            return;\n        }\n    }\n    *(puVar12 + 8) = *(puVar12 + 8) + 1;\n    return;\n}\n",
        "token_count": 1400
    },
    "009b4a52": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.009b4a52(void)\n\n{\n    uchar uVar1;\n    ushort extraout_DX;\n    ushort uVar2;\n    uchar *unaff_EDI;\n    float10 extraout_ST0;\n    unkbyte6 Var3;\n    \n    // WARNING: Call to offcut address within same function\n    func_0x009b4d01();\n    uVar1 = in(extraout_DX);\n    *unaff_EDI = uVar1;\n    uVar1 = in(extraout_DX);\n    unaff_EDI[1] = uVar1;\n    // WARNING: Call to offcut address within same function\n    Var3 = func_0x009b579c();\n    uVar2 = Var3 >> 0x20;\n    uVar1 = in(uVar2);\n    unaff_EDI[2] = uVar1;\n    uVar1 = in(uVar2);\n    unaff_EDI[3] = uVar1;\n    *(Var3 + -0x31) = extraout_ST0;\n    do {\n    // WARNING: Do nothing block with infinite loop\n    } while( true );\n}\n",
        "token_count": 245
    },
    "009b5d69": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.009b5d69(void)\n\n{\n    uchar uVar1;\n    code *pcVar2;\n    ushort extraout_DX;\n    uchar *unaff_EDI;\n    \n    fcn.009b5d7f();\n    uVar1 = in(extraout_DX);\n    *unaff_EDI = uVar1;\n    uVar1 = in(extraout_DX);\n    unaff_EDI[1] = uVar1;\n    pcVar2 = swi(1);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 116
    },
    "009b65fe": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.009b65fe(uint param_1)\n\n{\n    int32_t unaff_retaddr;\n    uint in_stack_0000001c;\n    uint in_stack_00000024;\n    \n    *(unaff_retaddr + 6) = 0x9b65ef;\n    **(unaff_retaddr + 6) = param_1;\n    *0x9b650f = 0x9b65f3;\n    return CONCAT44(in_stack_0000001c, in_stack_00000024);\n}\n",
        "token_count": 117
    },
    "009cf780": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009cf775) overlaps instruction at (ram,0x009cf773)\n// \n// WARNING: Control flow encountered bad instruction data\n// WARNING (jumptable): Unable to track spacebase fully for stack\n// WARNING: Possible PIC construction at 0x009d0f86: Changing call to branch\n// WARNING: Possible PIC construction at 0x009d100b: Changing call to branch\n// WARNING: Possible PIC construction at 0x0099d06d: Changing call to branch\n// WARNING: Possible PIC construction at 0x009d0c01: Changing call to branch\n// WARNING: Possible PIC construction at 0x0099cd4d: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x009d0c06)\n// WARNING: Removing unreachable block (ram,0x0099d072)\n// WARNING: Removing unreachable block (ram,0x009d1010)\n// WARNING: Removing unreachable block (ram,0x009d1049)\n// WARNING: Removing unreachable block (ram,0x009d1053)\n// WARNING: Removing unreachable block (ram,0x009d1028)\n// WARNING: Removing unreachable block (ram,0x009d103b)\n// WARNING: Removing unreachable block (ram,0x009d1041)\n// WARNING: Removing unreachable block (ram,0x0099cd52)\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: This function may have set the stack pointer\n// WARNING: Removing unreachable block (ram,0x009b0831)\n// WARNING: Removing unreachable block (ram,0x009d2602)\n// WARNING: Removing unreachable block (ram,0x009d2604)\n// WARNING: Removing unreachable block (ram,0x009d2606)\n// WARNING: Removing unreachable block (ram,0x009d2609)\n// WARNING: Removing unreachable block (ram,0x009d260b)\n// WARNING: Removing unreachable block (ram,0x009d2615)\n// WARNING: Removing unreachable block (ram,0x009d2617)\n// WARNING: Removing unreachable block (ram,0x009d2616)\n// WARNING: Removing unreachable block (ram,0x009d251b)\n// WARNING: Removing unreachable block (ram,0x009b96cb)\n// WARNING: Removing unreachable block (ram,0x009d0b80)\n// WARNING: Removing unreachable block (ram,0x009d0bc5)\n// WARNING: Removing unreachable block (ram,0x009d0c16)\n// WARNING: Removing unreachable block (ram,0x0099cf92)\n// WARNING: Removing unreachable block (ram,0x009d0c1c)\n// WARNING: Removing unreachable block (ram,0x009d0c87)\n// WARNING: Removing unreachable block (ram,0x009d0c8d)\n// WARNING: Removing unreachable block (ram,0x0099cfa8)\n// WARNING: Removing unreachable block (ram,0x0099cfb0)\n// WARNING: Removing unreachable block (ram,0x009d0c62)\n// WARNING: Removing unreachable block (ram,0x009d0c6a)\n// WARNING: Removing unreachable block (ram,0x009d0c70)\n// WARNING: Removing unreachable block (ram,0x0099cfe4)\n// WARNING: Removing unreachable block (ram,0x0099cfb6)\n// WARNING: Removing unreachable block (ram,0x0099cf7c)\n// WARNING: Removing unreachable block (ram,0x009d0c93)\n// WARNING: Removing unreachable block (ram,0x009d0d05)\n// WARNING: Removing unreachable block (ram,0x009d0d07)\n// WARNING: Removing unreachable block (ram,0x009d0ce9)\n// WARNING: Removing unreachable block (ram,0x009d0da1)\n// WARNING: Removing unreachable block (ram,0x0099cfda)\n// WARNING: Removing unreachable block (ram,0x009d0d44)\n// WARNING: Removing unreachable block (ram,0x009d0d29)\n// WARNING: Removing unreachable block (ram,0x009d0d77)\n// WARNING: Removing unreachable block (ram,0x0099d00e)\n// WARNING: Removing unreachable block (ram,0x009d0d7d)\n// WARNING: Removing unreachable block (ram,0x009d0d83)\n// WARNING: Removing unreachable block (ram,0x009d0dbf)\n// WARNING: Removing unreachable block (ram,0x009d0dc8)\n// WARNING: Removing unreachable block (ram,0x0099d06d)\n// WARNING: Removing unreachable block (ram,0x009d0d85)\n// WARNING: Removing unreachable block (ram,0x009d0d88)\n// WARNING: Removing unreachable block (ram,0x009d0da7)\n// WARNING: Removing unreachable block (ram,0x009d0dce)\n// WARNING: Removing unreachable block (ram,0x009d0dd7)\n// WARNING: Removing unreachable block (ram,0x009d0e29)\n// WARNING: Removing unreachable block (ram,0x0099d024)\n// WARNING: Removing unreachable block (ram,0x0099d029)\n// WARNING: Removing unreachable block (ram,0x009d0e2f)\n// WARNING: Removing unreachable block (ram,0x009d0e39)\n// WARNING: Removing unreachable block (ram,0x009d0eb2)\n// WARNING: Removing unreachable block (ram,0x009d0eb8)\n// WARNING: Removing unreachable block (ram,0x009d0f23)\n// WARNING: Removing unreachable block (ram,0x009d1e6b)\n// WARNING: Removing unreachable block (ram,0x009d1e9e)\n// WARNING: Removing unreachable block (ram,0x0099d057)\n// WARNING: Removing unreachable block (ram,0x0099d084)\n// WARNING: Removing unreachable block (ram,0x0099d085)\n// WARNING: Removing unreachable block (ram,0x0099d083)\n// WARNING: Removing unreachable block (ram,0x009d1184)\n// WARNING: Removing unreachable block (ram,0x009d118d)\n// WARNING: Removing unreachable block (ram,0x009d10cf)\n// WARNING: Removing unreachable block (ram,0x009d0b28)\n// WARNING: Removing unreachable block (ram,0x009d10dd)\n// WARNING: Removing unreachable block (ram,0x009d0984)\n// WARNING: Removing unreachable block (ram,0x009d0ab7)\n// WARNING: Removing unreachable block (ram,0x009d111d)\n// WARNING: Removing unreachable block (ram,0x009d098e)\n// WARNING: Removing unreachable block (ram,0x009d107d)\n// WARNING: Removing unreachable block (ram,0x009d1193)\n// WARNING: Removing unreachable block (ram,0x009d0a77)\n// WARNING: Removing unreachable block (ram,0x009d11db)\n// WARNING: Removing unreachable block (ram,0x009d1208)\n// WARNING: Removing unreachable block (ram,0x009d0f6c)\n// WARNING: Removing unreachable block (ram,0x009d0f7d)\n// WARNING: Removing unreachable block (ram,0x009d0f83)\n// WARNING: Removing unreachable block (ram,0x009d1001)\n// WARNING: Removing unreachable block (ram,0x009d0f8b)\n// WARNING: Removing unreachable block (ram,0x009d0f40)\n// WARNING: Removing unreachable block (ram,0x009d0f29)\n// WARNING: Removing unreachable block (ram,0x009d1085)\n// WARNING: Removing unreachable block (ram,0x009d10ea)\n// WARNING: Removing unreachable block (ram,0x009d0fd7)\n// WARNING: Removing unreachable block (ram,0x009d099a)\n// WARNING: Removing unreachable block (ram,0x009d09ad)\n// WARNING: Removing unreachable block (ram,0x009d0fdd)\n// WARNING: Removing unreachable block (ram,0x009d0fdc)\n// WARNING: Removing unreachable block (ram,0x009d0ffc)\n// WARNING: Removing unreachable block (ram,0x0099cff8)\n// WARNING: Removing unreachable block (ram,0x009d109b)\n// WARNING: Removing unreachable block (ram,0x009d0a08)\n// WARNING: Removing unreachable block (ram,0x009d0a15)\n// WARNING: Removing unreachable block (ram,0x009d0a2f)\n// WARNING: Removing unreachable block (ram,0x009d0a8d)\n// WARNING: Removing unreachable block (ram,0x009d0a92)\n// WARNING: Removing unreachable block (ram,0x009d0a98)\n// WARNING: Removing unreachable block (ram,0x009d0ae3)\n// WARNING: Removing unreachable block (ram,0x009d0b10)\n// WARNING: Removing unreachable block (ram,0x009d0b7b)\n// WARNING: Removing unreachable block (ram,0x009d0b26)\n// WARNING: Removing unreachable block (ram,0x009d0b2f)\n// WARNING: Removing unreachable block (ram,0x009d0b35)\n// WARNING: Removing unreachable block (ram,0x009d0b61)\n// WARNING: Removing unreachable block (ram,0x009d0b66)\n// WARNING: Removing unreachable block (ram,0x009d0b6c)\n// WARNING: Removing unreachable block (ram,0x009d12ec)\n// WARNING: Removing unreachable block (ram,0x009d1313)\n// WARNING: Removing unreachable block (ram,0x009d0acd)\n// WARNING: Removing unreachable block (ram,0x009d0ada)\n// WARNING: Removing unreachable block (ram,0x009d0b0d)\n// WARNING: Removing unreachable block (ram,0x009d12ee)\n// WARNING: Removing unreachable block (ram,0x009d11ea)\n// WARNING: Removing unreachable block (ram,0x009c2806)\n// WARNING: Removing unreachable block (ram,0x009c27f0)\n// WARNING: Removing unreachable block (ram,0x009d24e7)\n// WARNING: Removing unreachable block (ram,0x009cfc43)\n// WARNING: Type propagation algorithm not settling\n// WARNING: Could not reconcile some variable overlaps\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nuint32_t __fastcall\nfcn.009cf780(int32_t param_1, uint param_2, uint32_t param_3, char *param_4, uint *param_5, int32_t param_6)\n\n{\n    uint8_t *puVar1;\n    int16_t iVar2;\n    int64_t iVar3;\n    code *pcVar4;\n    int16_t iVar5;\n    uint16_t uVar6;\n    uint32_t uVar7;\n    ushort *puVar8;\n    uint32_t *puVar9;\n    char *pcVar10;\n    int32_t iVar11;\n    int32_t in_EAX;\n    uchar *puVar12;\n    uint32_t uVar13;\n    char **ppcVar14;\n    char *pcVar15;\n    char extraout_CL;\n    char extraout_CL_00;\n    uchar extraout_CL_01;\n    uchar extraout_CH;\n    int32_t extraout_ECX;\n    uint uVar16;\n    uint32_t extraout_ECX_00;\n    uint extraout_ECX_01;\n    uint32_t extraout_ECX_02;\n    uint32_t extraout_ECX_03;\n    uint16_t extraout_var;\n    int32_t iVar17;\n    int32_t extraout_ECX_04;\n    uint extraout_ECX_05;\n    uint extraout_ECX_06;\n    uint32_t extraout_ECX_07;\n    int32_t extraout_ECX_08;\n    int32_t extraout_ECX_09;\n    int32_t extraout_ECX_10;\n    uint extraout_ECX_11;\n    int32_t extraout_ECX_12;\n    int32_t *extraout_ECX_13;\n    int32_t extraout_ECX_14;\n    uint32_t extraout_ECX_15;\n    int32_t extraout_ECX_16;\n    uint extraout_ECX_17;\n    uint32_t extraout_ECX_18;\n    uint8_t extraout_DL;\n    ushort uVar18;\n    ushort extraout_DX;\n    uint32_t uVar19;\n    uint16_t *puVar20;\n    uint32_t extraout_EDX;\n    int32_t iVar21;\n    int32_t extraout_EDX_00;\n    uchar extraout_var_00;\n    uint extraout_EDX_01;\n    uint32_t extraout_EDX_02;\n    int32_t extraout_EDX_03;\n    uint extraout_EDX_04;\n    uint extraout_EDX_05;\n    uint uVar22;\n    uint32_t extraout_EDX_06;\n    int32_t extraout_EDX_07;\n    uint8_t *puVar23;\n    ushort uVar25;\n    char **unaff_EBX;\n    int32_t iVar24;\n    uint16_t uVar26;\n    int32_t *piVar27;\n    uint8_t **ppuVar28;\n    uint8_t **ppuVar29;\n    uint *puVar30;\n    ushort *puVar31;\n    uint *puVar32;\n    uchar *puVar33;\n    int16_t *piVar34;\n    uchar *puVar35;\n    uchar *puVar36;\n    uint32_t *puVar37;\n    int32_t *piVar38;\n    int32_t *piVar39;\n    uint32_t *puVar40;\n    uint32_t **ppuVar41;\n    uint *puVar42;\n    uint32_t *puVar43;\n    uint32_t *puVar44;\n    uint8_t *puVar45;\n    uint32_t unaff_EBP;\n    uint32_t uVar46;\n    uchar *puVar47;\n    uint16_t *puVar48;\n    uint *unaff_ESI;\n    uint *puVar49;\n    uint32_t uVar50;\n    char **ppcVar51;\n    uchar *puVar52;\n    uint32_t *unaff_EDI;\n    uint32_t *puVar53;\n    ushort in_ES;\n    ushort in_CS;\n    ushort in_DS;\n    bool bVar54;\n    char cVar55;\n    uint8_t uVar56;\n    bool bVar57;\n    uint8_t in_AF;\n    uchar uVar58;\n    bool bVar59;\n    char cVar60;\n    bool bVar61;\n    uint8_t uVar62;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    char cVar63;\n    bool bVar64;\n    uint8_t uVar65;\n    uint8_t uVar66;\n    bool bVar67;\n    uint8_t uVar68;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    ushort in_FPUControlWord;\n    unkbyte10 extraout_ST0;\n    uint64_t uVar69;\n    ulong uVar70;\n    unkbyte6 Var71;\n    uint32_t unaff_retaddr;\n    uint8_t auStack128 [44];\n    uint uStack24;\n    uint uStack20;\n    int16_t iStack16;\n    ushort uStack14;\n    uint16_t uStack12;\n    ushort uStack10;\n    uint16_t uStack8;\n    uchar uStack6;\n    uchar uStack5;\n    uint uStack4;\n    \n    param_4 = param_4 & 0xffff0000;\n    param_3 = param_3 & 0xffff0000;\n    uStack4 = CONCAT13(uStack4._3_1_, CONCAT12(uStack4._2_1_, CONCAT11(uStack4._1_1_, uStack4)));\n    uStack20 = uStack20;\n    uStack24 = CONCAT13(uStack24._3_1_, CONCAT12(uStack24._2_1_, CONCAT11(uStack24._1_1_, uStack24)));\n    uVar56 = 0;\n    while( true ) {\n        uVar62 = in_EAX;\n        param_3 = param_3 & 0xffff0000 | unaff_EDI & 0xffff;\n        uStack20._2_1_ = unaff_EDI >> 0x10;\n        uStack20 = unaff_EDI & 0xff000000 | uStack20;\n        param_4 = param_4 & 0xffff0000 | unaff_EBP & 0xffff;\n        if (uVar62 < 0x61) break;\n        if (uVar62 < 0x7b) {\n            uVar62 = *(param_1 + 1);\n            uVar13 = unaff_EBX & 0xffffff00;\n            puVar45 = uVar13 | uVar62;\n            *(unaff_EBP - 1) = uVar62;\n            if (0x40 < uVar62) {\n                fcn.009cf808();\n                *(extraout_EDX_03 + -3) = extraout_CH;\n                uVar13 = in(extraout_EDX_03);\n                *unaff_EDI = uVar13;\n                do {\n    // WARNING: Do nothing block with infinite loop\n                } while( true );\n            }\n            bVar54 = uVar62 < 0x61;\n            bVar67 = uVar62 == 0x61;\n            if (!bVar54) {\n                func_0x009cf877();\n                iVar2 = iStack16;\n                if (bVar54 || bVar67) goto code_r0x0099cc88;\n                param_1 = extraout_ECX_08;\n                param_2 = extraout_EDX_04;\n                if (bVar54 || bVar67) {\n    // WARNING: Bad instruction - Truncating control flow here\n                    halt_baddata();\n                }\n            }\n            iVar2 = iStack16;\n            iStack16 = *0x10 + 4;\n            uVar6 = puVar45;\n            if (uVar62 < 0x30) {\ncode_r0x009cf8f6:\n                if (uVar62 == 0x2b) {\ncode_r0x0099cc88:\n                    iStack16 = iVar2;\n                    func_0x009cf903();\n    // WARNING: Bad instruction - Truncating control flow here\n                    halt_baddata();\n                }\n                uStack8 = param_2;\n                uStack6 = param_2 >> 0x10;\n                uStack5 = param_2 >> 0x18;\n                uStack10 = uVar13 >> 0x10;\n                uStack14 = &stack0x00000004 >> 0x10;\n                uStack24._2_1_ = unaff_ESI >> 0x10;\n                uStack24 = unaff_ESI & 0xff000000 | uStack24;\n                uStack12 = uVar6;\n                uStack4 = param_1;\n                if (uVar62 != 0x2f) goto code_r0x0099cc53;\n                iVar2 = iStack16;\n                if (uVar62 == 0x2f) goto code_r0x0099cc88;\n                bVar54 = *(param_1 + 2) < 0x41;\n            }\n            else {\n                bVar54 = uVar62 < 0x39;\n                if (uVar62 < 0x3a) goto code_r0x0099cc88;\n                if (0x39 < uVar62) goto code_r0x009cf8f6;\n            }\n            iStack16 = iVar2;\n            if (!bVar54) {\n                uStack4 = 0x9cf979;\n                fcn.009cf935();\n    // WARNING: Bad instruction - Truncating control flow here\n                halt_baddata();\n            }\n            fcn.009cf93a();\n            piVar27 = &stack0x00000008;\n            uVar68 = extraout_DL < 0x61;\n            cVar60 = SBORROW1(extraout_DL, 'a');\n            cVar55 = extraout_DL + 0x9f < '\\0';\n            bVar54 = extraout_DL == 0x61;\n            param_3 = 0x99cd08;\n            uVar70 = fcn.009cf9be();\n            uVar19 = uVar70 >> 0x20;\n            uVar62 = in(0x17);\n            uVar46 = uVar70 & 0xffffff00;\n            uVar50 = uVar46 | uVar62;\n            puVar49 = unaff_ESI;\n            puVar9 = unaff_EDI;\n            if (!bVar54 && cVar60 == cVar55) {\n                puVar49 = unaff_ESI + 1;\n                in_AF = 9 < (*unaff_ESI & 0xf) | in_AF;\n                uVar56 = *unaff_ESI + in_AF * -6;\n                iVar24 = CONCAT31(uVar70 >> 0x28, 0xe2);\n                uVar19 = iVar24 - 1;\n                param_3._1_1_ = uVar46 >> 8;\n                param_3 = param_3 & 0xffff0000 | param_3;\n                if (*0x1dee7ff4 <= puVar49) {\n                    uStack4._0_2_ = uStack4 & 0xff00 | uVar19 & 0xff;\n                    uStack4._2_1_ = uVar19 >> 0x10;\n                    uStack4 = uVar19 & 0xff000000 | uStack4;\n                    uStack6 = uVar13 >> 0x10;\n                    uStack5 = uVar13 >> 0x18;\n                    uStack12 = piVar27;\n                    uStack10 = piVar27 >> 0x10;\n                    uStack14 = unaff_EBP >> 0x10;\n                    param_3 = 0x9b97f7;\n                    iStack16 = unaff_EBP;\n                    uStack8 = uVar6;\n                    uStack20 = puVar49;\n                    fcn.009cf687();\n                    in(extraout_DX);\n                    puVar23 = puVar45 + -0x747beac6;\n                    *puVar23 = *puVar23 << 4 | *puVar23 >> 4;\n                    uVar13 = param_4 & 0xffff;\n                    param_3 = 0x9b982b;\n                    uVar70 = fcn.009b98a3();\n                    *(uVar13 | unaff_EDI << 0x10) = *puVar49;\n                    uVar18 = *0xaba0be91;\n                    uVar25 = *0xaba0be8f;\n                    uVar13 = uVar70 & 0xffffff00 | *0xaf948dfb;\n                    uVar56 = uVar13 < 0x66e69f0c;\n                    uVar66 = SBORROW4(uVar13, 0x66e69f0c);\n                    uVar13 = uVar13 + 0x991960f4;\n                    uVar65 = uVar13 < 0;\n                    uVar68 = uVar13 == 0;\n                    uVar62 = (POPCOUNT(uVar13 & 0xff) & 1U) == 0;\n                    iVar24 = CONCAT22(*0xaba0be91, *0xaba0be8f);\n                    *0xaba0be8b = 0xad;\n                    *0xaba0be8c = uVar70 >> 0x28;\n                    *0xaba0be8d = uVar70 >> 0x30;\n                    *0xaba0be8a = *0xaba0be8c;\n                    *0xaba0be89 = 0xad;\n                    *0xaba0be85 = 0x9b9853;\n                    iVar11 = fcn.009b981e();\n                    piVar27 = *0xaba0beb1;\n                    *0xaba0bea1 = 0xaba0beb5;\n                    *0xaba0be95 = *0xaba0beb1;\n                    *0xaba0be9d = CONCAT22(iVar11, uVar25);\n                    *0xaba0be93 = CONCAT11(extraout_CL_01, extraout_var_00);\n                    *0xaba0bead = SUB41(*0xaba0beb1, 0);\n                    *0xaba0beae = *0xaba0beb1 >> 8;\n                    *0xaba0beaf = *0xaba0beb1 >> 0x10;\n                    *0xaba0bea9 = (in_NT & 1) * 0x4000 | (uVar66 & 1) * 0x800 | (in_IF & 1) * 0x200 |\n                                  (in_TF & 1) * 0x100 | (uVar65 & 1) * 0x80 | (uVar68 & 1) * 0x40 | (in_AF & 1) * 0x10 |\n                                  (uVar62 & 1) * 4 | uVar56 & 1 | (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 |\n                                  (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n                    *0xaba0bea5 = 0x9e6e07;\n                    *0xaba0be99 = unaff_ESI + 5;\n                    *0xaba0beb1 = unaff_ESI + 5;\n                    uVar70 = fcn.009e6c45();\n                    *0xaba0be99 = uVar70 >> 0x20;\n                    *0xaba0bea5 = piVar27;\n                    *0xaba0be91 = 0xbea5;\n                    *0xaba0be93 = 0xaba0;\n                    *0xaba0be8d = uVar25;\n                    *0xaba0be8f = uVar18;\n                    *0xaba0be89 = iVar11;\n                    *0xaba0be8a = iVar11 >> 8;\n                    *0xaba0be8b = iVar11 >> 0x10;\n                    *0xaba0be8c = iVar11 >> 0x18;\n                    *0xaba0be81 = 0x9e6e1c;\n                    *0xaba0be95 = puVar45;\n                    *0xaba0be9d = extraout_ECX_17;\n                    iVar17 = fcn.009e7e5c();\n                    *0xaba0be85 = uVar70 >> 0x20;\n                    *0xaba0bea1 = uVar70;\n                    *piVar27 = iVar17;\n                    *(piVar27 + 1) = *(iVar11 << 8 | CONCAT14(uVar56, iVar11) >> 0x19);\n                    *(iVar17 + 0x74) = *(iVar17 + 0x74) & 0xaba0be85;\n                    piVar27 = iVar24 + -0x50a5b7cb;\n                    *piVar27 = *piVar27 + (extraout_ECX_18 & 0xffff0000 | CONCAT11(0x71, extraout_ECX_18)) +\n                               (iVar17 + 99 + (0x3c < iVar17) < 0xeb);\n                    puVar9 = CONCAT31(iVar17 >> 8, *0x712d8567) + -0x799cc1e5;\n                    *puVar9 = *puVar9 | 0x799ccc0e;\n                    pcVar4 = swi(1);\n                    uVar13 = (*pcVar4)();\n                    *0xaba0be85 = uVar70 >> 0x20;\n                    *0xaba0bea1 = uVar70;\n                    return uVar13;\n                }\n                piVar27 = piVar27 | *(iVar24 + -0x34092324);\n                uVar13 = (uVar46 | uVar56 + (0x9f < uVar56 | uVar68 | in_AF * (uVar56 < 6)) * -0x60 +\n                                   (extraout_ECX >> 8)) ^ 0xee;\n                if (uVar13 < 0) {\n                    cVar55 = in(0xa8);\n                    *puVar45 = *puVar45 ^ uVar19 >> 8;\n                    uVar56 = cVar55 - *(unaff_EBP - 0x17);\n                    uVar13 = extraout_ECX - 1;\n                    if (uVar13 != 0) {\n                        cVar55 = *(unaff_EBP + 0xe9022464);\n                        *unaff_EDI = *unaff_EDI | puVar49;\n                        uVar16 = *(uVar46 | uVar56);\n                        for (uVar13 = uVar13 & 0xffffff00 | uVar13 + cVar55; uVar13 != 0; uVar13 = uVar13 - 1) {\n                            *unaff_EDI = uVar56 + uVar16;\n                            unaff_EDI = unaff_EDI + 1;\n                        }\n                        *(piVar27 + -4) = 0xa4a9651b;\n                        *(piVar27 + -8) = 0xa2a9b9;\n                        iVar24 = fcn.009b0d52();\n                        pcVar15 = iVar24 * 5 + -0x44;\n                        *pcVar15 = *pcVar15 + '\\x01';\n                        *unaff_EDI = 0x1e3d985d;\n                        *(piVar27 + -8) = unaff_EBP;\n                        *(piVar27 + -0xc) = puVar45 + 1;\n                        return 0x1e3d9840;\n                    }\n    // WARNING: Bad instruction - Truncating control flow here\n                    halt_baddata();\n                }\n                uVar56 = 1;\n                uVar50 = (CONCAT31(param_3._1_1_, uVar13 + -0x66) | 0xe8) + 0x4c4ffffd;\n                puVar9 = unaff_EDI + -1;\n                *unaff_EDI = uVar50;\n            }\n            uVar16 = *(puVar49 + -0x59);\n            *(puVar45 + 0x13) = *(puVar45 + 0x13) & puVar9;\n            puVar20 = uVar19 + 0x2ca3e8f5;\n            *puVar20 = *puVar20 + (uVar50 < 0x201fdbcd) * ((uVar6 & 3) - (*puVar20 & 3));\n            iVar24 = *(uVar50 + 0xdfe02433);\n            cVar55 = uVar19;\n            piVar27[1] = uVar16;\n            *piVar27 = *(piVar27 + 6);\n            if ((cVar55 == '+') || (cVar55 == '/')) {\ncode_r0x0099cd4d:\n                piVar38 = piVar27 + 1;\n                piVar27[1] = 0x99cd52;\n            }\n            else {\n                piVar27[1] = uVar50 + 0xdfe02433 + iVar24;\n                *piVar27 = extraout_ECX;\n                piVar27[-1] = uVar19;\n                piVar27[-2] = puVar45;\n                piVar27[-3] = piVar27 + 2;\n                piVar27[-4] = uVar16;\n                piVar27[-5] = puVar49;\n                piVar27[-6] = puVar9;\n                *(piVar27 + 3) = uVar6;\n                piVar27[-7] = *(piVar27 - 1);\n                piVar27[1] = puVar45;\n                *(piVar27 + 2) = *(piVar27 + 5);\n                piVar38 = piVar27 + 2;\n                if (cVar55 != '=') goto code_r0x0099cc53;\n                if (cVar55 == '=') goto code_r0x0099cd4d;\n            }\n            bVar54 = *(extraout_ECX + 3) < 0x41;\n            if (bVar54) {\n    // WARNING: Call to offcut address within same function\n                *piVar38 = 0x9cf2f9;\n                uVar13 = func_0x009cfb17();\n                uVar56 = uVar13;\n                *puVar9 = uVar56;\n                in_AF = 9 < (uVar56 & 0xf) | in_AF;\n                return uVar13 & 0xffff0000 | CONCAT11((uVar13 >> 8) + in_AF, uVar56 + in_AF * '\\x06') & 0xff0f;\n            }\n            *piVar38 = 0x9cfb01;\n            uVar69 = fcn.009cface();\n            puVar37 = piVar38 + 2;\n            uVar62 = extraout_ECX_09;\n            iVar24 = extraout_ECX_09;\n            if (bVar54) {\ncode_r0x009cf315:\n                bVar54 = uVar62 < 0x30;\n                bVar59 = SBORROW1(uVar62, '0');\n                uVar68 = uVar62 - 0x30;\n                bVar67 = uVar68 < '\\0';\n                piVar38[1] = uVar69;\n                *piVar38 = extraout_ECX_09;\n                piVar38[-1] = uVar69 >> 0x20;\n                piVar38[-2] = puVar45;\n                piVar38[-3] = puVar37;\n                piVar38[-4] = uVar16;\n                piVar38[-5] = puVar49;\n                piVar38[-6] = puVar9;\n                piVar39 = piVar38 + -0x1a;\n                *(piVar38 + -0x1a) = *(piVar38 + -0x13);\ncode_r0x009cfb1f:\n                bVar61 = uVar68 == 0;\n                piVar27 = piVar39 + 2;\ncode_r0x009cfb3e:\n                puVar37 = piVar27 + 8;\n                uVar62 = iVar24;\n                if (!bVar54) {\n                    piVar27[7] = (in_NT & 1) * 0x4000 | bVar59 * 0x800 | uVar56 * 0x400 | (in_IF & 1) * 0x200 |\n                                 (in_TF & 1) * 0x100 | bVar67 * 0x80 | bVar61 * 0x40 | (in_AF & 1) * 0x10 |\n                                 ((POPCOUNT(uVar68) & 1U) == 0) * 4 | bVar54 | (in_ID & 1) * 0x200000 |\n                                 (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n                    if (uVar62 < 0x3a) goto code_r0x009cf32b;\n                    if (uVar62 < 0x3a) {\n                        piVar27[8] = 0x9cfe14;\n                        fcn.009cfdee();\n                        piVar27[8] = 0x9cfe1c;\n                        fcn.009cfe2f();\n    // WARNING: Bad instruction - Truncating control flow here\n                        halt_baddata();\n                    }\n                }\n                piVar27[7] = uVar69 >> 0x20;\n                if (((uVar62 == 0x2b) || (uVar62 == 0x2f)) || (bVar54 = uVar62 == 0x3d,  bVar54)) goto code_r0x009cf32b;\n                if (!bVar54) goto code_r0x0099cc53;\n            }\n            else {\n                if (bVar54) {\n                    puVar49 = puVar49 & *(extraout_ECX_09 + 0x2b34021);\n                    *puVar45 = *puVar45 ^ uVar69 >> 0x28;\n                    piVar39 = piVar38 + 1;\n                    piVar38[1] = 0x9cfb1d;\n                    uVar69 = func_0x759c617d();\n                    bVar54 = false;\n                    bVar59 = false;\n                    uVar68 = uVar69 & 5;\n                    uVar69 = uVar69 & 0xffffffffffffff05;\n                    bVar67 = false;\n                    iVar24 = extraout_ECX_10;\n                    goto code_r0x009cfb1f;\n                }\n                bVar54 = uVar62 < 0x7a;\n                bVar59 = SBORROW1(uVar62, 'z');\n                uVar68 = uVar62 + 0x86;\n                bVar67 = uVar68 < '\\0';\n                bVar61 = uVar68 == 0;\n                if (!bVar54 && !bVar61) {\n                    piVar27 = puVar37;\n                    if (!bVar54 && !bVar61) goto code_r0x009cf315;\n                    goto code_r0x009cfb3e;\n                }\ncode_r0x009cf32b:\n                puVar37[-1] = iVar24;\n                *(puVar37 + -1) = *(puVar37 + -1);\n                puVar37[-1] = 0x9cfb8a;\n                uVar69 = fcn.009cfb6c();\n                puVar37[-1] = puVar45;\n                puVar37[-2] = extraout_ECX_11;\n                *puVar9 = 1;\n                iVar24 = puVar37[-2];\n                puVar45 = puVar37[-1];\n                bVar54 = uVar69 == '+';\n            }\n            uVar22 = uVar69 >> 0x20;\n            uVar13 = uVar69;\n            if (bVar54) {\n                puVar40 = puVar37 + -1;\n    // WARNING: Call to offcut address within same function\n                puVar37[-1] = 0x9cfc3f;\n                uVar58 = func_0x009cfc40();\n                bVar54 = false;\n                bVar61 = SBORROW4(puVar9, puVar9);\n                bVar59 = false;\n                bVar67 = true;\n                uVar62 = 0;\n                puVar53 = puVar9 + uVar56 * -2 + 1;\n                *puVar9 = uVar58;\n                iVar24 = extraout_ECX_12;\n                uVar22 = extraout_EDX_05;\n            }\n            else {\n                uVar68 = uVar69;\n                bVar54 = uVar68 < 0x2f;\n                bVar61 = SBORROW1(uVar68, '/');\n                cVar55 = uVar68 - 0x2f;\n                bVar59 = cVar55 < '\\0';\n                bVar67 = cVar55 == '\\0';\n                uVar62 = POPCOUNT(cVar55);\n                if (!bVar67) {\n                    *(puVar37 + -2) = puVar9;\n                    puVar37[-1] = uVar13;\n                    *(puVar37 + -6) = *(puVar37 + -3);\n                    if (uVar68 < 0x3a) {\n                        uVar13 = uVar13 & 0xff;\n                        bVar54 = 0xfffffffb < uVar13;\n                        bVar61 = SCARRY4(uVar13, 4);\n                        uVar13 = uVar13 + 4;\n                        bVar59 = false;\n                        bVar67 = uVar13 == 0;\n                        bVar57 = (POPCOUNT(uVar13 & 0xff) & 1U) == 0;\n                    }\n                    else {\n                        bVar54 = uVar68 < 0x5a;\n                        cVar55 = uVar68 + 0xa6;\n                        bVar67 = cVar55 == '\\0';\n                        uVar13 = uVar13 & 0xff;\n                        puVar37[-1] = (in_NT & 1) * 0x4000 | SBORROW1(uVar68, 'Z') * 0x800 | uVar56 * 0x400 |\n                                      (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | (cVar55 < '\\0') * 0x80 | bVar67 * 0x40\n                                      | (in_AF & 1) * 0x10 | ((POPCOUNT(cVar55) & 1U) == 0) * 4 | bVar54 |\n                                      (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 |\n                                      (in_AC & 1) * 0x40000;\n                        if (bVar54 || bVar67) {\n                            if (!bVar54 && !bVar67) {\n    // WARNING: Bad instruction - Truncating control flow here\n                                halt_baddata();\n                            }\n                            bVar54 = uVar13 < 0x41;\n                            bVar61 = SBORROW4(uVar13, 0x41);\n                            uVar13 = uVar13 - 0x41;\n                            bVar59 = uVar13 < 0;\n                            bVar67 = uVar13 == 0;\n                            bVar57 = (POPCOUNT(uVar13 & 0xff) & 1U) == 0;\n                        }\n                        else {\n                            bVar54 = uVar13 < 0x47;\n                            bVar61 = SBORROW4(uVar13, 0x47);\n                            uVar13 = uVar13 - 0x47;\n                            bVar59 = uVar13 < 0;\n                            bVar67 = uVar13 == 0;\n                            bVar57 = (POPCOUNT(uVar13 & 0xff) & 1U) == 0;\n                        }\n                    }\n                    goto code_r0x009cf3d7;\n                }\n                puVar40 = puVar37 + -1;\n                puVar37[-1] = 0x3f;\n                puVar53 = puVar9;\n            }\n            bVar57 = (uVar62 & 1) == 0;\n            uVar13 = *puVar40;\n            puVar37 = puVar40 + 1;\n            puVar9 = puVar53;\ncode_r0x009cf3d7:\n            *(puVar37 + -4) =\n                 (in_NT & 1) * 0x4000 | bVar61 * 0x800 | uVar56 * 0x400 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n                 bVar59 * 0x80 | bVar67 * 0x40 | (in_AF & 1) * 0x10 | bVar57 * 4 | bVar54 | (in_ID & 1) * 0x200000 |\n                 (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n            *(puVar37 + -3) = uVar22;\n            *(puVar37 + -8) = uVar13;\n            *(puVar37 + -0xc) = iVar24;\n            *(puVar37 + -0x10) = uVar22;\n            *(puVar37 + -0x14) = puVar45;\n            *(puVar37 + -0x18) = puVar37 + -4;\n            *(puVar37 + -0x1c) = uVar16;\n            *(puVar37 + -0x20) = puVar49;\n            *(puVar37 + -0x24) = puVar9;\n            *(puVar37 + -0x1d) = puVar37 + -0x24;\n            *(puVar37 + -4) = puVar49;\n            *(puVar37 + -0x28) = 0x9cf3f2;\n            uVar13 = fcn.009cfd46();\n            return uVar13;\n        }\n        if (0x7a < uVar62) break;\n        bVar54 = CARRY4(unaff_EBX, *(param_1 + 0x289b6809));\n        pcVar15 = unaff_EBX + *(param_1 + 0x289b6809);\n        unaff_EBX = pcVar15 + (uVar62 < 0x7a);\n        if (!bVar54 && !CARRY4(pcVar15, uVar62 < 0x7a)) {\n            *(in_EAX + -0x65) = *(in_EAX + -0x65) | unaff_EBP;\n            *(unaff_EBX + -6) = *(unaff_EBX + -6) - (param_2 >> 8);\n        }\n    }\n    Var71 = func_0x009cf751();\n    param_3._2_2_ = unaff_EDI >> 0x10;\n    uVar25 = param_3._2_2_;\n    param_3 = unaff_EDI & 0xffff0000 | param_3 & 0xffff;\n    if (0x9e69f0b < Var71) {\n        in(Var71 >> 0x20);\n        pcVar4 = swi(2);\n        (*pcVar4)();\ncode_r0x0099cc53:\n        uVar46 = param_4;\n        uVar13 = param_3;\n        param_4 = 0x9d026e;\n        uVar70 = func_0x009d0222();\n        bVar54 = uVar46 < uVar70;\n        if (bVar54) {\n            if (bVar54) {\n                piVar27 = uVar46 - 4;\n            }\n            else {\n                *extraout_ECX_13 = *extraout_ECX_13 + -0x1fc17c90 + bVar54;\n                pcVar15 = uVar13 + 0x3a83c542;\n                cVar55 = *pcVar15;\n                *pcVar15 = *pcVar15 << 1;\n                uVar70 = CONCAT44((uVar70 >> 0x20) + 1, uVar70 + (cVar55 < '\\0') + 0x4b8d3784);\n                piVar27 = extraout_ECX_13;\n            }\n        }\n        else {\n            param_4 = 0x9d02b9;\n    // WARNING: Call to offcut address within same function\n            uVar70 = func_0x009d02ba();\n            *uVar70 = *uVar70 + uVar70;\n            piVar27 = extraout_ECX_14 * 4 + 0x2b;\n        }\n        param_3._0_1_ = SUB41(piVar27, 0);\n        *((uVar70 >> 0x20) + 3) = param_3;\n        return uVar70;\n    }\n    cVar55 = unaff_EBX;\n    cVar63 = SBORROW1(*unaff_EBX, cVar55);\n    cVar60 = *unaff_EBX - cVar55 < '\\0';\n    bVar54 = *unaff_EBX == cVar55;\n    Var71 = fcn.009b9aa3();\n    uVar13 = param_4;\n    uVar18 = Var71 >> 0x20;\n    uStack10 = SUB42(unaff_ESI, 0);\n    iStack16 = uStack10;\n    param_3._2_2_ = unaff_ESI >> 0x10;\n    uStack8 = param_3._2_2_;\n    param_3 = unaff_ESI & 0xffff0000 | param_3 & 0xffff;\n    if (!bVar54 && cVar63 == cVar60) {\n        Var71 = func_0xa2a1f171();\n        if (!cVar60) {\n            *unaff_EDI = Var71;\n            uVar13 = in(Var71 >> 0x20);\n            unaff_EDI[1] = uVar13;\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        param_3 = param_3 & 0xffff0000 | extraout_var;\n        uStack4._0_3_ = CONCAT12(0x88, uStack4);\n        uStack4 = CONCAT13(0x96, uStack4);\n        fcn.009b94a8();\n        puVar47 = &stack0xfffffffe;\n        uStack4 = uStack4 & 0xffff0000;\n        uStack6 = param_3 >> 0x10;\n        uStack5 = param_3 >> 0x18;\n        uStack4._0_1_ = param_4._0_1_;\n        uStack4 = uStack4 | param_4 & 0xffff;\n        uVar13 = extraout_EDX;\n        piVar27 = NULL;\n        uStack14 = unaff_EDI;\n        uStack12 = uVar25;\n        while( true ) {\n            iVar24 = 0;\n            if (uVar13 != 0) {\n                for (; (uVar13 >> iVar24 & 1) == 0; iVar24 = iVar24 + 1) {\n                }\n            }\n            uVar16 = *(puVar47 + -4);\n            uStack20._0_3_ = uVar16 << 0x10;\n            uStack20._3_1_ = uVar16 >> 8;\n            iStack16 = uVar16 >> 0x10;\n            uStack24._0_3_ = CONCAT12(0xf5, uStack24);\n            uStack24 = CONCAT13(0x1a, uStack24);\n            uStack20 = CONCAT22(uStack20._2_2_, 0x9d);\n            fcn.009b8977();\n            uStack20._0_3_ = CONCAT12(0x2c, uStack20);\n            uStack20 = CONCAT13(0x1b, uStack20);\n            iStack16 = 0x9d;\n    // WARNING: Call to offcut address within same function\n            uVar70 = func_0x009d1b2d();\n            *(puVar47 + 0xf042464) = *(puVar47 + 0xf042464) ^ extraout_ECX_15;\n            uVar16 = *(extraout_ECX_15 * 3 + 0x30);\n            uStack14 = uVar16;\n            uStack12 = uVar16 >> 0x10;\n            uVar46 = puVar47 ^ *(uVar70 >> 0x20);\n            puVar47 = uVar46 + 1;\n            piVar38 = piVar27 + 1;\n            if (uVar70 != *piVar27) break;\n            puVar9 = uVar46 - 3;\n            bVar54 = 0xfffffffc < *puVar9;\n            *puVar9 = *puVar9 + 3;\n            uStack20._0_3_ = CONCAT12(0x94, uStack20);\n            uStack20 = CONCAT13(0x1b, uStack20);\n            iStack16 = 0x9d;\n            fcn.009d1b58();\n            uVar13 = extraout_EDX_06;\n            piVar27 = piVar38;\n            if (!bVar54) {\n                uVar13 = *(uVar46 + 9);\n                iVar2 = 0xf;\n                if (uVar13 != 0) {\n                    for (; uVar13 >> iVar2 == 0; iVar2 = iVar2 + -1) {\n                    }\n                }\n                uVar50 = piVar38 * 3;\n                puVar52 = &stack0xffffffea;\n                bVar54 = CARRY4(uVar13, uVar50);\n                bVar67 = SCARRY4(uVar13, uVar50);\n                puVar12 = uVar13 + uVar50;\n                uVar70 = CONCAT44(extraout_EDX_06, puVar12);\n                do {\n                    iVar24 = uVar70 >> 0x20;\n                    uVar56 = POPCOUNT(puVar12 & 0xff);\n                    bVar61 = puVar12 < 0;\n                    bVar59 = puVar12 == NULL;\n                    *(puVar52 + 4) = uVar70;\n                    puVar49 = puVar52 + 4;\n                    while( true ) {\n                        puVar49[-1] = (in_NT & 1) * 0x4000 | bVar67 * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100\n                                      | bVar61 * 0x80 | bVar59 * 0x40 | (in_AF & 1) * 0x10 | ((uVar56 & 1) == 0) * 4 |\n                                      bVar54 | (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000\n                                      | (in_AC & 1) * 0x40000;\n                        puVar49[-1] = iVar24;\n                        puVar49[-1] = 0x9d1c63;\n                        uVar13 = fcn.009b897c();\n                        iVar24 = 0x1f;\n                        if (uVar50 != 0) {\n                            for (; uVar50 >> iVar24 == 0; iVar24 = iVar24 + -1) {\n                            }\n                        }\n                        cVar55 = '\\0';\n                        uVar68 = 0;\n                        uVar62 = uVar13 < 0;\n                        bVar54 = uVar13 == 0;\n                        uVar56 = (POPCOUNT(uVar13 & 0xff) & 1U) == 0;\n                        *puVar49 = 0x9d1c87;\n                        uVar70 = fcn.009d1c65();\n                        iVar24 = uVar70 >> 0x20;\n                        if (!bVar54) {\n                            return uVar70;\n                        }\n                        if (bVar54) {\n                            uVar13 = *(uVar46 - 3);\n                            puVar49[1] = (in_NT & 1) * 0x4000 | (uVar68 & 1) * 0x800 | (in_IF & 1) * 0x200 |\n                                         (in_TF & 1) * 0x100 | (uVar62 & 1) * 0x80 | (bVar54 & 1) * 0x40 |\n                                         (in_AF & 1) * 0x10 | (uVar56 & 1) * 4 | cVar55 == '\\0' | (in_ID & 1) * 0x200000\n                                         | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n                            iVar5 = CONCAT11(CARRY4(uVar50, uVar13) || uVar50 + uVar13 == 0, uVar13 << 6);\n                            uVar6 = iVar5 + 1;\n                            iVar2 = 0xf;\n                            if (uVar6 != 0) {\n                                for (; uVar6 >> iVar2 == 0; iVar2 = iVar2 + -1) {\n                                }\n                            }\n                            piVar27 = *(uVar46 + 0xd);\n                            puVar49[-5] = (in_NT & 1) * 0x4000 | SCARRY2(iVar5, 1) * 0x800 | (in_IF & 1) * 0x200 |\n                                          (in_TF & 1) * 0x100 | (uVar6 == 0) * 0x40 | (in_AF & 1) * 0x10 |\n                                          ((POPCOUNT(uVar6 & 0xff) & 1U) == 0) * 4 | -1 < uVar13 << 5 |\n                                          (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 |\n                                          (in_AC & 1) * 0x40000;\n                            puVar49[-6] = puVar47;\n                            puVar49[-7] = iVar24;\n                            *piVar27 = uVar50 + uVar13;\n                            return 0;\n                        }\n                        puVar9 = iVar24 + -0x43 + unaff_EBX * 8;\n                        bVar54 = *puVar9 < 0;\n                        *puVar9 = *puVar9 << 1 | bVar54;\n                        bVar67 = SBORROW4(puVar49 + 2, 1);\n                        puVar52 = puVar49 + 7;\n                        puVar12 = puVar49 + 7;\n                        *(extraout_ECX_16 + 0x70) = uVar70 >> 0x28;\n                        if (!bVar54) break;\n                        bVar54 = false;\n                        bVar67 = false;\n                        uVar56 = uVar70 | 0xbb;\n                        bVar61 = uVar56 < '\\0';\n                        bVar59 = uVar56 == 0;\n                        uVar56 = POPCOUNT(uVar56);\n                        puVar49 = puVar49 + 7;\n                    }\n                } while( true );\n            }\n        }\n        do {\n    // WARNING: Do nothing block with infinite loop\n        } while( true );\n    }\n    uVar46 = Var71 | *(Var71 + 0x2ebf0dfe);\n    if ((POPCOUNT(*unaff_EBX - uVar46 & 0xff) & 1U) != 0) {\n        uVar58 = in(uVar18);\n        *unaff_EDI = uVar58;\n        pcVar15 = *unaff_EBX;\n        *unaff_EBX = *unaff_EBX + unaff_EBX;\n        uVar56 = (cVar55 + '\\x1b') - CARRY4(pcVar15, unaff_EBX);\n        if (-1 < uVar56) {\n            in(uVar18);\n            pcVar4 = swi(1);\n            uVar13 = (*pcVar4)();\n            return uVar13;\n        }\n        *(uVar46 - 0x32) = uVar46 >> 8;\n        pcVar10 = in(0x3b);\n        uVar56 = extraout_ECX_03 + *(unaff_EBP + 0xbf3be955) + ((unaff_EBX & 0xffffff00 | uVar56) < *(unaff_EDI + 1));\n        cVar55 = *pcVar10;\n        pcVar15 = (extraout_ECX_03 & 0xffffff00 | uVar56) + 0x488b7819;\n        *pcVar15 = *pcVar15 + uVar56 + ((param_4 & 1) != 0);\n        uVar58 = (POPCOUNT(pcVar10 + cVar55 & 0xcb) & 1U) == 0;\n        *(unaff_EBP + 0x766f0002) = extraout_ST0;\n        uVar22 = *0x7c43562;\n        iVar11 = *0x7c4355a;\n        iVar24 = *0x7c43556;\n        uVar16 = *0x7c43552;\n        puVar33 = 0x7c43572;\n        out(*0x7c43566, *0x37367d47);\n        iVar17 = *0x7c4356a + -1;\n        if (iVar17 != 0) {\n            uVar56 = iVar17 & 0x1f;\n            **0x7c43566 = **0x7c43566 << uVar56 | **0x7c43566 >> 0x20 - uVar56;\n            *0x7c4356e = uVar16;\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        iVar3 = *(*0x7c4355a + -0x14) * -0xb;\n        iVar21 = iVar3;\n        pcVar4 = swi(4);\n        uVar56 = *0x37367d47;\n        if (iVar21 != iVar3) {\n            uVar56 = (*pcVar4)();\n            iVar17 = extraout_ECX_04;\n            iVar21 = extraout_EDX_00;\n        }\n        if (!uVar58) {\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        *(iVar17 + -0x23) = *(iVar17 + -0x23) ^ uVar56;\n        *(puVar33 + -4) = iVar21;\n        *CONCAT31(iVar17 >> 8, 0x2e) = iVar21 >> 8;\n        *0xbf8936d7 = (iVar24 - *0x7bba4f95) - (0x18 < uVar56);\n        *0xbf8936d3 = uVar16;\n    // WARNING: Call to offcut address within same function\n        puVar43 = 0xbf8936cf;\n        *0xbf8936cf = 0x9e6af6;\n        uVar70 = func_0x009e6af7();\n        *uVar70 = *uVar70 + uVar70;\n        while( true ) {\n            puVar20 = uVar70 >> 0x20;\n            puVar48 = uVar70;\n            puVar44 = puVar43 + 1;\n            uVar6 = *puVar48;\n            uVar46 = uVar6;\n            uVar26 = *puVar20;\n            *puVar43 = uVar46;\n            *puVar43 = uVar26;\n            uVar13 = uVar26 - uVar46;\n            if (uVar13 != 0) break;\n            if (uVar6 == 0) goto code_r0x0099e8a8;\n            *puVar43 = 0;\n            puVar43[-1] = uVar46;\n            puVar43[-2] = puVar20;\n            puVar43[-3] = uVar22;\n            puVar43[-4] = puVar43 + 1;\n            puVar43[-5] = iVar11 + -1;\n            puVar43[-6] = puVar48;\n            puVar43[-7] = uVar46;\n            puVar43[-8] = *(puVar43 + -0xb);\n            uVar70 = CONCAT44(puVar20 + 1, puVar48 + 1);\n        }\n        if (uVar13 != 0) {\ncode_r0x0099e8a8:\n            *puVar43 = uVar13;\n            puVar43[-1] = uVar46;\n            puVar43[-2] = puVar20;\n            puVar43[-3] = uVar22;\n            puVar43[-4] = puVar43 + 1;\n            puVar43[-5] = iVar11 + -1;\n            puVar43[-6] = puVar48;\n            puVar44 = puVar43 + -7;\n            puVar43[-7] = uVar46;\n            *(puVar43 + -0x1e) = uVar70 >> 0x20;\n        }\n        if (-1 < uVar13) {\n            if (0 < uVar13) {\n                uVar13 = 1;\n            }\n            return uVar13;\n        }\n        *(puVar44 + 0x24) = puVar44 + 0x28;\n        return 0xffffffff;\n    }\n    uStack4._1_1_ = extraout_ECX_03 >> 8;\n    uStack4._2_1_ = extraout_ECX_03 >> 0x10;\n    uStack4._3_1_ = extraout_ECX_03 >> 0x18;\n    uStack4 = extraout_ECX_03 & 0xff000000 | uStack4;\n    uStack8 = extraout_ECX_03;\n    uStack12 = uVar46;\n    uStack10 = uVar46 >> 0x10;\n    ppcVar14 = (unaff_EBX - 1U) / 3;\n    uStack20 = (unaff_EBX - 1U) % 3;\n    uStack20._0_2_ = ppcVar14;\n    uVar6 = uStack20;\n    uStack20._2_1_ = ppcVar14 >> 0x10;\n    uStack20._3_1_ = ppcVar14 >> 0x18;\n    puVar47 = &stack0xfffffff0;\n    uStack14 = param_3._2_2_;\n    if (ppcVar14 == NULL) {\n        uStack20 = (in_NT & 1) * 0x4000 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | (ppcVar14 == NULL) * 0x40 |\n                   (in_AF & 1) * 0x10 | 4 | (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 |\n                   (in_AC & 1) * 0x40000;\n        uStack6 = uStack4._2_1_;\n        uStack5 = uStack4._3_1_;\n        uStack24 = unaff_EBX;\n        fcn.009d1ea4();\n        fcn.009d1f55();\n        fcn.009b9705();\n        ppcVar14 = uStack24;\n        *param_5 = 4;\n        uStack20 = fcn.009d206f;\n        uVar70 = fcn.009d2011();\n        pcVar10 = uVar70 >> 0x20;\n        pcVar15 = uVar70;\n        uVar56 = uStack24._3_1_;\n        ppcVar51 = ppcVar14 + -2;\n        bVar54 = (&stack0xdba8c99b >> (pcVar15 & 0x1f) & 1) != 0;\n        uVar62 = &stack0xdba8c99b | 1 << (pcVar15 & 0x1f);\n        cVar55 = uVar70 >> 8;\n        if (bVar54) {\n            bVar67 = SBORROW1(uVar62, cVar55) != SBORROW1(uVar62 - cVar55, bVar54);\n            cVar55 = (uVar62 - cVar55) - bVar54;\n        }\n        else {\n            bVar67 = SBORROW1(uVar62, cVar55) != SBORROW1(uVar62 - cVar55, bVar54);\n            cVar55 = (uVar62 - cVar55) - bVar54;\n        }\n        if (cVar55 == '\\0' || bVar67 != cVar55 < '\\0') {\n            uStack20 = uStack20 & 0xffff | *0x10 << 0x10;\n        }\n        else {\n            uStack20 = uStack20 & 0xffff | *0x10 << 0x10;\n        }\n        *ppcVar51 = pcVar10;\n        cVar55 = uVar70 >> 0x20;\n        uVar68 = cVar55 != '\\0';\n        bVar59 = false;\n        uVar62 = -cVar55;\n        uVar13 = pcVar10 & 0xffffff00 | uVar62;\n        bVar67 = '\\0' < cVar55;\n        bVar54 = uVar62 == 0;\n        uVar62 = POPCOUNT(uVar62);\n        if ((bVar67) || (!bVar67)) {\n            ppcVar14[-1] = pcVar15;\n            puVar35 = &stack0xffffffe8;\n            uStack24 = 0x9c2440;\n            uVar70 = func_0x009c22e9();\n            uVar68 = uVar70 + 1;\n            bVar54 = (POPCOUNT(uVar68) & 1U) == 0;\n            *(puVar35 + -2) = ppcVar51;\n            uVar62 = puVar35[-2];\n            puVar35[-2] = uVar70 >> 8;\n            uVar13 = (uVar56 - 1 & 0xff | uVar62 << 8) | 0x7be40000;\n            *(puVar35 + -5) = uVar70 & 0xffffff00 | uVar68;\n            *(puVar35 + -9) = extraout_ECX_06;\n            *(puVar35 + -0xd) = uVar70 >> 0x20;\n            *(puVar35 + -0x11) = uVar13;\n            *(puVar35 + -0x15) = puVar35 + -1;\n            *(puVar35 + -0x19) = *0x10;\n            *(puVar35 + -0x1d) = ppcVar51;\n            *(puVar35 + -0x21) = unaff_EDI;\n            puVar47 = puVar35 + -0x23;\n            *(puVar35 + -0x23) = *(puVar35 + -0x1f);\n            if (bVar54) {\n                puVar47 = puVar35 + -0x20;\n            }\n            else if (!bVar54) {\n                puVar47 = puVar35 + -0x20;\n            }\n            *(puVar47 + -4) = 0x9c24aa;\n            fcn.009c2471();\n            if (puVar47 < 0xb) {\n                *(puVar47 + -0xc) = *(puVar47 + -9);\n                *(puVar47 + -0xb) = uVar13;\n            }\n            else {\n                *(puVar47 + -0xc) = *(puVar47 + -9);\n                *(puVar47 + -0xb) = uVar13;\n            }\n            *(puVar47 + -0x13) = *(puVar47 + -0x13);\n            uVar13 = ppcVar14 - 0xe5U & 0xffff0000 | CONCAT11(0x39, ppcVar14 - 0xe5U);\n            uVar56 = 0xc0 - extraout_ECX_07;\n            *(puVar47 + -0x10) = uVar13;\n            *(puVar47 + -0x14) = extraout_ECX_07 & 0xffffff00 | uVar56;\n            *(puVar47 + -0x18) = extraout_EDX_02;\n            *(puVar47 + -0x1c) = 0xb61523f3;\n            *(puVar47 + -0x20) = puVar47 + -0xc;\n            *(puVar47 + -0x24) = *0x10;\n            *(puVar47 + -0x28) = ppcVar51;\n            *(puVar47 + -0x2c) = unaff_EDI;\n            uVar25 = CONCAT31(uVar13 >> 8, 0xe7);\n            if (!SBORROW4(puVar47 + -0x2c, 6)) {\n                *(puVar47 + -0x30) = uVar25;\n                uVar6 = *(puVar47 + -0x1e);\n                *(puVar47 + -0x1d) = *(puVar47 + -0x21);\n                *(puVar47 + -0x21) = 0x9c259a;\n                uVar70 = fcn.009c2620();\n                *(uVar70 >> 0x20) = uVar70 >> 0x20;\n                *(uVar6 & 0xffff12ff | 0xb6150000) = *(uVar6 & 0xffff12ff | 0xb6150000) << 1;\n                uVar13 = uVar70 & 0xffff0000 | CONCAT11(*0x1523f3bb, uVar70);\n                out(0xeb, uVar13);\n                *(puVar47 + -0x21) = *(puVar47 + -0x19);\n                return uVar13;\n            }\n            *(puVar47 + -0x30) = uVar25;\n            *(puVar47 + -0x1d) = *(puVar47 + -0x21);\n            iVar24 = 0;\n            if (unaff_EDI != NULL) {\n                for (; (unaff_EDI >> iVar24 & 1) == 0; iVar24 = iVar24 + 1) {\n                }\n            }\n            if (SBORROW1(uVar56, 'U')) {\n                *(puVar47 + -0x10) = 0x9c2640;\n                fcn.009c26d9();\n                *(puVar47 + -0x10) = 0x9c2645;\n                uVar13 = func_0x80290bba();\n                return uVar13;\n            }\n            puVar36 = puVar47 + -0x18;\n            piVar34 = puVar47 + -0x18;\n            if (puVar47 + -0xc < 0xc || puVar47 == 0x18) {\n                puVar47[-0xe] = 0;\n            }\n            else {\n                puVar47[-0xe] = 0;\n            }\n            if (puVar47 + -0xc < 0xc) {\n                for (uVar13 = 0x1f; 0xdab3257dU >> uVar13 == 0; uVar13 = uVar13 - 1) {\n                }\n            }\n            else {\n                for (uVar13 = 0x1f; 0xdab3257dU >> uVar13 == 0; uVar13 = uVar13 - 1) {\n                }\n            }\n            uVar6 = uVar13 >> 0x10;\n            if ((uVar13 & 0x3fff) == 0) goto code_r0x009c276a;\n            while ((*piVar34 == 0 && (*piVar34 != 0))) {\n                uVar13 = uVar6;\n                *(unaff_EDI + -0x35ac1bae) = *(unaff_EDI + -0x35ac1bae) << 5;\n                uVar6 = piVar34 >> 0x10;\n                puVar36 = uVar13 * 0x10000 + 4;\ncode_r0x009c276a:\n                piVar34 = puVar36;\n            }\n            iVar24 = 0x1f;\n            if (extraout_EDX_02 != 0) {\n                for (; extraout_EDX_02 >> iVar24 == 0; iVar24 = iVar24 + -1) {\n                }\n            }\n            return unaff_retaddr;\n        }\n        while( true ) {\n            bVar61 = (uVar62 & 1) == 0;\n            *(puVar47 + -4) =\n                 (in_NT & 1) * 0x4000 | bVar59 * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | bVar67 * 0x80 |\n                 bVar54 * 0x40 | (in_AF & 1) * 0x10 | bVar61 * 4 | uVar68 & 1 | (in_ID & 1) * 0x200000 |\n                 (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n            *(puVar47 + -8) = *(puVar47 + -4);\n            if ((bVar59 == bVar67) || (bVar59 != bVar67)) break;\n            param_3 = *(puVar47 + -8);\n            uVar56 = *((pcVar15 & 0xff) + 0x7be48ebb);\n            out(param_3, pcVar15 & 0xffffff00 | uVar56);\n            out(0x76, uVar56);\n            uVar68 = 9 < (uVar56 & 0xf) | in_AF;\n            pcVar15 = pcVar15 & 0xffff0000 |\n                      CONCAT11(((pcVar15 & 0xffffff00) >> 8) + uVar68, uVar56 + uVar68 * '\\x06') & 0xff0f;\n            bVar59 = SBORROW4(unaff_EDI, 1);\n            unaff_EDI = unaff_EDI + -1;\n            bVar67 = unaff_EDI < 0;\n            bVar54 = unaff_EDI == NULL;\n            uVar62 = POPCOUNT(unaff_EDI & 0xff);\n            ppcVar51 = 0x3edd2db8;\n            *(puVar47 + -8) = pcVar15;\n            *(puVar47 + -0xc) = param_3;\n            *(puVar47 + -0x10) = uVar13 & 0xffff0000 | CONCAT11(0xa4, uVar13);\n            *(puVar47 + -0x14) = 0x7be48ebb;\n            *(puVar47 + -0x18) = puVar47 + -4;\n            *(puVar47 + -0x1c) = *0x10;\n            *(puVar47 + -0x20) = 0x3edd2db8;\n            ppuVar41 = puVar47 + -0x24;\n            puVar47 = puVar47 + -0x24;\n            *ppuVar41 = unaff_EDI;\n            uVar13 = param_3 + 0x7be48ebb;\n            in_AF = uVar68;\n        }\n        *(puVar47 + -0xc) =\n             (in_NT & 1) * 0x4000 | bVar59 * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | bVar67 * 0x80 |\n             bVar54 * 0x40 | (in_AF & 1) * 0x10 | bVar61 * 4 | uVar68 & 1 | (in_ID & 1) * 0x200000 |\n             (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n        *(puVar47 + -0x10) = *(puVar47 + -0xb);\n        puVar49 = puVar47 + -0x10;\n        param_4 = pcVar15;\n        if (bVar59 != bVar67) {\n            do {\n                while( true ) {\n                    puVar42 = puVar49;\n                    *(puVar42 + 3) = *puVar42;\n                    *puVar42 = 0x9d22b3;\n                    fcn.009d2346();\n                    if (!uVar68) break;\n                    *(puVar42 + 7) = puVar42[1];\n                    puVar49 = puVar42 + 2;\n                }\n                uVar13 = puVar42[8];\n                cVar55 = puVar42[5];\n                uVar68 = 9 < (uVar13 & 0xf) | in_AF;\n                puVar49 = puVar42 + 9;\n                in_AF = uVar68;\n            } while (!SCARRY1(cVar55, puVar42[6] >> 8));\n            puVar42[8] = puVar42[3];\n            puVar42[9] = puVar42[5] & 0xffffff00 | cVar55 + (puVar42[6] >> 8);\n            puVar42[7] = puVar42[3];\n            *(puVar42 + 0x1a) = *(puVar42 + 0x1d);\n            puVar42[6] = puVar42[9];\n            return uVar13 & 0xffff0000 | CONCAT11((uVar13 >> 8) + uVar68, uVar13 + uVar68 * '\\x06') & 0xff0f;\n        }\n        *(puVar47 + -0xd) = *(puVar47 + -0x10);\n        *(puVar47 + -0x10) =\n             (in_NT & 1) * 0x4000 | bVar59 * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | bVar67 * 0x80 |\n             bVar54 * 0x40 | (in_AF & 1) * 0x10 | bVar61 * 4 | uVar68 & 1 | (in_ID & 1) * 0x200000 |\n             (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n        if ((POPCOUNT(puVar47 + -0xc & 0xff) & 1U) == 0) {\n            uVar13 = (pcVar15 & 0xff) << 0x10 | CONCAT11(*0x10 >> 8, *0x10 >> 0x18);\n        }\n        else {\n            uVar13 = (pcVar15 & 0xff) << 0x10 | CONCAT11(*0x10 >> 8, *0x10 >> 0x18);\n        }\n        *(puVar47 + -0x10) = 0x9bb376;\n        fcn.009bb355();\n        *(puVar47 + -0xb) = *(puVar47 + -0xc);\n        uVar56 = -uVar13;\n        uVar13 = uVar13 & 0xffffff00;\n        uVar46 = uVar13 | uVar56;\n        uVar58 = extraout_ECX_05 >> 8;\n        if (puVar47 != 0x14 && SBORROW4(puVar47 + 2, 0x16) == puVar47 + -0x14 < 0) {\n            *(puVar47 + -0x16) = *(puVar47 + -0x12);\n            *(puVar47 + -0x1a) = extraout_ECX_05;\n            *(puVar47 + -0x1e) = extraout_EDX_01;\n            *(puVar47 + -0x22) = uVar46;\n            *(puVar47 + -0x26) = puVar47 + -0x12;\n            *(puVar47 + -0x2a) = *0x10;\n            *(puVar47 + -0x2e) = ppcVar51;\n            *(puVar47 + -0x32) = unaff_EDI;\n            puVar47[-0x22] = uVar58;\n            *(puVar47 + -0x36) = 0x9bb43f;\n            fcn.009bb4af();\n            pcVar4 = swi(3);\n            uVar13 = (*pcVar4)();\n            return uVar13;\n        }\n        *(puVar47 + -0x16) = *(puVar47 + -0x12);\n        *(puVar47 + -0x1a) = extraout_ECX_05;\n        *(puVar47 + -0x1e) = extraout_EDX_01;\n        *(puVar47 + -0x22) = uVar46;\n        *(puVar47 + -0x26) = puVar47 + -0x12;\n        *(puVar47 + -0x2a) = *0x10;\n        *(puVar47 + -0x2e) = ppcVar51;\n        *(puVar47 + -0x32) = unaff_EDI;\n        puVar47[-0x22] = uVar58;\n        *(puVar47 + -0x1e) = uVar46;\n        cVar55 = uVar56 - 1;\n        bVar67 = (POPCOUNT(cVar55) & 1U) == 0;\n        uVar6 = puVar47 + 2U & 0xf;\n        bVar54 = (uVar46 >> uVar6 & 1) != 0;\n        if (bVar54) {\n            if (!bVar54) {\n                return CONCAT31(uVar13 >> 8 & 0xffff00 | uVar13 >> 8 | (1 << uVar6) >> 8, -bVar54);\n            }\n            *(puVar47 + -2) =\n                 (in_NT & 1) * 0x4000 | SBORROW1(uVar56, '\\x01') * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n                 (cVar55 < '\\0') * 0x80 | (cVar55 == '\\0') * 0x40 | (in_AF & 1) * 0x10 | bVar67 * 4 | bVar54 |\n                 (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n        }\n        else {\n            *(puVar47 + -2) =\n                 (in_NT & 1) * 0x4000 | SBORROW1(uVar56, '\\x01') * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n                 (cVar55 < '\\0') * 0x80 | (cVar55 == '\\0') * 0x40 | (in_AF & 1) * 0x10 | bVar67 * 4 | bVar54 |\n                 (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n        }\n        *(puVar47 + -2) = fcn.009bbd1c;\n        uVar70 = fcn.009bba10();\n        *(puVar47 + -0x1d) = uVar13 | -cVar55;\n        uVar13 = *(puVar47 + 2);\n        *(puVar47 + 2) = uVar70 >> 0x20 & 0xffff0000 | CONCAT11(uVar70 >> 8, uVar70 >> 0x20) + 1;\n        *(puVar47 + 2) = uVar13 + 0x2a;\n        *(puVar47 + -0x1e) = *(puVar47 + 2);\n        return uVar70;\n    }\n    uStack4 = param_6;\n    bVar54 = false;\n    uStack24 = 0x9d287e;\n    uVar26 = *0x10 - 0x14;\n    uStack8 = uStack20;\n    uStack6 = uStack20._2_1_;\n    uStack5 = uStack20._3_1_;\n    func_0x009b8981();\n    uStack4 = uStack4 + 3;\n    uStack24 = fcn.009d24a1;\n    pcVar15 = fcn.009d1f9c();\n    iVar2 = 0;\n    if (uVar26 != 0) {\n        for (; (uVar26 >> iVar2 & 1) == 0; iVar2 = iVar2 + 1) {\n        }\n    }\n    *ppcVar14 = unaff_EBX;\n    ppcVar14[1] = pcVar15;\n    bVar61 = SBORROW4(ppcVar14, &stack0x00000050);\n    puVar47 = ppcVar14 - &stack0x00000050;\n    bVar59 = puVar47 < 0;\n    bVar67 = puVar47 == NULL;\n    puVar45 = *0x10;\n    if (ppcVar14 < &stack0x00000050 || bVar67) {\n        bVar54 = SBORROW4(&stack0x00000040, *0x10);\n        iVar24 = &stack0x00000040 - *0x10;\n        if ((!bVar54) || (bVar54)) {\n            uStack24 = 0x9d25fc;\n            func_0x009d2614();\n            fcn.009d26ab();\n            uVar58 = in(extraout_EDX_07);\n            *(uVar13 + 4) = uVar58;\n            if (-1 < extraout_EDX_07 + -1) {\n                pcVar4 = swi(1);\n                uVar13 = (*pcVar4)();\n                return uVar13;\n            }\n            LOCK();\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        puVar47 = &stack0xffffffe5;\n        uStack20 = uStack20 & 0xffff0000 | ppcVar14 + -0x20 & 0xffff;\n        uVar46 = (in_IF & 1) * 0x200;\n        uVar50 = uVar46 | (in_TF & 1) * 0x100;\n        uVar19 = uVar50 | (&stack0xffffffe5 < 0) * 0x80;\n        puVar45 = ppcVar14 + iVar24 + -0xc0;\n        puVar52 = *0x10;\n        ppcVar51 = ppcVar14 + -0x20;\n        for (; iVar24 != 0; iVar24 = iVar24 + -1) {\n            *ppcVar51 = *puVar52;\n            puVar52 = puVar52 + 1;\n            ppcVar51 = ppcVar51 + 1;\n        }\n        in_NT = ((in_NT & 1) * 0x4000 & 0x4000) != 0;\n        bVar61 = (SBORROW4(&stack0xfffffff0, 0xb) * 0x800 & 0x800) != 0;\n        bVar54 = (uVar46 & 0x400) != 0;\n        in_IF = (uVar50 & 0x200) != 0;\n        in_TF = (uVar19 & 0x100) != 0;\n        bVar59 = ((uVar19 | (*0x10 == 0x1b) * 0x40) & 0x80) != 0;\n        bVar67 = ((*0x10 == 0x1b) * 0x40 & 0x40) != 0;\n        in_AF = ((in_AF & 1) * '\\x10' & 0x10) != 0;\n        in_ID = (((in_ID & 1) * 0x200000 >> 0x10 | (in_VIP & 1) * 0x100000 >> 0x10) & 0x20) != 0;\n        in_AC = ((in_AC & 1) * 0x40000 & 0x40000) != 0;\n        in_VIP = 0;\n        in_VIF = 0;\n    }\n    bVar57 = (POPCOUNT(puVar47 & 0xff) & 1U) == 0;\n    if (bVar67) {\n        uStack24._1_1_ =\n             (in_NT & 1) * 0x4000 >> 8 | bVar61 * 0x800 >> 8 | bVar54 * 0x400 >> 8 | (in_IF & 1) * 0x200 >> 8 |\n             (in_TF & 1) * 0x100 >> 8 | bVar59 * 0x80 >> 8;\n        uStack24._0_1_ = bVar59 * 0x80 | bVar67 * '@' | (in_AF & 1) * '\\x10' | bVar57 * '\\x04';\n        uStack24._2_1_ =\n             (in_ID & 1) * 0x200000 >> 0x10 | (in_VIP & 1) * 0x100000 >> 0x10 | (in_VIF & 1) * 0x80000 >> 0x10 |\n             (in_AC & 1) * 0x40000 >> 0x10;\n    }\n    else {\n        uStack24._1_1_ =\n             (in_NT & 1) * 0x4000 >> 8 | bVar61 * 0x800 >> 8 | bVar54 * 0x400 >> 8 | (in_IF & 1) * 0x200 >> 8 |\n             (in_TF & 1) * 0x100 >> 8 | bVar59 * 0x80 >> 8;\n        uStack24._0_1_ = bVar59 * 0x80 | bVar67 * '@' | (in_AF & 1) * '\\x10' | bVar57 * '\\x04';\n        uStack24._2_1_ =\n             (in_ID & 1) * 0x200000 >> 0x10 | (in_VIP & 1) * 0x100000 >> 0x10 | (in_VIF & 1) * 0x80000 >> 0x10 |\n             (in_AC & 1) * 0x40000 >> 0x10;\n    }\n    uStack24 = uStack24;\n    fcn.009b0498();\n    ppuVar28 = &stack0xffffffe8;\n    fcn.009b05c7();\n    puVar47 = uVar13 + 4;\n    cVar55 = extraout_CL;\n    while( true ) {\n        puVar52 = puVar47 + 1;\n        uVar25 = *ppuVar28 >> 0x10;\n        if (!SCARRY4(puVar47, 1)) break;\n        puVar23 = CONCAT22(uVar25, 0xead3);\n        ppuVar28[-1] = 0x9b066d;\n        uVar69 = fcn.009b0796();\n        uVar46 = uVar69;\n        uVar50 = uVar46 + 0x4bbadd54;\n        if (uVar46 < 0xb44522ac) {\n            *puVar52 = *ppcVar14;\n            ppuVar28[-1] = puVar47 + bVar54 * -2 + 2;\n            ppuVar29 = ppuVar28[-1] + 4;\n            goto code_r0x009b06b6;\n        }\n        uVar13 = 0xfbb4829;\n        uVar19 = uVar46 < 0xb44522ac;\n        uVar46 = uVar46 + 0xb14bd4ba;\n        bVar67 = uVar50 < 0x9a6f089a || uVar46 < uVar19;\n        bVar64 = SBORROW4(uVar50, -0x6590f766) != SBORROW4(uVar46, uVar19);\n        uVar7 = uVar46 - uVar19;\n        bVar57 = uVar7 < 0;\n        bVar61 = uVar7 == 0;\n        bVar59 = (POPCOUNT(uVar7 & 0xff) & 1U) == 0;\n        if (bVar59) {\n            if (bVar61) {\n                uVar18 = uVar69 >> 0x20;\n                if ((uVar50 < 0x9a6f089a || uVar46 < uVar19) || bVar61) {\n                    puVar1 = ppcVar14 + 0x21;\n                    *puVar1 = *puVar1 << 1 | *puVar1 < '\\0';\n                    *(ppcVar14 + -0x36) = *(ppcVar14 + -0x36) << 1;\n                    puVar45 = puVar45 + -1;\n                    in_FPUControlWord = *(puVar47 + (uVar69 >> 0x20) * 2 + -0x50a36f);\n                    if (puVar45 == NULL) {\n                        uVar16 = 0xfbb482a;\n                        *puVar52 = *0x3fcca535;\n                        *(*puVar23 + 0x87d98b51) = *(*puVar23 + 0x87d98b51);\n                        uVar58 = in(uVar18);\n                        puVar47[bVar54 * -2 + 2] = uVar58;\n                        uVar6 = 0;\n                        goto code_r0x009b06e9;\n                    }\n                    *0xc2 = *0xc2 | 0xc2;\n                    puVar9 = ppuVar28;\n                    goto code_r0x009b06bd;\n                }\n                if (!bVar61 && bVar64 == bVar57) {\n                    uVar56 = in(uVar18);\n                    puVar45 = puVar45 + puVar23 + bVar67;\n                    uVar62 = 0;\n                    uVar65 = 0;\n                    uVar69 = uVar69 & 0xffffffff00000000 | uVar56 & 0xffffffffffffff01;\n                    uVar68 = 0;\n                    uVar58 = (uVar56 & 1) == 0;\n                    uVar56 = (uVar56 & 1) == 0;\n                    goto code_r0x009b0707;\n                }\n                bVar67 = false;\n                bVar64 = false;\n                uVar7 = 0;\n                bVar57 = false;\n                bVar61 = true;\n                bVar59 = true;\n            }\n            else {\n                *(ppuVar28 + -1) = in_ES;\n            }\n        }\n        else {\n            ppuVar28[-1] = *(ppuVar28 + 6);\n        }\n        *(uVar7 - 4) = (in_NT & 1) * 0x4000 | bVar64 * 0x800 | bVar54 * 0x400 | (in_IF & 1) * 0x200 |\n                       (in_TF & 1) * 0x100 | bVar57 * 0x80 | bVar61 * 0x40 | (in_AF & 1) * 0x10 | bVar59 * 4 | bVar67 |\n                       (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000\n        ;\n        puVar45 = puVar23 + (uVar7 - 0x40);\n        *(uVar7 - 8) = ppcVar14;\n        *(uVar7 - 0xc) = fcn.009b05c7;\n        fcn.009b053b();\n        in_ES = *(uVar7 - 8);\n        ppuVar28 = uVar7 - 4;\n        *(uVar7 - 8) = 0x9b060b;\n        fcn.009b05ee();\n        puVar47 = puVar52;\n        cVar55 = extraout_CL_00;\n    }\n    puVar23 = *ppuVar28 & 0xffff0000;\n    uVar56 = cVar55 + 0x66;\n    uVar13 = uVar56;\n    puVar9 = ppuVar28 + -10;\n    if (ppuVar28 + -10 < 0) {\ncode_r0x009b06bd:\n        uVar56 = uVar13;\n        uVar25 = puVar23 >> 0x10;\n        puVar9 = puVar9 + 2;\n    }\n    else {\n        puVar9 = ppuVar28 + -2;\n    }\n    ppuVar28 = puVar9 + 2;\n    uVar62 = false;\n    uVar65 = 0;\n    uVar56 = uVar56 ^ 0xea;\n    uVar68 = uVar56 < '\\0';\n    uVar58 = uVar56 == 0;\n    uVar56 = (POPCOUNT(uVar56) & 1U) == 0;\n    puVar9[1] = 0x9b072b;\n    uVar69 = fcn.009b06f9();\n    uVar13 = extraout_ECX_00;\n    if (uVar62 || uVar58) {\n        *(puVar9 + 6) = *ppuVar28;\n    }\n    else {\ncode_r0x009b0707:\n        *(ppuVar28 + -2) = *ppuVar28;\n    }\n    puVar9 = ~uVar69;\n    *(ppuVar28 + -5) =\n         (in_NT & 1) * 0x4000 | (uVar65 & 1) * 0x800 | bVar54 * 0x400 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n         (uVar68 & 1) * 0x80 | (uVar58 & 1) * 0x40 | (in_AF & 1) * 0x10 | (uVar56 & 1) * 4 | uVar62 & 1 |\n         (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    *(ppuVar28 + -5) = ppcVar14;\n    uVar46 = CONCAT31(CONCAT22(uVar25, 0xbb76) >> 8, 0xf);\n    uVar56 = ~uVar13;\n    uVar13 = uVar13 & 0xffffff00;\n    bVar54 = (uVar46 >> (puVar52 & 0x1f) & 1) != 0;\n    if ((!bVar54 && !uVar58) && (bVar54 || uVar58)) {\n        if (-1 < (uVar46 ^ 1 << (puVar52 & 0x1f) | *(puVar47 + 0x10996a10))) {\n            *puVar9 = *puVar9 << 0x17 | *puVar9 >> 9;\n            *(ppcVar14 + -0x45) = *(ppcVar14 + -0x45) << 1;\n            uVar46 = puVar9 & 0xffff0000 | puVar9 + (puVar9 >> 8) * '\\x16';\n            out(*((uVar69 >> 0x20) + -0x53 + (uVar13 | uVar56) * 8), uVar46);\n            *0x5eafebc2 = *0x5eafebc2 << (uVar56 & 0x1f) | *0x5eafebc2 >> 0x20 - (uVar56 & 0x1f);\n            return uVar46;\n        }\n        puVar30 = ppuVar28 + 0x12;\n        ppuVar28 = ppuVar28 + 0x12;\n        *puVar30 = 0x9b074a;\n        puVar8 = func_0x578320c8();\n        *puVar8 = in_FPUControlWord;\n        puVar45 = puVar45 + 0x1f1;\n        uVar6 = puVar8 >> 0x10;\n        uVar16 = extraout_ECX_01;\ncode_r0x009b06e9:\n        ppuVar29 = ppuVar28 + -1;\n        ppuVar28[-1] = uVar16;\n        *ppuVar28 = puVar45;\n        uVar50 = ppuVar28 + -1 & 0xffff | uVar6 << 0x10;\ncode_r0x009b06b6:\n        *(ppuVar29 + -4) = *(ppuVar29 + 4);\n        return uVar50;\n    }\n    uVar46 = uVar13 | uVar56 - 0x31;\n    puVar32 = ppuVar28 + 0x13;\n    *(ppuVar28 + 0x13) = fcn.009b0812;\n    func_0x009b07f3();\n    *puVar32 = 0x9b0818;\n    uVar50 = func_0x009b0838();\n    pcVar15 = uVar50 & 0xffffff00 | extraout_ECX_02 & 0xff;\n    uVar50 = extraout_ECX_02;\n    if (extraout_ECX_02 == 0) {\n        *pcVar15 = *pcVar15 + (extraout_ECX_02 & 0xff);\n        *0x6caf5c35 = *0x6caf5c35 + (uVar13 >> 8);\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    while( true ) {\n        puVar52 = puVar47 + 0x3eaff39f;\n        if (uVar46 != 0x4b3f2ba0 && SCARRY4(uVar46, -0x4b3f2ba0) == uVar46 + 0xb4c0d460 < 0) {\n            do {\n                *(puVar32 + -4) = 0x9b093a;\n                fcn.009b224f();\n                puVar32 = puVar32 + *(ppcVar14 + -0x6b);\n                *(uVar46 + 0x882784de) = *(uVar46 + 0x882784de);\n            } while( true );\n        }\n        uVar56 = (uVar50 & 0x1f) % 0x11;\n        uVar13 = ((puVar52 >> (puVar52 & 0xf) & 1) != 0) << 0x10 | puVar52 & 0xffff;\n        uVar13 = (puVar52 & 0xffff0000 | uVar13 >> uVar56 | uVar13 << 0x11 - uVar56) & ~(1 << (puVar32 & 0x1f));\n        uVar13 = uVar13 & 0xffffff00 | uVar13 + 1;\n        uVar46 = *(uVar46 + 0x9afaab);\n        if (!SBORROW4(puVar32, 10)) break;\n        if (SBORROW4(puVar32, 10)) {\n            *(puVar32 + -9) = uVar13;\n            goto code_r0x009b0981;\n        }\n        *(puVar32 + -0xe) = uVar13;\n        *(puVar32 + -0x12) = in_DS;\n        puVar31 = puVar32 + -0x16;\n        puVar32 = puVar32 + -0x16;\n        *puVar31 = in_ES;\n        uVar50 = 0xb0;\n    }\n    *(puVar32 + -9) = uVar13;\ncode_r0x009b0981:\n    cVar55 = 0xa4ecac5e < uVar46;\n    iVar2 = 0;\n    bVar54 = uVar6 != 0;\n    if (bVar54) {\n        for (; (uVar6 >> iVar2 & 1) == 0; iVar2 = iVar2 + 1) {\n        }\n    }\n    if (bVar54) {\n        puVar47 = ppcVar14 - 0x23;\n        uVar13 = puVar47 & 0xffff0000 | CONCAT11((puVar47 >> 8) << 1, puVar47);\n    }\n    else {\n        if (bVar54) {\n            *(puVar32 + -0xc) = 0x9b0d57;\n            uVar13 = fcn.009b0d86();\n            *(puVar32 + -0xc) = in_ES;\n            *((uVar13 & 0xffffff00 | uVar13 + -0x6b + cVar55) + 0x865f9f68) = in_CS;\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        puVar47 = ppcVar14 - 0x23;\n        uVar13 = puVar47 & 0xffff0000 | CONCAT11((puVar47 >> 8) << 1, puVar47);\n    }\n    *(puVar45 + -4) = uVar46 + 0x5b1353a1;\n    return ~(uVar13 >> 0x18 | (uVar13 & 0xff0000) >> 8 | (uVar13 & 0xff00) << 8 | uVar13 << 0x18);\n}\n",
        "token_count": 24698
    },
    "009bb6bb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009bb6c0) overlaps instruction at (ram,0x009bb6bf)\n// \n// WARNING: Removing unreachable block (ram,0x009bb679)\n\nuint32_t fcn.009bb6bb(void)\n\n{\n    uint32_t *puVar1;\n    int32_t *piVar2;\n    uint8_t *puVar3;\n    unkbyte6 Var4;\n    uint8_t uVar5;\n    uint32_t uVar7;\n    int32_t extraout_ECX;\n    uint32_t extraout_ECX_00;\n    ushort uVar8;\n    int32_t iVar9;\n    uint32_t unaff_EBP;\n    uint8_t *unaff_ESI;\n    uint32_t *unaff_EDI;\n    ushort in_CS;\n    char cVar10;\n    bool bVar11;\n    ulong uVar12;\n    uint uStack00000007;\n    uint uStack0000000e;\n    ushort uStack25;\n    uint16_t uStack20;\n    uchar uStack6;\n    uchar uStack5;\n    uchar uStack4;\n    uchar uStack3;\n    uchar uStack2;\n    uchar uStack1;\n    char *pcVar6;\n    \ncode_r0x009bb60e:\n    do {\n        bVar11 = *0x10 == 0x19;\n        uStack3 = uStack25;\n        uStack2 = uStack25 >> 8;\n        if (&stack0x00000004 < 0x1d || bVar11) {\n            uStack20 = (bVar11 || SBORROW4(&stack0x00000004, 0x1d) != &stack0xffffffe7 < 0) | 0xf100;\n        }\n        else {\n            uStack20 = (bVar11 || &stack0x00000004 < 0x1d) | 0xf100;\n        }\n        while( true ) {\n            uStack00000007 = 0x9bb68a;\n            uVar12 = func_0x009bb699();\n            puVar3 = (uVar12 >> 0x20) + 0x15a25730;\n            *puVar3 = *puVar3 ^ uVar12 >> 8;\n            uVar5 = *puVar3;\n            if (uVar5 == 0) break;\n            out(0x75, uVar12);\n            uVar7 = in(0x8c);\n            if (uVar5 < '\\x01') {\n                puVar1 = unaff_ESI + -0xc;\n                out(*unaff_ESI, uVar7 * *puVar1 >> 0x20);\n                unaff_EBP = unaff_EBP | *(unaff_ESI + -0x62);\n                unaff_ESI = unaff_ESI + 1;\n                if (0 < unaff_EBP) goto code_r0x009bb60e;\n                cVar10 = '\\0';\n                Var4 = *((uVar7 * *puVar1 >> 0x20) + -0x3f + (extraout_ECX_00 & 0xffff00ff) * 4);\n                uStack4 = 0x93;\n                uStack3 = 0xb5;\n                uStack2 = 0x9b;\n                uStack1 = 0;\n                uVar12 = fcn.009bb6bb();\n                iVar9 = uVar12 >> 0x20;\n                *(extraout_ECX + -0x37) = *(extraout_ECX + -0x37) >> 1 | cVar10 << 7;\n                uVar8 = uVar12 >> 0x20;\n                out(uVar8, uVar12);\n                unaff_ESI = Var4 - *(iVar9 + 0xf);\n                if ((POPCOUNT(unaff_ESI & 0xff) & 1U) == 0) {\n                    unaff_ESI[0x27d48d1d] = unaff_ESI[0x27d48d1d] - 0x18;\n                    if (extraout_ECX == 0) {\n                        uVar5 = in(uVar8);\n                        pcVar6 = uVar12 & 0xffffff00 | uVar5;\n                        *pcVar6 = *pcVar6 + uVar5;\n                        *unaff_EDI = *unaff_EDI;\n                        in(uVar8);\n                    }\n                    uStack4 = 0x1c;\n                    uStack3 = 0xbd;\n                    uStack2 = 0x9b;\n                    uStack1 = 0;\n                    uVar7 = fcn.009bba10();\n                    return uVar7;\n                }\n                piVar2 = iVar9 + 0x1bec83fa;\n                *piVar2 = *piVar2 + -1;\n            }\n        }\n        if (extraout_ECX_00 == 1 || uVar5 != 0) {\n            uStack2 = in_CS;\n            uStack1 = in_CS >> 8;\n            uStack6 = 0x9d;\n            uStack5 = 0xb6;\n            uStack4 = 0x9b;\n            uStack3 = 0;\n            func_0x4488e8eb();\n            uStack0000000e = 0x9bb730;\n            uVar7 = fcn.009bb70f();\n            *unaff_EDI = uVar7;\n            return uVar7 & 0xffffff00 | *unaff_ESI;\n        }\n    } while( true );\n}\n",
        "token_count": 1226
    },
    "009bb70f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Removing unreachable block (ram,0x009bb87d)\n// WARNING: Removing unreachable block (ram,0x009bb8cf)\n// WARNING: Removing unreachable block (ram,0x009bb910)\n// WARNING: Removing unreachable block (ram,0x009bb8df)\n// WARNING: Removing unreachable block (ram,0x009bb8fa)\n// WARNING: Removing unreachable block (ram,0x009bb913)\n// WARNING: Removing unreachable block (ram,0x009bb93b)\n// WARNING: Removing unreachable block (ram,0x009bb992)\n// WARNING: Removing unreachable block (ram,0x009bb954)\n// WARNING: Removing unreachable block (ram,0x009bb95c)\n// WARNING: Removing unreachable block (ram,0x009bb995)\n// WARNING: Removing unreachable block (ram,0x009bb977)\n// WARNING: Removing unreachable block (ram,0x009bb961)\n// WARNING: Removing unreachable block (ram,0x009bb986)\n// WARNING: Removing unreachable block (ram,0x009bb988)\n// WARNING: Removing unreachable block (ram,0x009bb9b3)\n// WARNING: Removing unreachable block (ram,0x009bb967)\n// WARNING: Removing unreachable block (ram,0x009bb8e1)\n// WARNING: Removing unreachable block (ram,0x009bb7c2)\n\nvoid fcn.009bb70f(void)\n\n{\n    int32_t iVar1;\n    int32_t in_EAX;\n    uint32_t unaff_EBX;\n    uint32_t uVar2;\n    int32_t unaff_ESI;\n    bool in_ZF;\n    \n    if (in_ZF) {\n        uVar2 = unaff_EBX >> 0x18 | (unaff_EBX & 0xff0000) >> 8 | (unaff_EBX & 0xff00) << 8 | unaff_EBX << 0x18;\n    }\n    else {\n        uVar2 = unaff_EBX >> 0x18 | (unaff_EBX & 0xff0000) >> 8 | (unaff_EBX & 0xff00) << 8 | unaff_EBX << 0x18;\n    }\n    uVar2 = uVar2 >> 6;\n    if ((POPCOUNT(uVar2 & 0xff) & 1U) == 0) {\n        iVar1 = 0x1f;\n        if (uVar2 != 0) {\n            for (; uVar2 >> iVar1 == 0; iVar1 = iVar1 + -1) {\n            }\n        }\n    }\n    else {\n        iVar1 = 0x1f;\n        if (uVar2 != 0) {\n            for (; uVar2 >> iVar1 == 0; iVar1 = iVar1 + -1) {\n            }\n        }\n    }\n    *(unaff_ESI + -4) = *(in_EAX + 0x9b12ab) + -0x5a895a9;\n    return;\n}\n",
        "token_count": 673
    },
    "009bb999": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009bb9b3) overlaps instruction at (ram,0x009bb9b2)\n// \n// WARNING: Removing unreachable block (ram,0x009bb9c5)\n// WARNING: Removing unreachable block (ram,0x009bb9c7)\n// WARNING: Removing unreachable block (ram,0x009bb9ce)\n// WARNING: Removing unreachable block (ram,0x009bb9e9)\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.009bb999(void)\n\n{\n    int32_t *piVar1;\n    uint16_t uVar2;\n    char cVar3;\n    code *pcVar4;\n    uint32_t uVar5;\n    uint uVar6;\n    uchar *in_EAX;\n    uint32_t uVar7;\n    int32_t extraout_ECX;\n    ushort extraout_DX;\n    uint8_t uVar8;\n    uint32_t unaff_EBX;\n    uint *puVar9;\n    uint *unaff_EBP;\n    uint *unaff_ESI;\n    uint *unaff_EDI;\n    bool bVar10;\n    uint8_t in_AF;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    ushort in_FPUControlWord;\n    uint64_t uVar11;\n    uint uStack14;\n    uchar uStack10;\n    uchar uStack9;\n    uint16_t uStack8;\n    uint *puStack6;\n    \n    if ((-1 < &puStack6) && (-1 >= &puStack6)) {\n        uVar7 = in_EAX;\n        do {\n            uVar7 = uVar7 | 0xd017e49d;\n            uVar8 = unaff_EBX | *(unaff_ESI + 0x18299ac3);\n            unaff_EBX = unaff_EBX & 0xffffff00 | uVar8;\n        } while (uVar8 < '\\0');\n        uVar2 = *unaff_ESI;\n        *unaff_ESI = *unaff_ESI;\n        bVar10 = 9 < (uVar7 & 0xf) | in_AF;\n        uVar5 = CONCAT11((uVar7 >> 8) + bVar10, uVar7 + bVar10 * '\\x06') & 0xff0f;\n        in_EAX = uVar7 & 0xffff0000 | uVar5;\n        if (!bVar10 && (uVar7 & 3) - (uVar2 & 3) < 1) {\n            puVar9 = &uStack10;\n            uStack10 = SUB41(unaff_EBP, 0);\n            uStack9 = unaff_EBP >> 8;\n            uStack8 = unaff_EBP >> 0x10;\n            cVar3 = '\\x03';\n            do {\n                unaff_EBP = unaff_EBP + -1;\n                puVar9 = puVar9 + -1;\n                *puVar9 = *unaff_EBP;\n                cVar3 = cVar3 + -1;\n            } while ('\\0' < cVar3);\n            in_EAX = uVar7 & 0xffff0000 | uVar5 & 0xffffff00 | *unaff_ESI;\n            unaff_ESI = unaff_ESI + 1;\n        }\n    }\n    uVar8 = 0xfffffff7 < &puStack6;\n    if ((uVar8 || *0x10 == 0x6) && (!uVar8 && *0x10 != 0x6)) {\n        uVar11 = fcn.009bb9fa();\n        in_EAX = (uVar11 + -0x127ce5a4) - uVar8;\n        uVar11 = uVar11 & 0xffffffff00000000 | ZEXT48(in_EAX);\n        if (in_EAX != NULL) {\n            *in_EAX = unaff_EBX >> 8;\n            while( true ) {\n                puVar9 = puStack6;\n                *unaff_EDI = *unaff_ESI;\n                uVar8 = uVar11 % 0x47;\n                bVar10 = (POPCOUNT(uVar8) & 1U) == 0;\n                out(uVar11 >> 0x20, uVar8);\n                uVar8 = (CONCAT11(uVar11 / 0x47, puStack6) >> (puStack6 & 0xf) & 1) != 0;\n                if ((!bVar10) && (bVar10)) break;\n                puStack6 = 0x9bb96c;\n                uVar11 = fcn.009bb999();\n                piVar1 = uVar11 + 0x3888791e;\n                *piVar1 = (*piVar1 - extraout_ECX) - uVar8;\n                unaff_ESI = puVar9;\n                unaff_EDI = unaff_EDI + 1;\n            }\n            pcVar4 = swi(3);\n            uVar6 = (*pcVar4)();\n            return uVar6;\n        }\n    }\n    *((in_EAX & 0xffff0000 | in_EAX + (in_EAX >> 8) * 'I') + 0x5d68fe4b) = in_FPUControlWord;\n    uStack10 = 0x85;\n    uStack9 = 0xab;\n    uStack8 = 0x9a;\n    fcn.009aab25();\n    if (unaff_EDI + -0x1e5658be < 0) {\n        uStack8 = (in_ID & 1) * 0x20 | (in_VIP & 1) * 0x10 | (in_VIF & 1) * 8 | (in_AC & 1) * 4;\n    }\n    else {\n        uStack8 = (in_ID & 1) * 0x20 | (in_VIP & 1) * 0x10 | (in_VIF & 1) * 8 | (in_AC & 1) * 4;\n    }\n    uStack10 = 0x9a;\n    uStack9 = 0;\n    fcn.009aabf0();\n    uVar6 = in(extraout_DX);\n    return uVar6;\n}\n",
        "token_count": 1400
    },
    "009bb9fa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "009bba10": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009bb5a7) overlaps instruction at (ram,0x009bb5a5)\n// \n// WARNING: Removing unreachable block (ram,0x009bb586)\n// WARNING: Removing unreachable block (ram,0x009bb679)\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.009bba10(ushort param_1)\n\n{\n    uint8_t *puVar1;\n    uint8_t uVar2;\n    char *pcVar3;\n    uint32_t uVar4;\n    int32_t extraout_ECX;\n    uint32_t extraout_ECX_00;\n    ushort uVar5;\n    int32_t iVar6;\n    uint32_t unaff_EBP;\n    uint8_t *puVar7;\n    uint32_t unaff_ESI;\n    uint32_t *puVar8;\n    int32_t unaff_EDI;\n    char cVar9;\n    bool bVar10;\n    uint8_t in_AF;\n    ulong uVar11;\n    uint uStack0000000a;\n    ushort auStack31 [2];\n    uint16_t uStack26;\n    uchar uStack10;\n    uchar uStack9;\n    uchar uStack8;\n    uchar uStack7;\n    ushort uStack6;\n    uint uStack4;\n    \n    uStack4 = CONCAT22(param_1, unaff_EDI >> 0x10);\n    puVar8 = unaff_EDI + -1;\n    do {\n        cVar9 = '\\0';\n        uStack8 = 0x93;\n        uStack7 = 0xb5;\n        uStack6 = 0x9b;\n        uVar11 = fcn.009bb6bb();\n        iVar6 = uVar11 >> 0x20;\n        *(extraout_ECX + -0x37) = *(extraout_ECX + -0x37) >> 1 | cVar9 << 7;\n        uVar5 = uVar11 >> 0x20;\n        out(uVar5, uVar11);\n        bVar10 = unaff_ESI < *(iVar6 + 0xf);\n        puVar7 = unaff_ESI - *(iVar6 + 0xf);\n        if ((POPCOUNT(puVar7 & 0xff) & 1U) == 0) {\n            puVar7[0x27d48d1d] = puVar7[0x27d48d1d] - 0x18;\n            if (extraout_ECX == 0) {\n                uVar2 = in(uVar5);\n                pcVar3 = uVar11 & 0xffffff00 | uVar2;\n                *pcVar3 = *pcVar3 + uVar2;\n                *puVar8 = *puVar8;\n                in(uVar5);\n            }\n            uStack8 = 0x1c;\n            uStack7 = 0xbd;\n            uStack6 = 0x9b;\n            uVar4 = fcn.009bba10();\n            return uVar4;\n        }\ncode_r0x009bb620:\n        *(iVar6 + 0x1bec83fa) = *(iVar6 + 0x1bec83fa) + -1;\n        uVar11 = func_0x009bb699();\n        iVar6 = uVar11 >> 0x20;\n        puVar1 = iVar6 + 0x15a25730;\n        *puVar1 = *puVar1 ^ uVar11 >> 8;\n        uVar2 = *puVar1;\n        if (uVar2 == 0) {\n            if (extraout_ECX_00 == 1 || uVar2 != 0) {\n                uStack10 = 0x9d;\n                uStack9 = 0xb6;\n                uStack8 = 0x9b;\n                uStack7 = 0;\n                func_0x4488e8eb();\n                uStack0000000a = 0x9bb730;\n                uVar4 = fcn.009bb70f();\n                *puVar8 = uVar4;\n                return uVar4 & 0xffffff00 | *puVar7;\n            }\ncode_r0x009bb60e:\n            uVar4 = &uStack4 + 2;\n            bVar10 = *0x10 == 0x1f;\n            uStack9 = auStack31[0];\n            uStack8 = auStack31[0] >> 8;\n            if (uVar4 < 0x1d || bVar10) {\n                uStack26 = (bVar10 || SBORROW4(uVar4, 0x1d) != auStack31 < 0) | 0xf100;\n            }\n            else {\n                uStack26 = (bVar10 || uVar4 < 0x1d) | 0xf100;\n            }\ncode_r0x009bb61b:\n            bVar10 = &stack0x00000017 < 0x1b;\n            goto code_r0x009bb620;\n        }\n        out(0x75, uVar11);\n        uVar4 = in(0x8c);\n        if ('\\0' < uVar2) goto code_r0x009bb61b;\n        iVar6 = uVar4 * *(puVar7 + -0xc) >> 0x20;\n        out(*puVar7, uVar4 * *(puVar7 + -0xc) >> 0x20);\n        unaff_EBP = unaff_EBP | *(puVar7 + -0x62);\n        in_AF = 9U < bVar10 | in_AF;\n        uVar2 = bVar10 + in_AF * -6;\n        if (0 < unaff_EBP) {\n            uStack4._0_3_ = CONCAT12(uVar2 + (0x9f < uVar2 | in_AF * (uVar2 < 6)) * -0x60, uStack4);\n            uStack4 = uStack4 & 0xff000000 | uStack4;\n            puVar7 = puVar7 + 1;\n            goto code_r0x009bb60e;\n        }\n        unaff_ESI = *(iVar6 + -0x3f + (extraout_ECX_00 & 0xffff00ff) * 4);\n    } while( true );\n}\n",
        "token_count": 1395
    },
    "009cd01e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n\nvoid __fastcall fcn.009cd01e(uint8_t param_1, int32_t param_2)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t extraout_ECX;\n    uint16_t uVar4;\n    int32_t unaff_EBX;\n    int32_t unaff_EBP;\n    uint32_t *unaff_ESI;\n    int32_t unaff_EDI;\n    uint8_t in_AF;\n    bool bVar5;\n    char cVar6;\n    float10 extraout_ST0;\n    unkbyte6 Var7;\n    uint var_bp_4h;\n    \n    cVar6 = SBORROW4(&stack0x00000004, 0xc);\n    bVar5 = *0x10 == 0x8;\n    *unaff_ESI = param_2 << (param_1 & 0x1f) | *(unaff_EBP + -4);\n    uVar3 = fcn.009cd097();\n    *(unaff_EBP + -4) = uVar3;\n    if (!bVar5) {\n        iVar1 = 0;\n        uVar4 = *(unaff_EBX + unaff_ESI);\n        if (uVar4 != 0) {\n            for (; (uVar4 >> iVar1 & 1) == 0; iVar1 = iVar1 + 1) {\n            }\n        }\n        fcn.009cd01e();\n        *(unaff_EDI + 0x7958742) = *(unaff_EDI + 0x7958742) << 1;\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    do {\n        func_0x009cd135();\n        pcVar2 = swi(4);\n        if (cVar6 == '\\x01') {\n            (*pcVar2)();\n        }\n        Var7 = fcn.009cd159();\n        *(extraout_ECX + -0x37) = ROUND(extraout_ST0);\n        out(Var7 >> 0x20, Var7);\n        in_AF = 9 < (Var7 & 0xf) | in_AF;\n        cVar6 = SBORROW4(0x99c7cf, *0x7fba4f83) != SBORROW4(0x99c7cf - *0x7fba4f83, in_AF);\n    } while( true );\n}\n",
        "token_count": 549
    },
    "009cd097": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.009cd097(void)\n\n{\n    code *pcVar1;\n    int32_t unaff_ESI;\n    uint *unaff_EDI;\n    uint uStack0000000c;\n    \n    uStack0000000c = 0x9cd0c8;\n    fcn.009cd0f9();\n    *unaff_EDI = *(unaff_ESI + 4);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 108
    },
    "009cd3bd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n\nvoid fcn.009cd3bd(void)\n\n{\n    uint *in_EAX;\n    char extraout_CL;\n    int32_t unaff_EBP;\n    uint unaff_ESI;\n    \n    *in_EAX = unaff_ESI;\n    fcn.009cd49f();\n    // WARNING: Call to offcut address within same function\n    func_0x009cd3ec();\n    *(unaff_EBP + 0xf042464) = *(unaff_EBP + 0xf042464) - extraout_CL;\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 146
    },
    "009cd49f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n\nvoid fcn.009cd49f(void)\n\n{\n    char extraout_CL;\n    int32_t unaff_EBP;\n    uint uStack00000004;\n    \n    // WARNING: Call to offcut address within same function\n    uStack00000004 = 0x9cd3eb;\n    func_0x009cd3ec();\n    *(unaff_EBP + 0xf042464) = *(unaff_EBP + 0xf042464) - extraout_CL;\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 135
    },
    "009cd632": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "009e5221": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009e52b7) overlaps instruction at (ram,0x009e52b5)\n// \n// WARNING: Control flow encountered bad instruction data\n// WARNING: Possible PIC construction at 0x009e52d4: Changing call to branch\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Removing unreachable block (ram,0x009e528f)\n// WARNING: Removing unreachable block (ram,0x009e5238)\n\nuint64_t fcn.009e5221(void)\n\n{\n    uint32_t *puVar1;\n    uint8_t *puVar2;\n    uint8_t uVar3;\n    uint32_t uVar5;\n    int32_t iVar6;\n    uint8_t extraout_CL;\n    uint8_t uVar9;\n    uint32_t extraout_ECX;\n    uint32_t extraout_ECX_00;\n    uint32_t uVar8;\n    uint32_t extraout_ECX_01;\n    int32_t extraout_ECX_02;\n    uint8_t uVar11;\n    uint32_t uVar10;\n    uint32_t unaff_EBX;\n    uint32_t uVar12;\n    uint *puVar13;\n    uint8_t **ppuVar14;\n    uchar *puVar15;\n    uint *puVar16;\n    uchar *puVar17;\n    int32_t unaff_EBP;\n    uint *unaff_ESI;\n    uint *puVar18;\n    uint *puVar19;\n    uint uVar20;\n    uint *puVar21;\n    bool bVar22;\n    bool bVar23;\n    char cVar24;\n    char cVar25;\n    float10 fVar26;\n    float10 extraout_ST0;\n    float10 extraout_ST1;\n    float10 in_ST2;\n    float10 in_ST3;\n    float10 in_ST4;\n    float10 in_ST5;\n    float10 in_ST6;\n    float10 in_ST7;\n    uint64_t uVar27;\n    ulong uVar28;\n    uint32_t uVar4;\n    unkbyte3 Var7;\n    \n    fcn.009e527d();\n    uVar12 = extraout_ECX;\n    puVar13 = &stack0x00000008;\n    do {\n        while( true ) {\n            puVar1 = unaff_ESI + 1;\n            bVar22 = CARRY4(*puVar1, uVar12);\n            cVar25 = SCARRY4(*puVar1, uVar12);\n            *puVar1 = *puVar1 + uVar12;\n            cVar24 = *puVar1 < 0;\n            bVar23 = *puVar1 == 0;\n            puVar13[-1] = 0x9e525a;\n            uVar27 = int.009e5284(*puVar13);\n            uVar10 = uVar27 >> 0x20;\n            puVar16 = puVar13 + -1;\n            puVar13[-1] = unaff_EBX;\n            *(unaff_EBP + 0x14) = extraout_ST0;\n            out(0x56, uVar27);\n            puVar19 = unaff_ESI + 1;\n            uVar12 = uVar27 & 0xffffff00;\n            uVar5 = uVar12 | *unaff_ESI;\n            puVar21 = 0xeef73186;\n            LOCK();\n            if (!bVar22 && !bVar23) break;\n            ppuVar14 = puVar13 + -2;\n            puVar13 = puVar13 + -2;\n            *ppuVar14 = puVar19;\n            uVar12 = extraout_ECX_00;\n            unaff_ESI = puVar19;\n            in_ST2 = in_ST3;\n            in_ST3 = in_ST4;\n            in_ST4 = in_ST5;\n            in_ST5 = in_ST6;\n            in_ST6 = in_ST7;\n        }\n        uVar8 = 0xd8d14b0e;\n        if (bVar23 || cVar25 != cVar24) {\n            if (bVar23) {\n                puVar18 = *(puVar13 + -1);\n                unaff_EBP = *(puVar13 + 3);\n                uVar12 = *(puVar13 + 0xb);\n                *puVar18 = *(puVar13 + 0xf);\n                puVar15 = puVar13 + 0x17;\n    // WARNING: Call to offcut address within same function\n                *(puVar13 + 0x17) = 0x9e528b;\n                uVar28 = func_0x009e528c();\n                uVar10 = uVar28 >> 0x20;\n                unaff_EBX = uVar12 & 0xffff0000 | *0x48f6640;\n                puVar13 = 0x1;\n                puVar21 = CONCAT31(uVar28 >> 8, 0x27) & 0xffffff01;\n                uVar8 = extraout_ECX_01;\n                while (puVar13 != NULL) {\n                    *(puVar15 + -3) = unaff_EBX;\n                    puVar17 = puVar15 + -7;\n    // WARNING: Call to offcut address within same function\n                    *(puVar15 + -7) = 0x9e5303;\n                    iVar6 = func_0x009e5304();\n                    puVar2 = unaff_EBP + -0x75fbdb9c;\n                    *puVar2 = *puVar2 >> 1 | *puVar2 << 7;\n                    *(iVar6 + 0x18 + puVar18) = extraout_CL;\n                    *(unaff_EBP + 8) = *(unaff_EBP + 8) + 1;\n                    *(puVar17 + -4) = 0x9e5317;\n                    uVar28 = fcn.009e532c();\n                    puVar19 = uVar28;\n                    uVar10 = (uVar28 >> 0x20) + extraout_ECX_02;\n                    uVar8 = extraout_ECX_02 - 1;\n                    puVar21 = 0x3784157e;\n                    puVar17[7] = 0x15;\n                    puVar16 = puVar17 + 0x10;\n                    *(puVar17 + 0x10) = 0x9e52d9;\n                    puVar13 = puVar18;\ncode_r0x009e52b8:\n                    *puVar16 = *puVar16;\n                    puVar15 = puVar16 + 3;\n                    puVar18 = puVar19;\n                }\n                uVar20 = *(puVar15 + 1);\n                *(puVar15 + 1) = puVar21;\n                *(puVar15 + -3) = uVar8;\n                *(puVar15 + -7) = uVar10;\n                *(puVar15 + -0xb) = unaff_EBX;\n                *(puVar15 + -0xf) = puVar15 + 5;\n                *(puVar15 + -0x13) = unaff_EBP;\n                *(puVar15 + -0x17) = puVar18;\n                *(puVar15 + -0x1b) = uVar20;\n                *(puVar15 + -0x19) = puVar21;\n                return CONCAT44(uVar10, puVar21);\n            }\n            puVar21 = uVar5 + 1;\n            puVar13 = puVar21;\n            goto code_r0x009e52b8;\n        }\n        *(unaff_EBP + -0x5e) = *(unaff_EBP + -0x5e) >> 0xb;\n        uVar4 = uVar27 >> 0x20 & 0x4bff;\n        uVar10 = uVar10 & 0xffff0000 | uVar4;\n        if ((uVar27 & 0x4b0000000000) != 0) {\n            uVar10 = CONCAT31(uVar10 >> 8, 0x59);\n            uVar11 = uVar4 >> 8;\n            bVar22 = *0xeef7318e < 0;\n            *0xeef7318e = *0xeef7318e << 1;\n            *0x2ec5244e = uVar12 >> 8;\n            puVar2 = uVar10 + 0xe7f9153;\n            bVar23 = CARRY1(*puVar2, uVar11) || CARRY1(*puVar2 + uVar11, bVar22);\n            *0x2ec52451 = uVar5;\n            *puVar2 = *puVar2 + uVar11 + bVar22;\n            fVar26 = extraout_ST1;\n            do {\n                *((unaff_EBX & 0xffff0000 | CONCAT11(uVar11, unaff_EBX)) + 0x642f7513) = ROUND(fVar26);\n                uVar3 = in(uVar10);\n                uVar4 = uVar5 & 0xffffff00 | uVar3;\n                uVar5 = uVar10 & 0xffffff00;\n                uVar12 = uVar4 + 0x63fb1bb2;\n                uVar10 = uVar12 + bVar23;\n                cVar24 = *(uVar8 + uVar10 * 8);\n                iVar6 = (uVar5 | *(unaff_EBP + -0x12)) + 1;\n                LOCK();\n                uVar20 = in(uVar10);\n                *puVar21 = uVar20;\n                puVar21 = 0xb214a098;\n                uVar8 = (uVar8 & 0xffff0000 |\n                        CONCAT11(((uVar8 >> 8) - cVar24) - (0x9c04e44d < uVar4 || CARRY4(uVar12, bVar23)), uVar8)) + 1;\n                out(uVar10, iVar6);\n                puVar2 = uVar10 + 0x2782555f;\n                uVar9 = uVar8 >> 8;\n                bVar23 = CARRY1(*puVar2, uVar9);\n                uVar3 = *puVar2;\n                *puVar2 = *puVar2 + uVar9;\n                Var7 = iVar6 >> 8;\n                uVar5 = CONCAT31(Var7, 0xaa);\n                fVar26 = in_ST2;\n                in_ST2 = in_ST3;\n                in_ST3 = in_ST4;\n                in_ST4 = in_ST5;\n                in_ST5 = in_ST6;\n                in_ST6 = in_ST7;\n            } while (SCARRY1(uVar3, uVar9) == *puVar2 < '\\0');\n            puVar2 = unaff_ESI + 0x15;\n            *puVar2 = *puVar2 >> 2 | *puVar2 << 6;\n            *0x2ec5244a = puVar19;\n            return CONCAT44(uVar10, CONCAT31(Var7, 0xaa)) ^ 0x29;\n        }\n        uVar12 = *0xd8d14ae7;\n        puVar13 = puVar13 + -1;\n        unaff_ESI = puVar19;\n        in_ST2 = in_ST3;\n        in_ST3 = in_ST4;\n        in_ST4 = in_ST5;\n        in_ST5 = in_ST6;\n        in_ST6 = in_ST7;\n    } while (uVar10 + 1 < 0);\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 2570
    },
    "009e6c29": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009e6c84) overlaps instruction at (ram,0x009e6c81)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nuint32_t __fastcall fcn.009e6c29(uint param_1, uint32_t param_2)\n\n{\n    uint32_t *puVar1;\n    uint8_t *puVar2;\n    uchar *puVar3;\n    uint8_t uVar4;\n    uint32_t uVar5;\n    char *in_EAX;\n    uint32_t uVar6;\n    uint32_t extraout_EDX;\n    uint32_t unaff_EBX;\n    ushort *puVar7;\n    uint32_t *puVar8;\n    int32_t unaff_EBP;\n    int32_t unaff_EDI;\n    char cVar9;\n    uint8_t in_AF;\n    bool bVar10;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    ulong uVar11;\n    char *pcStack00000004;\n    uint32_t uStack0000000c;\n    char *pcStack00000014;\n    uint32_t uStack00000018;\n    uchar uStack0000001b;\n    char cStack0000001c;\n    ushort uStack0000001d;\n    uchar uStack0000001f;\n    int32_t in_stack_00000024;\n    uint8_t in_stack_00000028;\n    \n    uStack00000018 = in_stack_00000028;\n    while( true ) {\n        pcStack00000014 = in_EAX;\n        do {\n            cStack0000001c = *pcStack00000014;\n            param_2 = param_2 & 0xffffff00;\n            pcStack00000014 = pcStack00000014 + 1;\n            uStack0000000c = &stack0x00000020 & 0xff | unaff_EDI << 8;\n        } while (cStack0000001c != '\\0');\n        pcStack00000004 = in_EAX;\n        if (cStack0000001c != '\\0') break;\n        cStack0000001c = 0x6f;\n        uStack0000001d = 0x9e6c;\n        uStack0000001f = 0;\n        uVar11 = func_0x009e6cca();\n        param_2 = uVar11 >> 0x20;\n        puVar1 = unaff_EBP + 0x1aaf5c35;\n        puVar3 = *puVar1;\n        *puVar1 = *puVar1 - &stack0x0000001b;\n        uStack00000018 = CONCAT22(uStack0000001d, CONCAT11(cStack0000001c, uStack0000001b));\n        uVar5 = uVar11 & 0xffffff00;\n        uVar4 = -(puVar3 < &stack0x0000001b) + 0x39;\n        uVar6 = uVar5 | uVar4;\n        out(*in_EAX, uVar11 >> 0x20);\n        if (-1 < uVar4) {\n            *(unaff_EBP + 0x38082464) = *(unaff_EBP + 0x38082464) - uStack00000018;\n            puVar2 = (unaff_EBX & in_EAX) + 0x66;\n            *puVar2 = *puVar2 | uVar11 >> 0x20;\n            if (*puVar2 != 0) {\n                uVar6 = 0;\n            }\n            return uVar6;\n        }\n        unaff_EBX = 0x24648d50;\n        in_EAX = uVar5 | -(puVar3 < &stack0x0000001b) + 0x8f;\n    }\n    uStack0000000c = in_stack_00000024;\n    bVar10 = pcStack00000014 < 0;\n    uStack0000001d = param_2 >> 8;\n    uStack0000001f = param_2 >> 0x18;\n    puVar7 = &stack0x00000028;\n    pcStack00000014 = &stack0x00000028;\n    uStack00000018 = unaff_EBX;\n    if (bVar10) {\n        if (!bVar10) {\n            do {\n                cVar9 = '\\0';\n                *puVar7 = *puVar7;\n                *(puVar7 + -1) = 0x9e9f46;\n                fcn.009e9f76();\n                puVar2 = (extraout_EDX - 0x6b) + in_stack_00000024 * 8;\n                *puVar2 = *puVar2 >> 1 | cVar9 << 7;\n                *(puVar7 + 5) = *(puVar7 + 5) + -1;\n                puVar8 = puVar7 + 1;\n                puVar7 = puVar7 + 1;\n                *puVar8 = (in_NT & 1) * 0x4000 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | (extraout_EDX < 0) * 0x80 |\n                          (extraout_EDX == 0) * 0x40 | (in_AF & 1) * 0x10 |\n                          ((POPCOUNT(extraout_EDX & 0xff) & 1U) == 0) * 4 | (in_ID & 1) * 0x200000 |\n                          (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n            } while( true );\n        }\n        return 0xffffffff;\n    }\n    fcn.009e9ebe();\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 1377
    },
    "009b8bd0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nvoid fcn.009b8bd0(void)\n\n{\n    int32_t *piVar1;\n    uint32_t *puVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint32_t extraout_ECX;\n    uint extraout_EDX;\n    uint extraout_EDX_00;\n    uint unaff_EBP;\n    uchar in_CF;\n    ushort uVar7;\n    uchar uStack0000001c;\n    uchar uStack0000001d;\n    int32_t *in_stack_00000020;\n    uint uStack12;\n    uchar uStack8;\n    uchar uStack7;\n    uchar uStack6;\n    uchar uStack5;\n    uchar uStack4;\n    uchar uStack3;\n    ushort uStack2;\n    \n    uStack4 = 0xbf;\n    uStack3 = 0x97;\n    uStack2 = 0x9b;\n    fcn.009b97a4();\n    uStack2 = unaff_EBP;\n    uVar7 = unaff_EBP >> 0x10;\n    iVar4 = CONCAT22(uVar7, uStack2);\n    uStack6 = extraout_EDX;\n    uStack5 = extraout_EDX >> 8;\n    uStack4 = extraout_EDX >> 0x10;\n    uStack3 = extraout_EDX >> 0x18;\n    uStack7 = uStack5;\n    uStack8 = uStack6;\n    uStack12 = 0x9b9853;\n    iVar5 = fcn.009b981e();\n    uStack0000001c = iVar5;\n    uStack0000001d = iVar5 >> 8;\n    fcn.009e6c45();\n    uStack4 = unaff_EBP;\n    uStack3 = unaff_EBP >> 8;\n    uStack6 = iVar5 >> 0x10;\n    uStack5 = iVar5 >> 0x18;\n    uStack12 = extraout_EDX_00;\n    uStack8 = uStack0000001c;\n    uStack7 = uStack0000001d;\n    uStack2 = uVar7;\n    iVar6 = fcn.009e7e5c();\n    *in_stack_00000020 = iVar6;\n    *(in_stack_00000020 + 1) = *(iVar5 << 8 | CONCAT14(in_CF, iVar5) >> 0x19);\n    *(iVar6 + 0x74) = *(iVar6 + 0x74) & &stack0xfffffff4;\n    piVar1 = iVar4 + -0x50a5b7cb;\n    *piVar1 = *piVar1 + (extraout_ECX & 0xffff0000 | CONCAT11(0x71, extraout_ECX)) +\n              (iVar6 + 99 + (0x3c < iVar6) < 0xeb);\n    puVar2 = CONCAT31(iVar6 >> 8, *0x712d8567) + -0x799cc1e5;\n    *puVar2 = *puVar2 | 0x799ccc0e;\n    pcVar3 = swi(1);\n    (*pcVar3)();\n    return;\n}\n",
        "token_count": 735
    },
    "009b9a16": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Variable defined which should be unmapped: arg_bp_8h\n\nvoid __cdecl fcn.009b9a16(uint arg_bp_8h)\n\n{\n    int32_t extraout_ECX;\n    uint var_ch;\n    \n    rdtsc();\n    fcn.009eb3a2();\n    *(extraout_ECX + 0x46cbac3e) = *(extraout_ECX + 0x46cbac3e) ^ 0x84;\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 135
    },
    "009eb3a2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n\nvoid fcn.009eb3a2(int16_t *param_1)\n\n{\n    uint uVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t extraout_ECX;\n    int32_t extraout_ECX_00;\n    int32_t iVar4;\n    int32_t unaff_EBX;\n    int32_t unaff_EBP;\n    int32_t unaff_ESI;\n    uchar uVar5;\n    char cVar6;\n    char cVar7;\n    float10 extraout_ST0;\n    unkbyte6 Var8;\n    int32_t unaff_retaddr;\n    ushort uStack00000009;\n    uchar uStack0000000b;\n    \n    iVar3 = fcn.009eb379();\n    *(unaff_EBP + -0x18) = *(iVar3 + 0x7c);\n    if (unaff_ESI + extraout_ECX != 0) {\n        fcn.009eb51f();\n        iVar3 = *(unaff_ESI + extraout_ECX + -4) + unaff_EBX;\n        iVar3 = iVar3 - (iVar3 >> 0x1f);\n        while( true ) {\n            iVar4 = *(*(unaff_retaddr + -0x10) + (iVar3 >> 1) * 4);\n            cVar7 = SCARRY4(iVar4, *(unaff_retaddr + 8));\n            iVar4 = iVar4 + *(unaff_retaddr + 8);\n            cVar6 = iVar4 < 0;\n            uVar5 = iVar4 == 0;\n            uStack00000009 = 0x9eb6;\n            uStack0000000b = 0;\n            fcn.009b89b0();\n            uStack00000009 = 0x9eb6;\n            uStack0000000b = 0;\n            Var8 = fcn.009eb70f();\n            out(0x76, Var8);\n            in(0x83);\n            if (!uVar5 && cVar7 == cVar6) break;\n            iVar3 = (iVar3 >> 1) + 1;\n            unaff_retaddr = unaff_retaddr + 1;\n        }\n        uVar1 = in(Var8 >> 0x20);\n        *(unaff_EBX * -0x62) = uVar1;\n        *param_1 = extraout_ST0;\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    *0xacf235c6 = fcn.009ec95c();\n    pcVar2 = swi(0x3c);\n    (*pcVar2)();\n    *(extraout_ECX_00 + -0x4aa5dc20) = *(extraout_ECX_00 + -0x4aa5dc20) & 3;\n    return;\n}\n",
        "token_count": 638
    },
    "009eb4bb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009ec881) overlaps instruction at (ram,0x009ec87c)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nuint32_t __fastcall fcn.009eb4bb(int32_t param_1, uint param_2, uchar param_3)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    uint32_t *puVar3;\n    uint64_t uVar4;\n    uint64_t uVar5;\n    code *pcVar6;\n    uint8_t uVar7;\n    int32_t in_EAX;\n    int16_t *piVar8;\n    int32_t iVar9;\n    uint32_t uVar10;\n    int32_t extraout_ECX;\n    ushort uVar11;\n    int32_t iVar12;\n    int32_t unaff_EBX;\n    uint32_t *puVar13;\n    uchar *puVar14;\n    uchar *puVar15;\n    uchar *puVar16;\n    uchar *puVar17;\n    int16_t **unaff_EBP;\n    int16_t **ppiVar18;\n    uint32_t *puVar19;\n    int16_t **unaff_ESI;\n    int32_t unaff_EDI;\n    int32_t *piVar20;\n    uint8_t uVar21;\n    uint8_t in_AF;\n    bool bVar22;\n    uchar uVar23;\n    bool bVar24;\n    bool bVar25;\n    char cVar26;\n    uint8_t uVar27;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    bool bVar28;\n    char cVar29;\n    uint8_t uVar30;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    float10 extraout_ST0;\n    unkbyte6 Var31;\n    uint var_8h;\n    int16_t **in_stack_fffffffc;\n    \n    piVar20 = unaff_EDI + param_1;\n    piVar8 = in_EAX + param_1;\n    puVar14 = &param_3;\n    puVar13 = unaff_EBX + -1;\n    bVar25 = puVar13 < 0;\n    unaff_EBP[-2] = piVar20;\n    unaff_EBP[-5] = piVar8;\n    while (uVar11 = param_2,  !bVar25) {\n        ppiVar18 = unaff_EBP;\n        if (!bVar25) {\ncode_r0x009eb581:\n            iVar9 = (ppiVar18[-1] + puVar13) - (ppiVar18[-1] + puVar13 >> 0x1f);\n            while( true ) {\n                cVar29 = SCARRY4(*(unaff_EBP[-4] + (iVar9 >> 1) * 2), unaff_EBP[2]);\n                iVar12 = *(unaff_EBP[-4] + (iVar9 >> 1) * 2) + unaff_EBP[2];\n                cVar26 = iVar12 < 0;\n                uVar23 = iVar12 == 0;\n                fcn.009b89b0();\n                Var31 = fcn.009eb70f();\n                out(0x76, Var31);\n                in(0x83);\n                if (!uVar23 && cVar29 == cVar26) break;\n                iVar9 = (iVar9 >> 1) + 1;\n                unaff_EBP = unaff_EBP + 1;\n            }\n            uVar1 = in(Var31 >> 0x20);\n            *(puVar13 * -0x62) = uVar1;\n            *unaff_ESI = extraout_ST0;\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        if (bVar25) {\n            *(unaff_EBX + -0x42) = puVar13 >> 8;\n            fcn.009eb51f();\n            ppiVar18 = unaff_ESI;\n            unaff_ESI = in_stack_fffffffc;\n            goto code_r0x009eb581;\n        }\n        uVar7 = piVar8 % 0x47;\n        piVar8 = uVar7;\n        bVar25 = false;\n        out(uVar11, uVar7);\n    }\n    puVar19 = NULL;\n    bVar25 = false;\n    bVar28 = false;\n    bVar24 = puVar13 < 0;\n    bVar22 = puVar13 == NULL;\n    puVar3 = puVar13;\n    if (bVar24) {\ncode_r0x009eb203:\n        *(puVar14 + 4) =\n             (in_NT & 1) * 0x4000 | bVar28 * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | bVar24 * 0x80 |\n             bVar22 * 0x40 | (in_AF & 1) * 0x10 | ((POPCOUNT(puVar3 & 0xff) & 1U) == 0) * 4 | bVar25 |\n             (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n        *(puVar14 + 4) = *(puVar14 + 4);\n        *(puVar14 + 8) = 0x9eb40b;\n        *0xacf235c6 = fcn.009ec95c();\n        pcVar6 = swi(0x3c);\n        uVar10 = (*pcVar6)();\n        *(extraout_ECX + -0x4aa5dc20) = *(extraout_ECX + -0x4aa5dc20) & 3;\n        return uVar10;\n    }\n    if (!bVar24) goto code_r0x009eb32e;\n    puVar19 = 0x1;\n    out(pe_dos_header, uVar11);\n    uVar10 = in(uVar11);\n    if (bVar24) {\n        uVar2 = *puVar13;\n        uVar4 = CONCAT44(param_2, uVar10);\n        uVar5 = uVar4 / uVar2;\n        uVar10 = uVar5;\n        if (bVar24) {\n            *piVar20 = *piVar20 + -1;\n            in_AF = 9 < ((uVar5 | 0xeb) & 0xf) | in_AF;\n            *(param_1 + 0x20936001) = (*(param_1 + 0x20936001) - uVar4 % uVar2) - in_AF;\n            ppiVar18 = unaff_EBP + 1;\n            while( true ) {\n                puVar15 = puVar14 + -4;\n                *(puVar14 + -4) = 0x9ec8c2;\n                uVar10 = func_0x009b89e1();\n                uVar7 = 0;\n                uVar30 = 0;\n                uVar27 = uVar10 < 0;\n                bVar25 = uVar10 == 0;\n                uVar21 = (POPCOUNT(uVar10 & 0xff) & 1U) == 0;\n                puVar16 = puVar15 + -4;\n                *(puVar15 + -4) = 0x9ec8c9;\n                func_0x009ec8a7();\n                if (bVar25) {\n                    *(puVar16 + -4) =\n                         (in_NT & 1) * 0x4000 | (uVar30 & 1) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n                         (uVar27 & 1) * 0x80 | (bVar25 & 1) * 0x40 | (in_AF & 1) * 0x10 | (uVar21 & 1) * 4 | uVar7 & 1 |\n                         (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 |\n                         (in_AC & 1) * 0x40000;\n                    *(puVar16 + -8) = 0x9ec917;\n                    Var31 = func_0x009ec948();\n                    out(*puVar19, Var31 >> 0x20);\n                    unaff_EBP = *ppiVar18;\n                    puVar17 = ppiVar18 + 2 | *(Var31 + 0x556646dd);\n                }\n                else {\n                    puVar17 = puVar16 + -2;\n                    *(puVar16 + -2) = ppiVar18;\n                    unaff_EBP = ppiVar18;\n                }\n                puVar19 = puVar19 + 1;\n                puVar14 = puVar17 + 2;\n                bVar25 = puVar19 < puVar13;\n                bVar28 = SBORROW4(puVar19, puVar13);\n                puVar3 = puVar19 - puVar13;\n                bVar24 = puVar3 < 0;\n                bVar22 = puVar3 == NULL;\n                if (!bVar22 && puVar13 <= puVar19) break;\ncode_r0x009eb32e:\n                rdtsc();\n                ppiVar18 = unaff_EBP;\n            }\n            goto code_r0x009eb203;\n        }\n    }\n    return uVar10 & 0xffffff00;\n}\n",
        "token_count": 2193
    },
    "009b99e9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009b99b3) overlaps instruction at (ram,0x009b99b2)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nint16_t * fcn.009b99e9(void)\n\n{\n    uint uVar1;\n    char cVar2;\n    int32_t iVar3;\n    int16_t *extraout_ECX;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint *puVar6;\n    int32_t unaff_EBP;\n    uint *unaff_ESI;\n    uint *unaff_EDI;\n    uchar in_CF;\n    uchar in_ZF;\n    uchar uVar7;\n    uchar in_OF;\n    char cVar8;\n    float10 extraout_ST0;\n    float10 extraout_ST0_00;\n    uint64_t uVar9;\n    unkbyte6 Var10;\n    uint *in_stack_0000003c;\n    int32_t in_stack_00000044;\n    \n    uVar9 = fcn.009b9a36();\n    iVar5 = unaff_EDI + unaff_EBP * 2;\n    if (in_CF || in_ZF) {\n        *0x24467f6c = extraout_ST0;\n        uVar1 = in(uVar9 >> 0x20);\n        *unaff_EDI = uVar1;\n        uVar9 = uVar9 / *(unaff_EDI + -0x49eb423);\n        if (in_OF) {\n            cVar2 = uVar9 + '\\x01';\n            if (cVar2 == '\\0') {\n                unaff_ESI = *(CONCAT31(uVar9 >> 8, cVar2) + 6);\n                iVar5 = CONCAT31(iVar5 >> 8, 0xaa);\n            }\n            fcn.009b9993();\n            if (in_stack_00000044 != 0) {\n                in_stack_0000003c = unaff_ESI;\n                in_stack_00000044 = in_stack_00000044 + -1;\n                iVar3 = fcn.009ea0f6();\n                puVar6 = &stack0x0000003c;\n                while( true ) {\n                    iVar4 = *(*(unaff_EBP + -0x10) + (iVar3 >> 1) * 4);\n                    cVar8 = SCARRY4(iVar4, *(unaff_EBP + 8));\n                    iVar4 = iVar4 + *(unaff_EBP + 8);\n                    cVar2 = iVar4 < 0;\n                    uVar7 = iVar4 == 0;\n                    *puVar6 = 0x9eb646;\n                    fcn.009b89b0();\n                    *puVar6 = 0x9eb64b;\n                    Var10 = fcn.009eb70f();\n                    out(0x76, Var10);\n                    in(0x83);\n                    if (!uVar7 && cVar8 == cVar2) break;\n                    iVar3 = (iVar3 >> 1) + 1;\n                    unaff_EBP = unaff_EBP + 1;\n                    puVar6 = puVar6 + 1;\n                }\n                uVar1 = in(Var10 >> 0x20);\n                *(iVar5 * -0x62) = uVar1;\n                *extraout_ECX = extraout_ST0_00;\n    // WARNING: Bad instruction - Truncating control flow here\n                halt_baddata();\n            }\n            return extraout_ECX;\n        }\n    }\n    else {\n        *unaff_EDI = *unaff_ESI;\n        if (!in_CF) {\n            return uVar9 & 0xffffff00 | -in_CF;\n        }\n    }\n    func_0x9fab3ba0();\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 859
    },
    "009eb70f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009ec87a) overlaps instruction at (ram,0x009ec875)\n// \n// WARNING: Control flow encountered bad instruction data\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.009eb70f(uint param_1, uint param_2)\n\n{\n    uint32_t uVar1;\n    uint16_t uVar2;\n    int32_t iVar3;\n    uint64_t uVar4;\n    code *pcVar5;\n    uint32_t uVar6;\n    int32_t in_EAX;\n    int32_t *piVar7;\n    uchar *puVar8;\n    int32_t extraout_ECX;\n    uchar *puVar9;\n    ushort uVar10;\n    uint32_t *unaff_EBX;\n    uchar *puVar11;\n    uchar *puVar12;\n    uchar *puVar13;\n    uchar *puVar14;\n    int32_t **unaff_EBP;\n    int32_t **ppiVar15;\n    uint32_t *unaff_ESI;\n    int32_t unaff_EDI;\n    bool bVar16;\n    uint8_t uVar17;\n    bool bVar18;\n    uint8_t uVar19;\n    uint8_t in_AF;\n    bool bVar20;\n    bool bVar21;\n    uint8_t uVar22;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    char cVar23;\n    bool bVar24;\n    uint8_t uVar25;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint64_t uVar26;\n    unkbyte6 Var27;\n    uchar unaff_retaddr;\n    uint uStack32;\n    uint8_t uStack28;\n    uint16_t uStack27;\n    uchar uStack25;\n    uint32_t uStack24;\n    uchar auStack16 [8];\n    uint32_t uStack8;\n    uint32_t uStack4;\n    \n    uStack4 = CONCAT22(CONCAT21(unaff_ESI, unaff_retaddr), uStack4);\n    if (in_EAX != 0) {\n        fcn.009eb7a1();\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    uVar2 = 0xf;\n    if (unaff_EDI != 0) {\n        for (; unaff_EDI >> uVar2 == 0; uVar2 = uVar2 - 1) {\n        }\n    }\n    uStack24 = uVar2;\n    iVar3 = 0x1f;\n    if (*0x10 != 0x10) {\n        for (; &stack0xfffffff0 >> iVar3 == 0; iVar3 = iVar3 + -1) {\n        }\n    }\n    uVar6 = unaff_EBP[-5][*(unaff_EBP[-2] + unaff_EDI * 2)];\n    iVar3 = (&stack0xffffffe3 < 0) * 0x80;\n    uStack28 = iVar3 | (*0x10 == 0x1d) * '@' | (in_AF & 1) * '\\x10' |\n               ((POPCOUNT(&stack0xffffffe3 & 0xff) & 1U) == 0) * '\\x04' | &stack0xfffffff0 < 0xd;\n    uStack27 = (in_NT & 1) * 0x4000 >> 8 | SBORROW4(&stack0xfffffff0, 0xd) * 0x800 >> 8 | (in_IF & 1) * 0x200 >> 8 |\n               (in_TF & 1) * 0x100 >> 8 | iVar3 >> 8 | (in_ID & 1) * 0x2000 | (in_VIP & 1) * 0x1000 |\n               (in_VIF & 1) * 0x800 | (in_AC & 1) * 0x400;\n    uStack25 = 0;\n    ppiVar15 = unaff_EBP + 2;\n    piVar7 = uVar6 + *ppiVar15;\n    uStack4 = (in_NT & 1) * 0x4000 | SCARRY4(uVar6, *ppiVar15) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n              (piVar7 < 0) * 0x80 | (piVar7 == NULL) * 0x40 | (in_AF & 1) * 0x10 |\n              ((POPCOUNT(piVar7 & 0xff) & 1U) == 0) * 4 | CARRY4(uVar6, *ppiVar15) | (in_ID & 1) * 0x200000 |\n              (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    unaff_EBP[-3] = piVar7;\n    uStack8 = 0x9eb73a;\n    uStack32 = param_2;\n    uVar26 = fcn.009eb71d();\n    puVar9 = unaff_EBP[-6] + unaff_ESI;\n    while( true ) {\n        puVar8 = uVar26;\n        bVar16 = puVar8 < puVar9;\n        cVar23 = SBORROW4(puVar8, puVar9);\n        uVar6 = puVar8 - puVar9;\n        puVar11 = &stack0xfffffffc;\n        if (bVar16) {\n            uStack8 = (in_NT & 1) * 0x4000 | cVar23 * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n                      (uVar6 < 0) * 0x80 | (uVar6 == 0) * 0x40 | (in_AF & 1) * 0x10 |\n                      ((POPCOUNT(uVar6 & 0xff) & 1U) == 0) * 4 | bVar16 | (in_ID & 1) * 0x200000 |\n                      (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n            bVar16 = false;\n            bVar24 = false;\n            bVar21 = puVar8 < 0;\n            bVar20 = puVar8 == NULL;\n            bVar18 = (POPCOUNT(puVar8 & 0xff) & 1U) == 0;\n            if (bVar20) {\n                ppiVar15 = unaff_EBP;\n                if (bVar20) {\n                    unaff_ESI = NULL;\n                    uStack8 = uVar26 >> 0x20;\n                    bVar16 = false;\n                    bVar24 = false;\n                    bVar21 = unaff_EBX < 0;\n                    bVar20 = unaff_EBX == NULL;\n                    bVar18 = (POPCOUNT(unaff_EBX & 0xff) & 1U) == 0;\n                    if (!bVar21) {\n                        if (!bVar21) goto code_r0x009eb32e;\n                        unaff_ESI = 0x1;\n                        uVar10 = uVar26 >> 0x20;\n                        out(pe_dos_header, uVar10);\n                        uVar6 = in(uVar10);\n                        if (bVar21) {\n                            uVar1 = *unaff_EBX;\n                            uVar26 = uVar26 & 0xffffffff00000000 | uVar6;\n                            uVar4 = uVar26 / uVar1;\n                            uVar6 = uVar4;\n                            if (bVar21) {\n                                *unaff_EBP[-2] = *unaff_EBP[-2] + -1;\n                                unaff_EBP = unaff_EBP + 1;\n                                in_AF = 9 < ((uVar4 | 0xeb) & 0xf) | in_AF;\n                                *(puVar9 + 0x20936001) = (*(puVar9 + 0x20936001) - uVar26 % uVar1) - in_AF;\n                                goto code_r0x009ec897;\n                            }\n                        }\n                        return uVar6 & 0xffffff00;\n                    }\n                }\n                else {\n                    while( true ) {\n                        puVar12 = puVar11 + -4;\n                        *(puVar11 + -4) = 0x9ec8c2;\n                        uVar6 = func_0x009b89e1();\n                        uVar17 = 0;\n                        uVar25 = 0;\n                        uVar22 = uVar6 < 0;\n                        bVar16 = uVar6 == 0;\n                        uVar19 = (POPCOUNT(uVar6 & 0xff) & 1U) == 0;\n                        puVar13 = puVar12 + -4;\n                        *(puVar12 + -4) = 0x9ec8c9;\n                        func_0x009ec8a7();\n                        if (bVar16) {\n                            *(puVar13 + -4) =\n                                 (in_NT & 1) * 0x4000 | (uVar25 & 1) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100\n                                 | (uVar22 & 1) * 0x80 | (bVar16 & 1) * 0x40 | (in_AF & 1) * 0x10 | (uVar19 & 1) * 4 |\n                                 uVar17 & 1 | (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000\n                                 | (in_AC & 1) * 0x40000;\n                            *(puVar13 + -8) = 0x9ec917;\n                            Var27 = func_0x009ec948();\n                            out(*unaff_ESI, Var27 >> 0x20);\n                            unaff_EBP = *ppiVar15;\n                            puVar14 = ppiVar15 + 2 | *(Var27 + 0x556646dd);\n                        }\n                        else {\n                            puVar14 = puVar13 + -2;\n                            *(puVar13 + -2) = ppiVar15;\n                            unaff_EBP = ppiVar15;\n                        }\n                        unaff_ESI = unaff_ESI + 1;\n                        puVar11 = puVar14 + 2;\n                        bVar16 = unaff_ESI < unaff_EBX;\n                        bVar24 = SBORROW4(unaff_ESI, unaff_EBX);\n                        uVar6 = unaff_ESI - unaff_EBX;\n                        bVar21 = uVar6 < 0;\n                        bVar20 = uVar6 == 0;\n                        bVar18 = (POPCOUNT(uVar6 & 0xff) & 1U) == 0;\n                        if (!bVar20 && unaff_EBX <= unaff_ESI) break;\ncode_r0x009eb32e:\n                        rdtsc();\n                        puVar11 = puVar11 + -0x10;\ncode_r0x009ec897:\n                        puVar11 = puVar11 + 0x10;\n                        ppiVar15 = unaff_EBP;\n                    }\n                }\n            }\n            *(puVar11 + 4) =\n                 (in_NT & 1) * 0x4000 | bVar24 * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | bVar21 * 0x80 |\n                 bVar20 * 0x40 | (in_AF & 1) * 0x10 | bVar18 * 4 | bVar16 | (in_ID & 1) * 0x200000 |\n                 (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n            *(puVar11 + 4) = *(puVar11 + 4);\n            *(puVar11 + 8) = 0x9eb40b;\n            *0xacf235c6 = fcn.009ec95c();\n            pcVar5 = swi(0x3c);\n            uVar6 = (*pcVar5)();\n            *(extraout_ECX + -0x4aa5dc20) = *(extraout_ECX + -0x4aa5dc20) & 3;\n            return uVar6;\n        }\n        if (!bVar16) break;\n        uVar26 = CONCAT44(CONCAT31(uVar26 >> 0x28, 0x33), *0xce0323e0);\n        *0xb68c35c6 = puVar8;\n    }\n    uStack8 = 0x9eb1dc;\n    uVar6 = fcn.009eb77e();\n    pcVar5 = swi(4);\n    if (cVar23 == '\\x01') {\n        uVar6 = (*pcVar5)();\n    }\n    *(puVar11 + -4) = puVar11;\n    return uVar6;\n}\n",
        "token_count": 3047
    },
    "009eb51f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009eb41c) overlaps instruction at (ram,0x009eb416)\n// \n\nvoid __fastcall fcn.009eb51f(int32_t param_1)\n\n{\n    code *pcVar1;\n    int32_t in_EAX;\n    int32_t extraout_ECX;\n    int32_t extraout_ECX_00;\n    int32_t extraout_EDX;\n    int32_t unaff_EBP;\n    bool in_ZF;\n    ushort uStack00000006;\n    uint var_4h;\n    \n    if (in_ZF) {\n        if (in_ZF) {\n            uStack00000006 = 0x9e;\n            *0xacf235c6 = fcn.009ec95c();\n            pcVar1 = swi(0x3c);\n            (*pcVar1)();\n            *(extraout_ECX + -0x4aa5dc20) = *(extraout_ECX + -0x4aa5dc20) & 3;\n            return;\n        }\n    }\n    else {\n        *(unaff_EBP + -4) = 0;\n        in_EAX = in_EAX + param_1;\n    }\n    *(unaff_EBP + -0x10) = in_EAX;\n    do {\n        fcn.009eb4bb();\n        *(extraout_ECX_00 + -0x2f) = *(extraout_ECX_00 + -0x2f);\n        *(extraout_EDX + 0x2f79002) = *(extraout_EDX + 0x2f79002) + -0x4f;\n    } while( true );\n}\n",
        "token_count": 366
    },
    "009eb7a1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009eb7b7) overlaps instruction at (ram,0x009eb7b6)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nuint32_t __fastcall\nfcn.009eb7a1(int32_t param_1, uint32_t param_2, uint param_3, int16_t *param_4, int32_t param_5, uint param_6, \n            uint32_t param_7, uint32_t param_8, int32_t param_9, int32_t param_10)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    uint64_t uVar4;\n    code *pcVar5;\n    uchar uVar6;\n    int32_t in_EAX;\n    uint32_t uVar7;\n    int32_t iVar8;\n    int32_t extraout_ECX;\n    uint8_t uVar10;\n    ushort extraout_DX;\n    int32_t iVar9;\n    uint32_t *unaff_EBX;\n    int32_t unaff_EBP;\n    uchar *puVar11;\n    int16_t *unaff_ESI;\n    int32_t *unaff_EDI;\n    uint8_t in_AF;\n    bool in_ZF;\n    bool bVar12;\n    char cVar13;\n    char cVar14;\n    float10 extraout_ST0;\n    float10 in_ST0;\n    unkbyte6 Var15;\n    uint var_4h;\n    \n    if (!in_ZF) {\n        if (in_ZF) {\n            *(param_2 + 0x9d62e849) = ROUND(in_ST0);\n            in(param_2);\n            *unaff_EDI = *unaff_EDI + -1;\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        if (in_EAX < 1) {\n            *(unaff_EBP + -4) = unaff_EDI + 1;\n        }\n        else {\n            uVar6 = fcn.009eb7ec();\n            out(0x44, uVar6);\n            uVar10 = param_8 >> 8;\n            unaff_EBX = param_7 & 0xffffff00 | param_7 + uVar10;\n            param_2 = param_8 & 0xffff0000 | CONCAT11(uVar10 ^ *(param_10 + 0x73), param_8);\n            param_1 = param_9;\n            unaff_EBP = param_5;\n            unaff_ESI = param_4;\n            if (param_10 != 0) goto code_r0x009eb203;\n        }\n        if (*(unaff_EBP + -4) == unaff_EBX || *(unaff_EBP + -4) < unaff_EBX) {\n            iVar8 = *(unaff_EBP + -4) + unaff_EBX;\n            iVar8 = iVar8 - (iVar8 >> 0x1f);\n            while( true ) {\n                iVar9 = *(*(unaff_EBP + -0x10) + (iVar8 >> 1) * 4);\n                cVar14 = SCARRY4(iVar9, *(unaff_EBP + 8));\n                iVar9 = iVar9 + *(unaff_EBP + 8);\n                cVar13 = iVar9 < 0;\n                uVar6 = iVar9 == 0;\n                fcn.009b89b0();\n                Var15 = fcn.009eb70f();\n                out(0x76, Var15);\n                in(0x83);\n                if (!uVar6 && cVar14 == cVar13) break;\n                iVar8 = (iVar8 >> 1) + 1;\n                unaff_EBP = unaff_EBP + 1;\n            }\n            uVar1 = in(Var15 >> 0x20);\n            *(unaff_EBX * -0x62) = uVar1;\n            *unaff_ESI = extraout_ST0;\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n    }\n    puVar11 = NULL;\n    bVar12 = -1 < unaff_EBX;\n    if (!bVar12) {\ncode_r0x009eb203:\n        *0xacf235c6 = fcn.009ec95c();\n        pcVar5 = swi(0x3c);\n        uVar7 = (*pcVar5)();\n        *(extraout_ECX + -0x4aa5dc20) = *(extraout_ECX + -0x4aa5dc20) & 3;\n        return uVar7;\n    }\n    if (bVar12) goto code_r0x009eb32e;\n    puVar11 = 0x1;\n    out(pe_dos_header, param_2);\n    uVar7 = in(param_2);\n    if (!bVar12) {\n        uVar2 = *unaff_EBX;\n        uVar3 = CONCAT44(param_2, uVar7);\n        uVar4 = uVar3 / uVar2;\n        uVar7 = uVar4;\n        if (!bVar12) {\n            **(unaff_EBP + -8) = **(unaff_EBP + -8) + -1;\n            *(param_1 + 0x20936001) = (*(param_1 + 0x20936001) - uVar3 % uVar2) - (9 < ((uVar4 | 0xeb) & 0xf) | in_AF);\n            while( true ) {\n                iVar8 = func_0x009b89e1();\n                bVar12 = iVar8 == 0;\n                func_0x009ec8a7();\n                if (bVar12) {\n                    func_0x009ec948();\n                    out(*puVar11, extraout_DX);\n                }\n                puVar11 = puVar11 + 1;\n                if (unaff_EBX < puVar11) break;\ncode_r0x009eb32e:\n                rdtsc();\n            }\n            goto code_r0x009eb203;\n        }\n    }\n    return uVar7 & 0xffffff00;\n}\n",
        "token_count": 1371
    },
    "009eca5b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009ecc0b) overlaps instruction at (ram,0x009ecc09)\n// \n// WARNING: Possible PIC construction at 0x009ecbb2: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x009ecbb7)\n// WARNING: Removing unreachable block (ram,0x009ecb46)\n// WARNING: Removing unreachable block (ram,0x009ecbb9)\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Removing unreachable block (ram,0x009ecb8d)\n// WARNING: Removing unreachable block (ram,0x009ecbb8)\n// WARNING: Removing unreachable block (ram,0x009ecbde)\n// WARNING: Removing unreachable block (ram,0x009ecc02)\n// WARNING: Removing unreachable block (ram,0x009ecc7c)\n// WARNING: Removing unreachable block (ram,0x009ecc07)\n\nuint64_t __fastcall fcn.009eca5b(int16_t *param_1, int32_t param_2, uint param_3)\n\n{\n    int32_t *piVar1;\n    uchar *puVar2;\n    int16_t iVar3;\n    uint16_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint8_t extraout_CL;\n    int32_t extraout_ECX;\n    uint uVar7;\n    uint32_t extraout_ECX_00;\n    uint *puVar8;\n    int16_t *extraout_ECX_01;\n    uint32_t extraout_ECX_02;\n    int32_t *extraout_ECX_03;\n    uint32_t *extraout_ECX_04;\n    uint32_t extraout_ECX_05;\n    int32_t extraout_ECX_06;\n    ushort extraout_DX;\n    ushort extraout_DX_00;\n    uint uVar9;\n    int32_t extraout_EDX;\n    uint32_t extraout_EDX_00;\n    int32_t extraout_EDX_01;\n    uint32_t extraout_EDX_02;\n    uint32_t unaff_EBX;\n    uint32_t *puVar10;\n    uint32_t *puVar11;\n    uint32_t *puVar12;\n    uint32_t **unaff_EBP;\n    uint32_t unaff_ESI;\n    int32_t iVar13;\n    int32_t *piVar14;\n    int32_t *unaff_EDI;\n    char *pcVar15;\n    char cVar16;\n    uint8_t uVar17;\n    bool bVar18;\n    uint8_t in_AF;\n    bool in_ZF;\n    uchar uVar19;\n    uint8_t uVar20;\n    uint8_t uVar21;\n    uint8_t uVar22;\n    char cVar23;\n    bool bVar24;\n    uint8_t uVar25;\n    uint8_t uVar26;\n    uint8_t uVar27;\n    uint8_t uVar28;\n    uint8_t uVar29;\n    unkbyte10 Var30;\n    float10 extraout_ST0;\n    ulong uVar31;\n    uint64_t uVar32;\n    ulong uVar33;\n    uchar uVar34;\n    ushort uVar35;\n    uchar uVar36;\n    uchar uVar37;\n    uchar uVar38;\n    uchar uVar39;\n    int32_t in_stack_00000024;\n    \n    uVar36 = param_3;\n    puVar10 = &stack0x00000004;\n    if (in_ZF) {\n        if (!in_ZF) {\n            piVar14 = *(param_2 + 0x3c);\n            uVar6 = fcn.009ecc97(param_3);\n            uVar17 = 0;\n            bVar24 = false;\n            uVar20 = (uVar6 & unaff_EDI) == 0;\n            bVar18 = (POPCOUNT(uVar6 & unaff_EDI & 0xff) & 1U) == 0;\n            uVar36 = 0xfd;\n            uVar37 = 0xca;\n            uVar38 = 0x9e;\n            uVar39 = 0;\n            uVar32 = fcn.009ecffd();\n            uVar6 = uVar32;\n            if (!bVar24) {\n                uVar36 = 0x85;\n                uVar37 = 0xff;\n                uVar38 = 0xff;\n                uVar39 = 0xff;\n                if (bVar18) {\n                    bVar18 = *(uVar6 + 0xc) <= unaff_EDI;\n                    if (bVar18) {\n                        unaff_EBP[-3] = NULL;\n                        fcn.009ecd31();\n                        uVar6 = extraout_EDX_00;\n                    }\n                    else {\n                        if (bVar18) {\n                            return uVar32;\n                        }\n                        cVar16 = extraout_ECX_03 < unaff_EDI;\n                        cVar23 = SBORROW4(uVar6, uVar6) != false;\n                        uVar19 = !cVar16;\n                        fcn.009eccfa();\n                        unaff_EBP[-5] = extraout_ECX_04;\n    // WARNING: Call to offcut address within same function\n                        uVar33 = func_0x009ecd41();\n                        uVar6 = uVar33 >> 0x20;\n                        unaff_EBP = *unaff_EBP;\n                        if (uVar19 || cVar23 != cVar16) goto code_r0x009ecac3;\n                        piVar14 = uVar33 + 8;\n                    }\n                    do {\n                        iVar13 = *piVar14;\n                        if (piVar14[3] != 0) {\n                            fcn.009ecded();\n                            iVar3 = 0;\n                            if (piVar14 != 0) {\n                                for (; (piVar14 >> iVar3 & 1) == 0; iVar3 = iVar3 + 1) {\n                                }\n                            }\n                            uVar32 = extraout_ECX_05 % unaff_EBX;\n                            uVar6 = uVar32;\n                            unaff_EBP[-4] = uVar6;\n                            if (uVar6 == 0) {\n                                if (uVar6 != 0) {\n                                    return extraout_ECX_05 / unaff_EBX | uVar32 << 0x20;\n                                }\n                                unaff_EBP[-4] = unaff_EBX;\n                            }\n                            unaff_EBX = piVar14[1];\n                            if (unaff_EBX <= unaff_EBP[2]) {\n                                bVar18 = CARRY4(iVar13 + extraout_EDX_01, unaff_EBX);\n                                fcn.009eced6(CONCAT13(uVar39, CONCAT12(uVar38, CONCAT11(uVar37, uVar36))));\n                                uVar6 = extraout_EDX_02;\n                                if (bVar18) {\n                                    uVar6 = piVar14[3];\n                                    pcVar15 = iVar13 + extraout_EDX_01 + unaff_EBX;\n                                    while (bVar18 = (uVar6 - unaff_EBX) + unaff_EBP[2] < uVar6,  !bVar18) {\n                                        if (bVar18) {\n    // WARNING: Bad instruction - Truncating control flow here\n                                            halt_baddata();\n                                        }\n                                        iVar13 = fcn.009ecfbf();\n                                        out(0xe, iVar13);\n                                        uVar6 = iVar13 >> 0x1f;\n                                        cVar16 = iVar13 + '&';\n                                        out(*piVar14, iVar13 >> 0x1f);\n                                        if (extraout_ECX_06 != 1 && cVar16 == '\\0') {\n    // WARNING: Bad instruction - Truncating control flow here\n                                            halt_baddata();\n                                        }\n                                        piVar14 = 0xcf5fca01;\n                                        *pcVar15 = cVar16;\n                                        puVar2 = unaff_EBX + in_stack_00000024 * 4;\n                                        *0x83c68b32 = cVar16;\n                                        *puVar2 = *puVar2;\n                                        pcVar15 = pcVar15 + 1;\n                                    }\n                                }\n                            }\n                        }\n                        while( true ) {\n                            unaff_EBP[-3] = unaff_EBP[-3] + 1;\n                            uVar5 = unaff_EBP[-3];\n                            piVar14 = piVar14 + 10;\n                            if (uVar5 < unaff_EBP[-5]) break;\n                            if (uVar5 < unaff_EBP[-5]) {\n                                return CONCAT44(uVar6, uVar5);\n                            }\ncode_r0x009ecac3:\n                            uVar19 = 200;\n                            uVar34 = 0xca;\n                            uVar35 = 0x9e;\n                            uVar5 = func_0x009ecff5();\n                            uVar6 = CONCAT22(uVar35, CONCAT11(uVar34, uVar19));\n                            uVar17 = *(unaff_EBX + (uVar5 & 0xff)) ^ 0xf4;\n                            if ((extraout_ECX_02 & 0xffff0000 | CONCAT11(0xa4, extraout_ECX_02)) == 1 || uVar17 == 0) {\n                                return CONCAT44(uVar6, uVar5 & 0xffff0000 | CONCAT11(0xa0, uVar17));\n                            }\n                        }\n                    } while( true );\n                }\n                uVar22 = uVar32;\n                piVar1 = unaff_EBP + 0x7a;\n                uVar21 = extraout_ECX_03 & 0x1f;\n                iVar13 = *piVar1;\n                *piVar1 = *piVar1 << uVar21;\n                bVar24 = (extraout_ECX_03 & 0x1f) != 0;\n                bVar18 = (extraout_ECX_03 & 0x1f) != 0;\n                if (!bVar18 & uVar20 | (bVar18 && *piVar1 == 0)) {\n                    extraout_ECX_03[-0xdd9f50a] = extraout_ECX_03[-0xdd9f50a] - unaff_EDI;\n                    fcn.009eca5b();\n    // WARNING: Call to offcut address within same function\n                    func_0x009ecba4();\n                    *unaff_EDI = *unaff_EDI + -1;\n                    iVar13 = in(extraout_DX_00);\n                    *unaff_EDI = iVar13;\n    // WARNING: Bad instruction - Truncating control flow here\n                    halt_baddata();\n                }\n                in_AF = 9 < (uVar22 & 0xf) | in_AF;\n                uVar20 = uVar22 + in_AF * '\\x06';\n                uVar17 = 0x90 < (uVar20 & 0xf0) |\n                         !bVar24 & uVar17 | (bVar24 && iVar13 << uVar21 - 1 < 0) | in_AF * (0xf9 < uVar20);\n                *(unaff_EBX - 0x15) = extraout_ST0;\n                out(0x38, uVar6 & 0xffff0000 | CONCAT11(0xa0, uVar22) & 0xffffff00 | uVar20 + uVar17 * '`');\n                puVar10 = (uVar32 >> 0x20) + 0x6d;\n                uVar5 = (piVar14 - 1U) - *puVar10;\n                iVar13 = uVar5 - uVar17;\n                uVar4 = CONCAT11(0xa0, *(iVar13 + -1));\n                if (0 < iVar13) {\n                    return CONCAT44(uVar6 & 0xffff0000 | uVar4, \n                                    *unaff_EBP & 0xffffff00 | -(piVar14 - 1U < *puVar10 || uVar5 < uVar17));\n                }\n                in(uVar4);\n            }\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n    }\n    else if (*param_1 == 0x5a4d) goto code_r0x009ec9cd;\n    iVar13 = 0;\n    if (unaff_ESI != 0) {\n        for (; (unaff_ESI >> iVar13 & 1) == 0; iVar13 = iVar13 + 1) {\n        }\n    }\n    uVar33 = fcn.009ec9ac();\n    uVar17 = extraout_ECX_00 >> 8 & unaff_EBX;\n    puVar8 = extraout_ECX_00 & 0xffff0000 | CONCAT11(uVar17, extraout_ECX_00);\n    if (uVar17 < '\\x01') {\ncode_r0x009eca0c:\n        *puVar10 = uVar33 >> 0x28;\n        if (puVar8 != NULL) {\n            *puVar8 = uVar33;\n        }\n        *puVar10 = 0x99eeef;\n        uVar17 = func_0x009ed74c();\n        uVar6 = *puVar10;\n        puVar10 = puVar10 + 1;\n        uVar25 = (uVar6 & 0x4000) != 0;\n        uVar22 = (uVar6 & 0x200) != 0;\n        uVar21 = (uVar6 & 0x100) != 0;\n        uVar20 = (uVar6 & 0x10) != 0;\n        uVar29 = (uVar6 & 0x200000) != 0;\n        uVar26 = (uVar6 & 0x40000) != 0;\n        uVar28 = 0;\n        uVar27 = 0;\n        do {\n            *(unaff_EBP + -0xf0eb981) = *(unaff_EBP + -0xf0eb981) & uVar17;\n            while( true ) {\n                puVar10[-1] = 0x99ef05;\n                uVar31 = fcn.009b3035();\n                uVar9 = uVar31 >> 0x20;\n                iVar13 = uVar31;\n                puVar10[-1] = iVar13;\n                puVar10[-2] = unaff_EBX - 0xe216;\n                puVar10[-3] = uVar9;\n                puVar10[-4] = unaff_EBX;\n                puVar10[-5] = puVar10;\n                puVar10[-6] = unaff_EBP;\n                puVar10[-7] = unaff_ESI;\n                puVar10[-8] = unaff_EDI;\n                uVar7 = *puVar10;\n                *puVar10 = iVar13;\n                puVar10[-1] = uVar7;\n                puVar10[-2] = uVar9;\n                puVar10[-3] = unaff_EBX;\n                puVar10[-4] = puVar10 + 1;\n                puVar10[-5] = unaff_EBP;\n                puVar10[-6] = unaff_ESI;\n                puVar10[-7] = unaff_EDI;\n                if (iVar13 != 0) {\n                    if (iVar13 == 0) {\n                        uVar33 = CONCAT44(uVar9, 0x72b98004);\n                        puVar8 = 0x72b98008;\n                        *puVar10 = (uVar25 & 1) * 0x4000 | ((uVar6 & 0x400) != 0) * 0x400 | (uVar22 & 1) * 0x200 |\n                                   (uVar21 & 1) * 0x100 | (uVar20 & 1) * 0x10 | (uVar29 & 1) * 0x200000 |\n                                   (uVar28 & 1) * 0x100000 | (uVar27 & 1) * 0x80000 | (uVar26 & 1) * 0x40000;\n                        *(puVar10 + 1) = uVar31 >> 0x28;\n                        goto code_r0x009eca0c;\n                    }\n                    *iVar13 = iVar13;\n                }\n                *puVar10 = 0x99eecc;\n                Var30 = fcn.0099ef80();\n                if (extraout_ECX != 1) break;\n                uVar19 = in(extraout_DX);\n                *unaff_EDI = uVar19;\n                unaff_EDI = 0x9673eec8;\n                *(unaff_EBX - 0x7b) = Var30;\n                unaff_EBX = unaff_EBX + *0xf29bb859;\n                puVar12 = puVar10 + 1;\n                puVar10 = puVar10 + 1;\n                *puVar12 = 0x10;\n            }\n            unaff_EBP = puVar10[1];\n            puVar11 = puVar10 + 1;\n            puVar10 = puVar10 + 1;\n            *puVar11 = 0x99eef1;\n            uVar17 = func_0xec36eef5();\n            *(unaff_EBP + -0x3a) = *(unaff_EBP + -0x3a) | uVar17;\n            *0x48bf8d33 = *0x48bf8d33 >> (extraout_CL & 7) | *0x48bf8d33 << 8 - (extraout_CL & 7);\n        } while( true );\n    }\n    unaff_EDI = 0x725dad86;\n    *(unaff_EBP + -0x5b7f6e7) = *(unaff_EBP + -0x5b7f6e7) ^ extraout_ECX_00;\n    func_0xd714c9cc();\n    param_1 = extraout_ECX_01;\n    param_2 = extraout_EDX;\ncode_r0x009ec9cd:\n    iVar3 = 0xf;\n    if (unaff_EDI != 0) {\n        for (; unaff_EDI >> iVar3 == 0; iVar3 = iVar3 + -1) {\n        }\n    }\n    return CONCAT44(param_2, *(param_1 + 0x1e) + param_1);\n}\n",
        "token_count": 4079
    },
    "009eccfa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009ecc0b) overlaps instruction at (ram,0x009ecc09)\n// \n// WARNING: Possible PIC construction at 0x009ecbb2: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x009ecbb7)\n// WARNING: Removing unreachable block (ram,0x009ecb46)\n// WARNING: Removing unreachable block (ram,0x009ecbb9)\n// WARNING: Removing unreachable block (ram,0x009ecb8d)\n// WARNING: Removing unreachable block (ram,0x009ecbb8)\n// WARNING: Removing unreachable block (ram,0x009ecbde)\n// WARNING: Removing unreachable block (ram,0x009ecc02)\n// WARNING: Removing unreachable block (ram,0x009ecc7c)\n// WARNING: Removing unreachable block (ram,0x009ecc07)\n\nuint64_t fcn.009eccfa(void)\n\n{\n    int32_t *piVar1;\n    uint32_t *puVar2;\n    uchar *puVar3;\n    int16_t iVar4;\n    uint8_t uVar5;\n    uint8_t uVar6;\n    uint16_t uVar7;\n    uint32_t uVar8;\n    uint32_t in_EAX;\n    uint32_t extraout_ECX;\n    int32_t *extraout_ECX_00;\n    uint32_t *extraout_ECX_01;\n    uint32_t extraout_ECX_02;\n    int32_t extraout_ECX_03;\n    ushort extraout_DX;\n    uint32_t extraout_EDX;\n    int32_t extraout_EDX_00;\n    uint32_t uVar9;\n    uint32_t extraout_EDX_01;\n    uint32_t unaff_EBX;\n    uint32_t **unaff_EBP;\n    int32_t iVar10;\n    int32_t *unaff_ESI;\n    int32_t *unaff_EDI;\n    char *pcVar11;\n    char cVar12;\n    uint8_t uVar13;\n    bool bVar14;\n    uint8_t in_AF;\n    uchar uVar15;\n    uint8_t uVar16;\n    char cVar17;\n    bool bVar18;\n    float10 extraout_ST0;\n    uint64_t uVar19;\n    ulong uVar20;\n    uchar uVar21;\n    uchar uVar22;\n    uchar uVar23;\n    uchar uVar24;\n    int32_t in_stack_00000020;\n    \n    uVar13 = 0;\n    bVar18 = false;\n    uVar16 = (in_EAX & unaff_EDI) == 0;\n    bVar14 = (POPCOUNT(in_EAX & unaff_EDI & 0xff) & 1U) == 0;\n    uVar19 = fcn.009ecffd();\n    uVar9 = uVar19;\n    if (!bVar18) {\n        uVar21 = 0x85;\n        uVar22 = 0xff;\n        uVar23 = 0xff;\n        uVar24 = 0xff;\n        if (bVar14) {\n            bVar14 = *(uVar9 + 0xc) <= unaff_EDI;\n            if (bVar14) {\n                unaff_EBP[-3] = NULL;\n                fcn.009ecd31();\n                uVar9 = extraout_EDX;\n            }\n            else {\n                if (bVar14) {\n                    return uVar19;\n                }\n                cVar12 = extraout_ECX_00 < unaff_EDI;\n                cVar17 = SBORROW4(uVar9, uVar9) != false;\n                uVar15 = !cVar12;\n                fcn.009eccfa();\n                unaff_EBP[-5] = extraout_ECX_01;\n    // WARNING: Call to offcut address within same function\n                uVar20 = func_0x009ecd41();\n                uVar9 = uVar20 >> 0x20;\n                unaff_EBP = *unaff_EBP;\n                if (uVar15 || cVar17 != cVar12) goto code_r0x009ecac3;\n                unaff_ESI = uVar20 + 8;\n            }\n            do {\n                iVar10 = *unaff_ESI;\n                if (unaff_ESI[3] != 0) {\n                    fcn.009ecded();\n                    iVar4 = 0;\n                    if (unaff_ESI != 0) {\n                        for (; (unaff_ESI >> iVar4 & 1) == 0; iVar4 = iVar4 + 1) {\n                        }\n                    }\n                    uVar19 = extraout_ECX_02 % unaff_EBX;\n                    uVar9 = uVar19;\n                    unaff_EBP[-4] = uVar9;\n                    if (uVar9 == 0) {\n                        if (uVar9 != 0) {\n                            return extraout_ECX_02 / unaff_EBX | uVar19 << 0x20;\n                        }\n                        unaff_EBP[-4] = unaff_EBX;\n                    }\n                    unaff_EBX = unaff_ESI[1];\n                    if (unaff_EBX <= unaff_EBP[2]) {\n                        bVar14 = CARRY4(iVar10 + extraout_EDX_00, unaff_EBX);\n                        fcn.009eced6(CONCAT13(uVar24, CONCAT12(uVar23, CONCAT11(uVar22, uVar21))));\n                        uVar9 = extraout_EDX_01;\n                        if (bVar14) {\n                            uVar9 = unaff_ESI[3];\n                            pcVar11 = iVar10 + extraout_EDX_00 + unaff_EBX;\n                            while (bVar14 = (uVar9 - unaff_EBX) + unaff_EBP[2] < uVar9,  !bVar14) {\n                                if (bVar14) {\n    // WARNING: Bad instruction - Truncating control flow here\n                                    halt_baddata();\n                                }\n                                iVar10 = fcn.009ecfbf();\n                                out(0xe, iVar10);\n                                uVar9 = iVar10 >> 0x1f;\n                                cVar12 = iVar10 + '&';\n                                out(*unaff_ESI, iVar10 >> 0x1f);\n                                if (extraout_ECX_03 != 1 && cVar12 == '\\0') {\n    // WARNING: Bad instruction - Truncating control flow here\n                                    halt_baddata();\n                                }\n                                unaff_ESI = 0xcf5fca01;\n                                *pcVar11 = cVar12;\n                                puVar3 = unaff_EBX + in_stack_00000020 * 4;\n                                *0x83c68b32 = cVar12;\n                                *puVar3 = *puVar3;\n                                pcVar11 = pcVar11 + 1;\n                            }\n                        }\n                    }\n                }\n                while( true ) {\n                    unaff_EBP[-3] = unaff_EBP[-3] + 1;\n                    uVar8 = unaff_EBP[-3];\n                    unaff_ESI = unaff_ESI + 10;\n                    if (uVar8 < unaff_EBP[-5]) break;\n                    if (uVar8 < unaff_EBP[-5]) {\n                        return CONCAT44(uVar9, uVar8);\n                    }\ncode_r0x009ecac3:\n                    uVar8 = func_0x009ecff5();\n                    uVar9 = 0x9ecac8;\n                    uVar13 = *(unaff_EBX + (uVar8 & 0xff)) ^ 0xf4;\n                    if ((extraout_ECX & 0xffff0000 | CONCAT11(0xa4, extraout_ECX)) == 1 || uVar13 == 0) {\n                        return CONCAT44(0x9ecac8, uVar8 & 0xffff0000 | CONCAT11(0xa0, uVar13));\n                    }\n                }\n            } while( true );\n        }\n        uVar6 = uVar19;\n        piVar1 = unaff_EBP + 0x7a;\n        uVar5 = extraout_ECX_00 & 0x1f;\n        iVar10 = *piVar1;\n        *piVar1 = *piVar1 << uVar5;\n        bVar18 = (extraout_ECX_00 & 0x1f) != 0;\n        bVar14 = (extraout_ECX_00 & 0x1f) != 0;\n        if (!bVar14 & uVar16 | (bVar14 && *piVar1 == 0)) {\n            extraout_ECX_00[-0xdd9f50a] = extraout_ECX_00[-0xdd9f50a] - unaff_EDI;\n            fcn.009eca5b();\n    // WARNING: Call to offcut address within same function\n            func_0x009ecba4();\n            *unaff_EDI = *unaff_EDI + -1;\n            iVar10 = in(extraout_DX);\n            *unaff_EDI = iVar10;\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        in_AF = 9 < (uVar6 & 0xf) | in_AF;\n        uVar16 = uVar6 + in_AF * '\\x06';\n        uVar13 = 0x90 < (uVar16 & 0xf0) |\n                 !bVar18 & uVar13 | (bVar18 && iVar10 << uVar5 - 1 < 0) | in_AF * (0xf9 < uVar16);\n        *(unaff_EBX - 0x15) = extraout_ST0;\n        out(0x38, uVar9 & 0xffff0000 | CONCAT11(0xa0, uVar6) & 0xffffff00 | uVar16 + uVar13 * '`');\n        puVar2 = (uVar19 >> 0x20) + 0x6d;\n        uVar8 = (unaff_ESI - 1U) - *puVar2;\n        iVar10 = uVar8 - uVar13;\n        uVar7 = CONCAT11(0xa0, *(iVar10 + -1));\n        if (0 < iVar10) {\n            return CONCAT44(uVar9 & 0xffff0000 | uVar7, \n                            *unaff_EBP & 0xffffff00 | -(unaff_ESI - 1U < *puVar2 || uVar8 < uVar13));\n        }\n        in(uVar7);\n    }\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 2346
    },
    "00a01e5b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n\nvoid fcn.00a01e5b(void)\n\n{\n    fcn.00a01eaa();\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 54
    },
    "00a0202c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00a02445) overlaps instruction at (ram,0x00a02444)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nvoid fcn.00a0202c(void)\n\n{\n    uint32_t *puVar1;\n    char *pcVar2;\n    uchar uVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    char extraout_CL;\n    uint *puVar6;\n    uint *unaff_EBP;\n    char cVar9;\n    uint var_24h;\n    uint var_8h;\n    uint var_4h;\n    uint *puVar7;\n    uint *puVar8;\n    \n    uVar5 = fcn.00a01ff3();\n    while( true ) {\n        puVar6 = &stack0x00000004;\n        puVar1 = unaff_EBP + -2;\n        cVar9 = *puVar1 < uVar5;\n        if (*puVar1 == uVar5 || *puVar1 < uVar5) break;\n        iVar4 = func_0x00a0253a();\n        pcVar2 = unaff_EBP + iVar4 * 2 + -0x444d6f96;\n        *pcVar2 = (*pcVar2 - extraout_CL) - cVar9;\n        uVar5 = fcn.00a01ff3();\n    }\n    do {\n        puVar6[-1] = 0xa023f1;\n        fcn.00a023bb(*puVar6, puVar6[1]);\n        puVar6[-1] = 0xa023f6;\n        fcn.009b8bd0();\n        puVar6[-1] = 0xa02431;\n        uVar3 = fcn.00a02414();\n        out(0x11, uVar3);\n        puVar7 = puVar6 + -1;\n        puVar8 = puVar6 + -1;\n        puVar6[-1] = unaff_EBP;\n        cVar9 = '\\x05';\n        do {\n            unaff_EBP = unaff_EBP + -1;\n            puVar7 = puVar7 + -1;\n            *puVar7 = *unaff_EBP;\n            cVar9 = cVar9 + -1;\n        } while ('\\0' < cVar9);\n        puVar6[-7] = puVar6 + -1;\n        puVar6 = puVar6 + -0x6176;\n        unaff_EBP = puVar8;\n    } while( true );\n}\n",
        "token_count": 569
    },
    "00a023bb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n\nvoid __cdecl fcn.00a023bb(uint arg_8h, uint arg_ch)\n\n{\n    char cVar1;\n    uchar uVar2;\n    uint *puVar3;\n    uint *puVar4;\n    uint *unaff_EBP;\n    uint *puVar5;\n    \n    puVar3 = &arg_8h;\n    do {\n        puVar3[-1] = 0xa023f6;\n        fcn.009b8bd0();\n        puVar3[-1] = 0xa02431;\n        uVar2 = fcn.00a02414();\n        out(0x11, uVar2);\n        puVar4 = puVar3 + -1;\n        puVar5 = puVar3 + -1;\n        puVar3[-1] = unaff_EBP;\n        cVar1 = '\\x05';\n        do {\n            unaff_EBP = unaff_EBP + -1;\n            puVar4 = puVar4 + -1;\n            *puVar4 = *unaff_EBP;\n            cVar1 = cVar1 + -1;\n        } while ('\\0' < cVar1);\n        puVar3[-7] = puVar3 + -1;\n        *(puVar3 + -0x617a) = 0xa023f1;\n        fcn.00a023bb(*(puVar3 + -0x6176), *(puVar3 + -0x6172));\n        puVar3 = puVar3 + -0x6176;\n        unaff_EBP = puVar5;\n    } while( true );\n}\n",
        "token_count": 360
    },
    "00a0e5ff": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00a0e5ff(void)\n\n{\n    int32_t extraout_ECX;\n    ulong uVar1;\n    uint uStack00000004;\n    uint uStack00000008;\n    \n    uStack00000008 = 0xb81ab0f0;\n    uStack00000004 = 0xa0f24b;\n    uVar1 = fcn.009acaa9();\n    uStack00000004 = uVar1;\n    fcn.009b8cdf((uVar1 >> 0x20) + extraout_ECX);\n    return;\n}\n",
        "token_count": 129
    },
    "00a18e24": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009ba028) overlaps instruction at (ram,0x009ba027)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nuint32_t __cdecl fcn.00a18e24(uint noname_0, uint32_t arg_ch)\n\n{\n    uint32_t *puVar1;\n    uint8_t *puVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    int16_t iVar5;\n    code *pcVar6;\n    int32_t *piVar7;\n    char extraout_AH;\n    uint32_t *puVar8;\n    uint32_t **in_EAX;\n    int32_t iVar9;\n    uint32_t uVar10;\n    uint8_t extraout_CL;\n    uint32_t uVar11;\n    uint32_t extraout_ECX;\n    uint32_t *extraout_ECX_00;\n    int32_t extraout_ECX_01;\n    uint32_t in_ECX;\n    uint32_t extraout_ECX_02;\n    ushort extraout_var;\n    int32_t extraout_ECX_03;\n    int32_t extraout_ECX_04;\n    int32_t extraout_ECX_05;\n    int32_t extraout_ECX_06;\n    ushort uVar12;\n    uint in_EDX;\n    ushort extraout_var_00;\n    char *extraout_EDX;\n    uint32_t unaff_EBX;\n    char *unaff_EBP;\n    uint32_t *unaff_ESI;\n    uint32_t *puVar13;\n    uint32_t *unaff_EDI;\n    uint8_t uVar14;\n    bool bVar15;\n    bool in_ZF;\n    bool bVar16;\n    float10 extraout_ST0;\n    ulong uVar17;\n    unkbyte6 Var18;\n    uint unaff_retaddr;\n    uchar *puStack0000000c;\n    int32_t in_stack_00000018;\n    int32_t iStack0000001c;\n    uchar uStack00000031;\n    uchar uStack00000032;\n    char cStack32;\n    ushort uStack30;\n    ushort uStack18;\n    uint32_t *puStack16;\n    uchar uStack4;\n    uchar uStack3;\n    ushort uStack2;\n    \n    uVar17 = CONCAT44(in_EDX, in_EAX);\n    cStack32 = unaff_EBP;\n    if (in_ZF) {\n        if (in_ZF) {\n            unaff_retaddr = 0x4c0;\n            uStack4 = 8;\n            uStack3 = 0;\n            uStack2 = 0;\n            fcn.00a18e50();\n            in_ECX = extraout_ECX_02;\n            uVar12 = extraout_var_00;\n            goto code_r0x00a18ebc;\n        }\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    uVar12 = unaff_retaddr >> 8;\n    if (unaff_EDI <= *in_EAX && *in_EAX != unaff_EDI) {\n        if (unaff_EDI <= *in_EAX && *in_EAX != unaff_EDI) goto code_r0x009a187c;\n        while( true ) {\n            unaff_EDI = unaff_EDI + 3;\n            bVar15 = arg_ch < *uVar17;\n            in_ECX = arg_ch;\n            if (!bVar15) break;\ncode_r0x009a187c:\n            uVar12 = uVar17 >> 0x30;\n            if (unaff_EBX == *(uVar17 + 4 + unaff_EDI)) {\ncode_r0x00a18ebc:\n                uStack18 = uVar12;\n                puStack16 = in_ECX;\n                fcn.00a18ec9();\n                unaff_ESI = 0x1;\n                uVar17 = fcn.00a18fe1();\n                if (1 < *(uVar17 + 8 + unaff_EDI)) {\n                    fcn.009b933d();\n                    fcn.00a18f69();\n                    *extraout_EDX = *extraout_EDX + extraout_EDX;\n                    *0x3f = *0x3f + extraout_AH;\n    // WARNING: Bad instruction - Truncating control flow here\n                    halt_baddata();\n                }\n            }\n            arg_ch = arg_ch + 1;\n        }\n        uVar12 = unaff_retaddr >> 8;\n        if (bVar15) goto code_r0x00a191a1;\n    }\n    uStack2 = uVar12;\n    puStack16 = fcn.009b91a7();\n    iVar5 = 0xf;\n    if (*0x10 - 8U != 0) {\n        for (; *0x10 - 8U >> iVar5 == 0; iVar5 = iVar5 + -1) {\n        }\n    }\n    unaff_ESI = NULL;\n    unaff_EDI = *(puStack16 + 0x78) + unaff_EBX;\n    uStack18 = extraout_var;\n    fcn.00a190ae();\n    if (extraout_ECX_03 == 0) {\n        return 0;\n    }\n    iVar9 = fcn.00a190cd();\n    *(iVar9 + 4 + extraout_ECX_04 * 0xc) = unaff_EBX;\n    uStack4 = 0x79;\n    uStack3 = 0x91;\n    fcn.00a1924d();\n    iVar5 = 0xf;\n    if (unaff_EBX != 0) {\n        for (; unaff_EBX >> iVar5 == 0; iVar5 = iVar5 + -1) {\n        }\n    }\n    uVar17 = CONCAT44(unaff_EDI[6], *0x9aa864);\n    arg_ch = **0x9aa864 * 0xc;\n    bVar15 = arg_ch != **0x9aa864 * 0xc;\ncode_r0x00a191a1:\n    *(uVar17 + 8 + arg_ch) = uVar17 >> 0x20;\n    bVar15 = !bVar15;\n    // WARNING: Call to offcut address within same function\n    func_0x00a191ce();\n    if (bVar15) {\n        unaff_EBP[0x485491] = unaff_EBP[0x485491] | extraout_CL;\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    puStack16 = 0x8;\n    uStack18 = *0x9aa8fc >> 0x10;\n    iVar9 = (**0x9aa910)();\n    (*0x9aa864)[(**0x9aa864 + 1) * 3] = iVar9;\n    iStack0000001c = unaff_EDI[8] + unaff_EBX;\n    bVar16 = iStack0000001c == 0;\n    bVar15 = false;\n    func_0x00a192ca();\n    if (!bVar15 && !bVar16) {\n        fcn.009b9160();\n        iVar9 = func_0x00a193f3();\n        puVar13 = *(iVar9 + unaff_EBX) + unaff_EBX;\n        if (unaff_EDI <= puVar13) {\n            if (unaff_EDI > puVar13) {\n                unaff_EBX = unaff_EBX + 1;\n            }\n            bVar15 = puVar13 < in_stack_00000018 + unaff_EDI;\n            while (uStack30 = unaff_EDI >> 0x10,  bVar15) {\n                if (!bVar15) {\n                    puStack0000000c = &stack0x000000b0;\n                    uVar10 = (*_fcn.009aa90c)();\n                    if (uVar10 == 0) {\n                        uStack18 = uStack30;\n                        puStack16 = puVar13;\n                        uVar10 = (**(*0x9aa924 + 0x10))();\n                    }\n                    puStack16 = uVar10;\n                    if (uVar10 != unaff_EBX) {\n                        uStack18 = uStack30;\n                        iVar9 = fcn.00a19b2c();\n                        return *(*(iVar9 * 0xc + extraout_ECX_06) + uVar10 * 0x14 + 0x10);\n                    }\n                    uStack00000032 = 0x3c;\n                    uStack00000031 = 0x50;\n                    uStack18 = uStack30;\n                    fcn.00a1979c();\n                    *unaff_EDI = *(unaff_EBX - 0x577f);\n    // WARNING: Bad instruction - Truncating control flow here\n                    halt_baddata();\n                }\n                fcn.00a1958c();\n                puVar8 = puVar13;\n                do {\n                    fcn.009b9165();\n                    puVar13 = fcn.00a1965f();\n                    puVar1 = extraout_ECX_05 * 2;\n                    bVar15 = CARRY4(*puVar1, puVar8);\n                    *puVar1 = *puVar1 + puVar8;\n                    puVar8 = puVar13;\n                } while (!bVar15 && *puVar1 != 0);\n                bVar15 = false;\n            }\n        }\n        func_0x009b918a();\n        fcn.00a19a9b();\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    **0x9aa864 = **0x9aa864 + 1;\n    iVar9 = fcn.00a19b32();\n    uStack18 = 0xa1;\n    (**(iVar9 + 0x98))();\n    while( true ) {\n        do {\n            do {\n                uStack18 = 0x9b;\n                fcn.009a1954();\n                *0x9b92fb69 = in(0x14);\n                puVar2 = *(unaff_EDI + -0x12d4ea27);\n                uStack18 = puVar2 >> 0x10;\n                puVar13 = unaff_ESI & extraout_ECX;\n                unaff_ESI = puVar13;\n            } while (puVar13 == NULL);\n            puVar1 = puVar2 + 1;\n            puVar8 = (*0x9b92fb69 & 0xffffff00 | *0x9b92fb69 + 0x7a) + 0x6a;\n            *puVar8 = *puVar8 << 1 | *puVar13 < *puVar2;\n            pcVar6 = swi(0xac);\n            Var18 = (*pcVar6)();\n            uVar12 = Var18 >> 0x20;\n            puVar8 = Var18;\n            unaff_EDI = puVar1;\n            if ((POPCOUNT(*puVar8 - unaff_EBX & 0xff) & 1U) == 0) goto code_r0x009ba05b;\n            uVar10 = *puVar8 < unaff_EBX;\n            bVar15 = CARRY4(unaff_EBX, *extraout_ECX_00);\n            bVar16 = SCARRY4(unaff_EBX, *extraout_ECX_00);\n            uVar11 = unaff_EBX + *extraout_ECX_00;\n            unaff_EBX = uVar11 + uVar10;\n            unaff_ESI = puVar13 + 1;\n        } while (bVar16 == SCARRY4(uVar11, uVar10));\n        unaff_EDI = puVar2 + 5;\n        *puVar1 = *(puVar13 + 1);\n        if (unaff_EBX == 0) {\n            *(puVar8 + -0x2d) = *(puVar8 + -0x2d) << 1;\n            uVar14 = 1;\n            uVar17 = func_0x8bff181c();\n            iVar9 = CONCAT31(uVar17 >> 0x28, 0xad);\n            uVar10 = *(uVar17 + 0x16da6a91);\n            out(*(puVar13 + 5), iVar9);\n            if (&uStack18 + uVar14 + *(extraout_ECX_01 * 5 + -0x1d338ece) != 0x1) {\n    // WARNING: Bad instruction - Truncating control flow here\n                halt_baddata();\n            }\n            *unaff_EBP = *unaff_EBP + cStack32;\n            *unaff_EBP = *unaff_EBP + cStack32;\n            uVar11 = 0;\n            if (*0x28 != 0) {\n                do {\n                    uVar10 = (uVar10 << 7 | uVar10 >> 0x19) ^ *(uVar11 + iVar9);\n                    uVar11 = uVar11 + 1;\n                    *0x20 = puVar13 + 9;\n                } while (uVar11 < *0x28);\n            }\n            return uVar10;\n        }\n        *(extraout_ECX_00 + -0xf447270) = extraout_ST0;\n        puVar8 = puVar8 & 0xffff0000 | CONCAT11(0xec, Var18);\n        uVar3 = bVar15 || CARRY4(uVar11, uVar10);\n        uVar10 = *unaff_EDI;\n        uVar11 = *unaff_EDI;\n        uVar4 = *unaff_EDI + extraout_ECX_00;\n        *unaff_EDI = uVar4 + uVar3;\n        out(*(puVar13 + 5), uVar12);\n        if (*unaff_EDI != 0 && (SCARRY4(uVar11, extraout_ECX_00) != SCARRY4(uVar4, uVar3)) == *unaff_EDI < 0) break;\n        *(unaff_EBX + 0xd6851e0a) =\n             *(unaff_EBX + 0xd6851e0a) + (Var18 >> 0x20) + (CARRY4(uVar10, extraout_ECX_00) || CARRY4(uVar4, uVar3));\n        out(uVar12, puVar8);\n        pcVar6 = swi(0x96);\n        (*pcVar6)();\n        unaff_EBX = 0xe5136aa;\n        unaff_ESI = puVar13 + 9;\n    }\ncode_r0x009ba05b:\n    uVar14 = unaff_EDI;\n    out(uVar12, uVar14);\n    *(puVar8 + -0x7f5bcba6) = *(puVar8 + -0x7f5bcba6) + 0x29818966 + (uVar14 < 0x36);\n    out(uVar12, uVar14 % 0x47);\n    piVar7 = CONCAT22(uStack2, CONCAT11(uStack3, uStack4));\n    *piVar7 = *piVar7 << (noname_0 & 0x1f);\n    do {\n    // WARNING: Do nothing block with infinite loop\n    } while( true );\n}\n",
        "token_count": 3411
    },
    "00a190cb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009ba028) overlaps instruction at (ram,0x009ba027)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nuint32_t __thiscall\nfcn.00a190cb(uint32_t *param_1, uint param_2, uint32_t *param_3, int32_t param_4, uchar *param_5, int32_t *param_6, \n            uint param_7, uint8_t param_8, uint param_9, uchar *param_10, int32_t param_11, uint param_12, \n            int32_t param_13, int32_t param_14)\n\n{\n    uint32_t *puVar1;\n    uint8_t *puVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    int16_t iVar5;\n    code *pcVar6;\n    uint32_t *puVar7;\n    int32_t iVar8;\n    uint32_t uVar9;\n    uint8_t extraout_CL;\n    uint32_t uVar10;\n    uint32_t extraout_ECX;\n    uint32_t *extraout_ECX_00;\n    int32_t extraout_ECX_01;\n    int32_t extraout_ECX_02;\n    int32_t extraout_ECX_03;\n    int32_t extraout_ECX_04;\n    ushort uVar11;\n    uint32_t unaff_EBX;\n    char *unaff_EBP;\n    uint32_t *unaff_ESI;\n    uint32_t *puVar12;\n    uint32_t *unaff_EDI;\n    uint8_t uVar13;\n    bool bVar14;\n    bool bVar15;\n    float10 extraout_ST0;\n    ulong uVar16;\n    uint64_t uVar17;\n    unkbyte6 Var18;\n    uchar uStack00000049;\n    uchar uStack0000004a;\n    uchar uStack7;\n    ushort uStack6;\n    \n    if (param_1 == unaff_ESI) {\n        return 0;\n    }\n    iVar8 = fcn.00a190cd();\n    *(iVar8 + 4 + extraout_ECX_02 * 0xc) = unaff_EBX;\n    param_2._1_1_ = 0x91;\n    param_2._2_2_ = 0xa1;\n    fcn.00a1924d();\n    param_2._2_2_ = param_3._1_2_;\n    iVar5 = 0xf;\n    if (unaff_EBX != 0) {\n        for (; unaff_EBX >> iVar5 == 0; iVar5 = iVar5 + -1) {\n        }\n    }\n    iVar8 = **0x9aa864 * 0xc;\n    bVar14 = iVar8 == **0x9aa864 * 0xc;\n    *(*0x9aa864 + iVar8 + 8) = unaff_EDI[6];\n    // WARNING: Call to offcut address within same function\n    param_4 = 0xa191cd;\n    uVar9 = func_0x00a191ce();\n    if (bVar14) {\n        unaff_EBP[0x485491] = unaff_EBP[0x485491] | extraout_CL;\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    param_4 = (uVar9 & 0xffffff04) * 0x14;\n    param_3 = 0x8;\n    param_2._1_1_ = *0x9aa8fc >> 8;\n    param_2._2_2_ = *0x9aa8fc >> 0x10;\n    iVar8 = (**0x9aa910)();\n    (*0x9aa864)[(**0x9aa864 + 1) * 3] = iVar8;\n    param_14 = unaff_EDI[8] + unaff_EBX;\n    bVar15 = param_14 == 0;\n    bVar14 = false;\n    func_0x00a192ca();\n    if (!bVar14 && !bVar15) {\n        fcn.009b9160();\n        iVar8 = func_0x00a193f3();\n        puVar12 = *(iVar8 + unaff_EBX) + unaff_EBX;\n        if (unaff_EDI <= puVar12) {\n            if (unaff_EDI > puVar12) {\n                unaff_EBX = unaff_EBX + 1;\n            }\n            bVar14 = puVar12 < param_13 + unaff_EDI;\n            while( true ) {\n                uStack7 = unaff_EDI >> 8;\n                uStack6 = unaff_EDI >> 0x10;\n                if (!bVar14) break;\n                if (!bVar14) {\n                    param_10 = &stack0x000000c8;\n                    uVar9 = (*_fcn.009aa90c)();\n                    if (uVar9 == 0) {\n                        param_2._1_1_ = uStack7;\n                        param_2._2_2_ = uStack6;\n                        param_3 = puVar12;\n                        param_5 = &stack0x00000024;\n                        uVar9 = (**(*0x9aa924 + 0x10))();\n                    }\n                    param_5 = &stack0x00000024;\n                    param_3 = uVar9;\n                    if (uVar9 != unaff_EBX) {\n                        param_2._1_1_ = uStack7;\n                        param_2._2_2_ = uStack6;\n                        iVar8 = fcn.00a19b2c();\n                        return *(*(iVar8 * 0xc + extraout_ECX_04) + uVar9 * 0x14 + 0x10);\n                    }\n                    uStack0000004a = 0x3c;\n                    uStack00000049 = 0x50;\n                    param_2._1_1_ = uStack7;\n                    param_2._2_2_ = uStack6;\n                    param_5 = &stack0x00000024;\n                    fcn.00a1979c();\n                    *unaff_EDI = *(unaff_EBX - 0x577f);\n    // WARNING: Bad instruction - Truncating control flow here\n                    halt_baddata();\n                }\n                iVar8 = fcn.00a1958c();\n                iVar8 = iVar8 - puVar12;\n                puVar7 = puVar12;\n                do {\n                    param_11 = iVar8;\n                    fcn.009b9165();\n                    uVar17 = fcn.00a1965f();\n                    puVar12 = uVar17;\n                    puVar1 = extraout_ECX_03 * 2;\n                    bVar14 = CARRY4(*puVar1, puVar7);\n                    *puVar1 = *puVar1 + puVar7;\n                    iVar8 = (uVar17 & 0xffffffff00000000 | ZEXT48(puVar7)) / *(extraout_ECX_03 + puVar12 * 2);\n                    puVar7 = puVar12;\n                } while (!bVar14 && *puVar1 != 0);\n                bVar14 = false;\n            }\n        }\n        func_0x009b918a();\n        fcn.00a19a9b();\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    **0x9aa864 = **0x9aa864 + 1;\n    iVar8 = fcn.00a19b32();\n    param_2._1_1_ = 0x9b;\n    param_2._2_2_ = 0xa1;\n    (**(iVar8 + 0x98))();\n    while( true ) {\n        do {\n            do {\n                param_2._1_1_ = 0xa0;\n                param_2._2_2_ = 0x9b;\n                fcn.009a1954();\n                *0x9b92fb69 = in(0x14);\n                puVar2 = *(unaff_EDI + -0x12d4ea27);\n                param_2._1_1_ = puVar2 >> 8;\n                param_2._2_2_ = puVar2 >> 0x10;\n                puVar12 = unaff_ESI & extraout_ECX;\n                unaff_ESI = puVar12;\n            } while (puVar12 == NULL);\n            puVar1 = puVar2 + 1;\n            puVar7 = (*0x9b92fb69 & 0xffffff00 | *0x9b92fb69 + 0x7a) + 0x6a;\n            *puVar7 = *puVar7 << 1 | *puVar12 < *puVar2;\n            pcVar6 = swi(0xac);\n            Var18 = (*pcVar6)();\n            uVar11 = Var18 >> 0x20;\n            puVar7 = Var18;\n            unaff_EDI = puVar1;\n            if ((POPCOUNT(*puVar7 - unaff_EBX & 0xff) & 1U) == 0) goto code_r0x009ba05b;\n            uVar9 = *puVar7 < unaff_EBX;\n            bVar14 = CARRY4(unaff_EBX, *extraout_ECX_00);\n            bVar15 = SCARRY4(unaff_EBX, *extraout_ECX_00);\n            uVar10 = unaff_EBX + *extraout_ECX_00;\n            unaff_EBX = uVar10 + uVar9;\n            unaff_ESI = puVar12 + 1;\n        } while (bVar15 == SCARRY4(uVar10, uVar9));\n        unaff_EDI = puVar2 + 5;\n        *puVar1 = *(puVar12 + 1);\n        if (unaff_EBX == 0) {\n            *(puVar7 + -0x2d) = *(puVar7 + -0x2d) << 1;\n            uVar13 = 1;\n            uVar16 = func_0x8bff181c();\n            iVar8 = CONCAT31(uVar16 >> 0x28, 0xad);\n            uVar9 = *(uVar16 + 0x16da6a91);\n            out(*(puVar12 + 5), iVar8);\n            if (&stack0x00000006 + uVar13 + *(extraout_ECX_01 * 5 + -0x1d338ece) == 0x1) {\n                *unaff_EBP = *unaff_EBP + unaff_EBP;\n                *unaff_EBP = *unaff_EBP + unaff_EBP;\n                uVar10 = 0;\n                if (*0x28 != 0) {\n                    do {\n                        uVar9 = (uVar9 << 7 | uVar9 >> 0x19) ^ *(uVar10 + iVar8);\n                        uVar10 = uVar10 + 1;\n                        *0x20 = puVar12 + 9;\n                    } while (uVar10 < *0x28);\n                }\n                return uVar9;\n            }\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        *(extraout_ECX_00 + -0xf447270) = extraout_ST0;\n        puVar7 = puVar7 & 0xffff0000 | CONCAT11(0xec, Var18);\n        uVar3 = bVar14 || CARRY4(uVar10, uVar9);\n        uVar9 = *unaff_EDI;\n        uVar10 = *unaff_EDI;\n        uVar4 = *unaff_EDI + extraout_ECX_00;\n        *unaff_EDI = uVar4 + uVar3;\n        out(*(puVar12 + 5), uVar11);\n        if (*unaff_EDI != 0 && (SCARRY4(uVar10, extraout_ECX_00) != SCARRY4(uVar4, uVar3)) == *unaff_EDI < 0) break;\n        *(unaff_EBX + 0xd6851e0a) =\n             *(unaff_EBX + 0xd6851e0a) + (Var18 >> 0x20) + (CARRY4(uVar9, extraout_ECX_00) || CARRY4(uVar4, uVar3));\n        out(uVar11, puVar7);\n        pcVar6 = swi(0x96);\n        (*pcVar6)();\n        unaff_EBX = 0xe5136aa;\n        unaff_ESI = puVar12 + 9;\n    }\ncode_r0x009ba05b:\n    uVar13 = unaff_EDI;\n    out(uVar11, uVar13);\n    *(puVar7 + -0x7f5bcba6) = *(puVar7 + -0x7f5bcba6) + 0x29818966 + (uVar13 < 0x36);\n    out(uVar11, uVar13 % 0x47);\n    *param_6 = *param_6 << (param_8 & 0x1f);\n    do {\n    // WARNING: Do nothing block with infinite loop\n    } while( true );\n}\n",
        "token_count": 2970
    },
    "00a19970": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n\nuint fcn.00a19970(void)\n\n{\n    uint32_t *puVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t extraout_ECX;\n    int32_t extraout_ECX_00;\n    int32_t unaff_EBX;\n    uchar *puVar4;\n    uchar *puVar5;\n    uchar *unaff_EDI;\n    bool bVar6;\n    int32_t in_stack_0000002c;\n    uchar uStack00000045;\n    uchar uStack00000046;\n    \n    fcn.009b9160();\n    iVar2 = func_0x00a193f3();\n    puVar4 = *(iVar2 + unaff_EBX) + unaff_EBX;\n    if (unaff_EDI <= puVar4) {\n        if (unaff_EDI > puVar4) {\n            unaff_EBX = unaff_EBX + 1;\n        }\n        bVar6 = puVar4 < unaff_EDI + in_stack_0000002c;\n        while( true ) {\n            if (!bVar6) break;\n            if (!bVar6) {\n                iVar2 = (*_fcn.009aa90c)();\n                if (iVar2 == 0) {\n                    iVar2 = (**(*0x9aa924 + 0x10))();\n                }\n                if (iVar2 == unaff_EBX) {\n                    uStack00000046 = 0x3c;\n                    uStack00000045 = 0x50;\n                    fcn.00a1979c();\n                    *unaff_EDI = *(unaff_EBX + -0x577f);\n    // WARNING: Bad instruction - Truncating control flow here\n                    halt_baddata();\n                }\n                iVar3 = fcn.00a19b2c();\n                return *(*(iVar3 * 0xc + extraout_ECX_00) + iVar2 * 0x14 + 0x10);\n            }\n            fcn.00a1958c();\n            puVar5 = puVar4;\n            do {\n                fcn.009b9165();\n                puVar4 = fcn.00a1965f();\n                puVar1 = extraout_ECX * 2;\n                bVar6 = CARRY4(*puVar1, puVar5);\n                *puVar1 = puVar5 + *puVar1;\n                puVar5 = puVar4;\n            } while (!bVar6 && *puVar1 != 0);\n            bVar6 = false;\n        }\n    }\n    func_0x009b918a();\n    fcn.00a19a9b();\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 606
    },
    "00a1958c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00a1967c) overlaps instruction at (ram,0x00a19679)\n// \n// WARNING: Removing unreachable block (ram,0x00a196a0)\n// WARNING: Removing unreachable block (ram,0x00a196a6)\n// WARNING: Removing unreachable block (ram,0x00a19720)\n// WARNING: Removing unreachable block (ram,0x009a1892)\n// WARNING: Removing unreachable block (ram,0x00a197b2)\n// WARNING: Removing unreachable block (ram,0x009a18f3)\n\nvoid fcn.00a1958c(uint param_1, uint param_2, uint param_3, uint param_4, uint param_5, uint param_6, uint param_7, \n                 uint param_8, uint param_9, uint param_10, uint param_11, uint param_12, uint param_13, uint param_14, \n                 uint param_15, uint param_16, uint param_17, uint param_18, uint param_19, uint param_20, uint param_21\n                 , uint param_22, uint param_23, uint param_24, uint param_25)\n\n{\n    uint8_t uVar1;\n    uint32_t *puVar2;\n    uint noname_13;\n    uint *puVar3;\n    uint8_t uVar4;\n    uint32_t extraout_ECX;\n    int32_t extraout_ECX_00;\n    ushort uVar5;\n    char *pcVar6;\n    int32_t unaff_EBX;\n    int32_t unaff_EBP;\n    uint *unaff_ESI;\n    int32_t unaff_EDI;\n    uint8_t uVar7;\n    bool bVar8;\n    ulong uVar9;\n    \n    noname_13 = fcn.009b917b();\n    while( true ) {\n        uVar7 = 0;\n        uVar9 = fcn.00a195e2(param_2, param_3, param_4, param_5, param_6, param_7, param_8, param_9, param_10, param_11\n                             , param_12, param_13, param_14, noname_13, param_16, param_17, param_18, param_19, param_20\n                             , param_21, param_22, param_23, param_24, param_25);\n        pcVar6 = uVar9 >> 0x20;\n        noname_13 = uVar9;\n        uVar1 = extraout_ECX + *(unaff_EBP + 0x32da277d);\n        uVar4 = uVar1 + uVar7;\n        uVar5 = uVar9 >> 0x20;\n        out(uVar5, uVar9);\n        if ((extraout_ECX & 0xffffff00 | uVar4) != 1 && uVar4 != 0) break;\n        out(*unaff_ESI, uVar5);\n        unaff_EBX = *(unaff_EDI + unaff_EBP * 2) * 0x59;\n        unaff_ESI = unaff_ESI + 1;\n    }\n    if (-1 < uVar4) {\n        *pcVar6 = (*pcVar6 - unaff_EBX) - (CARRY1(extraout_ECX, *(unaff_EBP + 0x32da277d)) || CARRY1(uVar1, uVar7));\n        if (*pcVar6 != '\\0') {\n            do {\n    // WARNING: Do nothing block with infinite loop\n            } while( true );\n        }\n        fcn.00a1958c();\n        do {\n            fcn.009b9165();\n            puVar3 = fcn.00a1965f();\n            puVar2 = extraout_ECX_00 * 2;\n            bVar8 = CARRY4(*puVar2, unaff_ESI);\n            *puVar2 = *puVar2 + unaff_ESI;\n            unaff_ESI = puVar3;\n        } while (!bVar8 && *puVar2 != 0);\n        func_0x009b918a();\n        fcn.00a19a9b();\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 990
    },
    "00a198c7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00a19990) overlaps instruction at (ram,0x00a1998f)\n// \n// WARNING: Control flow encountered bad instruction data\n// WARNING: Unable to track spacebase fully for stack\n\nuint fcn.00a198c7(void)\n\n{\n    uint16_t *puVar1;\n    uint8_t *puVar2;\n    code *pcVar3;\n    int16_t iVar4;\n    uint64_t uVar5;\n    uint32_t *puVar6;\n    char cVar7;\n    int32_t iVar8;\n    uchar *puVar9;\n    int32_t extraout_ECX;\n    int32_t extraout_ECX_00;\n    uint extraout_ECX_01;\n    uint extraout_ECX_02;\n    int32_t extraout_ECX_03;\n    int32_t iVar10;\n    int32_t extraout_ECX_04;\n    ushort extraout_DX;\n    uint uVar11;\n    int32_t extraout_EDX;\n    int32_t unaff_EBX;\n    uint *puVar12;\n    uint *puVar13;\n    uint *puVar14;\n    uint *puVar15;\n    uint *puVar16;\n    uchar *puVar17;\n    int32_t *piVar18;\n    uint unaff_EBP;\n    uchar *puVar19;\n    uint32_t uVar20;\n    uchar *unaff_EDI;\n    bool bVar21;\n    uchar uVar22;\n    uint8_t in_AF;\n    char cVar23;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uchar uVar24;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    ulong uVar25;\n    uint64_t uVar26;\n    uchar uStack0000001c;\n    uchar uStack0000001d;\n    uchar uStack0000001e;\n    uchar uStack0000001f;\n    \n    uStack0000001f = 0x4e;\n    uStack0000001e = 0x4a;\n    uStack0000001d = 0x57;\n    uStack0000001c = 0x71;\n    uVar20 = 0;\n    puVar17 = &stack0x00000004;\n    do {\n        puVar2 = &stack0x0000001c + uVar20;\n        uVar20 = uVar20 + 1;\n        uVar22 = uVar20 < 0xf;\n        uVar24 = SBORROW4(uVar20, 0xf);\n        cVar23 = uVar20 == 0xf;\n        *puVar2 = *puVar2 + 3 ^ 0x3f;\n    } while (uVar20 < 0xf);\n    do {\n        *(puVar17 + -4) = puVar17 + 0x18;\n        piVar18 = puVar17 + -8;\n        *(puVar17 + -8) = 0xa1999a;\n        (*_fcn.009aa90c)();\n        iVar8 = *piVar18;\n        piVar18[-1] = 0xa19981;\n        cVar7 = fcn.00a1999f();\n        iVar10 = extraout_ECX_03;\n        while( true ) {\n            iVar10 = iVar10 + -1;\n            if (iVar10 != 0 && cVar23 != '\\0') goto code_r0x009a18f3;\n            puVar1 = extraout_EDX + 0x34ff9e43;\n            iVar4 = (unaff_EBX & 3) - (*puVar1 & 3);\n            cVar23 = 0 < iVar4;\n            *puVar1 = *puVar1 + uVar22 * iVar4;\n            if (uVar24) break;\n            if (!uVar22) {\n                if (iVar10 != 1 && cVar23) {\n    // WARNING: Bad instruction - Truncating control flow here\n                    halt_baddata();\n                }\n                *(piVar18 + 1) = 0xa19337;\n                fcn.009b9160();\n                *(piVar18 + 3) = extraout_DX;\n                puVar13 = piVar18 + 1;\n                *(piVar18 + 1) = 0xa19502;\n                uVar25 = func_0x00a193f3();\n                uVar11 = uVar25 >> 0x20;\n                iVar10 = uVar25;\n                iVar8 = *(iVar10 + unaff_EBX);\n                *(puVar13 + -4) = iVar10;\n                *(puVar13 + -8) = extraout_ECX;\n                *(puVar13 + -0xc) = uVar11;\n                *(puVar13 + -0x10) = unaff_EBX;\n                *(puVar13 + -0x14) = puVar13;\n                *(puVar13 + -0x18) = unaff_EBP;\n                *(puVar13 + -0x1c) = iVar8;\n                *(puVar13 + -0x20) = unaff_EDI;\n                *(puVar13 + -0x1b) = puVar13 + -0x20;\n                puVar17 = iVar8 + unaff_EBX;\n                *(puVar13 + -0x24) = iVar10;\n                *(puVar13 + -0x28) = extraout_ECX;\n                *(puVar13 + -0x2c) = uVar11;\n                *(puVar13 + -0x30) = unaff_EBX;\n                *(puVar13 + -0x34) = puVar13 + -0x20;\n                *(puVar13 + -0x38) = unaff_EBP;\n                *(puVar13 + -0x3c) = puVar17;\n                *(puVar13 + -0x40) = unaff_EDI;\n                if (puVar17 < unaff_EDI) goto code_r0x009a18a8;\n                if (puVar17 < unaff_EDI) {\n                    unaff_EBX = unaff_EBX + 1;\n                    in_IF = 0;\n                }\n                *(puVar13 + -2) = unaff_EBX;\n                puVar9 = unaff_EDI + *(puVar13 + 0x2c);\n                bVar21 = puVar17 < puVar9;\n                uVar20 = puVar17 - puVar9;\n                puVar15 = puVar13 + -4;\n                *(puVar13 + -4) =\n                     (in_NT & 1) * 0x4000 | SBORROW4(puVar17, puVar9) * 0x800 | (in_IF & 1) * 0x200 |\n                     (in_TF & 1) * 0x100 | (uVar20 < 0) * 0x80 | (uVar20 == 0) * 0x40 | (in_AF & 1) * 0x10 |\n                     ((POPCOUNT(uVar20 & 0xff) & 1U) == 0) * 4 | bVar21 | (in_ID & 1) * 0x200000 |\n                     (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n                iVar8 = extraout_ECX;\n                goto code_r0x00a19691;\n            }\n        }\n        puVar17 = piVar18 + 1;\n        uVar22 = false;\n        uVar24 = false;\n        cVar23 = (cVar7 + 0x44U & 0x18) == 0;\n    } while( true );\ncode_r0x00a19691:\n    puVar15[-1] = puVar9;\n    puVar15[-2] = iVar8;\n    puVar15[-3] = uVar11;\n    puVar15[-4] = unaff_EBX;\n    puVar15[-5] = puVar15;\n    puVar15[-6] = unaff_EBP;\n    puVar15[-7] = puVar17;\n    puVar15[-8] = unaff_EDI;\n    puVar15[-2] = puVar15[-8];\n    puVar13 = puVar15 + 1;\n    if (!bVar21) {\ncode_r0x009a18a8:\n        puVar12 = puVar13 + -1;\n        puVar13[-1] = 0x9a18af;\n        func_0x009b918a();\n        *(puVar12 + -4) = 0xa19a66;\n        fcn.00a19a9b();\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    if (!bVar21) {\n        puVar15[9] = puVar15 + 0x32;\n        piVar18 = puVar15 + 8;\n        puVar15[8] = 0xa1971c;\n        uVar25 = (*_fcn.009aa90c)();\n        uVar11 = uVar25 >> 0x20;\n        iVar8 = uVar25;\n        *(piVar18 + -4) = iVar8;\n        *(piVar18 + -8) = extraout_ECX_01;\n        *(piVar18 + -0xc) = uVar11;\n        *(piVar18 + -0x10) = unaff_EBX;\n        *(piVar18 + -0x14) = piVar18;\n        *(piVar18 + -0x18) = unaff_EBP;\n        *(piVar18 + -0x1c) = puVar17;\n        *(piVar18 + -0x20) = unaff_EDI;\n        *(piVar18 + -0x24) = iVar8;\n        *(piVar18 + -0x28) = extraout_ECX_01;\n        *(piVar18 + -0x2c) = uVar11;\n        *(piVar18 + -0x30) = unaff_EBX;\n        *(piVar18 + -0x34) = piVar18 + -0x20;\n        *(piVar18 + -0x38) = unaff_EBP;\n        *(piVar18 + -0x3c) = puVar17;\n        *(piVar18 + -0x40) = unaff_EDI;\n        uVar11 = extraout_ECX_01;\n        if (iVar8 == 0) {\n            pcVar3 = *(*0x9aa924 + 0x10);\n            *(piVar18 + -4) = 0;\n            *(piVar18 + -8) = 0;\n            *(piVar18 + -0xc) = piVar18 + 0xa0;\n            puVar16 = piVar18 + -0x10;\n            piVar18 = piVar18 + -0x10;\n            *puVar16 = 0xa198f7;\n            uVar25 = (*pcVar3)();\n            *(piVar18 + -2) = extraout_ECX_02;\n            uVar11 = extraout_ECX_02;\n        }\n        iVar8 = uVar25;\n        *(piVar18 + -4) = iVar8;\n        *(piVar18 + -8) = uVar11;\n        *(piVar18 + -0xc) = uVar25 >> 0x20;\n        *(piVar18 + -0x10) = unaff_EBX;\n        *(piVar18 + -0x14) = piVar18;\n        *(piVar18 + -0x18) = unaff_EBP;\n        *(piVar18 + -0x1c) = iVar8;\n        *(piVar18 + -0x20) = unaff_EDI;\n        if (iVar8 == unaff_EBX) {\n            *(piVar18 + 0x26) = 0x3c;\n            *(piVar18 + 0x25) = 0x50;\n            *(piVar18 + -4) = 0xa197c2;\n            fcn.00a1979c();\n            *unaff_EDI = *(unaff_EBX + -0x577f);\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\ncode_r0x009a18f3:\n        *(piVar18 + -4) = fcn.00a19b7f;\n        iVar10 = fcn.00a19b2c();\n        *(piVar18 + -7) = *(piVar18 + -0x11);\n        iVar10 = *(iVar10 * 0xc + extraout_ECX_04);\n        *(piVar18 + -4) = unaff_EDI;\n        return *(iVar10 + iVar8 * 0x14 + 0x10);\n    }\n    *puVar15 = 0x2e;\n    puVar15[-1] = 0xa19611;\n    iVar8 = fcn.00a1958c();\n    puVar9 = iVar8 - puVar17;\n    puVar15[-1] = puVar9;\n    puVar19 = puVar17;\n    do {\n        puVar15[-2] = unaff_EBX;\n        puVar15[10] = puVar9;\n        puVar15[-2] = 0xa1967e;\n        fcn.009b9165();\n        puVar15[-2] = 0xa19683;\n        uVar26 = fcn.00a1965f();\n        puVar17 = uVar26;\n        puVar6 = extraout_ECX_00 * 2;\n        bVar21 = CARRY4(*puVar6, puVar19);\n        *puVar6 = puVar19 + *puVar6;\n        uVar5 = *(extraout_ECX_00 + puVar17 * 2);\n        uVar26 = uVar26 & 0xffffffff00000000 | ZEXT48(puVar19);\n        puVar9 = uVar26 / uVar5;\n        uVar11 = uVar26 % uVar5;\n        puVar19 = puVar17;\n    } while (!bVar21 && *puVar6 != 0);\n    puVar14 = puVar15 + -2;\n    puVar15 = puVar15 + -2;\n    *puVar14 = uVar11;\n    bVar21 = false;\n    iVar8 = extraout_ECX_00;\n    goto code_r0x00a19691;\n}\n",
        "token_count": 3236
    },
    "00a19a4c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n\nvoid fcn.00a19a4c(void)\n\n{\n    int32_t unaff_EBP;\n    bool in_ZF;\n    float10 fVar1;\n    \n    if (in_ZF) {\n        fcn.009b5741();\n    }\n    // WARNING: Call to offcut address within same function\n    fVar1 = func_0x00a199e9();\n    *(unaff_EBP + -0x17fbdb9c) = fVar1;\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 135
    },
    "00a19a9b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00a19a9b(int32_t param_1, int32_t param_2)\n\n{\n    uint in_EAX;\n    int32_t in_stack_00000014;\n    \n    *(*(param_1 + param_2) + 0x10 + in_stack_00000014) = in_EAX;\n    fcn.00a19b0b();\n    return;\n}\n",
        "token_count": 90
    },
    "00a53d55": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "00a540e5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00a543d4) overlaps instruction at (ram,0x00a543cf)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nvoid __thiscall\nfcn.00a540e5(uchar param_1, uint param_2, uint param_3, uchar param_4, uint param_5, uint param_6, uchar param_7)\n\n{\n    uint8_t *puVar1;\n    uint *puVar2;\n    uint16_t uVar3;\n    uint8_t uVar4;\n    uchar uVar5;\n    uint32_t uVar6;\n    int16_t extraout_CX;\n    uint16_t uVar7;\n    uint extraout_ECX;\n    int32_t iVar8;\n    uint32_t extraout_EDX;\n    uint32_t unaff_EBX;\n    uchar *puVar9;\n    int32_t unaff_EBP;\n    uint32_t unaff_ESI;\n    uint *unaff_EDI;\n    char cVar11;\n    char cVar12;\n    ulong uVar13;\n    uchar uStack0000000d;\n    uchar uStack0000000e;\n    uint16_t uStack0000000f;\n    uchar uStack00000019;\n    uint *puVar10;\n    \n    param_3._3_1_ = CONCAT11(param_6._2_1_, param_1) + 1 >> 8;\n    param_2._0_2_ = 0xa5;\n    // WARNING: Call to offcut address within same function\n    uVar5 = func_0x00a540f3();\n    *((unaff_ESI & 0xffff0000 | *0x10 & 0xffff) + 0x236dbee1) = uVar5;\n    uStack0000000d = 0xc;\n    uStack0000000e = &stack0x0000000c >> 8;\n    uStack0000000f = &stack0x0000000c >> 0x10;\n    param_5._1_2_ = CONCAT11(0xc, param_4);\n    param_6._0_1_ = 0x78;\n    param_6._1_1_ = 0x41;\n    param_6._2_1_ = 0xa5;\n    param_6._3_1_ = 0;\n    uVar6 = fcn.00a541d8();\n    uVar3 = uStack0000000f;\n    uStack00000019 = extraout_ECX;\n    uStack0000000f = uVar6 & 0xff00 | extraout_ECX >> 8 & 0xff;\n    uVar6 = uVar6 & 0xffff0000 | uVar3;\n    param_4 = param_3._3_1_;\n    iVar8 = 0;\n    if (uVar6 != 0) {\n        for (; (uVar6 >> iVar8 & 1) == 0; iVar8 = iVar8 + 1) {\n        }\n    }\n    puVar9 = &stack0x00000016;\n    param_6._2_1_ = unaff_EBX;\n    uVar4 = param_6._2_1_;\n    param_6._3_1_ = unaff_EBP;\n    param_7 = unaff_EBP >> 8;\n    while( true ) {\n        *(puVar9 + -4) = 0xa543cc;\n        fcn.00a542af();\n        cVar12 = SBORROW4(puVar9, 0x1d);\n        cVar11 = puVar9 + -0x1d < 0;\n        puVar10 = puVar9 + -0x21;\n        puVar9 = puVar9 + -0x21;\n    // WARNING: Call to offcut address within same function\n        *puVar10 = 0xa543db;\n        uVar13 = func_0x00a543dc();\n        iVar8 = uVar13 >> 0x20;\n        if (cVar12 == cVar11) break;\n        *uVar13 = *uVar13 + uVar13;\n    }\n    puVar1 = iVar8 + 0x661a244c;\n    *puVar1 = *puVar1 >> 1 | *puVar1 << 7;\n    uVar7 = -extraout_CX;\n    *(puVar9 + -4) = *(puVar9 + 8);\n    uVar3 = 0xf;\n    if (uVar7 != 0) {\n        for (; uVar7 >> uVar3 == 0; uVar3 = uVar3 - 1) {\n        }\n    }\n    *(puVar9 + 0x15) = iVar8 + unaff_EBP & 0xffff0000U | uVar3;\n    *(puVar9 + -6) = unaff_EBX & 0xffff0000 | *(puVar9 + -4);\n    *(puVar9 + 3) = *(puVar9 + -6);\n    puVar2 = unaff_EBX * 4;\n    uVar6 = (*(puVar9 + -4) & 0xffff0000 |\n            iVar8 * 4 & 0xff00U | (uVar7 != 0 && SCARRY4(*(puVar9 + 0x19), 1) == *(puVar9 + 0x19) + 1 < 0)) + unaff_EBP;\n    *(puVar9 + -4) = iVar8 * 4 & 0xffff0000U | *(puVar9 + 2);\n    *(puVar9 + -8) = uVar6;\n    *(puVar9 + -0xc) = iVar8;\n    *(puVar9 + -0x10) = unaff_EBX;\n    *(puVar9 + -0x14) = puVar9;\n    *(puVar9 + -0x18) = unaff_EBP;\n    *(puVar9 + -0x1c) = puVar2;\n    *(puVar9 + -0x20) = unaff_EDI;\n    *(puVar9 + 0x17) = uVar6 & 0xffff0000 | CONCAT11(unaff_EBX >> 8, uVar6);\n    *(puVar9 + -8) = 0xa544af;\n    fcn.00a54d66();\n    *(unaff_EDI + 0x28916207) = *(unaff_EDI + 0x28916207) | extraout_EDX;\n    *(puVar2 + 0x398f08f9) = *(puVar2 + 0x398f08f9) | uVar4;\n    *unaff_EDI = *puVar2;\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 1528
    },
    "00a5431a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n\nvoid fcn.00a5431a(void)\n\n{\n    uint uStack00000004;\n    \n    uStack00000004 = 0xa54313;\n    fcn.00a54339();\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 74
    },
    "00a54515": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00a54897) overlaps instruction at (ram,0x00a54895)\n// \n// WARNING: Control flow encountered bad instruction data\n// WARNING: Possible PIC construction at 0x00a54873: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x00a54878)\n// WARNING: Removing unreachable block (ram,0x00a54868)\n// WARNING: Removing unreachable block (ram,0x00a54802)\n// WARNING: Removing unreachable block (ram,0x00a547a3)\n// WARNING: Removing unreachable block (ram,0x00a54756)\n// WARNING: Removing unreachable block (ram,0x00a5487a)\n// WARNING: Removing unreachable block (ram,0x00a54897)\n// WARNING: Removing unreachable block (ram,0x00a5487c)\n\nvoid fcn.00a54515(void)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    uint16_t uVar3;\n    ushort extraout_DX;\n    uint32_t extraout_EDX;\n    uint32_t unaff_EBX;\n    uint32_t unaff_EBP;\n    uint16_t unaff_DI;\n    uchar uStack18;\n    uchar uStack17;\n    uchar uStack16;\n    uchar uStack15;\n    uchar uStack14;\n    uchar uStack13;\n    uchar auStack12 [12];\n    \n    func_0x00a5454a();\n    uStack16 = extraout_DX >> 8;\n    uStack13 = uStack16;\n    uStack18 = 0xee;\n    iVar1 = 0;\n    if (unaff_EBP != 0) {\n        for (; (unaff_EBP >> iVar1 & 1) == 0; iVar1 = iVar1 + 1) {\n        }\n    }\n    uStack17 = &uStack18 >> 8;\n    uStack15 = unaff_EBX;\n    uStack14 = extraout_DX;\n    uStack16 = 0xce;\n    uVar3 = unaff_EBX + 0x28c5U ^ 1 << (unaff_DI & 0xf);\n    iVar1 = 0;\n    if (uVar3 != 0) {\n        for (; (uVar3 >> iVar1 & 1) == 0; iVar1 = iVar1 + 1) {\n        }\n    }\n    fcn.00a54719();\n    uStack18 = unaff_EBP >> 8;\n    iVar2 = 0x1f;\n    if (unaff_EBP != 0) {\n        for (; unaff_EBP >> iVar2 == 0; iVar2 = iVar2 + -1) {\n        }\n    }\n    iVar2 = 0;\n    if (auStack12 != NULL) {\n        for (; (auStack12 >> iVar2 & 1) == 0; iVar2 = iVar2 + 1) {\n        }\n    }\n    iVar2 = 0;\n    if (unaff_EBX != 0) {\n        for (; (unaff_EBX >> iVar2 & 1) == 0; iVar2 = iVar2 + 1) {\n        }\n    }\n    iVar2 = 0x1f;\n    if (extraout_EDX != 0) {\n        for (; extraout_EDX >> iVar2 == 0; iVar2 = iVar2 + -1) {\n        }\n    }\n    uStack16 = 0x1b;\n    uStack15 = 0x49;\n    uStack14 = 0xa5;\n    uStack13 = 0;\n    fcn.00a54956();\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 816
    },
    "00a549bf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00a549bf(uint param_1, int32_t param_2, uchar param_3, uint param_4, uint param_5, uint16_t param_6)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int16_t iVar3;\n    code *pcVar4;\n    uint16_t uVar5;\n    uchar extraout_var;\n    uint16_t extraout_DX;\n    uchar unaff_BL;\n    uint32_t unaff_EBP;\n    int32_t unaff_EDI;\n    uchar uStack00000007;\n    uint32_t uStack00000012;\n    uchar uStack00000016;\n    uint var_ebh;\n    \n    fcn.00a54a21();\n    stack0x00000009 = CONCAT13(0xfb, CONCAT12(param_2 + (unaff_EBP & 0xffff) >> 8, CONCAT11(param_2 * 4 < 0, param_3)));\n    param_5._1_1_ = 0x4a;\n    uStack00000007 = extraout_var;\n    fcn.00a54ac5();\n    uStack00000016 = 0x2c;\n    uVar1 = CONCAT31(0xa5f82c, (~(param_6 >> 8) >> 2 & 1) != 0) + 0x241b;\n    uStack00000012 = CONCAT12(unaff_BL, unaff_EBP >> 0x1c);\n    iVar2 = (uVar1 & 0xffff0000 | CONCAT11(0x61, uVar1)) + (unaff_EBP >> 0x1c);\n    uVar5 = iVar2 >> 0x18 | iVar2 >> 8 & 0xff00;\n    iVar3 = 0xf;\n    if (uVar5 != 0) {\n        for (; uVar5 >> iVar3 == 0; iVar3 = iVar3 + -1) {\n        }\n    }\n    uVar5 = 0;\n    if (extraout_DX != 0) {\n        for (; (extraout_DX >> uVar5 & 1) == 0; uVar5 = uVar5 + 1) {\n        }\n    }\n    uStack00000007 = 0;\n    fcn.00a54beb();\n    *(unaff_EDI + 0x63a95a3f) = *(unaff_EDI + 0x63a95a3f) & unaff_EBP;\n    *(uVar5 + 0x31) = *(uVar5 + 0x31);\n    pcVar4 = swi(3);\n    (*pcVar4)();\n    return;\n}\n",
        "token_count": 593
    },
    "00a54beb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "00a54cbc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "00a563ca": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Removing unreachable block (ram,0x00a5648a)\n// WARNING: Removing unreachable block (ram,0x00a5657e)\n// WARNING: Removing unreachable block (ram,0x00a56541)\n// WARNING: Removing unreachable block (ram,0x00a565e9)\n// WARNING: Removing unreachable block (ram,0x00a565bd)\n// WARNING: Removing unreachable block (ram,0x00a5660e)\n// WARNING: Removing unreachable block (ram,0x00a5663b)\n// WARNING: Removing unreachable block (ram,0x00a56803)\n// WARNING: Removing unreachable block (ram,0x00a566f7)\n// WARNING: Removing unreachable block (ram,0x00a5678e)\n// WARNING: Removing unreachable block (ram,0x00a5676e)\n// WARNING: Removing unreachable block (ram,0x00a567c6)\n// WARNING: Removing unreachable block (ram,0x00a567d1)\n// WARNING: Removing unreachable block (ram,0x00a567d2)\n\nvoid __fastcall fcn.00a563ca(uint param_1, uint param_2, uint param_3, uint param_4, uint param_5)\n\n{\n    uint32_t *puVar1;\n    uint32_t unaff_EBX;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uchar unaff_retaddr;\n    uchar uStack00000010;\n    uchar uStack00000011;\n    uchar uStack00000012;\n    uint8_t uStack00000013;\n    uchar uStack00000014;\n    \n    uVar2 = unaff_EBX >> 8 & 0xff00;\n    uStack00000011 = param_2;\n    uStack00000012 = param_2 >> 8;\n    uStack00000014 = param_2 >> 0x18;\n    uStack00000010 = unaff_retaddr;\n    do {\n        uVar3 = ~unaff_EBX;\n        puVar1 = CONCAT13(uStack00000011, CONCAT12(uStack00000010, param_5._2_2_));\n        param_5._2_2_ = uVar3;\n        uStack00000010 = uVar3 >> 0x10;\n        uStack00000011 = uVar3 >> 0x18;\n        uStack00000013 = ~(uVar2 >> 8);\n        stack0x00000007 = 0xa5642f;\n        fcn.00a56402();\n        unaff_EBX = *puVar1;\n        uVar2 = 0x6d721b38;\n    } while( true );\n}\n",
        "token_count": 599
    },
    "00a56a7e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n\nvoid fcn.00a56a7e(void)\n\n{\n    uint32_t *puVar1;\n    uchar uVar2;\n    uint8_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uchar *extraout_ECX;\n    int16_t iVar6;\n    int32_t iVar7;\n    uint32_t unaff_EBX;\n    int32_t unaff_EBP;\n    int32_t unaff_ESI;\n    uint32_t *unaff_EDI;\n    bool bVar8;\n    ulong uVar9;\n    \n    uVar9 = fcn.00a5686c();\n    uVar5 = uVar9 >> 0x20;\n    *(unaff_ESI + 0x24c64b2c) = *(unaff_ESI + 0x24c64b2c) ^ unaff_EDI;\n    puVar1 = unaff_EBX + 0x78956603;\n    uVar4 = *puVar1;\n    *puVar1 = *puVar1 + uVar5;\n    iVar7 = uVar9 >> 0x1f;\n    bVar8 = 0x75 < uVar9 || CARRY1(uVar9 + 0x8a, CARRY4(uVar4, uVar5));\n    iVar6 = (uVar9 >> 0x10) >> 0xf;\n    uVar4 = in(iVar6);\n    uVar3 = uVar4 + 1;\n    uVar5 = uVar4 & 0xffffff00 | uVar3 - bVar8;\n    *(extraout_ECX + 0x63837011) = *(extraout_ECX + 0x63837011) + uVar5 + (uVar4 != -1 || uVar3 < bVar8);\n    puVar1 = iVar7 + -0x30;\n    *puVar1 = *puVar1 << 1 | *puVar1 < 0;\n    uVar4 = unaff_EBX & 0xffff0000 | CONCAT11(0x42, unaff_EBX);\n    *unaff_EDI = uVar5;\n    *(unaff_EDI + 0x492eb82d) = *(unaff_EDI + 0x492eb82d) + unaff_EBP;\n    uVar2 = in(iVar6);\n    *extraout_ECX = uVar2;\n    *(uVar5 + 0xef39406) = *(uVar5 + 0xef39406) - ((uVar9 >> 0x18) >> 7);\n    puVar1 = uVar4 + 0x8bd4e2b;\n    *puVar1 = *puVar1 & extraout_ECX + 5;\n    puVar1 = iVar7 + unaff_ESI + 0x710da459;\n    *puVar1 = *puVar1 | uVar4;\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 672
    },
    "009af1d0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.009af1d0(void)\n\n{\n    int32_t iVar1;\n    uchar uVar2;\n    \n    iVar1 = 0x1f;\n    if (*0x10 != NULL) {\n        for (; *0x10 >> iVar1 == 0; iVar1 = iVar1 + -1) {\n        }\n    }\n    fcn.009af258();\n    uVar2 = fcn.009af3f9();\n    out(0x74, uVar2);\n    return;\n}\n",
        "token_count": 112
    },
    "009b1165": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint32_t int.009b1165(void)\n\n{\n    uint32_t in_EAX;\n    uint8_t unaff_BL;\n    int32_t unaff_EDI;\n    bool in_ZF;\n    uint8_t in_SF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_OF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    \n    if ((in_ZF) && (!in_ZF)) {\n        return in_EAX & 0xffffff00 | (in_EAX + '\\b') - (*(unaff_EDI + -0x56) < unaff_BL);\n    }\n    fcn.009b1221((in_NT & 1) * 0x4000 >> 8 | (in_OF & 1) * 0x800 >> 8 | (in_IF & 1) * 0x200 >> 8 |\n                 (in_TF & 1) * 0x100 >> 8 | (in_SF & 1) * 0x80 >> 8 | (in_ID & 1) * 0x2000 | (in_VIP & 1) * 0x1000 |\n                 (in_VIF & 1) * 0x800 | (in_AC & 1) * 0x400);\n    do {\n        fcn.009b1281();\n        func_0xfa895a50();\n    } while( true );\n}\n",
        "token_count": 339
    },
    "00a56810": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00a53c1e) overlaps instruction at (ram,0x00a53c1a)\n// \n// WARNING: Possible PIC construction at 0x00a56835: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x00a5683a)\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00a56810(void)\n\n{\n    uint8_t *puVar1;\n    char *pcVar2;\n    uint uVar3;\n    unkbyte6 Var4;\n    uint16_t uVar5;\n    ushort extraout_var;\n    uint32_t uVar6;\n    int32_t iVar7;\n    uint8_t extraout_CL;\n    uint8_t extraout_CL_00;\n    ushort extraout_CX;\n    uint32_t extraout_ECX;\n    uint32_t extraout_ECX_00;\n    int32_t extraout_ECX_01;\n    char extraout_DL;\n    char extraout_DL_00;\n    uchar extraout_DH;\n    int32_t extraout_EDX;\n    int32_t unaff_EBX;\n    int32_t unaff_EBP;\n    int16_t iVar8;\n    int32_t iVar9;\n    uint unaff_EDI;\n    char cVar10;\n    uint8_t in_AF;\n    uint8_t in_TF;\n    uint8_t uVar11;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uchar uVar12;\n    char cStack47;\n    uint16_t uStack46;\n    uchar uStack44;\n    uchar uStack43;\n    uchar uStack42;\n    uchar uStack41;\n    uint var_24h;\n    uchar uStack36;\n    ushort uStack35;\n    uchar uStack33;\n    uchar uStack32;\n    uchar uStack31;\n    uchar uStack30;\n    uchar uStack29;\n    uchar uStack28;\n    ushort uStack27;\n    char cStack25;\n    char cStack24;\n    int16_t iStack23;\n    uchar uStack21;\n    uchar uStack20;\n    int32_t iVar13;\n    char cStack7;\n    uint uStack4;\n    \n    uStack4 = 0xa56815;\n    fcn.00a56830();\n    Var4 = *(extraout_EDX * 8 + -0x3756c646);\n    iVar9 = Var4;\n    uVar11 = 1;\n    puVar1 = unaff_EBP + -0x24;\n    *puVar1 = *puVar1 >> (extraout_CL_00 & 7) | *puVar1 << 8 - (extraout_CL_00 & 7);\n    iStack23 = *0x10 + -3;\n    uStack4 = extraout_EDX << 8;\n    uVar6 = fcn.00a56810();\n    cStack7 = uVar6;\n    uStack21 = &stack0xfffffffd >> 0x10;\n    uStack20 = &stack0xfffffffd >> 0x18;\n    uStack27 = unaff_EBP;\n    cStack25 = unaff_EBP >> 0x10;\n    cStack24 = unaff_EBP >> 0x18;\n    uStack31 = Var4;\n    uStack30 = Var4 >> 8;\n    uStack29 = Var4 >> 0x10;\n    uStack28 = Var4 >> 0x18;\n    uStack35 = unaff_EDI;\n    uStack33 = unaff_EDI >> 0x10;\n    uStack32 = unaff_EDI >> 0x18;\n    uStack4._1_3_ = *0x10 + -0x27;\n    var_24h._3_1_ = 0xa5;\n    uStack36 = 0;\n    uStack4 = CONCAT31(uStack4._1_3_, uVar6 >> 0x18);\n    uStack43 = 0x6c;\n    uStack42 = 0x68;\n    uStack41 = 0xa5;\n    var_24h._0_1_ = 0;\n    var_24h._1_1_ = cStack7;\n    var_24h._2_1_ = extraout_DH;\n    iVar13 = unaff_EBX;\n    fcn.00a56a7e();\n    uStack4 = uStack4 & 0xff | iVar9 << 8;\n    var_24h._1_1_ = 0xca;\n    var_24h._2_1_ = 0x68;\n    var_24h._3_1_ = 0xa5;\n    uStack36 = 0;\n    iVar7 = fcn.00a5689b();\n    uVar3 = *(iVar7 + 8);\n    var_24h._1_1_ = uVar3;\n    var_24h._2_1_ = uVar3 >> 8;\n    var_24h._3_1_ = uVar3 >> 0x10;\n    uStack36 = uVar3 >> 0x18;\n    uStack43 = 0;\n    uStack42 = 0;\n    uStack41 = 0x40;\n    var_24h._0_1_ = 0;\n    cStack47 = 'k';\n    uStack46 = 0xa540;\n    uStack44 = 0;\n    cVar10 = '\\0';\n    if (*0x99400c == 0) {\n        *0x99400c = 1;\n        cStack47 = (in_AF & 1) * '\\x10';\n        uStack46 = (in_NT & 1) * 0x4000 >> 8 | (uVar11 & 1) * 0x200 >> 8 | (in_TF & 1) * 0x100 >> 8 |\n                   (in_ID & 1) * 0x2000 | (in_VIP & 1) * 0x1000 | (in_VIF & 1) * 0x800 | (in_AC & 1) * 0x400;\n        uStack44 = 0;\n        fcn.00a53bf6();\n        uVar6 = extraout_ECX;\n    }\n    else {\n        if (*0x99400c == 0) {\n            *(extraout_ECX_01 + 0x6b8b7819) = *(extraout_ECX_01 + 0x6b8b7819) - extraout_ECX_01;\n            return;\n        }\n        iVar9 = CONCAT13(uStack28, CONCAT12(uStack29, CONCAT11(uStack30, uStack31)));\n        unaff_EBP = CONCAT13(cStack24, CONCAT12(cStack25, uStack27));\n        pcVar2 = uVar6 & 0xffffff | uStack4 << 0x18;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        *pcVar2 = *pcVar2 + cStack7;\n        uVar6 = extraout_ECX_00 & 0xffffff00 | extraout_ECX_00 + (iVar13 >> 8);\n        cVar10 = &stack0x0000000b < 0x19;\n        unaff_EBX = iVar13;\n    }\n    uStack27 = iVar9;\n    cStack25 = iVar9 >> 0x10;\n    cStack24 = iVar9 >> 0x18;\n    uVar12 = uStack20;\n    fcn.00a53c2a(CONCAT11(uStack30, uStack31));\n    *(unaff_EBX + -0x7f005af6) = *(unaff_EBX + -0x7f005af6) + extraout_DL + cVar10;\n    pcVar2 = ((CONCAT22(extraout_var, extraout_CX) & 0xffffff00 | extraout_CX | 0x40) - 0x34) + unaff_EBP * 8;\n    *pcVar2 = *pcVar2 + unaff_EBX;\n    fcn.00a53c95(uVar6 + unaff_EBX);\n    cStack25 = extraout_DL_00 + -8;\n    var_24h._2_1_ = uStack46;\n    iVar8 = -CONCAT11(cStack47, uVar12);\n    uVar5 = CONCAT11(uStack31, uStack32);\n    uStack32 = iVar8;\n    uStack31 = iVar8 >> 8;\n    uVar6 = ~(uVar6 + unaff_EBX & 0xffff0000 | uVar5);\n    uVar5 = CONCAT11(extraout_CL & ~(1 << (CONCAT11(cStack47, uVar12) & 0x1f)), uStack29);\n    uStack29 = uVar6;\n    uStack28 = uVar6 >> 8;\n    uStack27 = uVar6 >> 0x10;\n    iVar8 = 0xf;\n    if (uVar5 != 0) {\n        for (; uVar5 >> iVar8 == 0; iVar8 = iVar8 + -1) {\n        }\n    }\n    uStack46 = uStack35;\n    iVar9 = 0;\n    if (*0x10 != 0x2e) {\n        for (; (&stack0xffffffd2 >> iVar9 & 1) == 0; iVar9 = iVar9 + 1) {\n        }\n    }\n    iStack23 = unaff_EBX >> 8;\n    uStack21 = unaff_EBX >> 0x18;\n    var_24h._3_1_ = uStack35;\n    uStack36 = uStack35 >> 8;\n    uStack35 = CONCAT13(uStack43, CONCAT12(uStack44, uStack35)) >> 0x10;\n    uStack42 = 0x7a;\n    uStack41 = 0x3d;\n    var_24h._0_1_ = 0xa5;\n    var_24h._1_1_ = 0;\n    cStack24 = unaff_EBX;\n    fcn.00a53d55();\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 54337
    },
    "00a5689b": {
        "rules": [
            "PEB access",
            "check for PEB BeingDebugged flag"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00a53c1e) overlaps instruction at (ram,0x00a53c1a)\n// \n\nvoid __thiscall fcn.00a5689b(int32_t param_1)\n\n{\n    char *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint16_t uVar4;\n    uint16_t uVar5;\n    ushort extraout_var;\n    uint8_t extraout_CL;\n    ushort extraout_CX;\n    uint32_t extraout_ECX;\n    char extraout_DL;\n    char extraout_DL_00;\n    int32_t unaff_EBX;\n    int32_t unaff_EBP;\n    int16_t iVar6;\n    uint32_t uVar7;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    int32_t in_FS_OFFSET;\n    char cVar8;\n    uint8_t in_AF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uchar uStack0000000d;\n    uchar uStack0000000e;\n    uchar uStack0000000f;\n    uchar uStack00000010;\n    ushort uStack00000011;\n    uchar uStack00000013;\n    char cStack00000014;\n    uint16_t uStack00000015;\n    uchar uStack00000017;\n    uchar uStack00000018;\n    uchar uStack00000019;\n    uchar uStack0000001a;\n    uchar uStack0000001b;\n    uchar uStack0000001c;\n    uchar uStack0000001d;\n    uchar uStack0000001e;\n    uchar uStack0000001f;\n    ushort uStack00000020;\n    uchar uStack00000022;\n    uchar uStack00000023;\n    uchar uStack00000024;\n    uchar uStack00000025;\n    uchar uStack00000026;\n    uchar uStack00000027;\n    uint in_stack_00000024;\n    ushort uStack00000028;\n    char cStack0000002a;\n    char cStack0000002b;\n    int32_t in_stack_00000028;\n    ushort uStack0000002c;\n    uchar uStack0000002e;\n    uchar uStack0000002f;\n    uint in_stack_0000002c;\n    int32_t in_stack_00000030;\n    uint32_t in_stack_00000038;\n    char *in_stack_0000003c;\n    \n    uStack00000020 = unaff_EDI;\n    uStack00000022 = unaff_EDI >> 0x10;\n    uStack00000023 = unaff_EDI >> 0x18;\n    uVar2 = *(**(*(*(in_FS_OFFSET + 0x30) + 0xc) + 0x1c) + 8);\n    uStack0000001c = uVar2;\n    uStack0000001d = uVar2 >> 8;\n    uStack0000001e = uVar2 >> 0x10;\n    uStack0000001f = uVar2 >> 0x18;\n    uStack00000018 = 0;\n    uStack00000019 = 0;\n    uStack0000001a = 0x40;\n    uStack0000001b = 0;\n    cStack00000014 = 'k';\n    uStack00000015 = 0xa540;\n    uStack00000017 = 0;\n    cVar8 = '\\0';\n    if (*0x99400c == 0) {\n        *0x99400c = 1;\n        cStack00000014 = (in_AF & 1) * '\\x10';\n        uStack00000015 =\n             (in_NT & 1) * 0x4000 >> 8 | (in_IF & 1) * 0x200 >> 8 | (in_TF & 1) * 0x100 >> 8 | (in_ID & 1) * 0x2000 |\n             (in_VIP & 1) * 0x1000 | (in_VIF & 1) * 0x800 | (in_AC & 1) * 0x400;\n        uStack00000017 = 0;\n        uStack00000010 = 0x2a;\n        uStack00000011 = 0xa53c;\n        uStack00000013 = 0;\n        fcn.00a53bf6();\n        uVar7 = extraout_ECX;\n        in_stack_00000028 = unaff_EBP;\n        in_stack_00000024 = unaff_ESI;\n    }\n    else {\n        if (*0x99400c == 0) {\n            *(param_1 + 0x6b8b7819) = *(param_1 + 0x6b8b7819) - param_1;\n            return;\n        }\n        cVar8 = in_stack_0000003c;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        *in_stack_0000003c = *in_stack_0000003c + cVar8;\n        uVar7 = in_stack_00000038 & 0xffffff00 | in_stack_00000038 + (in_stack_00000030 >> 8);\n        cVar8 = &stack0x0000004e < 0x19;\n        unaff_EBX = in_stack_00000030;\n    }\n    uStack00000013 = uStack0000002f;\n    uStack00000011 = CONCAT11(uStack00000025, uStack00000024);\n    uStack00000028 = in_stack_00000024;\n    cStack0000002a = in_stack_00000024 >> 0x10;\n    cStack0000002b = in_stack_00000024 >> 0x18;\n    uVar7 = uVar7 + unaff_EBX;\n    uStack0000000d = 0x18;\n    uStack0000000e = 0x3c;\n    uStack0000000f = 0xa5;\n    uStack00000010 = 0;\n    fcn.00a53c2a();\n    *(unaff_EBX + -0x7f005af6) = *(unaff_EBX + -0x7f005af6) + extraout_DL + cVar8;\n    pcVar1 = ((CONCAT22(extraout_var, extraout_CX) & 0xffffff00 | extraout_CX | 0x40) - 0x34) + in_stack_00000028 * 8;\n    *pcVar1 = *pcVar1 + unaff_EBX;\n    uVar4 = CONCAT11(cStack00000014, uStack00000013);\n    uStack00000013 = uVar7;\n    cStack00000014 = uVar7 >> 8;\n    uStack0000000f = 0xda;\n    uStack00000010 = 0x3c;\n    uStack00000011 = 0xa5;\n    fcn.00a53c95();\n    cStack0000002a = extraout_DL_00 + -8;\n    uStack0000001d = uStack00000015;\n    iVar6 = -uVar4;\n    uVar5 = CONCAT11(uStack00000024, uStack00000023);\n    uStack00000023 = iVar6;\n    uStack00000024 = iVar6 >> 8;\n    uVar7 = ~(uVar7 & 0xffff0000 | uVar5);\n    uVar4 = CONCAT11(extraout_CL & ~(1 << (uVar4 & 0x1f)), uStack00000026);\n    uStack00000026 = uVar7;\n    uStack00000027 = uVar7 >> 8;\n    uStack00000028 = uVar7 >> 0x10;\n    iVar6 = 0xf;\n    if (uVar4 != 0) {\n        for (; uVar4 >> iVar6 == 0; iVar6 = iVar6 + -1) {\n        }\n    }\n    uStack00000015 = uStack00000020;\n    iVar3 = 0;\n    if (*0x10 != 0xffffffeb) {\n        for (; (&stack0x00000015 >> iVar3 & 1) == 0; iVar3 = iVar3 + 1) {\n        }\n    }\n    uStack0000002c = unaff_EBX >> 8;\n    uStack0000002e = unaff_EBX >> 0x18;\n    uStack0000001e = uStack00000020;\n    uStack0000001f = uStack00000020 >> 8;\n    uStack00000020 = CONCAT13(uStack00000018, CONCAT12(uStack00000017, uStack00000020)) >> 0x10;\n    uStack00000019 = 0x7a;\n    uStack0000001a = 0x3d;\n    uStack0000001b = 0xa5;\n    uStack0000001c = 0;\n    cStack0000002b = unaff_EBX;\n    fcn.00a53d55();\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 81903
    },
    "0099ef80": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x0099ef81) overlaps instruction at (ram,0x0099ef80)\n// \n\nvoid fcn.0099ef80(uint param_1, uint param_2, int32_t param_3)\n\n{\n    uint8_t *puVar1;\n    uchar uVar2;\n    int32_t iVar3;\n    uint8_t uVar4;\n    int32_t iVar5;\n    int32_t in_EAX;\n    uint8_t extraout_CL;\n    int32_t extraout_ECX;\n    ushort extraout_DX;\n    int32_t unaff_EBX;\n    int32_t unaff_EBP;\n    uchar *unaff_EDI;\n    unkbyte10 Var6;\n    \ncode_r0x0099ef80:\n    if (in_EAX + 4 != NULL) {\n        *(in_EAX + 4) = in_EAX;\n    }\n    uVar4 = func_0x009ed74c();\n    do {\n        iVar3 = param_3;\n        *(unaff_EBP + -0xf0eb981) = *(unaff_EBP + -0xf0eb981) & uVar4;\n        while( true ) {\n            iVar5 = fcn.009b3035();\n            if (iVar5 != 0) {\n                if (iVar5 == 0) {\n                    in_EAX = 0x72b98004;\n                    goto code_r0x0099ef80;\n                }\n                *iVar5 = iVar5;\n            }\n            Var6 = fcn.0099ef80();\n            if (extraout_ECX != 1) break;\n            uVar2 = in(extraout_DX);\n            *unaff_EDI = uVar2;\n            unaff_EDI = 0x9673eec8;\n            *(unaff_EBX + -0x7b) = Var6;\n            unaff_EBX = unaff_EBX + *0xf29bb859;\n        }\n        param_3 = 0x99eef1;\n        uVar4 = func_0xec36eef5();\n        puVar1 = iVar3 + -0x3a;\n        *puVar1 = *puVar1 | uVar4;\n        *0x48bf8d33 = *0x48bf8d33 >> (extraout_CL & 7) | *0x48bf8d33 << 8 - (extraout_CL & 7);\n        unaff_EBP = iVar3;\n    } while( true );\n}\n",
        "token_count": 546
    },
    "009a196b": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009ba028) overlaps instruction at (ram,0x009ba027)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nuint32_t __cdecl fcn.009a196b(uint32_t arg_8h)\n\n{\n    uint32_t *puVar1;\n    uint8_t *puVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    code *pcVar5;\n    uint32_t *puVar6;\n    uint32_t uVar7;\n    uint32_t extraout_ECX;\n    uint32_t *extraout_ECX_00;\n    int32_t extraout_ECX_01;\n    uint32_t uVar8;\n    ushort uVar9;\n    int32_t iVar10;\n    uint32_t *unaff_ESI;\n    uint32_t *puVar11;\n    uint32_t *unaff_EDI;\n    ushort in_CS;\n    bool bVar12;\n    uint8_t uVar13;\n    bool bVar14;\n    float10 extraout_ST0;\n    ulong uVar15;\n    unkbyte6 Var16;\n    uint uStack436;\n    int32_t *piStack420;\n    uint8_t uStack412;\n    \n    while( true ) {\n        do {\n            do {\n                uStack436 = 0x9ba030;\n                fcn.009a1954();\n                *0x9b92fb69 = in(0x14);\n                puVar2 = *(unaff_EDI + -0x12d4ea27);\n                puVar11 = unaff_ESI & extraout_ECX;\n                unaff_ESI = puVar11;\n            } while (puVar11 == NULL);\n            puVar1 = puVar2 + 1;\n            puVar6 = (*0x9b92fb69 & 0xffffff00 | *0x9b92fb69 + 0x7a) + 0x6a;\n            *puVar6 = *puVar6 << 1 | *puVar11 < *puVar2;\n            pcVar5 = swi(0xac);\n            uStack436 = puVar2;\n            Var16 = (*pcVar5)();\n            uVar9 = Var16 >> 0x20;\n            puVar6 = Var16;\n            unaff_EDI = puVar1;\n            if ((POPCOUNT(*puVar6 - arg_8h & 0xff) & 1U) == 0) goto code_r0x009ba05b;\n            uVar8 = *puVar6 < arg_8h;\n            bVar12 = CARRY4(arg_8h, *extraout_ECX_00);\n            bVar14 = SCARRY4(arg_8h, *extraout_ECX_00);\n            uVar7 = arg_8h + *extraout_ECX_00;\n            arg_8h = uVar7 + uVar8;\n            unaff_ESI = puVar11 + 1;\n        } while (bVar14 == SCARRY4(uVar7, uVar8));\n        unaff_EDI = puVar2 + 5;\n        *puVar1 = *(puVar11 + 1);\n        if (arg_8h == 0) {\n            *(puVar6 + -0x2d) = *(puVar6 + -0x2d) << 1;\n            uVar13 = 1;\n            uVar15 = func_0x8bff181c(in_CS);\n            iVar10 = CONCAT31(uVar15 >> 0x28, 0xad);\n            uVar8 = *(uVar15 + 0x16da6a91);\n            out(*(puVar11 + 5), iVar10);\n            if (&uStack436 + uVar13 + *(extraout_ECX_01 * 5 + -0x1d338ece) + 2 != 0x1) {\n    // WARNING: Bad instruction - Truncating control flow here\n                halt_baddata();\n            }\n            uVar7 = 0;\n            if (*0x28 != 0) {\n                do {\n                    uVar8 = (uVar8 << 7 | uVar8 >> 0x19) ^ *(uVar7 + iVar10);\n                    uVar7 = uVar7 + 1;\n                    *0x20 = puVar11 + 9;\n                } while (uVar7 < *0x28);\n            }\n            return uVar8;\n        }\n        *(extraout_ECX_00 + -0xf447270) = extraout_ST0;\n        puVar6 = puVar6 & 0xffff0000 | CONCAT11(0xec, Var16);\n        uVar3 = bVar12 || CARRY4(uVar7, uVar8);\n        uVar8 = *unaff_EDI;\n        uVar7 = *unaff_EDI;\n        uVar4 = *unaff_EDI + extraout_ECX_00;\n        *unaff_EDI = uVar4 + uVar3;\n        out(*(puVar11 + 5), uVar9);\n        if (*unaff_EDI != 0 && (SCARRY4(uVar7, extraout_ECX_00) != SCARRY4(uVar4, uVar3)) == *unaff_EDI < 0) break;\n        *(arg_8h + 0xd6851e0a) =\n             *(arg_8h + 0xd6851e0a) + (Var16 >> 0x20) + (CARRY4(uVar8, extraout_ECX_00) || CARRY4(uVar4, uVar3));\n        out(uVar9, puVar6);\n        pcVar5 = swi(0x96);\n        (*pcVar5)();\n        arg_8h = 0xe5136aa;\n        unaff_ESI = puVar11 + 9;\n    }\ncode_r0x009ba05b:\n    uVar13 = unaff_EDI;\n    out(uVar9, uVar13);\n    *(puVar6 + -0x7f5bcba6) = *(puVar6 + -0x7f5bcba6) + 0x29818966 + (uVar13 < 0x36);\n    out(uVar9, uVar13 % 0x47);\n    *piStack420 = *piStack420 << (uStack412 & 0x1f);\n    do {\n    // WARNING: Do nothing block with infinite loop\n    } while( true );\n}\n",
        "token_count": 1435
    },
    "009aabf0": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009aac68) overlaps instruction at (ram,0x009aac67)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nvoid __fastcall fcn.009aabf0(uint param_1, uint32_t param_2)\n\n{\n    int32_t *piVar1;\n    uint8_t uVar2;\n    uint16_t uVar3;\n    int16_t iVar4;\n    uint in_EAX;\n    uint8_t *puVar5;\n    uint16_t extraout_CX;\n    uint16_t extraout_CX_00;\n    uint32_t extraout_ECX;\n    int32_t iVar6;\n    uint32_t unaff_EBX;\n    uint32_t uVar7;\n    uchar *puVar8;\n    int32_t iVar9;\n    int32_t unaff_ESI;\n    int32_t unaff_EDI;\n    int32_t *piVar10;\n    uint8_t uVar11;\n    uint64_t uVar12;\n    uint64_t uVar13;\n    \n    piVar10 = unaff_EDI + 1;\n    uVar3 = in_EAX >> 0x18 | in_EAX >> 8 & 0xff00;\n    iVar4 = -uVar3;\n    if ((uVar3 == 0 && iVar4 != 0) && (uVar3 != 0 || iVar4 == 0)) {\n        puVar8 = &stack0x00000001;\n        fcn.009aa99a();\n        uVar3 = extraout_CX;\n        goto code_r0x009aac53;\n    }\n    unaff_EBX = unaff_EBX | param_2;\n    uVar7 = CONCAT31(param_1 >> 8, 0x2d);\n    piVar10 = unaff_EDI + 0x137cae9e;\n    uVar13 = CONCAT44(&stack0x00000006, (iVar4 >> 8) << 8);\n    do {\n        iVar9 = uVar13 >> 0x20;\n        uVar3 = uVar7;\n        uVar7 = (unaff_EBX & 0xff0000) >> 8 | (unaff_EBX & 0xff00) << 8 | unaff_EBX << 0x18;\n        puVar8 = iVar9 + -0x18;\n        uVar11 = uVar13 >> 8;\n        if (uVar13 < 0x1800000000) {\n            unaff_EBX = uVar7 | uVar11;\n        }\n        else {\n            unaff_EBX = uVar7 | uVar11;\n            puVar8 = iVar9 + -0x18;\n        }\ncode_r0x009aac53:\n        uVar11 = 0;\n        if ((uVar3 | piVar10) < 0) {\n            uVar3 = 0xf;\n            if (puVar8 - 4U != 0) {\n                for (; puVar8 - 4U >> uVar3 == 0; uVar3 = uVar3 - 1) {\n                }\n            }\n            unaff_EBX = unaff_EBX & 0xffff0000 | uVar3;\n            *(puVar8 + -8) = 0x9aac73;\n            uVar13 = func_0x009aad1b();\n            uVar7 = extraout_ECX;\n        }\n        else {\n            *(puVar8 + -8) = 0x9aac65;\n            uVar12 = fcn.009aacdc();\n            puVar5 = uVar12 & 0xffff0000 | extraout_CX_00;\n            uVar13 = uVar12 & 0xffffffff00000000 | ZEXT48(puVar5);\n            uVar7 = uVar12 & 0xffff;\n            uVar2 = extraout_CX_00;\n            *(unaff_ESI + -0x42f0993f) = *(unaff_ESI + -0x42f0993f) + uVar2 + uVar11;\n            uVar11 = CARRY1(*puVar5, uVar2);\n            *puVar5 = *puVar5 + uVar2;\n        }\n        iVar6 = uVar13 >> 0x20;\n        *piVar10 = iVar6;\n        piVar1 = uVar13 + 0x791e8811;\n        *piVar1 = iVar6 + uVar11 + *piVar1;\n        *(unaff_EBX - 0x5b) = uVar7;\n    } while( true );\n}\n",
        "token_count": 1007
    },
    "009aae55": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009aac68) overlaps instruction at (ram,0x009aac67)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nvoid fcn.009aae55(void)\n\n{\n    int32_t *piVar1;\n    uint16_t uVar2;\n    uint8_t uVar3;\n    uint8_t *puVar4;\n    uint16_t extraout_CX;\n    uint32_t extraout_ECX;\n    uint32_t uVar5;\n    uint32_t extraout_ECX_00;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint32_t unaff_EBX;\n    uchar *puVar8;\n    int32_t unaff_ESI;\n    int32_t *unaff_EDI;\n    uint8_t uVar9;\n    uint64_t uVar10;\n    uint64_t uVar11;\n    \n    puVar8 = &stack0xfffffff7;\n    fcn.009aa99a();\n    uVar5 = extraout_ECX;\n    do {\n        uVar9 = 0;\n        if ((uVar5 | unaff_EDI) < 0) {\n            uVar2 = 0xf;\n            if (puVar8 - 4U != 0) {\n                for (; puVar8 - 4U >> uVar2 == 0; uVar2 = uVar2 - 1) {\n                }\n            }\n            unaff_EBX = unaff_EBX & 0xffff0000 | uVar2;\n            *(puVar8 + -8) = 0x9aac73;\n            uVar11 = func_0x009aad1b();\n            uVar5 = extraout_ECX_00;\n        }\n        else {\n            *(puVar8 + -8) = 0x9aac65;\n            uVar10 = fcn.009aacdc();\n            puVar4 = uVar10 & 0xffff0000 | extraout_CX;\n            uVar11 = uVar10 & 0xffffffff00000000 | ZEXT48(puVar4);\n            uVar5 = uVar10 & 0xffff;\n            uVar3 = extraout_CX;\n            *(unaff_ESI + -0x42f0993f) = *(unaff_ESI + -0x42f0993f) + uVar3 + uVar9;\n            uVar9 = CARRY1(*puVar4, uVar3);\n            *puVar4 = *puVar4 + uVar3;\n        }\n        iVar6 = uVar11 >> 0x20;\n        *unaff_EDI = iVar6;\n        piVar1 = uVar11 + 0x791e8811;\n        *piVar1 = *piVar1 + iVar6 + uVar9;\n        *(unaff_EBX - 0x5b) = uVar5;\n        uVar7 = (unaff_EBX & 0xff0000) >> 8 | (unaff_EBX & 0xff00) << 8 | unaff_EBX << 0x18;\n        puVar8 = iVar6 + -0x18;\n        uVar9 = uVar11 >> 8;\n        if (uVar11 < 0x1800000000) {\n            unaff_EBX = uVar7 | uVar9;\n        }\n        else {\n            unaff_EBX = uVar7 | uVar9;\n            puVar8 = iVar6 + -0x18;\n        }\n    } while( true );\n}\n",
        "token_count": 773
    },
    "009ab626": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n\nvoid fcn.009ab626(void)\n\n{\n    fcn.009ab610();\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 49
    },
    "009ab644": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "009ac0aa": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009ac061) overlaps instruction at (ram,0x009ac060)\n// \n// WARNING: Possible PIC construction at 0x009ac178: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x009ac17d)\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.009ac0aa(uint *param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uchar *extraout_ECX;\n    uchar *puVar3;\n    ushort extraout_DX;\n    uint *unaff_EBX;\n    uint *puVar4;\n    int32_t unaff_ESI;\n    uint *puVar5;\n    int32_t unaff_EDI;\n    uint16_t in_DS;\n    uint8_t uVar6;\n    uint8_t in_AF;\n    uchar in_ZF;\n    char cVar7;\n    char in_SF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    char cVar8;\n    char in_OF;\n    bool bVar9;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    ulong uVar10;\n    ushort uStack70;\n    uchar uStack68;\n    uchar uStack67;\n    uint16_t uStack66;\n    uint uStack64;\n    uint uStack48;\n    uchar auStack44 [8];\n    uint32_t uStack36;\n    int32_t iStack32;\n    \n    uVar6 = 1;\n    puVar4 = param_1 + 0x1a;\n    param_1 = unaff_EBX;\n    while( true ) {\n        puVar5 = param_1;\n        iStack32 = 0x9ac0ce;\n        param_1 = puVar4;\n        uVar10 = fcn.009ac0ec();\n        iStack32 = uVar10 >> 0x20;\n        *(unaff_ESI + 0x31) = *(unaff_ESI + 0x31) | uVar6 >> 1;\n        if ((uVar6 & 1) == 0 && !in_ZF) {\n            in(0xff);\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        cVar7 = uVar10;\n        if (in_OF != in_SF) break;\n        *(unaff_EDI + -0x17dfdba4) = *(unaff_EDI + -0x17dfdba4) + 1;\n        uStack36 = uStack36 & 0xffff0000 | in_DS;\n        *uVar10 = *uVar10 + cVar7;\n        *(iStack32 + -0x40) = *(iStack32 + -0x40) + (uVar10 >> 0x20);\n        uVar6 = 0;\n        in_OF = '\\0';\n        in_SF = '\\0';\n        in_ZF = 1;\n        puVar4 = puVar5;\n    }\n    if (!in_ZF) {\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if ((POPCOUNT((uVar10 >> 8) + (uVar10 >> 0x28)) & 1U) != 0) {\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    cVar8 = SCARRY1(cVar7, '$');\n    cVar7 = cVar7 + '$' < '\\0';\n    uStack36 = 0x9ac053;\n    iVar2 = fcn.009ac021();\n    if (cVar8 != cVar7) {\n        uStack48 = 0x9ac061;\n        fcn.009ac0c0();\n        do {\n    // WARNING: Do nothing block with infinite loop\n        } while( true );\n    }\n    uStack70 = uStack64;\n    if (auStack44 < 0x16) {\n        uStack68 = 0x34;\n        uStack67 = 0xc1;\n        uStack66 = 0x9a;\n        iVar2 = fcn.009ac15b();\n        puVar3 = extraout_ECX;\n    }\n    else {\n        puVar3 = (unaff_ESI - 0x80U & 0xfffffffc) - iVar2;\n        uStack66 = (in_ID & 1) * 0x20 | (in_VIP & 1) * 0x10 | (in_VIF & 1) * 8 | (in_AC & 1) * 4;\n        uStack68 = 0x9a;\n        uStack67 = 0;\n    }\n    bVar9 = SCARRY4(&uStack70, 2);\n    if ((!bVar9) || (bVar9)) {\n        *(puVar3 + -4) =\n             (in_NT & 1) * 0x4000 | bVar9 * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | (&uStack68 < 0) * 0x80 |\n             (*0x10 == 0x44) * 0x40 | (in_AF & 1) * 0x10 | ((POPCOUNT(&uStack68 & 0xff) & 1U) == 0) * 4 |\n             0xfffffffd < &uStack70 | (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 |\n             (in_AC & 1) * 0x40000;\n        *(puVar3 + -8) = unaff_ESI;\n        *(puVar3 + -0xc) = unaff_EDI;\n        uStack68 = SUB41(puVar3, 0);\n        uStack67 = puVar3 >> 8;\n        uStack66 = puVar3 >> 0x10;\n    }\n    rdtsc();\n    for (; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = *puVar5;\n        puVar5 = puVar5 + 1;\n        puVar3 = puVar3 + 1;\n    }\n    uStack70 = 0x9a;\n    fcn.009ac237();\n    out(*puVar5, extraout_DX);\n    pcVar1 = swi(1);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 1491
    },
    "009ac327": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009ac46d) overlaps instruction at (ram,0x009ac46b)\n// \n// WARNING: Removing unreachable block (ram,0x009ac31c)\n// WARNING: Removing unreachable block (ram,0x009ac575)\n// WARNING: Could not reconcile some variable overlaps\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nuint32_t __fastcall fcn.009ac327(uint32_t param_1, uint8_t param_2)\n\n{\n    int16_t iVar1;\n    uint16_t uVar2;\n    uint8_t uVar3;\n    uint8_t uVar4;\n    uint32_t uVar5;\n    uint *puVar6;\n    uint32_t uVar7;\n    ushort uVar9;\n    int32_t iVar8;\n    char extraout_CL;\n    char extraout_CL_00;\n    int32_t extraout_ECX;\n    ushort extraout_DX;\n    char cVar12;\n    uint16_t uVar10;\n    int32_t unaff_EBX;\n    uint uVar11;\n    uint unaff_EBP;\n    int32_t unaff_ESI;\n    int32_t unaff_EDI;\n    bool bVar13;\n    uint8_t in_AF;\n    bool bVar14;\n    bool bVar15;\n    float10 extraout_ST0;\n    uchar in_YMM10 [32];\n    uchar uVar16;\n    uint32_t unaff_retaddr;\n    uint uStack4;\n    \n    uVar5 = unaff_EBX - 1;\n    bVar13 = CARRY1(param_1, param_2);\n    cVar12 = (uVar5 >> 8) + '\\x01';\n    uVar7 = CONCAT21(0xa418, cVar12) << 8;\n    if ((bVar13 || cVar12 == '\\0') || (!bVar13 && cVar12 != '\\0')) {\n        uVar5 = func_0x009ac368();\ncode_r0x009ac3e8:\n        if ((*0x10 != 0x19) && (*0x10 == 0x19)) {\n            return uVar5 & 0xffffff00 | uVar5 + 1;\n        }\n        fcn.009ac58a();\n        cVar12 = -extraout_CL - 0x39;\n        iVar1 = 0;\n        if (unaff_ESI != 0) {\n            for (; (unaff_ESI >> iVar1 & 1) == 0; iVar1 = iVar1 + 1) {\n            }\n        }\n        if (-extraout_CL < 0x39) {\n            uVar9 = 0xbbad;\n        }\n        else {\n            uVar9 = 0xbbad;\n        }\n        while( true ) {\n            bVar13 = cVar12 + -7 < '\\0';\n            uVar11 = CONCAT22(uVar9, 0x4000);\n            iVar8 = fcn.009ac642();\n            if (bVar13) break;\n            *(iVar8 + -0x35) = unaff_EDI + -1;\n            uVar9 = iVar8 >> 0x10;\n            vmaxps_avx(in_YMM10, *(CONCAT31(uVar11 >> 8, 0xb1) + -0x72108bc));\n            cVar12 = extraout_CL_00;\n        }\n        return iVar8 + 0x78063e80;\n    }\n    while( true ) {\n        uVar3 = uVar5 - 0x3f;\n        uVar10 = uVar7 & 0xff00 | param_1 >> 8 & 0xff;\n        uVar2 = unaff_EBP & 0xf;\n        bVar13 = (uVar10 >> uVar2 & 1) != 0;\n        if ((bVar13 || uVar3 == 0) || (!bVar13 && uVar3 != 0)) break;\n        in_AF = (uVar5 & 0x1000) != 0;\n        uVar5 = (uVar5 & 0xffffff00 | uVar3) + *((uVar7 & 0xffff0000 | uVar10 | 1 << uVar2) + 0x16d615e6) +\n                ((uVar5 & 0x100) != 0);\n        *(uVar5 + 3) = *(uVar5 + 3) + 0x224648d;\n        uVar7 = uVar7 & 0xffff0000 | unaff_retaddr >> 8 & 0xffff;\n    }\n    uVar5 = uVar5 & 0xffffff00 | uVar3;\n    if (0x2 < *0x10) goto code_r0x009ac3e8;\n    uVar5 = uVar5 + (param_1 & 0xffffff00 | param_1 + param_2);\n    cVar12 = uVar5 >> 8;\n    bVar15 = SBORROW1(cVar12, '\\x01');\n    bVar14 = cVar12 == '\\x01';\n    uStack4 = uStack4 & 0xffffff00;\n    uVar4 = fcn.009ac441();\n    puVar6 = *0x67a35031;\n    uVar16 = unaff_retaddr;\n    bVar13 = 9 < (uVar4 & 0xf) | in_AF;\n    if (bVar13 || bVar14) {\n        if (!bVar15) {\n            *0xc79e0fda = *0x67a35031;\n            if (extraout_ECX == 1) goto code_r0x009ac46b;\n            **0x67a35031 = unaff_EBP;\n            goto code_r0x009ac493;\n        }\n        uVar7 = *0x67a35031 & 0x3d7ebf4c ^ 0x53;\n        out(*(unaff_ESI + 1), extraout_DX);\n        *((uVar5 & 0xffff0000 | CONCAT11(param_2, uVar5) | 1 << (uVar3 & 0x1f)) + 0x2e) = extraout_ST0;\n        *(unaff_EDI + 0x35b72406) = *(unaff_EDI + 0x35b72406) - uVar7;\n    }\n    else {\n        uVar3 = (*0x67a35031 + 'c') - bVar13;\n        puVar6 = *0x67a35031 & 0xffffff00 | uVar3;\n        *puVar6 = *puVar6 + uVar3;\n        *puVar6 = *puVar6 + uVar3;\ncode_r0x009ac493:\n        uStack4._1_3_ = uStack4 >> 8;\n        uVar7 = CONCAT13(uVar16, uStack4._1_3_);\n        uStack4 = puVar6 << 8;\n        uVar16 = 0;\n    }\n    iVar8 = 0x1f;\n    if (uVar7 != 0) {\n        for (; uVar7 >> iVar8 == 0; iVar8 = iVar8 + -1) {\n        }\n    }\n    *0xc79e0fda = uVar7 - 0x48;\ncode_r0x009ac46b:\n    return CONCAT13(uVar16, uStack4._1_3_);\n}\n",
        "token_count": 1640
    },
    "009ac58a": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009ac5c8) overlaps instruction at (ram,0x009ac5c7)\n// \n// WARNING: Removing unreachable block (ram,0x009ac575)\n\nint32_t __fastcall fcn.009ac58a(char param_1)\n\n{\n    int16_t iVar1;\n    ushort uVar3;\n    int32_t iVar2;\n    char extraout_CL;\n    char cVar4;\n    uint uVar5;\n    uint16_t unaff_SI;\n    int32_t unaff_EDI;\n    bool bVar6;\n    uchar in_YMM10 [32];\n    \n    cVar4 = -param_1 - 0x39;\n    iVar1 = 0;\n    if (unaff_SI != 0) {\n        for (; (unaff_SI >> iVar1 & 1) == 0; iVar1 = iVar1 + 1) {\n        }\n    }\n    if (-param_1 < 0x39) {\n        uVar3 = 0xbbad;\n    }\n    else {\n        uVar3 = 0xbbad;\n    }\n    while( true ) {\n        bVar6 = cVar4 + -7 < '\\0';\n        uVar5 = CONCAT22(uVar3, 0x4000);\n        iVar2 = fcn.009ac642();\n        if (bVar6) break;\n        *(iVar2 + -0x35) = unaff_EDI + -1;\n        uVar3 = iVar2 >> 0x10;\n        vmaxps_avx(in_YMM10, *(CONCAT31(uVar5 >> 8, 0xb1) + -0x72108bc));\n        cVar4 = extraout_CL;\n    }\n    return iVar2 + 0x78063e80;\n}\n",
        "token_count": 391
    },
    "009acc99": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x009acced: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x009accf2)\n// WARNING: Removing unreachable block (ram,0x009accae)\n\nvoid __fastcall int.009acc99(uint param_1, ushort param_2)\n\n{\n    uint32_t uVar1;\n    ushort unaff_retaddr;\n    \n    uVar1 = fcn.009accd0(CONCAT22(param_2, unaff_retaddr));\n    *(uVar1 - 0x4d) = *(uVar1 - 0x4d) & uVar1;\n    int.009acc99(0x9accf2);\n    fcn.009acd24();\n    return;\n}\n",
        "token_count": 165
    },
    "009ad412": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009ad4cd) overlaps instruction at (ram,0x009ad4cb)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nulong fcn.009ad412(void)\n\n{\n    uint8_t *puVar1;\n    uint8_t uVar2;\n    int32_t iVar3;\n    uint8_t uVar4;\n    unkuint3 Var5;\n    uint8_t uVar6;\n    uint32_t in_EAX;\n    uint32_t uVar7;\n    int32_t iVar8;\n    uint32_t uVar9;\n    uint32_t extraout_ECX;\n    int16_t iVar10;\n    uchar uVar11;\n    ushort uVar12;\n    int32_t unaff_EBX;\n    uchar *puVar13;\n    uint32_t unaff_EBP;\n    uint32_t *unaff_ESI;\n    bool bVar14;\n    uint8_t in_AF;\n    \n    uVar7 = in_EAX & 0xffffff00 | in_EAX + 1;\n    puVar13 = &stack0x00000024;\n    while( true ) {\n        if ((puVar13 == 0x11) || (puVar13 != 0x11)) break;\n        in_AF = 9 < (*0xd2469453 + 1U & 0xf) | in_AF;\n        uVar6 = *0xd2469453 + 1U + in_AF * '\\x06';\n        puVar1 = unaff_EBX + *(uVar7 - 0x3f) * 8;\n        uVar4 = (uVar7 & 0x1f) % 9;\n        uVar2 = *puVar1;\n        *puVar1 = uVar2 << uVar4 |\n                  CONCAT11(0x90 < (uVar6 & 0xf0) | 0x10 < puVar13 | in_AF * (0xf9 < uVar6), uVar2) >> 9 - uVar4;\n        in(0x14);\n        uVar9 = *unaff_ESI;\n        *unaff_ESI = unaff_EBP;\n        uVar7 = fcn.009ad412();\n        puVar13 = puVar13 + -0x10;\n        unaff_EBP = uVar9;\n    }\n    uVar9 = uVar7 << 2;\n    if (SBORROW4(puVar13, 0x11)) {\n        *(puVar13 + -0x14) = 0x9ad4cb;\n        uVar7 = fcn.009ad551();\n        *(uVar7 + 0x86c6960f) = *(uVar7 + 0x86c6960f) | unaff_EBP;\n        uVar7 = uVar7 & 0xffffff00;\n        uVar9 = extraout_ECX;\n    }\n    bVar14 = 0xbb701b38 < uVar9;\n    iVar3 = *(uVar9 + 0x9ad768);\n    iVar10 = unaff_EBP * 4;\n    if ((iVar10 < 2) || (iVar8 = iVar3,  1 < iVar10)) {\n        iVar8 = iVar3 + -0x255af00d;\n        bVar14 = false;\n        if (iVar8 != 0) {\n            uVar9 = iVar3 + 0xdaa50fc3;\n            goto code_r0x009ad5f3;\n        }\n    }\n    uVar9 = iVar8 - 0x30;\ncode_r0x009ad5f3:\n    uVar9 = ~uVar9 - 1;\n    uVar11 = uVar9 >> 8;\n    uVar12 = uVar9 >> 0x10;\n    if ((POPCOUNT(uVar9 & 0xff) & 1U) == 0) {\n        Var5 = CONCAT21(uVar12, uVar9);\n        uVar2 = (iVar8 & 0x1f) % 0x11;\n        uVar9 = bVar14 << 0x10 | CONCAT31(Var5, uVar11) & 0xffff;\n        uVar9 = (Var5 & 0xffff00) << 8 | uVar9 >> uVar2 | uVar9 << 0x11 - uVar2;\n    }\n    else {\n        Var5 = CONCAT21(uVar12, uVar9);\n        uVar2 = (iVar8 & 0x1f) % 0x11;\n        uVar9 = bVar14 << 0x10 | CONCAT31(Var5, uVar11) & 0xffff;\n        uVar9 = (Var5 & 0xffff00) << 8 | uVar9 >> uVar2 | uVar9 << 0x11 - uVar2;\n    }\n    unaff_ESI[-1] = iVar8;\n    return CONCAT44(uVar9, uVar7);\n}\n",
        "token_count": 1092
    },
    "009aea3f": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009aec71) overlaps instruction at (ram,0x009aec70)\n// \n\nuint32_t fcn.009aea3f(void)\n\n{\n    uint16_t uVar1;\n    int16_t iVar2;\n    uint32_t *puVar3;\n    ulong uVar4;\n    uint16_t uVar5;\n    ushort uVar6;\n    uint8_t uVar7;\n    uint32_t uVar8;\n    uchar *puVar9;\n    int32_t iVar10;\n    uint8_t extraout_CL;\n    char extraout_CL_00;\n    uint32_t uVar11;\n    uint8_t extraout_DH;\n    uint32_t uVar12;\n    uint8_t *puVar13;\n    uint16_t uVar14;\n    ushort in_CS;\n    uint8_t in_CF;\n    bool bVar15;\n    uint8_t in_PF;\n    uint8_t in_AF;\n    uint8_t in_ZF;\n    uint8_t in_SF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_OF;\n    bool bVar16;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uchar *unaff_retaddr;\n    uint32_t in_stack_0000002c;\n    uint16_t uStack196;\n    uint8_t uStack194;\n    uchar uStack193;\n    uchar uStack192;\n    uchar uStack191;\n    ushort uStack190;\n    uint32_t uStack4;\n    \n    uStack4 = 0x9aea44;\n    uVar8 = func_0x009aea13();\n    uVar6 = *0xd317e49d;\n    while( true ) {\n        if (uVar8 == 0) {\n            puVar3 = cpuid_basic_info(0);\n        }\n        else if (uVar8 == 1) {\n            puVar3 = cpuid_Version_info(1);\n        }\n        else if (uVar8 == 2) {\n            puVar3 = cpuid_cache_tlb_info(2);\n        }\n        else if (uVar8 == 3) {\n            puVar3 = cpuid_serial_info(3);\n        }\n        else if (uVar8 == 4) {\n            puVar3 = cpuid_Deterministic_Cache_Parameters_info(4);\n        }\n        else if (uVar8 == 5) {\n            puVar3 = cpuid_MONITOR_MWAIT_Features_info(5);\n        }\n        else if (uVar8 == 6) {\n            puVar3 = cpuid_Thermal_Power_Management_info(6);\n        }\n        else if (uVar8 == 7) {\n            puVar3 = cpuid_Extended_Feature_Enumeration_info(7);\n        }\n        else if (uVar8 == 9) {\n            puVar3 = cpuid_Direct_Cache_Access_info(9);\n        }\n        else if (uVar8 == 10) {\n            puVar3 = cpuid_Architectural_Performance_Monitoring_info(10);\n        }\n        else if (uVar8 == 0xb) {\n            puVar3 = cpuid_Extended_Topology_info(0xb);\n        }\n        else if (uVar8 == 0xd) {\n            puVar3 = cpuid_Processor_Extended_States_info(0xd);\n        }\n        else if (uVar8 == 0xf) {\n            puVar3 = cpuid_Quality_of_Service_info(0xf);\n        }\n        else if (uVar8 == 0x80000002) {\n            puVar3 = cpuid_brand_part1_info(0x80000002);\n        }\n        else if (uVar8 == 0x80000003) {\n            puVar3 = cpuid_brand_part2_info(0x80000003);\n        }\n        else if (uVar8 == 0x80000004) {\n            puVar3 = cpuid_brand_part3_info(0x80000004);\n        }\n        else {\n            puVar3 = cpuid(uVar8);\n        }\n        uVar8 = *puVar3;\n        uStack4 = (in_NT & 1) * 0x4000 | (in_OF & 1) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n                  (in_SF & 1) * 0x80 | (in_ZF & 1) * 0x40 | (in_AF & 1) * 0x10 | (in_PF & 1) * 4 | in_CF & 1 |\n                  (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n        uVar8 = uVar8 & 0xffff0000 | CONCAT11((uVar8 >> 8) + -0xf + in_CF, uVar8);\n        uVar5 = *0x10;\n        uVar14 = uVar5 - 0xc0;\n        if (uVar8 == 0) {\n            cpuid_basic_info(0);\n        }\n        else if (uVar8 == 1) {\n            cpuid_Version_info(1);\n        }\n        else if (uVar8 == 2) {\n            cpuid_cache_tlb_info(2);\n        }\n        else if (uVar8 == 3) {\n            cpuid_serial_info(3);\n        }\n        else if (uVar8 == 4) {\n            cpuid_Deterministic_Cache_Parameters_info(4);\n        }\n        else if (uVar8 == 5) {\n            cpuid_MONITOR_MWAIT_Features_info(5);\n        }\n        else if (uVar8 == 6) {\n            cpuid_Thermal_Power_Management_info(6);\n        }\n        else if (uVar8 == 7) {\n            cpuid_Extended_Feature_Enumeration_info(7);\n        }\n        else if (uVar8 == 9) {\n            cpuid_Direct_Cache_Access_info(9);\n        }\n        else if (uVar8 == 10) {\n            cpuid_Architectural_Performance_Monitoring_info(10);\n        }\n        else if (uVar8 == 0xb) {\n            cpuid_Extended_Topology_info(0xb);\n        }\n        else if (uVar8 == 0xd) {\n            cpuid_Processor_Extended_States_info(0xd);\n        }\n        else if (uVar8 == 0xf) {\n            cpuid_Quality_of_Service_info(0xf);\n        }\n        else if (uVar8 == 0x80000002) {\n            cpuid_brand_part1_info(0x80000002);\n        }\n        else if (uVar8 == 0x80000003) {\n            cpuid_brand_part2_info(0x80000003);\n        }\n        else if (uVar8 == 0x80000004) {\n            cpuid_brand_part3_info(0x80000004);\n        }\n        else {\n            cpuid(uVar8);\n        }\n        uVar4 = rdtsc();\n        uVar8 = uVar4;\n        if ((*0x10 != 0xc0) || (uVar12 = uVar4 >> 0x20,  *0x10 == 0xc0)) {\n            uVar8 = uVar8 ^ 1 << (uVar8 & 0x1f);\n            uVar12 = in_stack_0000002c;\n            if (&uStack4 < 0xbc) {\n                uVar8 = uVar8 & 0xffffd73e;\n                iVar2 = 0;\n                if (uVar14 != 0) {\n                    for (; (uVar14 >> iVar2 & 1) == 0; iVar2 = iVar2 + 1) {\n                    }\n                }\n            }\n            else {\n                uVar8 = uVar8 & 0xffffd73e;\n                iVar2 = 0;\n                if (uVar14 != 0) {\n                    for (; (uVar14 >> iVar2 & 1) == 0; iVar2 = iVar2 + 1) {\n                    }\n                }\n            }\n        }\n        uVar11 = uVar8 + 1;\n        uStack196 = (in_NT & 1) * 0x4000 | SCARRY4(uVar8, 1) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n                    (uVar11 < 0) * 0x80 | (uVar11 == 0) * 0x40 | (in_AF & 1) * 0x10 |\n                    ((POPCOUNT(uVar8 + 1 & 0xff) & 1U) == 0) * 4 | 0xfffffffc < &uStack196;\n        uStack194 = (in_ID & 1) * 0x200000 >> 0x10 | (in_VIP & 1) * 0x100000 >> 0x10 | (in_VIF & 1) * 0x80000 >> 0x10 |\n                    (in_AC & 1) * 0x40000 >> 0x10;\n        uStack193 = 0;\n        uVar1 = 0;\n        if (uVar14 != 0) {\n            for (; (uVar14 >> uVar1 & 1) == 0; uVar1 = uVar1 + 1) {\n            }\n        }\n        puVar9 = &stack0x00000000 + ((uVar11 & 0xffff0000 | unaff_retaddr & 0xffff) * -4 & 0xffff0000 | uVar1);\n        bVar16 = SCARRY4(~in_stack_0000002c + 0x64dacc3a, 0x24796bdc);\n        bVar15 = (unaff_retaddr & 1) != 0;\n        if (!bVar16) {\n            iVar2 = 0xf;\n            if (uVar5 != 0) {\n                for (; uVar5 >> iVar2 == 0; iVar2 = iVar2 + -1) {\n                }\n            }\n            goto code_r0x009aec52;\n        }\n        if (bVar16) {\n            iVar2 = 0xf;\n            if (uVar5 != 0) {\n                for (; uVar5 >> iVar2 == 0; iVar2 = iVar2 + -1) {\n                }\n            }\n            goto code_r0x009aec52;\n        }\n        puVar13 = puVar9 + 0x23906106;\n        uVar7 = *puVar13 + uVar12;\n        bVar16 = CARRY1(*puVar13, uVar12) || CARRY1(uVar7, bVar15);\n        *puVar13 = uVar7 + bVar15;\n        uVar7 = puVar9 + 0x91;\n        bVar15 = puVar9 < 0x6f || uVar7 < bVar16;\n        uVar7 = uVar7 - bVar16;\n        uVar8 = puVar9 & 0xffffff00 | uVar7;\n        if (bVar15 || uVar7 == 0) break;\n        in_CF = 0;\n        in_OF = 0;\n        uVar14 = uVar14 | 0xe17d;\n        in_SF = uVar14 < 0;\n        in_ZF = uVar14 == 0;\n        in_PF = (POPCOUNT(uVar14 & 0xff) & 1U) == 0;\n        in_CS = *0xd317e49d;\n    }\n    puVar3 = (puVar9 & 0xffff0000 |\n             CONCAT11((uVar7 < '\\0') << 7 | (uVar7 == 0) << 6 | in_AF << 4 | ((POPCOUNT(uVar7) & 1U) == 0) << 2 | 2 |\n                      bVar15, uVar7)) + 0x5136a028;\n    *puVar3 = *puVar3 | *0x10;\n    *0x10 = unaff_retaddr;\n    in_CS = uVar6;\ncode_r0x009aec52:\n    uStack192 = 0x5c;\n    uStack191 = 0xec;\n    uStack190 = 0x9a;\n    fcn.009aec36();\n    *(*0x10 + 0x48a8545) = *(*0x10 + 0x48a8545) << (extraout_CL & 0x1f);\n    uStack194 = 0x6b;\n    uStack193 = 0xec;\n    uStack192 = 0x9a;\n    uStack191 = 0;\n    uStack190 = in_CS;\n    iVar10 = func_0x3cbb0cfd();\n    puVar13 = CONCAT31(*0x10 >> 8, 0x73);\n    *puVar13 = *puVar13 ^ extraout_DH;\n    uVar8 = iVar10 + 1U & 0xffffff00;\n    uVar12 = (iVar10 + 1U) - extraout_CL_00;\n    *(uVar8 | uVar12) = 0x8c8dcc86;\n    return uVar8 | uVar12 & 0xffffffe0;\n}\n",
        "token_count": 3015
    },
    "009aef17": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009aef0b) overlaps instruction at (ram,0x009aef09)\n// \n\nvoid fcn.009aef17(void)\n\n{\n    uint32_t uVar1;\n    int32_t unaff_EBP;\n    \n    while( true ) {\n        uVar1 = fcn.009aef6c();\n        if (uVar1 >> 8 != *(unaff_EBP + 0x12af5c35)) break;\n        out(0x11, uVar1 + -0x52 + (0x140c4cf0 < uVar1));\n    }\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 169
    },
    "009b053b": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009b0604) overlaps instruction at (ram,0x009b0601)\n// \n// WARNING: Control flow encountered bad instruction data\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Removing unreachable block (ram,0x009b0831)\n\nuint64_t __fastcall fcn.009b053b(uint param_1, int32_t param_2, uchar *param_3, uchar *param_4, uint32_t param_5)\n\n{\n    uint8_t *puVar1;\n    uint32_t uVar2;\n    int16_t iVar3;\n    unkbyte6 Var4;\n    uint16_t uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint32_t *puVar8;\n    char *pcVar9;\n    char extraout_CL;\n    char extraout_CL_00;\n    uint8_t uVar10;\n    uint32_t uVar11;\n    uint32_t extraout_ECX;\n    uint extraout_ECX_00;\n    uint32_t uVar12;\n    uint32_t extraout_ECX_01;\n    ushort uVar13;\n    int32_t iVar14;\n    uint uVar15;\n    uint8_t *puVar16;\n    ushort uVar17;\n    uint8_t **ppuVar18;\n    uint8_t **ppuVar19;\n    uint *puVar20;\n    ushort *puVar21;\n    uint *puVar22;\n    uchar *unaff_EBP;\n    uchar **ppuVar23;\n    uchar *puVar24;\n    ushort in_ES;\n    ushort in_CS;\n    ushort in_DS;\n    uint8_t uVar25;\n    char cVar26;\n    bool bVar27;\n    uint8_t uVar28;\n    bool bVar29;\n    uchar uVar30;\n    bool bVar31;\n    uint8_t uVar32;\n    uint8_t uVar33;\n    uint8_t uVar34;\n    bool bVar35;\n    bool bVar36;\n    bool bVar37;\n    uint8_t uVar38;\n    uint8_t uVar39;\n    uint8_t uVar40;\n    uint8_t uVar41;\n    uint8_t uVar42;\n    uint8_t uVar43;\n    ushort in_FPUControlWord;\n    uint64_t uVar44;\n    ulong uVar45;\n    uchar *extraout_var;\n    uchar *puStack4;\n    \n    ppuVar23 = &puStack4;\n    fcn.009b03c6();\n    puVar24 = extraout_var;\n    for (; param_2 != 0; param_2 = param_2 + -1) {\n        *puVar24 = *unaff_EBP;\n        unaff_EBP = unaff_EBP + 1;\n        puVar24 = puVar24 + 1;\n    }\n    uVar39 = (param_5 & 0x4000) != 0;\n    bVar36 = (param_5 & 0x800) != 0;\n    bVar35 = (param_5 & 0x400) != 0;\n    uVar34 = (param_5 & 0x200) != 0;\n    uVar33 = (param_5 & 0x100) != 0;\n    bVar31 = (param_5 & 0x80) != 0;\n    bVar29 = (param_5 & 0x40) != 0;\n    uVar28 = (param_5 & 0x10) != 0;\n    bVar27 = (param_5 & 4) != 0;\n    uVar43 = (param_5 & 0x200000) != 0;\n    uVar40 = (param_5 & 0x40000) != 0;\n    uVar42 = 0;\n    uVar41 = 0;\n    if (bVar29) {\n        param_5 = uVar39 * 0x4000 | bVar36 * 0x800 | bVar35 * 0x400 | uVar34 * 0x200 | uVar33 * 0x100 | bVar31 * 0x80 |\n                  bVar29 * 0x40 | uVar28 * 0x10 | bVar27 * 4 | uVar43 * 0x200000 | uVar40 * 0x40000;\n    }\n    else {\n        param_5 = uVar39 * 0x4000 | bVar36 * 0x800 | bVar35 * 0x400 | uVar34 * 0x200 | uVar33 * 0x100 | bVar31 * 0x80 |\n                  bVar29 * 0x40 | uVar28 * 0x10 | bVar27 * 4 | uVar43 * 0x200000 | uVar40 * 0x40000;\n    }\n    fcn.009b0498();\n    ppuVar18 = &param_5;\n    fcn.009b05c7();\n    cVar26 = extraout_CL;\n    while( true ) {\n        puVar24 = param_3 + 1;\n        uVar17 = *ppuVar18 >> 0x10;\n        if (!SCARRY4(param_3, 1)) break;\n        puVar16 = CONCAT22(uVar17, 0xead3);\n        ppuVar18[-1] = 0x9b066d;\n        uVar44 = fcn.009b0796();\n        iVar14 = uVar44 >> 0x20;\n        uVar12 = uVar44;\n        uVar6 = uVar12 + 0x4bbadd54;\n        if (uVar12 < 0xb44522ac) {\n            *puVar24 = *param_4;\n            ppuVar18[-1] = param_3 + bVar35 * -2 + 2;\n            ppuVar19 = ppuVar18[-1] + 4;\n            goto code_r0x009b06b6;\n        }\n        uVar11 = 0xfbb4829;\n        uVar2 = uVar12 < 0xb44522ac;\n        uVar12 = uVar12 + 0xb14bd4ba;\n        bVar27 = uVar6 < 0x9a6f089a || uVar12 < uVar2;\n        bVar37 = SBORROW4(uVar6, -0x6590f766) != SBORROW4(uVar12, uVar2);\n        uVar7 = uVar12 - uVar2;\n        bVar36 = uVar7 < 0;\n        bVar31 = uVar7 == 0;\n        bVar29 = (POPCOUNT(uVar7 & 0xff) & 1U) == 0;\n        if (bVar29) {\n            if (bVar31) {\n                uVar13 = uVar44 >> 0x20;\n                if ((uVar6 < 0x9a6f089a || uVar12 < uVar2) || bVar31) {\n                    puVar1 = param_4 + 0x21;\n                    *puVar1 = *puVar1 << 1 | *puVar1 < '\\0';\n                    param_4[-0x36] = param_4[-0x36] << 1;\n                    ppuVar23 = ppuVar23 + -1;\n                    in_FPUControlWord = *(param_3 + iVar14 * 2 + -0x50a36f);\n                    if (ppuVar23 != NULL) {\n                        *0xc2 = *0xc2 | 0xc2;\n                        puVar8 = ppuVar18;\n                        goto code_r0x009b06bd;\n                    }\n                    uVar15 = 0xfbb482a;\n                    *puVar24 = *0x3fcca535;\n                    *(*puVar16 + 0x87d98b51) = *(*puVar16 + 0x87d98b51);\n                    uVar30 = in(uVar13);\n                    param_3[bVar35 * -2 + 2] = uVar30;\n                    uVar5 = 0;\n                    goto code_r0x009b06e9;\n                }\n                if (!bVar31 && bVar37 == bVar36) {\n                    uVar10 = in(uVar13);\n                    ppuVar23 = ppuVar23 + puVar16 + bVar27;\n                    uVar25 = 0;\n                    uVar38 = 0;\n                    uVar44 = uVar44 & 0xffffffff00000000 | uVar10 & 0xffffffffffffff01;\n                    uVar32 = 0;\n                    uVar30 = (uVar10 & 1) == 0;\n                    uVar10 = (uVar10 & 1) == 0;\n                    goto code_r0x009b0707;\n                }\n                bVar27 = false;\n                bVar37 = false;\n                uVar7 = 0;\n                bVar36 = false;\n                bVar31 = true;\n                bVar29 = true;\n            }\n            else {\n                *(ppuVar18 + -1) = in_ES;\n            }\n        }\n        else {\n            ppuVar18[-1] = *(ppuVar18 + 6);\n        }\n        *(uVar7 - 4) = (uVar39 & 1) * 0x4000 | bVar37 * 0x800 | bVar35 * 0x400 | (uVar34 & 1) * 0x200 |\n                       (uVar33 & 1) * 0x100 | bVar36 * 0x80 | bVar31 * 0x40 | (uVar28 & 1) * 0x10 | bVar29 * 4 | bVar27\n                       | (uVar43 & 1) * 0x200000 | (uVar42 & 1) * 0x100000 | (uVar41 & 1) * 0x80000 |\n                       (uVar40 & 1) * 0x40000;\n        ppuVar23 = puVar16 + (uVar7 - 0x40);\n        *(uVar7 - 8) = param_4;\n        *(uVar7 - 0xc) = fcn.009b05c7;\n        fcn.009b053b();\n        in_ES = *(uVar7 - 8);\n        ppuVar18 = uVar7 - 4;\n        *(uVar7 - 8) = 0x9b060b;\n        fcn.009b05ee();\n        param_3 = puVar24;\n        cVar26 = extraout_CL_00;\n    }\n    puVar16 = *ppuVar18 & 0xffff0000;\n    uVar10 = cVar26 + 0x66;\n    uVar11 = uVar10;\n    puVar8 = ppuVar18 + -10;\n    if (ppuVar18 + -10 < 0) {\ncode_r0x009b06bd:\n        uVar10 = uVar11;\n        uVar17 = puVar16 >> 0x10;\n        puVar8 = puVar8 + 2;\n    }\n    else {\n        puVar8 = ppuVar18 + -2;\n    }\n    ppuVar18 = puVar8 + 2;\n    uVar25 = false;\n    uVar38 = 0;\n    uVar10 = uVar10 ^ 0xea;\n    uVar32 = uVar10 < '\\0';\n    uVar30 = uVar10 == 0;\n    uVar10 = (POPCOUNT(uVar10) & 1U) == 0;\n    puVar8[1] = 0x9b072b;\n    uVar44 = fcn.009b06f9();\n    uVar11 = extraout_ECX;\n    if (uVar25 || uVar30) {\n        *(puVar8 + 6) = *ppuVar18;\n    }\n    else {\ncode_r0x009b0707:\n        *(ppuVar18 + -2) = *ppuVar18;\n    }\n    puVar8 = ~uVar44;\n    *(ppuVar18 + -5) =\n         (uVar39 & 1) * 0x4000 | (uVar38 & 1) * 0x800 | bVar35 * 0x400 | (uVar34 & 1) * 0x200 | (uVar33 & 1) * 0x100 |\n         (uVar32 & 1) * 0x80 | (uVar30 & 1) * 0x40 | (uVar28 & 1) * 0x10 | (uVar10 & 1) * 4 | uVar25 & 1 |\n         (uVar43 & 1) * 0x200000 | (uVar42 & 1) * 0x100000 | (uVar41 & 1) * 0x80000 | (uVar40 & 1) * 0x40000;\n    *(ppuVar18 + -5) = param_4;\n    uVar12 = CONCAT31(CONCAT22(uVar17, 0xbb76) >> 8, 0xf);\n    uVar28 = ~uVar11;\n    uVar11 = uVar11 & 0xffffff00;\n    bVar27 = (uVar12 >> (puVar24 & 0x1f) & 1) != 0;\n    if ((!bVar27 && !uVar30) && (bVar27 || uVar30)) {\n        if (-1 < (uVar12 ^ 1 << (puVar24 & 0x1f) | *(param_3 + 0x10996a10))) {\n            *puVar8 = *puVar8 << 0x17 | *puVar8 >> 9;\n            param_4[-0x45] = param_4[-0x45] << 1;\n            uVar12 = puVar8 + (puVar8 >> 8) * '\\x16';\n            Var4 = *((uVar44 >> 0x20) + -0x53 + (uVar11 | uVar28) * 8);\n            out(Var4, puVar8 & 0xffff0000 | uVar12);\n            *0x5eafebc2 = *0x5eafebc2 << (uVar28 & 0x1f) | *0x5eafebc2 >> 0x20 - (uVar28 & 0x1f);\n            return CONCAT44(Var4, puVar8 & 0xffffff00 | uVar12) & 0xffffffffffff00ff;\n        }\n        puVar20 = ppuVar18 + 0x12;\n        ppuVar18 = ppuVar18 + 0x12;\n        *puVar20 = 0x9b074a;\n        uVar45 = func_0x578320c8();\n        iVar14 = uVar45 >> 0x20;\n        *uVar45 = in_FPUControlWord;\n        ppuVar23 = ppuVar23 + 0x1f1;\n        uVar5 = uVar45 >> 0x10;\n        uVar15 = extraout_ECX_00;\ncode_r0x009b06e9:\n        ppuVar19 = ppuVar18 + -1;\n        ppuVar18[-1] = uVar15;\n        *ppuVar18 = ppuVar23;\n        uVar6 = ppuVar18 + -1 & 0xffff | uVar5 << 0x10;\ncode_r0x009b06b6:\n        *(ppuVar19 + -4) = *(ppuVar19 + 4);\n        return CONCAT44(iVar14, uVar6);\n    }\n    uVar12 = uVar11 | uVar28 - 0x31;\n    puVar22 = ppuVar18 + 0x13;\n    *(ppuVar18 + 0x13) = fcn.009b0812;\n    func_0x009b07f3();\n    *puVar22 = 0x9b0818;\n    uVar45 = func_0x009b0838();\n    uVar15 = uVar45 >> 0x20;\n    pcVar9 = uVar45 & 0xffffff00 | extraout_ECX_01 & 0xff;\n    uVar6 = extraout_ECX_01;\n    if (extraout_ECX_01 == 0) {\n        *pcVar9 = *pcVar9 + (extraout_ECX_01 & 0xff);\n        *0x6caf5c35 = *0x6caf5c35 + (uVar11 >> 8);\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    while( true ) {\n        puVar24 = param_3 + 0x3eaff39f;\n        if (uVar12 != 0x4b3f2ba0 && SCARRY4(uVar12, -0x4b3f2ba0) == uVar12 + 0xb4c0d460 < 0) {\n            do {\n                *(puVar22 + -4) = 0x9b093a;\n                fcn.009b224f();\n                puVar22 = puVar22 + *(param_4 + -0x6b);\n                *(uVar12 + 0x882784de) = *(uVar12 + 0x882784de);\n            } while( true );\n        }\n        uVar28 = (uVar6 & 0x1f) % 0x11;\n        uVar11 = ((puVar24 >> (puVar24 & 0xf) & 1) != 0) << 0x10 | puVar24 & 0xffff;\n        uVar11 = (puVar24 & 0xffff0000 | uVar11 >> uVar28 | uVar11 << 0x11 - uVar28) & ~(1 << (puVar22 & 0x1f));\n        uVar11 = uVar11 & 0xffffff00 | uVar11 + 1;\n        uVar12 = *(uVar12 + 0x9afaab);\n        if (!SBORROW4(puVar22, 10)) break;\n        if (SBORROW4(puVar22, 10)) {\n            *(puVar22 + -9) = uVar11;\n            goto code_r0x009b0981;\n        }\n        uVar15 = 0xd1e82cdd;\n        *(puVar22 + -0xe) = uVar11;\n        *(puVar22 + -0x12) = in_DS;\n        puVar21 = puVar22 + -0x16;\n        puVar22 = puVar22 + -0x16;\n        *puVar21 = in_ES;\n        uVar6 = 0xb0;\n    }\n    *(puVar22 + -9) = uVar11;\ncode_r0x009b0981:\n    cVar26 = 0xa4ecac5e < uVar12;\n    iVar3 = 0;\n    bVar27 = param_4 != 0;\n    if (bVar27) {\n        for (; (param_4 >> iVar3 & 1) == 0; iVar3 = iVar3 + 1) {\n        }\n    }\n    if (bVar27) {\n        param_4 = param_4 + -0x23;\n        uVar11 = param_4 & 0xffff0000 | CONCAT11((param_4 >> 8) << 1, param_4);\n    }\n    else {\n        if (bVar27) {\n            *(puVar22 + -0xc) = 0x9b0d57;\n            uVar11 = fcn.009b0d86();\n            *(puVar22 + -0xc) = in_ES;\n            *((uVar11 & 0xffffff00 | uVar11 + -0x6b + cVar26) + 0x865f9f68) = in_CS;\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        param_4 = param_4 + -0x23;\n        uVar11 = param_4 & 0xffff0000 | CONCAT11((param_4 >> 8) << 1, param_4);\n    }\n    *(ppuVar23 + -4) = uVar12 + 0x5b1353a1;\n    return CONCAT44(uVar15, ~(uVar11 >> 0x18 | (uVar11 & 0xff0000) >> 8 | (uVar11 & 0xff00) << 8 | uVar11 << 0x18));\n}\n",
        "token_count": 4614
    },
    "009b0eed": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.009b0eed(void)\n\n{\n    uchar uVar1;\n    uint in_EAX;\n    ushort extraout_DX;\n    int32_t unaff_EBX;\n    uint unaff_ESI;\n    uchar *unaff_EDI;\n    uchar in_OF;\n    uint in_stack_00000003;\n    ushort uStack00000024;\n    ushort uStack00000026;\n    ushort uVar2;\n    \n    do {\n        uVar2 = in_stack_00000003 >> 0x10;\n        uStack00000024 = unaff_ESI;\n        uStack00000026 = unaff_ESI >> 0x10;\n        fcn.009b0f32(in_EAX >> 8);\n        do {\n        } while (!in_OF);\n        uVar1 = in(extraout_DX);\n        *unaff_EDI = uVar1;\n        in_OF = SCARRY4(unaff_EBX, 1);\n        unaff_EBX = unaff_EBX + 1;\n        uStack00000024 = unaff_EBX >> 0x10;\n        in_EAX = fcn.009b0e76(uVar2);\n        unaff_EDI = unaff_EDI + 1;\n    } while( true );\n}\n",
        "token_count": 271
    },
    "009b1945": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009b1a4d) overlaps instruction at (ram,0x009b1a4b)\n// \n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Removing unreachable block (ram,0x009b1a13)\n// WARNING: Removing unreachable block (ram,0x009b1a3c)\n// WARNING: Removing unreachable block (ram,0x009b1b1c)\n// WARNING: Removing unreachable block (ram,0x009b1a45)\n// WARNING: Removing unreachable block (ram,0x009b1b79)\n// WARNING: Removing unreachable block (ram,0x009b0a06)\n// WARNING: Removing unreachable block (ram,0x009b1c9a)\n// WARNING: Removing unreachable block (ram,0x009b1c86)\n// WARNING: Removing unreachable block (ram,0x009b0a57)\n// WARNING: Removing unreachable block (ram,0x009b1caa)\n// WARNING: Removing unreachable block (ram,0x009b1d0d)\n// WARNING: Removing unreachable block (ram,0x009b1cad)\n// WARNING: Removing unreachable block (ram,0x009b1d28)\n// WARNING: Removing unreachable block (ram,0x009b1cd2)\n// WARNING: Removing unreachable block (ram,0x009b1ce6)\n// WARNING: Removing unreachable block (ram,0x009b1cf0)\n\nint32_t fcn.009b1945(uint param_1, uint param_2, uint param_3, uint param_4, uint param_5, uint param_6, uint param_7, \n                    uint param_8, uint param_9, uint param_10, uint param_11, uint param_12, uint param_13, \n                    uint param_14, uint param_15, uint param_16, uint param_17, uint param_18, uint param_19, \n                    uint param_20, uint param_21, uint param_22, uint param_23, uint param_24, uint param_25, \n                    uint param_26, uint param_27, uint param_28, uint param_29, uint param_30, uint param_31, \n                    uint param_32, uint param_33, uint param_34, uint param_35, uint param_36, uint param_37, \n                    uint param_38, uint param_39, uint param_40, uint param_41, uint param_42, uint param_43, \n                    uint param_44, uint param_45, uint param_46, uint param_47, uint param_48, uint param_49)\n\n{\n    uint32_t uVar1;\n    int32_t *piVar2;\n    uint8_t uVar3;\n    int32_t extraout_ECX;\n    int32_t extraout_ECX_00;\n    int32_t iVar4;\n    char extraout_DH;\n    uint32_t unaff_EBX;\n    uint32_t *puVar5;\n    uint32_t *puVar6;\n    int32_t unaff_EBP;\n    int32_t unaff_ESI;\n    uint8_t in_AF;\n    bool bVar7;\n    char cVar8;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    char cVar9;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint unaff_retaddr;\n    \n    fcn.009b1976(unaff_retaddr, param_1, param_2, param_3, param_4, param_5, param_6, param_7, param_8, param_9, \n                 param_10, param_11, param_12, param_13, param_14, param_15, param_16, param_17, param_18, param_19, \n                 param_20, param_21, param_22, param_23, param_24, param_25, param_26, param_27, param_28, param_29, \n                 param_30, param_31, param_32, param_33, param_34, param_35, param_36, param_37, param_38, param_39, \n                 param_40, param_41, param_42, param_43, param_44, param_45, param_46, param_47, param_48, param_49);\n    fcn.009b1997();\n    puVar6 = &stack0x00000002;\n    iVar4 = extraout_ECX;\n    do {\n        uVar3 = iVar4 ^ 0x9d;\n        bVar7 = uVar3 == 0;\n        *puVar6 = (in_NT & 1) * 0x4000 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | (uVar3 < '\\0') * 0x80 |\n                  bVar7 * 0x40 | (in_AF & 1) * 0x10 | ((POPCOUNT(uVar3) & 1U) == 0) * 4 | (in_ID & 1) * 0x200000 |\n                  (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n        uVar1 = *puVar6;\n        *puVar6 = unaff_EBX;\n        if ((bVar7) || (puVar5 = puVar6,  !bVar7)) {\n            puVar5 = puVar6 + 1;\n        }\n        iVar4 = unaff_ESI + unaff_EBP;\n        unaff_EBX = uVar1 & 0xffff0000 | *puVar5;\n        cVar9 = SBORROW4(iVar4, 0x6bc576f3);\n        cVar8 = iVar4 + -0x6bc576f3 < 0;\n        bVar7 = iVar4 == 0x6bc576f3;\n        puVar5[-1] = 0x9b1a01;\n        piVar2 = fcn.009b1a9f();\n        puVar6 = puVar5 + 1;\n        iVar4 = extraout_ECX_00;\n    } while (!bVar7 && cVar9 == cVar8);\n    *piVar2 = *piVar2 + piVar2;\n    *(extraout_ECX_00 + 0xf66b3b0) = *(extraout_ECX_00 + 0xf66b3b0) + extraout_DH;\n    *puVar5 = puVar5[7];\n    *0x648966cb = piVar2;\n    return unaff_ESI * 2;\n}\n",
        "token_count": 1535
    },
    "009b1997": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009b1a4d) overlaps instruction at (ram,0x009b1a4b)\n// \n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Removing unreachable block (ram,0x009b1a13)\n// WARNING: Removing unreachable block (ram,0x009b1a3c)\n// WARNING: Removing unreachable block (ram,0x009b1b1c)\n// WARNING: Removing unreachable block (ram,0x009b1a45)\n// WARNING: Removing unreachable block (ram,0x009b1b79)\n// WARNING: Removing unreachable block (ram,0x009b0a06)\n// WARNING: Removing unreachable block (ram,0x009b1c9a)\n// WARNING: Removing unreachable block (ram,0x009b1c86)\n// WARNING: Removing unreachable block (ram,0x009b0a57)\n// WARNING: Removing unreachable block (ram,0x009b1caa)\n// WARNING: Removing unreachable block (ram,0x009b1d0d)\n// WARNING: Removing unreachable block (ram,0x009b1cad)\n// WARNING: Removing unreachable block (ram,0x009b1d28)\n// WARNING: Removing unreachable block (ram,0x009b1cd2)\n// WARNING: Removing unreachable block (ram,0x009b1ce6)\n// WARNING: Removing unreachable block (ram,0x009b1cf0)\n\nint32_t fcn.009b1997(void)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    int32_t extraout_ECX;\n    char extraout_DH;\n    int32_t unaff_EBP;\n    int32_t unaff_ESI;\n    bool bVar3;\n    char cVar4;\n    char cVar5;\n    \n    do {\n        iVar1 = unaff_ESI + unaff_EBP;\n        cVar5 = SBORROW4(iVar1, 0x6bc576f3);\n        cVar4 = iVar1 + -0x6bc576f3 < 0;\n        bVar3 = iVar1 == 0x6bc576f3;\n        piVar2 = fcn.009b1a9f();\n    } while (!bVar3 && cVar5 == cVar4);\n    *piVar2 = *piVar2 + piVar2;\n    *(extraout_ECX + 0xf66b3b0) = *(extraout_ECX + 0xf66b3b0) + extraout_DH;\n    *0x648966cb = piVar2;\n    return unaff_ESI * 2;\n}\n",
        "token_count": 584
    },
    "009b1b95": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n\nvoid fcn.009b1b95(void)\n\n{\n    int32_t in_EAX;\n    int32_t iVar1;\n    uchar *puVar2;\n    int32_t unaff_ESI;\n    uchar auStack12 [4];\n    int16_t aiStack4 [2];\n    \n    if ((*0x10 != 0x4 && 5 < &stack0x00000002) && (*0x10 == 0x4 || SBORROW4(&stack0x00000002, 6) != aiStack4 < 0)) {\n        in_EAX = fcn.009b1b95();\n    }\n    if ((POPCOUNT(in_EAX * 4 & 0xff) & 1U) == 0) {\n        iVar1 = *(in_EAX * 4 + 0x9b12ab) + -0x5a895a9;\n        if (aiStack4[0] < 0) {\n            *(unaff_ESI + -0xb) = unaff_ESI + -0xb;\n            puVar2 = unaff_ESI + -8;\n            goto code_r0x009b1cf0;\n        }\n    }\n    else {\n        iVar1 = fcn.009b1be6();\n    }\n    puVar2 = auStack12;\ncode_r0x009b1cf0:\n    *(puVar2 + -4) = iVar1;\n    return;\n}\n",
        "token_count": 324
    },
    "009b224f": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009b1a4d) overlaps instruction at (ram,0x009b1a4b)\n// \n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Removing unreachable block (ram,0x009b1a13)\n// WARNING: Removing unreachable block (ram,0x009b1a3c)\n// WARNING: Removing unreachable block (ram,0x009b1b1c)\n// WARNING: Removing unreachable block (ram,0x009b1a45)\n// WARNING: Removing unreachable block (ram,0x009b1b79)\n// WARNING: Removing unreachable block (ram,0x009b0a06)\n// WARNING: Removing unreachable block (ram,0x009b1c9a)\n// WARNING: Removing unreachable block (ram,0x009b1c86)\n// WARNING: Removing unreachable block (ram,0x009b0a57)\n// WARNING: Removing unreachable block (ram,0x009b1caa)\n// WARNING: Removing unreachable block (ram,0x009b1d0d)\n// WARNING: Removing unreachable block (ram,0x009b1cad)\n// WARNING: Removing unreachable block (ram,0x009b1d28)\n// WARNING: Removing unreachable block (ram,0x009b1cd2)\n// WARNING: Removing unreachable block (ram,0x009b1ce6)\n// WARNING: Removing unreachable block (ram,0x009b1cf0)\n\nint32_t fcn.009b224f(void)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    int32_t extraout_ECX;\n    char extraout_DH;\n    int32_t unaff_EBP;\n    int32_t unaff_ESI;\n    bool bVar3;\n    char cVar4;\n    char cVar5;\n    \n    fcn.009b1939();\n    do {\n        iVar1 = unaff_ESI + unaff_EBP;\n        cVar5 = SBORROW4(iVar1, 0x6bc576f3);\n        cVar4 = iVar1 + -0x6bc576f3 < 0;\n        bVar3 = iVar1 == 0x6bc576f3;\n        piVar2 = fcn.009b1a9f();\n    } while (!bVar3 && cVar5 == cVar4);\n    *piVar2 = *piVar2 + piVar2;\n    *(extraout_ECX + 0xf66b3b0) = *(extraout_ECX + 0xf66b3b0) + extraout_DH;\n    *0x648966cb = piVar2;\n    return unaff_ESI * 2;\n}\n",
        "token_count": 593
    },
    "009b4acc": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nchar * fcn.009b4acc(void)\n\n{\n    char *pcVar1;\n    uint unaff_EBP;\n    ushort in_ES;\n    char *in_stack_00000018;\n    ushort uStack7;\n    \n    pcVar1 = fcn.0099ff64();\n    uStack7 = unaff_EBP >> 8;\n    *0x9b4a16 = pcVar1;\n    if (*pcVar1 == -0x34) {\n        while( true ) {\n            pcVar1 = pcVar1 & 0xffffff3f;\n            if (CONCAT22(uStack7, in_ES) != 0) break;\n    // WARNING: Call to offcut address within same function\n            pcVar1 = func_0x009b4c06();\n        }\n    }\n    else if (*pcVar1 != -0x34) {\n        return in_stack_00000018;\n    }\n    return pcVar1;\n}\n",
        "token_count": 206
    },
    "009b8aed": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.009b8aed(uint32_t param_1, int32_t param_2, uint32_t param_3)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = 0;\n    if (param_3 != 0) {\n        do {\n            param_1 = (param_1 << 7 | param_1 >> 0x19) ^ *(uVar1 + param_2);\n            uVar1 = uVar1 + 1;\n        } while (uVar1 < param_3);\n    }\n    return param_1;\n}\n",
        "token_count": 131
    },
    "009b933d": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.009b933d(void)\n\n{\n    uchar *puVar1;\n    int32_t extraout_ECX;\n    uchar extraout_DH;\n    \n    do {\n        puVar1 = fcn.009ea034();\n        *(extraout_ECX + 0x5136a039) = *(extraout_ECX + 0x5136a039) | &stack0xfffffffc;\n        *puVar1 = extraout_DH;\n    } while( true );\n}\n",
        "token_count": 104
    },
    "009e7e5c": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Unable to track spacebase fully for stack\n\nuint fcn.009e7e5c(uint8_t *param_1, int32_t param_2, int32_t param_3, uint param_4, uint param_5, uint param_6, \n                 uint8_t param_7)\n\n{\n    uint32_t *puVar1;\n    uint8_t *puVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint32_t extraout_ECX;\n    uint32_t extraout_EDX;\n    ushort *puVar6;\n    uint32_t *puVar7;\n    uint32_t uVar8;\n    int32_t *piVar9;\n    uchar uVar10;\n    char cVar11;\n    uint8_t in_AF;\n    bool bVar12;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    int32_t *piStack00000020;\n    uint32_t uStack00000024;\n    int32_t in_stack_00000030;\n    \n    uStack00000024 = param_5;\n    piVar9 = param_7;\n    if ((*param_1 == piVar9) && (uVar10 = 0,  param_7 != 0)) {\n        uVar8 = param_2 + 1;\n        uStack00000024 =\n             (in_NT & 1) * 0x4000 | SCARRY4(param_2, 1) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n             (uVar8 < 0) * 0x80 | (uVar8 == 0) * 0x40 | (in_AF & 1) * 0x10 | ((POPCOUNT(uVar8 & 0xff) & 1U) == 0) * 4 |\n             (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n        piStack00000020 = 0x9e6e07;\n        fcn.009e6c45();\n        piStack00000020 = piVar9;\n        iVar4 = fcn.009e7e5c();\n        *piVar9 = iVar4;\n        *(piVar9 + 1) = *(uVar8 * 0x100 | CONCAT14(uVar10, uVar8) >> 0x19);\n        *(iVar4 + 0x74) = *(iVar4 + 0x74) & *0x10;\n        *(param_3 + -0x50a5b7cb) =\n             *(param_3 + -0x50a5b7cb) + (extraout_ECX & 0xffff0000 | CONCAT11(0x71, extraout_ECX)) +\n             (iVar4 + 99 + (0x3c < iVar4) < 0xeb);\n        puVar1 = CONCAT31(iVar4 >> 8, *0x712d8567) + -0x799cc1e5;\n        *puVar1 = *puVar1 | 0x799ccc0e;\n        pcVar3 = swi(1);\n        uVar5 = (*pcVar3)();\n        return uVar5;\n    }\n    piStack00000020 = &stack0x00000034;\n    bVar12 = -1 < *param_1 - piVar9;\n    puVar6 = &stack0x00000034;\n    if (bVar12) {\n        fcn.009e9ebe();\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    if (bVar12) {\n        do {\n            cVar11 = '\\0';\n            *puVar6 = *puVar6;\n            *(puVar6 + -1) = 0x9e9f46;\n            fcn.009e9f76();\n            puVar2 = (extraout_EDX - 0x6b) + in_stack_00000030 * 8;\n            *puVar2 = *puVar2 >> 1 | cVar11 << 7;\n            *(puVar6 + 5) = *(puVar6 + 5) + -1;\n            puVar7 = puVar6 + 1;\n            puVar6 = puVar6 + 1;\n            *puVar7 = (in_NT & 1) * 0x4000 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | (extraout_EDX < 0) * 0x80 |\n                      (extraout_EDX == 0) * 0x40 | (in_AF & 1) * 0x10 | ((POPCOUNT(extraout_EDX & 0xff) & 1U) == 0) * 4\n                      | (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 |\n                      (in_AC & 1) * 0x40000;\n        } while( true );\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 1244
    },
    "009ea034": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009ea0c6) overlaps instruction at (ram,0x009ea0c1)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nint32_t __fastcall fcn.009ea034(char *param_1, int32_t param_2)\n\n{\n    int32_t *piVar1;\n    char cVar2;\n    char *in_EAX;\n    char *pcVar3;\n    int32_t iVar4;\n    int32_t extraout_ECX;\n    int32_t unaff_EBX;\n    uchar *puVar5;\n    char **ppcVar6;\n    int32_t unaff_EBP;\n    uint var_4h;\n    \n    puVar5 = &stack0x00000004;\n    if (param_2 == 0) {\n        return 0;\n    }\n    do {\n        piVar1 = unaff_EBP + -4;\n        *piVar1 = *piVar1 + -1;\n        if (*piVar1 == 0) {\n            if (*piVar1 == 0) goto code_r0x009ea0e1;\n        }\n        else {\n            cVar2 = *in_EAX;\n            *(puVar5 + -4) = unaff_EBX;\n            if (cVar2 != *param_1) {\ncode_r0x009ea0e1:\n                *(puVar5 + -4) = 0x9ea0e9;\n                iVar4 = fcn.009ea0ca();\n                return iVar4 - extraout_ECX;\n            }\n            in_EAX = in_EAX + 1;\n            param_1 = param_1 + 1;\n        }\n        pcVar3 = CONCAT31(in_EAX >> 8, *(unaff_EBX + (in_EAX & 0xffU)));\n        ppcVar6 = puVar5 + -4;\n        puVar5 = puVar5 + -4;\n        *ppcVar6 = param_1;\n        piVar1 = pcVar3 + 0x4050e753;\n        *0x2cddba24 = in_EAX;\n        *piVar1 = *piVar1 << 1;\n        in_EAX = pcVar3;\n    } while( true );\n}\n",
        "token_count": 498
    },
    "009eb71d": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x009ec87a) overlaps instruction at (ram,0x009ec875)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nuint32_t __fastcall fcn.009eb71d(uint8_t param_1, uint param_2, uint param_3, uint param_4, uchar param_5)\n\n{\n    uint8_t *puVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    code *pcVar4;\n    uint32_t uVar5;\n    int32_t in_EAX;\n    uchar *puVar6;\n    int32_t extraout_ECX;\n    uchar *puVar7;\n    ushort uVar8;\n    uint32_t *unaff_EBX;\n    uchar *puVar9;\n    uchar *puVar10;\n    uchar *puVar11;\n    uchar *puVar12;\n    uchar *puVar13;\n    int32_t **unaff_EBP;\n    int32_t **ppiVar14;\n    uint32_t *unaff_ESI;\n    bool in_CF;\n    bool bVar15;\n    uint8_t uVar16;\n    bool bVar17;\n    uint8_t uVar18;\n    uint8_t in_AF;\n    bool bVar19;\n    bool bVar20;\n    uint8_t uVar21;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    char in_OF;\n    bool bVar22;\n    uint8_t uVar23;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint64_t uVar24;\n    unkbyte6 Var25;\n    uint var_2dh;\n    uint var_18h;\n    \n    uVar24 = CONCAT44(param_2, in_EAX);\n    if (!in_CF) {\n        if (in_CF) {\n            puVar1 = in_EAX + 0x27;\n            *puVar1 = *puVar1 << (param_1 & 7) | *puVar1 >> 8 - (param_1 & 7);\n            *(unaff_EBP + -0x2d) = *(unaff_EBP + -0x2d) >> (param_1 & 0x1f);\n            in(0x14);\n            uVar24 = fcn.009eb71d();\n        }\n        puVar7 = unaff_EBP[-6] + unaff_ESI;\n        while( true ) {\n            puVar6 = uVar24;\n            in_OF = SBORROW4(puVar6, puVar7);\n            puVar10 = &param_5;\n            if (puVar6 < puVar7) {\n                bVar15 = false;\n                bVar22 = false;\n                bVar20 = puVar6 < 0;\n                bVar19 = puVar6 == NULL;\n                bVar17 = (POPCOUNT(puVar6 & 0xff) & 1U) == 0;\n                if (bVar19) {\n                    ppiVar14 = unaff_EBP;\n                    if (bVar19) {\n                        unaff_ESI = NULL;\n                        bVar15 = false;\n                        bVar22 = false;\n                        bVar20 = unaff_EBX < 0;\n                        bVar19 = unaff_EBX == NULL;\n                        bVar17 = (POPCOUNT(unaff_EBX & 0xff) & 1U) == 0;\n                        if (!bVar20) {\n                            if (!bVar20) goto code_r0x009eb32e;\n                            unaff_ESI = 0x1;\n                            uVar8 = uVar24 >> 0x20;\n                            out(pe_dos_header, uVar8);\n                            uVar5 = in(uVar8);\n                            if (bVar20) {\n                                uVar2 = *unaff_EBX;\n                                uVar24 = uVar24 & 0xffffffff00000000 | uVar5;\n                                uVar3 = uVar24 / uVar2;\n                                uVar5 = uVar3;\n                                if (bVar20) {\n                                    *unaff_EBP[-2] = *unaff_EBP[-2] + -1;\n                                    unaff_EBP = unaff_EBP + 1;\n                                    in_AF = 9 < ((uVar3 | 0xeb) & 0xf) | in_AF;\n                                    *(puVar7 + 0x20936001) = (*(puVar7 + 0x20936001) - uVar24 % uVar2) - in_AF;\n                                    goto code_r0x009ec897;\n                                }\n                            }\n                            return uVar5 & 0xffffff00;\n                        }\n                    }\n                    else {\n                        while( true ) {\n                            puVar11 = puVar10 + -4;\n                            *(puVar10 + -4) = 0x9ec8c2;\n                            uVar5 = func_0x009b89e1();\n                            uVar16 = 0;\n                            uVar23 = 0;\n                            uVar21 = uVar5 < 0;\n                            bVar15 = uVar5 == 0;\n                            uVar18 = (POPCOUNT(uVar5 & 0xff) & 1U) == 0;\n                            puVar12 = puVar11 + -4;\n                            *(puVar11 + -4) = 0x9ec8c9;\n                            func_0x009ec8a7();\n                            if (bVar15) {\n                                *(puVar12 + -4) =\n                                     (in_NT & 1) * 0x4000 | (uVar23 & 1) * 0x800 | (in_IF & 1) * 0x200 |\n                                     (in_TF & 1) * 0x100 | (uVar21 & 1) * 0x80 | (bVar15 & 1) * 0x40 |\n                                     (in_AF & 1) * 0x10 | (uVar18 & 1) * 4 | uVar16 & 1 | (in_ID & 1) * 0x200000 |\n                                     (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n                                *(puVar12 + -8) = 0x9ec917;\n                                Var25 = func_0x009ec948();\n                                out(*unaff_ESI, Var25 >> 0x20);\n                                unaff_EBP = *ppiVar14;\n                                puVar13 = ppiVar14 + 2 | *(Var25 + 0x556646dd);\n                            }\n                            else {\n                                puVar13 = puVar12 + -2;\n                                *(puVar12 + -2) = ppiVar14;\n                                unaff_EBP = ppiVar14;\n                            }\n                            unaff_ESI = unaff_ESI + 1;\n                            puVar10 = puVar13 + 2;\n                            bVar15 = unaff_ESI < unaff_EBX;\n                            bVar22 = SBORROW4(unaff_ESI, unaff_EBX);\n                            uVar5 = unaff_ESI - unaff_EBX;\n                            bVar20 = uVar5 < 0;\n                            bVar19 = uVar5 == 0;\n                            bVar17 = (POPCOUNT(uVar5 & 0xff) & 1U) == 0;\n                            if (!bVar19 && unaff_EBX <= unaff_ESI) break;\ncode_r0x009eb32e:\n                            rdtsc();\n                            puVar10 = puVar10 + -0x10;\ncode_r0x009ec897:\n                            puVar10 = puVar10 + 0x10;\n                            ppiVar14 = unaff_EBP;\n                        }\n                    }\n                }\n                *(puVar10 + 4) =\n                     (in_NT & 1) * 0x4000 | bVar22 * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | bVar20 * 0x80 |\n                     bVar19 * 0x40 | (in_AF & 1) * 0x10 | bVar17 * 4 | bVar15 | (in_ID & 1) * 0x200000 |\n                     (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n                *(puVar10 + 4) = *(puVar10 + 4);\n                *(puVar10 + 8) = 0x9eb40b;\n                *0xacf235c6 = fcn.009ec95c();\n                pcVar4 = swi(0x3c);\n                uVar5 = (*pcVar4)();\n                *(extraout_ECX + -0x4aa5dc20) = *(extraout_ECX + -0x4aa5dc20) & 3;\n                return uVar5;\n            }\n            if (puVar6 >= puVar7) break;\n            uVar24 = CONCAT44(CONCAT31(uVar24 >> 0x28, 0x33), *0xce0323e0);\n            *0xb68c35c6 = puVar6;\n        }\n    }\n    puVar9 = &param_5;\n    uVar5 = fcn.009eb77e();\n    pcVar4 = swi(4);\n    puVar7 = &param_5;\n    if (in_OF == '\\x01') {\n        uVar5 = (*pcVar4)();\n        puVar7 = puVar9;\n    }\n    *(puVar7 + -4) = puVar7;\n    return uVar5;\n}\n",
        "token_count": 2175
    },
    "009ecc75": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009ecf83) overlaps instruction at (ram,0x009ecf82)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nint32_t * __fastcall fcn.009ecc75(char *param_1, int32_t param_2)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int16_t iVar3;\n    uint8_t uVar4;\n    uint32_t uVar5;\n    int32_t *in_EAX;\n    int32_t iVar6;\n    uint32_t extraout_ECX;\n    int32_t *extraout_ECX_00;\n    char *extraout_ECX_01;\n    char *extraout_ECX_02;\n    int32_t extraout_ECX_03;\n    char *pcVar7;\n    int32_t *extraout_EDX;\n    int32_t extraout_EDX_00;\n    int32_t *piVar8;\n    int32_t *unaff_EBX;\n    int32_t **ppiVar9;\n    int32_t **ppiVar10;\n    int32_t **ppiVar11;\n    uint *puVar12;\n    int32_t **unaff_EBP;\n    int32_t **ppiVar13;\n    int32_t *unaff_ESI;\n    char **ppcVar14;\n    char **ppcVar15;\n    char *unaff_EDI;\n    uint uVar16;\n    char cVar17;\n    bool bVar18;\n    uint8_t in_AF;\n    uchar uVar19;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    char cVar20;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    ulong uVar21;\n    ushort uStack00000006;\n    uint uStack00000008;\n    uint var_8h;\n    \n    unaff_EBP[-2] = unaff_ESI;\n    ppcVar15 = *(param_2 + 0x38);\n    unaff_EBP[-1] = ppcVar15;\n    uStack00000006 = SUB42(unaff_EBX, 0);\n    if (in_EAX[3] <= unaff_EDI) {\n        unaff_EBP[-3] = NULL;\n        uStack00000008 = 0x9ecd68;\n        fcn.009ecd31();\n        piVar8 = extraout_EDX;\n        ppiVar11 = &stack0x0000000c;\n        ppiVar13 = unaff_EBP;\n    }\n    else {\n        if (in_EAX[3] <= unaff_EDI) {\n            return in_EAX;\n        }\n        cVar17 = param_1 < unaff_EDI;\n        cVar20 = SBORROW4(in_EAX, in_EAX) != false;\n        uVar19 = !cVar17;\n        uStack00000008 = 0x9ecd1b;\n        fcn.009eccfa();\n        unaff_EBP[-5] = extraout_ECX_00;\n    // WARNING: Call to offcut address within same function\n        uStack00000008 = 0x9ecd40;\n        uVar21 = func_0x009ecd41();\n        piVar8 = uVar21 >> 0x20;\n        ppiVar13 = *unaff_EBP;\n        ppiVar9 = unaff_EBP + 1;\n        if (uVar19 || cVar20 != cVar17) goto code_r0x009ecac3;\n        ppiVar11 = unaff_EBP + 1;\n        ppcVar15 = uVar21 + 8;\n    }\n    do {\n        ppcVar14 = ppcVar15;\n        unaff_EDI = *ppcVar14;\n        pcVar7 = ppcVar14[2];\n        ppiVar9 = ppiVar11;\n        if (ppcVar14[3] != NULL) {\n            ppiVar11[-1] = 0x9ece3a;\n            fcn.009ecded();\n            unaff_EDI = unaff_EDI + extraout_EDX_00;\n            iVar3 = 0;\n            if (ppcVar14 != 0) {\n                for (; (ppcVar14 >> iVar3 & 1) == 0; iVar3 = iVar3 + 1) {\n                }\n            }\n            piVar8 = extraout_ECX_01 % unaff_EBX;\n            ppiVar13[-4] = piVar8;\n            if (piVar8 == NULL) {\n                if (piVar8 != NULL) {\n                    return extraout_ECX_01 / unaff_EBX;\n                }\n                ppiVar13[-4] = unaff_EBX;\n            }\n            unaff_EBX = ppcVar14[1];\n            *(ppiVar11 + -0xb) = *(ppiVar11 + -0x11);\n            pcVar7 = extraout_ECX_01;\n            if (unaff_EBX <= ppiVar13[2]) {\n                bVar18 = CARRY4(unaff_EDI, unaff_EBX);\n                unaff_EDI = unaff_EDI + unaff_EBX;\n                ppiVar11[-1] = 0x9ecef3;\n                uVar21 = fcn.009eced6(*ppiVar11);\n                piVar8 = uVar21 >> 0x20;\n                ppiVar9 = ppiVar11 + 8;\n                pcVar7 = extraout_ECX_02;\n                if (bVar18) {\n                    puVar12 = ppiVar11 + 7;\n                    ppiVar11[7] = uVar21;\n                    piVar8 = ppcVar14[3];\n                    while( true ) {\n                        ppiVar9 = puVar12 + 1;\n                        piVar1 = ppiVar13[2];\n                        *(puVar12 + 2) = pcVar7;\n                        *(puVar12 + 2) = unaff_EBX >> 8;\n                        bVar18 = (piVar8 - unaff_EBX) + piVar1 < piVar8;\n                        if (bVar18) break;\n                        if (bVar18) {\n    // WARNING: Bad instruction - Truncating control flow here\n                            halt_baddata();\n                        }\n                        *puVar12 = 0x9ecf6c;\n                        iVar6 = fcn.009ecfbf();\n                        out(0xe, iVar6);\n                        piVar8 = iVar6 >> 0x1f;\n                        cVar17 = iVar6 + '&';\n                        out(*ppcVar14, iVar6 >> 0x1f);\n                        if (extraout_ECX_03 != 1 && cVar17 == '\\0') {\n    // WARNING: Bad instruction - Truncating control flow here\n                            halt_baddata();\n                        }\n                        ppcVar14 = 0xcf5fca01;\n                        *unaff_EDI = cVar17;\n                        pcVar7 = puVar12[1];\n                        puVar12 = puVar12 + 2;\n                        *0x83c68b32 = cVar17;\n                        *(unaff_EBX + pcVar7) = *(unaff_EBX + pcVar7);\n                        unaff_EDI = unaff_EDI + 1;\n                    }\n                }\n            }\n        }\n        while( true ) {\n            ppiVar9[-1] = ppiVar13;\n            ppiVar13[-3] = ppiVar13[-3] + 1;\n            piVar2 = ppiVar13[-3];\n            ppcVar15 = ppcVar14 + 10;\n            ppiVar11 = ppiVar13 + -5;\n            piVar1 = *ppiVar11;\n            uVar5 = piVar2 - piVar1;\n            ppiVar9[-1] = (in_NT & 1) * 0x4000 | SBORROW4(piVar2, *ppiVar11) * 0x800 | (in_IF & 1) * 0x200 |\n                          (in_TF & 1) * 0x100 | (uVar5 < 0) * 0x80 | (uVar5 == 0) * 0x40 | (in_AF & 1) * 0x10 |\n                          ((POPCOUNT(uVar5 & 0xff) & 1U) == 0) * 4 | piVar2 < *ppiVar11 | (in_ID & 1) * 0x200000 |\n                          (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n            ppiVar9[-2] = unaff_EDI;\n            *(ppiVar9 + -6) = ppcVar15;\n            ppiVar11 = ppiVar9;\n            if (piVar2 < piVar1) break;\n            if (piVar2 < piVar1) {\n                uVar16 = *(ppiVar9 + 10);\n                *(ppiVar9 + 10) = piVar2;\n                *(ppiVar9 + 6) = pcVar7;\n                *(ppiVar9 + 2) = piVar8;\n                *(ppiVar9 + -2) = unaff_EBX;\n                *(ppiVar9 + -6) = ppiVar9 + 0xe;\n                *(ppiVar9 + -10) = ppiVar13;\n                *(ppiVar9 + -0xe) = ppcVar14 + 0xccce;\n                *(ppiVar9 + -0x12) = uVar16;\n                ppiVar9[-3] = uVar16;\n                return piVar2;\n            }\ncode_r0x009ecac3:\n            ppcVar14 = ppcVar15;\n            ppiVar10 = ppiVar9 + -4;\n            *(ppiVar9 + -4) = 0x9ecac8;\n            uVar5 = func_0x009ecff5();\n            piVar8 = *ppiVar10;\n            ppiVar9 = ppiVar10 + 1;\n            uVar4 = *(unaff_EBX + (uVar5 & 0xff)) ^ 0xf4;\n            pcVar7 = (extraout_ECX & 0xffff0000 | CONCAT11(0xa4, extraout_ECX)) - 1;\n            if (pcVar7 == NULL || uVar4 == 0) {\n                return uVar5 & 0xffff0000 | CONCAT11(0xa0, uVar4);\n            }\n        }\n    } while( true );\n}\n",
        "token_count": 2373
    },
    "009ecc97": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009ecf83) overlaps instruction at (ram,0x009ecf82)\n// \n\nint32_t * __cdecl fcn.009ecc97(uint arg_8h)\n\n{\n    int16_t iVar1;\n    uint8_t uVar2;\n    int32_t *piVar3;\n    int32_t iVar4;\n    uint32_t extraout_ECX;\n    int32_t *extraout_ECX_00;\n    uint32_t extraout_ECX_01;\n    int32_t extraout_ECX_02;\n    int32_t extraout_EDX;\n    uint32_t uVar5;\n    int32_t *unaff_EBX;\n    int32_t **unaff_EBP;\n    int32_t *unaff_ESI;\n    int32_t *unaff_EDI;\n    char *pcVar6;\n    char cVar7;\n    bool bVar8;\n    uchar uVar9;\n    char cVar10;\n    ushort unaff_retaddr;\n    ushort unaff_retaddr_00;\n    int32_t in_stack_00000020;\n    \n    piVar3 = func_0x009ecc6e();\n    if (piVar3[3] <= unaff_EDI) {\n        unaff_EBP[-3] = NULL;\n        fcn.009ecd31();\n    }\n    else {\n        if (piVar3[3] <= unaff_EDI) {\n            return piVar3;\n        }\n        cVar7 = unaff_EBP[2] < unaff_EDI;\n        cVar10 = SBORROW4(piVar3, piVar3) != false;\n        uVar9 = !cVar7;\n        fcn.009eccfa();\n        unaff_EBP[-5] = extraout_ECX_00;\n    // WARNING: Call to offcut address within same function\n        iVar4 = func_0x009ecd41();\n        unaff_EBP = *unaff_EBP;\n        if (uVar9 || cVar10 != cVar7) goto code_r0x009ecac3;\n        unaff_ESI = iVar4 + 8;\n    }\n    do {\n        iVar4 = *unaff_ESI;\n        if (unaff_ESI[3] != 0) {\n            fcn.009ecded();\n            iVar1 = 0;\n            if (unaff_ESI != 0) {\n                for (; (unaff_ESI >> iVar1 & 1) == 0; iVar1 = iVar1 + 1) {\n                }\n            }\n            piVar3 = extraout_ECX_01 % unaff_EBX;\n            unaff_EBP[-4] = piVar3;\n            if (piVar3 == NULL) {\n                if (piVar3 != NULL) {\n                    return extraout_ECX_01 / unaff_EBX;\n                }\n                unaff_EBP[-4] = unaff_EBX;\n            }\n            unaff_EBX = unaff_ESI[1];\n            if (unaff_EBX <= unaff_EBP[2]) {\n                bVar8 = CARRY4(iVar4 + extraout_EDX, unaff_EBX);\n                fcn.009eced6(CONCAT22(unaff_retaddr_00, unaff_retaddr));\n                if (bVar8) {\n                    uVar5 = unaff_ESI[3];\n                    pcVar6 = iVar4 + extraout_EDX + unaff_EBX;\n                    while (bVar8 = (uVar5 - unaff_EBX) + unaff_EBP[2] < uVar5,  !bVar8) {\n                        if (bVar8) {\n    // WARNING: Bad instruction - Truncating control flow here\n                            halt_baddata();\n                        }\n                        iVar4 = fcn.009ecfbf();\n                        out(0xe, iVar4);\n                        uVar5 = iVar4 >> 0x1f;\n                        cVar7 = iVar4 + '&';\n                        out(*unaff_ESI, iVar4 >> 0x1f);\n                        if (extraout_ECX_02 != 1 && cVar7 == '\\0') {\n    // WARNING: Bad instruction - Truncating control flow here\n                            halt_baddata();\n                        }\n                        unaff_ESI = 0xcf5fca01;\n                        *pcVar6 = cVar7;\n                        *0x83c68b32 = cVar7;\n                        *(unaff_EBX + in_stack_00000020) = *(unaff_EBX + in_stack_00000020);\n                        pcVar6 = pcVar6 + 1;\n                    }\n                }\n            }\n        }\n        while( true ) {\n            unaff_EBP[-3] = unaff_EBP[-3] + 1;\n            piVar3 = unaff_EBP[-3];\n            unaff_ESI = unaff_ESI + 10;\n            if (piVar3 < unaff_EBP[-5]) break;\n            if (piVar3 < unaff_EBP[-5]) {\n                return piVar3;\n            }\ncode_r0x009ecac3:\n            uVar5 = func_0x009ecff5();\n            uVar2 = *(unaff_EBX + (uVar5 & 0xff)) ^ 0xf4;\n            if ((extraout_ECX & 0xffff0000 | CONCAT11(0xa4, extraout_ECX)) == 1 || uVar2 == 0) {\n                return uVar5 & 0xffff0000 | CONCAT11(0xa0, uVar2);\n            }\n        }\n    } while( true );\n}\n",
        "token_count": 1225
    },
    "009ece63": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009ecf83) overlaps instruction at (ram,0x009ecf82)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nuint32_t __fastcall fcn.009ece63(char *param_1, int32_t param_2)\n\n{\n    char **ppcVar1;\n    uint32_t *puVar2;\n    uint32_t uVar3;\n    int16_t iVar4;\n    uint32_t uVar5;\n    char **ppcVar6;\n    char cVar7;\n    uint32_t uVar8;\n    int32_t in_EAX;\n    int32_t iVar9;\n    uint32_t extraout_ECX;\n    char *extraout_ECX_00;\n    char *extraout_ECX_01;\n    int32_t extraout_ECX_02;\n    int32_t extraout_EDX;\n    char *pcVar10;\n    char *unaff_EBX;\n    char **ppcVar11;\n    uint *puVar12;\n    uint *puVar13;\n    int32_t unaff_EBP;\n    char **ppcVar14;\n    char **unaff_ESI;\n    char *unaff_EDI;\n    uint uVar15;\n    bool bVar16;\n    uint8_t in_AF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    ulong uVar17;\n    \n    puVar12 = &stack0x00000004;\n    param_2 = param_2 - in_EAX;\n    do {\n        unaff_EDI = unaff_EDI + param_2;\n        iVar4 = 0;\n        if (unaff_ESI != 0) {\n            for (; (unaff_ESI >> iVar4 & 1) == 0; iVar4 = iVar4 + 1) {\n            }\n        }\n        pcVar10 = param_1 % unaff_EBX;\n        *(unaff_EBP + -0x10) = pcVar10;\n        if (pcVar10 == NULL) {\n            if (pcVar10 != NULL) {\n                return param_1 / unaff_EBX;\n            }\n            *(unaff_EBP + -0x10) = unaff_EBX;\n        }\n        unaff_EBX = unaff_ESI[1];\n        *(puVar12 + -0xb) = *(puVar12 + -0x11);\n        ppcVar6 = puVar12;\n        ppcVar14 = unaff_ESI;\n        if (unaff_EBX <= *(unaff_EBP + 8)) {\n            bVar16 = CARRY4(unaff_EDI, unaff_EBX);\n            unaff_EDI = unaff_EDI + unaff_EBX;\n            puVar12[-1] = 0x9ecef3;\n            uVar17 = fcn.009eced6(*puVar12);\n            pcVar10 = uVar17 >> 0x20;\n            param_1 = extraout_ECX_01;\n            ppcVar6 = puVar12 + 8;\n            if (bVar16) {\n                puVar13 = puVar12 + 7;\n                puVar12[7] = uVar17;\n                pcVar10 = unaff_ESI[3];\n                while( true ) {\n                    iVar9 = *(unaff_EBP + 8);\n                    *(puVar13 + 2) = param_1;\n                    *(puVar13 + 2) = unaff_EBX >> 8;\n                    ppcVar6 = puVar13 + 1;\n                    ppcVar14 = unaff_ESI;\n                    if (pcVar10 + (iVar9 - unaff_EBX) < pcVar10) break;\n                    if (pcVar10 + (iVar9 - unaff_EBX) < pcVar10) {\n    // WARNING: Bad instruction - Truncating control flow here\n                        halt_baddata();\n                    }\n                    *puVar13 = 0x9ecf6c;\n                    iVar9 = fcn.009ecfbf();\n                    out(0xe, iVar9);\n                    pcVar10 = iVar9 >> 0x1f;\n                    cVar7 = iVar9 + '&';\n                    out(*unaff_ESI, iVar9 >> 0x1f);\n                    if (extraout_ECX_02 != 1 && cVar7 == '\\0') {\n    // WARNING: Bad instruction - Truncating control flow here\n                        halt_baddata();\n                    }\n                    unaff_ESI = 0xcf5fca01;\n                    *unaff_EDI = cVar7;\n                    param_1 = puVar13[1];\n                    puVar13 = puVar13 + 2;\n                    *0x83c68b32 = cVar7;\n                    unaff_EBX[param_1 * 4] = unaff_EBX[param_1 * 4];\n                    unaff_EDI = unaff_EDI + 1;\n                }\n            }\n        }\n        do {\n            while( true ) {\n                puVar12 = ppcVar6;\n                puVar12[-1] = unaff_EBP;\n                *(unaff_EBP + -0xc) = *(unaff_EBP + -0xc) + 1;\n                uVar3 = *(unaff_EBP + -0xc);\n                unaff_ESI = ppcVar14 + 10;\n                puVar2 = unaff_EBP + -0x14;\n                uVar8 = *puVar2;\n                uVar5 = uVar3 - uVar8;\n                ppcVar11 = puVar12 + -1;\n                puVar12[-1] = (in_NT & 1) * 0x4000 | SBORROW4(uVar3, *puVar2) * 0x800 | (in_IF & 1) * 0x200 |\n                              (in_TF & 1) * 0x100 | (uVar5 < 0) * 0x80 | (uVar5 == 0) * 0x40 | (in_AF & 1) * 0x10 |\n                              ((POPCOUNT(uVar5 & 0xff) & 1U) == 0) * 4 | uVar3 < *puVar2 | (in_ID & 1) * 0x200000 |\n                              (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n                puVar12[-2] = unaff_EDI;\n                *(puVar12 + -6) = unaff_ESI;\n                if (uVar3 < uVar8) break;\n                if (uVar3 < uVar8) {\n                    uVar15 = *(puVar12 + 10);\n                    *(puVar12 + 10) = uVar3;\n                    *(puVar12 + 6) = param_1;\n                    *(puVar12 + 2) = pcVar10;\n                    *(puVar12 + -2) = unaff_EBX;\n                    *(puVar12 + -6) = puVar12 + 0xe;\n                    *(puVar12 + -10) = unaff_EBP;\n                    *(puVar12 + -0xe) = ppcVar14 + 0xccce;\n                    *(puVar12 + -0x12) = uVar15;\n                    puVar12[-3] = uVar15;\n                    return uVar3;\n                }\n                puVar12[-1] = 0x9ecac8;\n                uVar8 = func_0x009ecff5();\n                pcVar10 = *ppcVar11;\n                param_1 = (extraout_ECX & 0xffff0000 | CONCAT11(0xa4, extraout_ECX)) - 1;\n                ppcVar6 = ppcVar11 + 1;\n                ppcVar14 = unaff_ESI;\n                if (param_1 == NULL || (unaff_EBX[uVar8 & 0xff] ^ 0xf4U) == 0) {\n                    return uVar8 & 0xffff0000 | CONCAT11(0xa0, unaff_EBX[uVar8 & 0xff] ^ 0xf4U);\n                }\n            }\n            ppcVar1 = ppcVar14 + 0xd;\n            unaff_EDI = *unaff_ESI;\n            param_1 = ppcVar14[0xc];\n            ppcVar6 = puVar12;\n            ppcVar14 = unaff_ESI;\n        } while (*ppcVar1 == NULL);\n        puVar12[-1] = 0x9ece3a;\n        fcn.009ecded();\n        param_1 = extraout_ECX_00;\n        param_2 = extraout_EDX;\n    } while( true );\n}\n",
        "token_count": 1975
    },
    "009eced6": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009ecf83) overlaps instruction at (ram,0x009ecf82)\n// \n\nuint32_t __cdecl fcn.009eced6(int32_t arg_8h)\n\n{\n    uchar *puVar1;\n    int16_t iVar2;\n    uint8_t uVar3;\n    char cVar4;\n    int32_t iVar5;\n    uint32_t extraout_ECX;\n    uint32_t extraout_ECX_00;\n    int32_t extraout_ECX_01;\n    int32_t extraout_EDX;\n    uint32_t uVar6;\n    uint32_t unaff_EBX;\n    int32_t unaff_EBP;\n    int32_t *piVar7;\n    int32_t *unaff_ESI;\n    char *unaff_EDI;\n    uchar uVar8;\n    bool bVar9;\n    uint16_t uStackY34;\n    ushort uVar10;\n    ushort uVar11;\n    \n    uVar8 = *(unaff_EBP + 8) < unaff_EDI;\n    uVar10 = SUB42(unaff_EDI, 0);\n    uVar11 = unaff_EDI >> 0x10;\n    do {\n        if (uVar8) {\n            uVar6 = unaff_ESI[3];\n            while( true ) {\n                bVar9 = (uVar6 - unaff_EBX) + *(unaff_EBP + 8) < uVar6;\n                if (bVar9) break;\n                if (bVar9) {\n    // WARNING: Bad instruction - Truncating control flow here\n                    halt_baddata();\n                }\n                iVar5 = fcn.009ecfbf();\n                out(0xe, iVar5);\n                uVar6 = iVar5 >> 0x1f;\n                cVar4 = iVar5 + '&';\n                out(*unaff_ESI, iVar5 >> 0x1f);\n                if (extraout_ECX_01 != 1 && cVar4 == '\\0') {\n    // WARNING: Bad instruction - Truncating control flow here\n                    halt_baddata();\n                }\n                unaff_ESI = 0xcf5fca01;\n                *unaff_EDI = cVar4;\n                puVar1 = unaff_EBX + arg_8h * 4;\n                *0x83c68b32 = cVar4;\n                *puVar1 = *puVar1;\n                unaff_EDI = unaff_EDI + 1;\n            }\n        }\n        do {\n            do {\n                while( true ) {\n                    piVar7 = unaff_ESI;\n                    *(unaff_EBP + -0xc) = *(unaff_EBP + -0xc) + 1;\n                    uVar6 = *(unaff_EBP + -0xc);\n                    unaff_ESI = piVar7 + 10;\n                    uStackY34 = unaff_ESI;\n                    if (uVar6 < *(unaff_EBP + -0x14)) break;\n                    if (uVar6 < *(unaff_EBP + -0x14)) {\n                        return uVar6;\n                    }\n                    uVar6 = func_0x009ecff5();\n                    uVar3 = *(unaff_EBX + (uVar6 & 0xff)) ^ 0xf4;\n                    if ((extraout_ECX & 0xffff0000 | CONCAT11(0xa4, extraout_ECX)) == 1 || uVar3 == 0) {\n                        return uVar6 & 0xffff0000 | CONCAT11(0xa0, uVar3);\n                    }\n                }\n                iVar5 = *unaff_ESI;\n            } while (piVar7[0xd] == 0);\n            fcn.009ecded();\n            iVar2 = 0;\n            if (uStackY34 != 0) {\n                for (; (uStackY34 >> iVar2 & 1) == 0; iVar2 = iVar2 + 1) {\n                }\n            }\n            uVar6 = extraout_ECX_00 % unaff_EBX;\n            *(unaff_EBP + -0x10) = uVar6;\n            if (uVar6 == 0) {\n                if (uVar6 != 0) {\n                    return extraout_ECX_00 / unaff_EBX;\n                }\n                *(unaff_EBP + -0x10) = unaff_EBX;\n            }\n            unaff_EBX = piVar7[0xb];\n        } while (*(unaff_EBP + 8) < unaff_EBX);\n        uVar8 = CARRY4(iVar5 + extraout_EDX, unaff_EBX);\n        unaff_EDI = iVar5 + extraout_EDX + unaff_EBX;\n        fcn.009eced6(CONCAT22(uVar11, uVar10));\n    } while( true );\n}\n",
        "token_count": 1073
    },
    "009ecfbf": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009ecf83) overlaps instruction at (ram,0x009ecf82)\n// \n// WARNING: Possible PIC construction at 0x009ecbb2: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x009ecbb7)\n// WARNING: Removing unreachable block (ram,0x009ecb46)\n// WARNING: Removing unreachable block (ram,0x009ecbb9)\n// WARNING: Removing unreachable block (ram,0x009ecb8d)\n// WARNING: Removing unreachable block (ram,0x009ecbb8)\n// WARNING: Removing unreachable block (ram,0x009ecbde)\n// WARNING: Removing unreachable block (ram,0x009ecc02)\n// WARNING: Removing unreachable block (ram,0x009ecc7c)\n// WARNING: Removing unreachable block (ram,0x009ecc07)\n\nint32_t * fcn.009ecfbf(int32_t *param_1)\n\n{\n    int32_t *piVar1;\n    uint32_t *puVar2;\n    bool bVar3;\n    int16_t iVar4;\n    uint8_t uVar5;\n    uint8_t uVar6;\n    uint8_t uVar7;\n    char cVar8;\n    uint32_t uVar9;\n    int32_t iVar10;\n    int32_t *in_EAX;\n    uint32_t extraout_ECX;\n    int32_t *extraout_ECX_00;\n    int32_t *extraout_ECX_01;\n    uint32_t extraout_ECX_02;\n    int32_t extraout_ECX_03;\n    ushort extraout_DX;\n    int32_t extraout_EDX;\n    int32_t *piVar11;\n    int32_t *unaff_EBX;\n    int32_t **unaff_EBP;\n    int32_t *unaff_ESI;\n    char *pcVar12;\n    int32_t *unaff_EDI;\n    bool bVar13;\n    uint8_t in_CF;\n    uchar in_PF;\n    uint8_t in_AF;\n    uchar uVar14;\n    uint8_t in_ZF;\n    char in_SF;\n    char cVar15;\n    char in_OF;\n    float10 extraout_ST0;\n    ulong uVar16;\n    uchar uVar17;\n    uchar uVar18;\n    ushort uVar19;\n    int32_t in_stack_00000024;\n    \n    uVar19 = param_1 >> 0x10;\n    uVar18 = param_1 >> 8;\n    uVar17 = SUB41(param_1, 0);\n    if (!in_CF) {\n        if (!in_CF) goto code_r0x009ecaad;\n        goto code_r0x009ecfd3;\n    }\n    uVar16 = fcn.009ecffd();\n    piVar11 = uVar16;\n    if (!in_OF) {\n        uVar17 = 0x85;\n        uVar18 = 0xff;\n        uVar19 = 0xffff;\n        if (in_PF) {\n            unaff_EBX = param_1;\n            if (piVar11[3] <= unaff_EDI) {\n                unaff_EBP[-3] = NULL;\n                fcn.009ecd31();\n            }\n            else {\n                if (piVar11[3] <= unaff_EDI) {\n                    return piVar11;\n                }\n                cVar8 = extraout_ECX_00 < unaff_EDI;\n                cVar15 = SBORROW4(piVar11, piVar11) != false;\n                uVar14 = !cVar8;\n                fcn.009eccfa();\n                unaff_EBP[-5] = extraout_ECX_01;\n    // WARNING: Call to offcut address within same function\n                iVar10 = func_0x009ecd41();\n                unaff_EBP = *unaff_EBP;\n                if (uVar14 || cVar15 != cVar8) goto code_r0x009ecac3;\n                unaff_ESI = iVar10 + 8;\n            }\n            do {\n                iVar10 = *unaff_ESI;\n                if (unaff_ESI[3] != 0) {\n                    fcn.009ecded();\n                    iVar4 = 0;\n                    if (unaff_ESI != 0) {\n                        for (; (unaff_ESI >> iVar4 & 1) == 0; iVar4 = iVar4 + 1) {\n                        }\n                    }\n                    piVar11 = extraout_ECX_02 % unaff_EBX;\n                    unaff_EBP[-4] = piVar11;\n                    if (piVar11 == NULL) {\n                        if (piVar11 != NULL) {\n                            return extraout_ECX_02 / unaff_EBX;\n                        }\n                        unaff_EBP[-4] = unaff_EBX;\n                    }\n                    unaff_EBX = unaff_ESI[1];\n                    if (unaff_EBX <= unaff_EBP[2]) {\n                        bVar13 = CARRY4(iVar10 + extraout_EDX, unaff_EBX);\n                        fcn.009eced6(CONCAT22(uVar19, CONCAT11(uVar18, uVar17)));\n                        if (bVar13) {\n                            uVar9 = unaff_ESI[3];\n                            pcVar12 = iVar10 + extraout_EDX + unaff_EBX;\n                            while (bVar13 = (uVar9 - unaff_EBX) + unaff_EBP[2] < uVar9,  !bVar13) {\n                                if (bVar13) {\n    // WARNING: Bad instruction - Truncating control flow here\n                                    halt_baddata();\n                                }\n                                iVar10 = fcn.009ecfbf();\n                                out(0xe, iVar10);\n                                uVar9 = iVar10 >> 0x1f;\n                                cVar8 = iVar10 + '&';\n                                out(*unaff_ESI, iVar10 >> 0x1f);\n                                if (extraout_ECX_03 != 1 && cVar8 == '\\0') {\n    // WARNING: Bad instruction - Truncating control flow here\n                                    halt_baddata();\n                                }\n                                unaff_ESI = 0xcf5fca01;\n                                *pcVar12 = cVar8;\n                                *0x83c68b32 = cVar8;\n                                *(unaff_EBX + in_stack_00000024) = *(unaff_EBX + in_stack_00000024);\n                                pcVar12 = pcVar12 + 1;\n                            }\n                        }\n                    }\n                }\ncode_r0x009ecaad:\n                while( true ) {\n                    unaff_EBP[-3] = unaff_EBP[-3] + 1;\n                    in_EAX = unaff_EBP[-3];\n                    unaff_ESI = unaff_ESI + 10;\n                    in_OF = SBORROW4(in_EAX, unaff_EBP[-5]);\n                    in_SF = in_EAX - unaff_EBP[-5] < 0;\ncode_r0x009ecfd3:\n                    if (in_OF != in_SF) break;\n                    if (in_OF != in_SF) {\n                        return in_EAX;\n                    }\ncode_r0x009ecac3:\n                    uVar9 = func_0x009ecff5();\n                    uVar5 = *(unaff_EBX + (uVar9 & 0xff)) ^ 0xf4;\n                    if ((extraout_ECX & 0xffff0000 | CONCAT11(0xa4, extraout_ECX)) == 1 || uVar5 == 0) {\n                        return uVar9 & 0xffff0000 | CONCAT11(0xa0, uVar5);\n                    }\n                }\n            } while( true );\n        }\n        uVar6 = uVar16;\n        piVar1 = unaff_EBP + 0x7a;\n        uVar5 = extraout_ECX_00 & 0x1f;\n        iVar10 = *piVar1;\n        *piVar1 = *piVar1 << uVar5;\n        bVar3 = (extraout_ECX_00 & 0x1f) != 0;\n        bVar13 = (extraout_ECX_00 & 0x1f) != 0;\n        if (!bVar13 & in_ZF | (bVar13 && *piVar1 == 0)) {\n            extraout_ECX_00[-0xdd9f50a] = extraout_ECX_00[-0xdd9f50a] - unaff_EDI;\n            fcn.009eca5b();\n    // WARNING: Call to offcut address within same function\n            func_0x009ecba4();\n            *unaff_EDI = *unaff_EDI + -1;\n            iVar10 = in(extraout_DX);\n            *unaff_EDI = iVar10;\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        in_AF = 9 < (uVar6 & 0xf) | in_AF;\n        uVar7 = uVar6 + in_AF * '\\x06';\n        uVar5 = 0x90 < (uVar7 & 0xf0) | !bVar3 & in_CF | (bVar3 && iVar10 << uVar5 - 1 < 0) | in_AF * (0xf9 < uVar7);\n        *(param_1 - 0x15) = extraout_ST0;\n        out(0x38, piVar11 & 0xffff0000 | CONCAT11(0xa0, uVar6) & 0xffffff00 | uVar7 + uVar5 * '`');\n        puVar2 = (uVar16 >> 0x20) + 0x6d;\n        uVar9 = (unaff_ESI - 1U) - *puVar2;\n        iVar10 = uVar9 - uVar5;\n        if (0 < iVar10) {\n            return *unaff_EBP & 0xffffff00 | -(unaff_ESI - 1U < *puVar2 || uVar9 < uVar5);\n        }\n        in(CONCAT11(0xa0, *(iVar10 + -1)));\n    }\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 2250
    },
    "009ecffd": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "00a18e50": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009ba028) overlaps instruction at (ram,0x009ba027)\n// \n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.00a18e50(uint param_1, uint param_2, uint param_3, uint8_t param_4)\n\n{\n    uint32_t *puVar1;\n    uint8_t *puVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    int16_t iVar5;\n    code *pcVar6;\n    int32_t *piVar7;\n    char extraout_AH;\n    uint32_t *puVar8;\n    uint32_t *puVar9;\n    int32_t iVar10;\n    uint32_t uVar11;\n    uint8_t extraout_CL;\n    uint32_t uVar12;\n    uint32_t extraout_ECX;\n    uint32_t *extraout_ECX_00;\n    int32_t extraout_ECX_01;\n    uint32_t *extraout_ECX_02;\n    ushort extraout_var;\n    int32_t extraout_ECX_03;\n    int32_t extraout_ECX_04;\n    int32_t extraout_ECX_05;\n    int32_t extraout_ECX_06;\n    ushort uVar13;\n    char *extraout_EDX;\n    uint32_t unaff_EBX;\n    char *unaff_EBP;\n    uint32_t *unaff_ESI;\n    uint32_t *unaff_EDI;\n    uint8_t uVar14;\n    bool bVar15;\n    bool bVar16;\n    float10 extraout_ST0;\n    ulong uVar17;\n    unkbyte6 Var18;\n    int32_t in_stack_00000024;\n    uchar uStack0000003d;\n    uchar uStack0000003e;\n    char cStack20;\n    ushort uStack18;\n    ushort uStack6;\n    uint32_t *puStack4;\n    \n    puStack4 = CONCAT22(unaff_EBP, puStack4._0_2_);\n    uVar17 = (**0x9aa910)();\n    *0x9aa864 = uVar17;\n    cStack20 = unaff_EBP;\n    if (unaff_EDI <= **0x9aa864 && **0x9aa864 != unaff_EDI) {\n        puVar9 = extraout_ECX_02;\n        puVar8 = unaff_EDI;\n        if (unaff_EDI <= **0x9aa864 && **0x9aa864 != unaff_EDI) goto code_r0x009a187c;\n        while( true ) {\n            puVar9 = puVar8;\n            unaff_EDI = unaff_EDI + 3;\n            bVar15 = puVar9 < *uVar17;\n            puVar8 = puVar9;\n            if (!bVar15) break;\ncode_r0x009a187c:\n            if (unaff_EBX == *(uVar17 + 4 + unaff_EDI)) {\n                uStack6 = uVar17 >> 0x30;\n                puStack4 = puVar9;\n                fcn.00a18ec9();\n                unaff_ESI = 0x1;\n                uVar17 = fcn.00a18fe1();\n                if (1 < *(uVar17 + 8 + unaff_EDI)) {\n                    fcn.009b933d();\n                    fcn.00a18f69();\n                    *extraout_EDX = *extraout_EDX + extraout_EDX;\n                    *0x3f = *0x3f + extraout_AH;\n    // WARNING: Bad instruction - Truncating control flow here\n                    halt_baddata();\n                }\n            }\n            puVar8 = puVar8 + 1;\n        }\n        if (bVar15) goto code_r0x00a191a1;\n    }\n    puStack4 = fcn.009b91a7();\n    iVar5 = 0xf;\n    if (*0x10 + 4U != 0) {\n        for (; *0x10 + 4U >> iVar5 == 0; iVar5 = iVar5 + -1) {\n        }\n    }\n    unaff_ESI = NULL;\n    unaff_EDI = puStack4[0x1e] + unaff_EBX;\n    uStack6 = extraout_var;\n    fcn.00a190ae();\n    if (extraout_ECX_03 == 0) {\n        return 0;\n    }\n    iVar10 = fcn.00a190cd();\n    *(iVar10 + 4 + extraout_ECX_04 * 0xc) = unaff_EBX;\n    param_2._0_1_ = 0x79;\n    param_2._1_1_ = 0x91;\n    fcn.00a1924d();\n    param_2._2_2_ = param_3._1_2_;\n    iVar5 = 0xf;\n    if (unaff_EBX != 0) {\n        for (; unaff_EBX >> iVar5 == 0; iVar5 = iVar5 + -1) {\n        }\n    }\n    uVar17 = CONCAT44(unaff_EDI[6], *0x9aa864);\n    puVar9 = **0x9aa864 * 0xc;\n    bVar15 = puVar9 != **0x9aa864 * 0xc;\ncode_r0x00a191a1:\n    *(uVar17 + 8 + puVar9) = uVar17 >> 0x20;\n    bVar15 = !bVar15;\n    // WARNING: Call to offcut address within same function\n    func_0x00a191ce();\n    if (bVar15) {\n        unaff_EBP[0x485491] = unaff_EBP[0x485491] | extraout_CL;\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    puStack4 = 0x8;\n    uStack6 = *0x9aa8fc >> 0x10;\n    puVar9 = (**0x9aa910)();\n    (*0x9aa864)[(**0x9aa864 + 1) * 3] = puVar9;\n    bVar16 = unaff_EDI[8] + unaff_EBX == 0;\n    bVar15 = false;\n    func_0x00a192ca();\n    if (!bVar15 && !bVar16) {\n        fcn.009b9160();\n        iVar10 = func_0x00a193f3();\n        puVar9 = *(iVar10 + unaff_EBX) + unaff_EBX;\n        if (unaff_EDI <= puVar9) {\n            if (unaff_EDI > puVar9) {\n                unaff_EBX = unaff_EBX + 1;\n            }\n            bVar15 = puVar9 < in_stack_00000024 + unaff_EDI;\n            while (uStack18 = unaff_EDI >> 0x10,  bVar15) {\n                if (!bVar15) {\n                    uVar11 = (*_fcn.009aa90c)();\n                    if (uVar11 == 0) {\n                        uStack6 = uStack18;\n                        puStack4 = puVar9;\n                        uVar11 = (**(*0x9aa924 + 0x10))();\n                    }\n                    puStack4 = uVar11;\n                    if (uVar11 != unaff_EBX) {\n                        uStack6 = uStack18;\n                        iVar10 = fcn.00a19b2c();\n                        return *(*(iVar10 * 0xc + extraout_ECX_06) + uVar11 * 0x14 + 0x10);\n                    }\n                    uStack0000003e = 0x3c;\n                    uStack0000003d = 0x50;\n                    uStack6 = uStack18;\n                    fcn.00a1979c();\n                    *unaff_EDI = *(unaff_EBX - 0x577f);\n    // WARNING: Bad instruction - Truncating control flow here\n                    halt_baddata();\n                }\n                fcn.00a1958c();\n                puVar8 = puVar9;\n                do {\n                    fcn.009b9165();\n                    puVar9 = fcn.00a1965f();\n                    puVar1 = extraout_ECX_05 * 2;\n                    bVar15 = CARRY4(*puVar1, puVar8);\n                    *puVar1 = *puVar1 + puVar8;\n                    puVar8 = puVar9;\n                } while (!bVar15 && *puVar1 != 0);\n                bVar15 = false;\n            }\n        }\n        func_0x009b918a();\n        fcn.00a19a9b();\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    **0x9aa864 = **0x9aa864 + 1;\n    iVar10 = fcn.00a19b32();\n    uStack6 = 0xa1;\n    (**(iVar10 + 0x98))();\n    while( true ) {\n        do {\n            do {\n                uStack6 = 0x9b;\n                fcn.009a1954();\n                *0x9b92fb69 = in(0x14);\n                puVar2 = *(unaff_EDI + -0x12d4ea27);\n                uStack6 = puVar2 >> 0x10;\n                puVar9 = unaff_ESI & extraout_ECX;\n                unaff_ESI = puVar9;\n            } while (puVar9 == NULL);\n            puVar1 = puVar2 + 1;\n            puVar8 = (*0x9b92fb69 & 0xffffff00 | *0x9b92fb69 + 0x7a) + 0x6a;\n            *puVar8 = *puVar8 << 1 | *puVar9 < *puVar2;\n            pcVar6 = swi(0xac);\n            Var18 = (*pcVar6)();\n            uVar13 = Var18 >> 0x20;\n            puVar8 = Var18;\n            unaff_EDI = puVar1;\n            if ((POPCOUNT(*puVar8 - unaff_EBX & 0xff) & 1U) == 0) goto code_r0x009ba05b;\n            uVar11 = *puVar8 < unaff_EBX;\n            bVar15 = CARRY4(unaff_EBX, *extraout_ECX_00);\n            bVar16 = SCARRY4(unaff_EBX, *extraout_ECX_00);\n            uVar12 = unaff_EBX + *extraout_ECX_00;\n            unaff_EBX = uVar12 + uVar11;\n            unaff_ESI = puVar9 + 1;\n        } while (bVar16 == SCARRY4(uVar12, uVar11));\n        unaff_EDI = puVar2 + 5;\n        *puVar1 = *(puVar9 + 1);\n        if (unaff_EBX == 0) {\n            *(puVar8 + -0x2d) = *(puVar8 + -0x2d) << 1;\n            uVar14 = 1;\n            uVar17 = func_0x8bff181c();\n            iVar10 = CONCAT31(uVar17 >> 0x28, 0xad);\n            uVar11 = *(uVar17 + 0x16da6a91);\n            out(*(puVar9 + 5), iVar10);\n            if (&uStack6 + uVar14 + *(extraout_ECX_01 * 5 + -0x1d338ece) != 0x1) {\n    // WARNING: Bad instruction - Truncating control flow here\n                halt_baddata();\n            }\n            *unaff_EBP = *unaff_EBP + cStack20;\n            *unaff_EBP = *unaff_EBP + cStack20;\n            uVar12 = 0;\n            if (*0x28 != 0) {\n                do {\n                    uVar11 = (uVar11 << 7 | uVar11 >> 0x19) ^ *(uVar12 + iVar10);\n                    uVar12 = uVar12 + 1;\n                    *0x20 = puVar9 + 9;\n                } while (uVar12 < *0x28);\n            }\n            return uVar11;\n        }\n        *(extraout_ECX_00 + -0xf447270) = extraout_ST0;\n        puVar8 = puVar8 & 0xffff0000 | CONCAT11(0xec, Var18);\n        uVar3 = bVar15 || CARRY4(uVar12, uVar11);\n        uVar11 = *unaff_EDI;\n        uVar12 = *unaff_EDI;\n        uVar4 = *unaff_EDI + extraout_ECX_00;\n        *unaff_EDI = uVar4 + uVar3;\n        out(*(puVar9 + 5), uVar13);\n        if (*unaff_EDI != 0 && (SCARRY4(uVar12, extraout_ECX_00) != SCARRY4(uVar4, uVar3)) == *unaff_EDI < 0) break;\n        *(unaff_EBX + 0xd6851e0a) =\n             *(unaff_EBX + 0xd6851e0a) + (Var18 >> 0x20) + (CARRY4(uVar11, extraout_ECX_00) || CARRY4(uVar4, uVar3));\n        out(uVar13, puVar8);\n        pcVar6 = swi(0x96);\n        (*pcVar6)();\n        unaff_EBX = 0xe5136aa;\n        unaff_ESI = puVar9 + 9;\n    }\ncode_r0x009ba05b:\n    uVar14 = unaff_EDI;\n    out(uVar13, uVar14);\n    *(puVar8 + -0x7f5bcba6) = *(puVar8 + -0x7f5bcba6) + 0x29818966 + (uVar14 < 0x36);\n    out(uVar13, uVar14 % 0x47);\n    piVar7 = CONCAT22(param_2._2_2_, CONCAT11(param_2._1_1_, param_2));\n    *piVar7 = *piVar7 << (param_4 & 0x1f);\n    do {\n    // WARNING: Do nothing block with infinite loop\n    } while( true );\n}\n",
        "token_count": 3255
    },
    "00a18fe1": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x009ba028) overlaps instruction at (ram,0x009ba027)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nuint32_t __fastcall fcn.00a18fe1(uint param_1, uint param_2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int16_t iVar4;\n    int64_t iVar5;\n    uint32_t *puVar6;\n    char extraout_AH;\n    uint32_t *puVar7;\n    uint in_EAX;\n    int32_t **ppiVar8;\n    int32_t iVar9;\n    int32_t iVar10;\n    uint32_t *puVar11;\n    uchar extraout_CL;\n    char cVar12;\n    uint8_t extraout_CL_00;\n    uint32_t uVar13;\n    uint32_t extraout_ECX;\n    uint32_t *extraout_ECX_00;\n    int32_t extraout_ECX_01;\n    uint32_t uVar14;\n    uint extraout_ECX_02;\n    int32_t extraout_ECX_03;\n    int32_t extraout_ECX_04;\n    int32_t *piVar15;\n    int32_t extraout_ECX_05;\n    int32_t extraout_ECX_06;\n    uint extraout_ECX_07;\n    uint extraout_ECX_08;\n    int32_t extraout_ECX_09;\n    uchar extraout_DL;\n    ushort uVar16;\n    char cVar17;\n    ushort extraout_DX;\n    char *extraout_EDX;\n    uint32_t unaff_EBX;\n    uint *puVar18;\n    uint8_t **ppuVar19;\n    uchar *puVar20;\n    int32_t **ppiVar21;\n    int32_t **ppiVar22;\n    int32_t **ppiVar23;\n    uchar *puVar24;\n    uint8_t **ppuVar25;\n    uint *puVar26;\n    uint *puVar27;\n    uint *puVar28;\n    uint *puVar29;\n    uint *puVar30;\n    int32_t unaff_EBP;\n    char *pcVar31;\n    uint uVar32;\n    uint32_t *unaff_ESI;\n    uint32_t *puVar33;\n    uint8_t *puVar34;\n    uint32_t *unaff_EDI;\n    ushort in_CS;\n    uint8_t uVar35;\n    bool bVar36;\n    uint8_t in_AF;\n    bool bVar37;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    float10 extraout_ST0;\n    uint64_t uVar38;\n    ulong uVar39;\n    uint64_t uVar40;\n    unkbyte6 Var41;\n    \n    uVar39 = CONCAT44(param_2, in_EAX);\n    ppiVar21 = &stack0x00000001;\ncode_r0x00a19000:\n    ppiVar8 = uVar39;\n    ppiVar22 = ppiVar21 + 5;\n    if (unaff_ESI < *(ppiVar8 + 2 + unaff_EDI)) {\n        ppiVar21[4] = unaff_EBX;\n        ppiVar21[4] = 0xa18f88;\n        fcn.009b933d();\n        ppiVar21[4] = 0xa18f4c;\n        fcn.00a18f69();\n        *extraout_EDX = *extraout_EDX + extraout_EDX;\n        *(unaff_ESI + 0x3e) = *(unaff_ESI + 0x3e) + extraout_AH;\n        ppiVar21[4] = extraout_EDX;\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    while( true ) {\n        ppiVar21[9] = ppiVar21[9] + 1;\n        piVar15 = ppiVar21[9];\n        unaff_EDI = unaff_EDI + 3;\n        bVar36 = piVar15 < *ppiVar8;\n        if (!bVar36) break;\n        if (unaff_EBX == *(ppiVar8 + 1 + unaff_EDI)) goto code_r0x00a18ebc;\n    }\n    if (!bVar36) {\n        ppiVar21[4] = 0xa19084;\n        uVar39 = fcn.009b91a7();\n        ppiVar21[4] = unaff_EBP;\n        ppiVar21[3] = uVar39;\n        ppiVar21[2] = extraout_ECX_02;\n        ppiVar21[1] = uVar39 >> 0x20;\n        *ppiVar21 = unaff_EBX;\n        ppiVar21[-1] = ppiVar21 + 4;\n        ppiVar21[-2] = unaff_EBP;\n        ppiVar21[-3] = unaff_ESI;\n        ppiVar21[-4] = unaff_EDI & 0xffff0000 | *ppiVar22;\n        cVar17 = uVar39 >> 0x28;\n        cVar12 = extraout_ECX_02 + cVar17;\n        ppiVar21[-2] = uVar39;\n        ppiVar21[-5] = (in_NT & 1) * 0x4000 | SCARRY1(extraout_ECX_02, cVar17) * 0x800 | (in_IF & 1) * 0x200 |\n                       (in_TF & 1) * 0x100 | (cVar12 < '\\0') * 0x80 | (cVar12 == '\\0') * 0x40 | (in_AF & 1) * 0x10 |\n                       ((POPCOUNT(cVar12) & 1U) == 0) * 4 | (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 |\n                       (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n        unaff_EBX = *ppiVar21;\n        unaff_EBP = ppiVar21[4];\n        iVar4 = 0xf;\n        if (ppiVar22 != 0) {\n            for (; ppiVar22 >> iVar4 == 0; iVar4 = iVar4 + -1) {\n            }\n        }\n        unaff_ESI = NULL;\n        unaff_EDI = *(ppiVar21[3] + 0x78) + unaff_EBX;\n        ppiVar21[4] = fcn.00a190cb;\n        fcn.00a190ae();\n        if (extraout_ECX_03 == 0) {\n            return 0;\n        }\n        *ppiVar22 = 0xa19145;\n        iVar9 = fcn.00a190cd();\n        *(iVar9 + 4 + extraout_ECX_04 * 0xc) = unaff_EBX;\n        ppiVar21[6] = 0xa19179;\n        fcn.00a1924d();\n        *(ppiVar21 + 0x1a) = *(ppiVar21 + 0x1d);\n        iVar4 = 0xf;\n        if (unaff_EBX != 0) {\n            for (; unaff_EBX >> iVar4 == 0; iVar4 = iVar4 + -1) {\n            }\n        }\n        uVar39 = CONCAT44(unaff_EDI[6], *0x9aa864);\n        ppiVar22 = ppiVar21 + 9;\n        piVar15 = **0x9aa864 * 0xc;\n        bVar36 = piVar15 != **0x9aa864 * 0xc;\n    }\n    *(uVar39 + 8 + piVar15) = uVar39 >> 0x20;\n    bVar36 = !bVar36;\n    ppiVar23 = ppiVar22 + -1;\n    // WARNING: Call to offcut address within same function\n    ppiVar22[-1] = 0xa191cd;\n    uVar38 = func_0x00a191ce();\n    if (bVar36) {\n        *(unaff_EBP + 0x485491) = *(unaff_EBP + 0x485491) | extraout_CL_00;\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    iVar5 = (uVar38 & 0xffffff04) * 0x14;\n    bVar36 = iVar5 != iVar5;\n    *(ppiVar23 + -4) = iVar5;\n    *(ppiVar23 + -8) = uVar38 >> 0x20;\n    *(ppiVar23 + -10) = *(ppiVar23 + -6);\n    *(ppiVar23 + -0xe) =\n         (in_NT & 1) * 0x4000 | bVar36 * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | ((uVar38 & 4) == 0) * 0x40\n         | (in_AF & 1) * 0x10 | (POPCOUNT(uVar38 & 4) == '\\0') * 4 | bVar36 | (in_ID & 1) * 0x200000 |\n         (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    *(ppiVar23 + -8) = 8;\n    *(ppiVar23 + -0xc) = *0x9aa8fc;\n    puVar24 = ppiVar23 + -0x10;\n    *(ppiVar23 + -0x10) = 0xa19232;\n    iVar9 = (**0x9aa910)();\n    *(puVar24 + -4) = unaff_EBP;\n    uVar32 = *(puVar24 + -4);\n    *(puVar24 + -8) = CONCAT11(0x49, extraout_DL);\n    *(puVar24 + -0x16) = *(puVar24 + -10);\n    (*0x9aa864)[(**0x9aa864 + 1) * 3] = iVar9;\n    *(puVar24 + -4) = uVar32;\n    uVar14 = unaff_EDI[8];\n    pcVar31 = *(puVar24 + -4);\n    *(puVar24 + -4) = uVar14;\n    iVar9 = uVar14 + unaff_EBX;\n    bVar37 = iVar9 == 0;\n    bVar36 = false;\n    *(puVar24 + -6) = iVar9;\n    *(puVar24 + 0x30) = iVar9;\n    *(puVar24 + 0x14) = unaff_ESI;\n    ppuVar25 = puVar24 + -4;\n    *(puVar24 + -4) = 0xa192e9;\n    func_0x00a192ca();\n    if (!bVar36 && !bVar37) {\n        ppuVar25[4] = unaff_ESI;\n        ppuVar25[-1] = 0xa19337;\n        fcn.009b9160();\n        *(ppuVar25 + -2) = extraout_DX;\n        puVar26 = ppuVar25 + -1;\n        ppuVar25[-1] = 0xa19502;\n        uVar39 = func_0x00a193f3();\n        uVar32 = uVar39 >> 0x20;\n        iVar10 = uVar39;\n        iVar9 = *(iVar10 + unaff_EBX);\n        *(puVar26 + -4) = iVar10;\n        *(puVar26 + -8) = extraout_ECX_05;\n        *(puVar26 + -0xc) = uVar32;\n        *(puVar26 + -0x10) = unaff_EBX;\n        *(puVar26 + -0x14) = puVar26;\n        *(puVar26 + -0x18) = pcVar31;\n        *(puVar26 + -0x1c) = iVar9;\n        *(puVar26 + -0x20) = unaff_EDI;\n        *(puVar26 + -0x1b) = puVar26 + -0x20;\n        puVar33 = iVar9 + unaff_EBX;\n        *(puVar26 + -0x24) = iVar10;\n        *(puVar26 + -0x28) = extraout_ECX_05;\n        *(puVar26 + -0x2c) = uVar32;\n        *(puVar26 + -0x30) = unaff_EBX;\n        *(puVar26 + -0x34) = puVar26 + -0x20;\n        *(puVar26 + -0x38) = pcVar31;\n        *(puVar26 + -0x3c) = puVar33;\n        *(puVar26 + -0x40) = unaff_EDI;\n        if (unaff_EDI <= puVar33) {\n            if (unaff_EDI > puVar33) {\n                unaff_EBX = unaff_EBX + 1;\n                in_IF = 0;\n            }\n            *(puVar26 + -2) = unaff_EBX;\n            puVar11 = *(puVar26 + 0x2c) + unaff_EDI;\n            bVar36 = puVar33 < puVar11;\n            uVar14 = puVar33 - puVar11;\n            puVar28 = puVar26 + -4;\n            *(puVar26 + -4) =\n                 (in_NT & 1) * 0x4000 | SBORROW4(puVar33, puVar11) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n                 (uVar14 < 0) * 0x80 | (uVar14 == 0) * 0x40 | (in_AF & 1) * 0x10 |\n                 ((POPCOUNT(uVar14 & 0xff) & 1U) == 0) * 4 | bVar36 | (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 |\n                 (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n            iVar9 = extraout_ECX_05;\n            while( true ) {\n                puVar28[-1] = puVar11;\n                puVar28[-2] = iVar9;\n                puVar28[-3] = uVar32;\n                puVar28[-4] = unaff_EBX;\n                puVar28[-5] = puVar28;\n                puVar28[-6] = pcVar31;\n                puVar28[-7] = puVar33;\n                puVar28[-8] = unaff_EDI;\n                puVar28[-2] = puVar28[-8];\n                puVar26 = puVar28 + 1;\n                if (!bVar36) break;\n                if (!bVar36) {\n                    puVar28[9] = puVar28 + 0x32;\n                    puVar29 = puVar28 + 8;\n                    puVar28[8] = 0xa1971c;\n                    uVar39 = (*_fcn.009aa90c)();\n                    uVar32 = uVar39 >> 0x20;\n                    iVar9 = uVar39;\n                    *(puVar29 + -4) = iVar9;\n                    *(puVar29 + -8) = extraout_ECX_07;\n                    *(puVar29 + -0xc) = uVar32;\n                    *(puVar29 + -0x10) = unaff_EBX;\n                    *(puVar29 + -0x14) = puVar29;\n                    *(puVar29 + -0x18) = pcVar31;\n                    *(puVar29 + -0x1c) = puVar33;\n                    *(puVar29 + -0x20) = unaff_EDI;\n                    *(puVar29 + -0x24) = iVar9;\n                    *(puVar29 + -0x28) = extraout_ECX_07;\n                    *(puVar29 + -0x2c) = uVar32;\n                    *(puVar29 + -0x30) = unaff_EBX;\n                    *(puVar29 + -0x34) = puVar29 + -0x20;\n                    *(puVar29 + -0x38) = pcVar31;\n                    *(puVar29 + -0x3c) = puVar33;\n                    *(puVar29 + -0x40) = unaff_EDI;\n                    uVar32 = extraout_ECX_07;\n                    if (iVar9 == 0) {\n                        pcVar1 = *(*0x9aa924 + 0x10);\n                        *(puVar29 + -4) = 0;\n                        *(puVar29 + -8) = 0;\n                        *(puVar29 + -0xc) = puVar29 + 0xa0;\n                        puVar30 = puVar29 + -0x10;\n                        puVar29 = puVar29 + -0x10;\n                        *puVar30 = 0xa198f7;\n                        uVar39 = (*pcVar1)();\n                        *(puVar29 + -2) = extraout_ECX_08;\n                        uVar32 = extraout_ECX_08;\n                    }\n                    uVar14 = uVar39;\n                    *(puVar29 + -4) = uVar14;\n                    *(puVar29 + -8) = uVar32;\n                    *(puVar29 + -0xc) = uVar39 >> 0x20;\n                    *(puVar29 + -0x10) = unaff_EBX;\n                    *(puVar29 + -0x14) = puVar29;\n                    *(puVar29 + -0x18) = pcVar31;\n                    *(puVar29 + -0x1c) = uVar14;\n                    *(puVar29 + -0x20) = unaff_EDI;\n                    if (uVar14 != unaff_EBX) {\n                        *(puVar29 + -4) = fcn.00a19b7f;\n                        iVar9 = fcn.00a19b2c();\n                        *(puVar29 + -7) = *(puVar29 + -0x11);\n                        iVar9 = *(iVar9 * 0xc + extraout_ECX_09);\n                        *(puVar29 + -4) = unaff_EDI;\n                        return *(iVar9 + uVar14 * 0x14 + 0x10);\n                    }\n                    *(puVar29 + 0x26) = 0x3c;\n                    *(puVar29 + 0x25) = 0x50;\n                    *(puVar29 + -4) = 0xa197c2;\n                    fcn.00a1979c();\n                    *unaff_EDI = *(unaff_EBX - 0x577f);\n    // WARNING: Bad instruction - Truncating control flow here\n                    halt_baddata();\n                }\n                *puVar28 = 0x2e;\n                puVar28[-1] = 0xa19611;\n                iVar9 = fcn.00a1958c();\n                puVar11 = iVar9 - puVar33;\n                puVar28[-1] = puVar11;\n                puVar7 = puVar33;\n                do {\n                    puVar28[-2] = unaff_EBX;\n                    puVar28[10] = puVar11;\n                    puVar28[-2] = 0xa1967e;\n                    fcn.009b9165();\n                    puVar28[-2] = 0xa19683;\n                    uVar40 = fcn.00a1965f();\n                    puVar33 = uVar40;\n                    puVar6 = extraout_ECX_06 * 2;\n                    bVar36 = CARRY4(*puVar6, puVar7);\n                    *puVar6 = *puVar6 + puVar7;\n                    uVar38 = *(extraout_ECX_06 + puVar33 * 2);\n                    uVar40 = uVar40 & 0xffffffff00000000 | ZEXT48(puVar7);\n                    puVar11 = uVar40 / uVar38;\n                    uVar32 = uVar40 % uVar38;\n                    puVar7 = puVar33;\n                } while (!bVar36 && *puVar6 != 0);\n                puVar27 = puVar28 + -2;\n                puVar28 = puVar28 + -2;\n                *puVar27 = uVar32;\n                bVar36 = false;\n                iVar9 = extraout_ECX_06;\n            }\n        }\n        puVar18 = puVar26 + -1;\n        puVar26[-1] = 0x9a18af;\n        func_0x009b918a();\n        *(puVar18 + -4) = 0xa19a66;\n        fcn.00a19a9b();\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    **0x9aa864 = **0x9aa864 + 1;\n    ppuVar25[-1] = 0x9aa898;\n    ppuVar25[-2] = fcn.00a19b52;\n    iVar9 = fcn.00a19b32();\n    *(ppuVar25 + -1) = iVar9 >> 8;\n    pcVar1 = *(iVar9 + 0x98);\n    *ppuVar25 = 0xa19b5f;\n    (*pcVar1)();\n    while( true ) {\n        *(ppuVar25 + -4) = unaff_EBX;\n        *(ppuVar25 + -6) = *(ppuVar25 + -4);\n        puVar33 = unaff_EDI;\n        ppuVar19 = ppuVar25 + -4;\n        do {\n            do {\n                ppuVar25 = ppuVar19 + 1;\n                *ppuVar19 = 0x9ba030;\n                fcn.009a1954();\n                *0x9b92fb69 = in(0x14);\n                *ppuVar19 = *(puVar33 + -0x12d4ea27);\n                puVar11 = unaff_ESI & extraout_ECX;\n                unaff_ESI = puVar11;\n            } while (puVar11 == NULL);\n            puVar34 = *ppuVar19;\n            puVar33 = puVar34 + 1;\n            puVar7 = (*0x9b92fb69 & 0xffffff00 | *0x9b92fb69 + 0x7a) + 0x6a;\n            *puVar7 = *puVar7 << 1 | *puVar11 < *puVar34;\n            pcVar1 = swi(0xac);\n            Var41 = (*pcVar1)();\n            uVar16 = Var41 >> 0x20;\n            puVar7 = Var41;\n            unaff_EDI = puVar33;\n            if ((POPCOUNT(*puVar7 - unaff_EBX & 0xff) & 1U) == 0) goto code_r0x009ba05b;\n            uVar14 = *puVar7 < unaff_EBX;\n            bVar36 = CARRY4(unaff_EBX, *extraout_ECX_00);\n            bVar37 = SCARRY4(unaff_EBX, *extraout_ECX_00);\n            uVar13 = unaff_EBX + *extraout_ECX_00;\n            unaff_EBX = uVar13 + uVar14;\n            unaff_ESI = puVar11 + 1;\n            ppuVar19 = ppuVar25;\n        } while (bVar37 == SCARRY4(uVar13, uVar14));\n        unaff_EDI = puVar34 + 5;\n        *puVar33 = *(puVar11 + 1);\n        if (unaff_EBX == 0) {\n            *(puVar7 + -0x2d) = *(puVar7 + -0x2d) << 1;\n            uVar35 = 1;\n            *(ppuVar25 + -2) = in_CS;\n            puVar20 = ppuVar25 + -6;\n            *(ppuVar25 + -6) = 0x9ba130;\n            uVar39 = func_0x8bff181c();\n            iVar9 = CONCAT31(uVar39 >> 0x28, 0xad);\n            uVar14 = *(uVar39 + 0x16da6a91);\n            out(*(puVar11 + 5), iVar9);\n            if (puVar20 + uVar35 + *(extraout_ECX_01 * 5 + -0x1d338ece) + 4 != 0x1) {\n    // WARNING: Bad instruction - Truncating control flow here\n                halt_baddata();\n            }\n            *pcVar31 = *pcVar31 + pcVar31;\n            *pcVar31 = *pcVar31 + pcVar31;\n            uVar13 = 0;\n            if (*0x28 != 0) {\n                do {\n                    uVar14 = (uVar14 << 7 | uVar14 >> 0x19) ^ *(uVar13 + iVar9);\n                    uVar13 = uVar13 + 1;\n                    *0x20 = puVar11 + 9;\n                } while (uVar13 < *0x28);\n            }\n            return uVar14;\n        }\n        *(extraout_ECX_00 + -0xf447270) = extraout_ST0;\n        puVar7 = puVar7 & 0xffff0000 | CONCAT11(0xec, Var41);\n        uVar2 = bVar36 || CARRY4(uVar13, uVar14);\n        uVar14 = *unaff_EDI;\n        uVar13 = *unaff_EDI;\n        uVar3 = *unaff_EDI + extraout_ECX_00;\n        *unaff_EDI = uVar3 + uVar2;\n        unaff_ESI = puVar11 + 9;\n        out(*(puVar11 + 5), uVar16);\n        if (*unaff_EDI != 0 && (SCARRY4(uVar13, extraout_ECX_00) != SCARRY4(uVar3, uVar2)) == *unaff_EDI < 0) break;\n        *(unaff_EBX + 0xd6851e0a) =\n             *(unaff_EBX + 0xd6851e0a) + (Var41 >> 0x20) + (CARRY4(uVar14, extraout_ECX_00) || CARRY4(uVar3, uVar2));\n        out(uVar16, puVar7);\n        pcVar1 = swi(0x96);\n        (*pcVar1)();\n        unaff_EBX = 0xe5136aa;\n    }\ncode_r0x009ba05b:\n    uVar35 = unaff_EDI;\n    out(uVar16, uVar35);\n    *(puVar7 + -0x7f5bcba6) = *(puVar7 + -0x7f5bcba6) + 0x29818966 + (uVar35 < 0x36);\n    out(uVar16, uVar35 % 0x47);\n    *ppuVar25[4] = *ppuVar25[4] << (ppuVar25[6] & 0x1f);\n    do {\n    // WARNING: Do nothing block with infinite loop\n    } while( true );\ncode_r0x00a18ebc:\n    ppiVar21[4] = ppiVar8;\n    ppiVar21[3] = piVar15;\n    ppiVar21[2] = uVar39 >> 0x20;\n    ppiVar21[1] = unaff_EBX;\n    *ppiVar21 = ppiVar22;\n    ppiVar21[-1] = unaff_EBP;\n    ppiVar21[-2] = unaff_ESI & 0xffff0000 | *ppiVar22;\n    ppiVar21[-3] = unaff_EDI;\n    ppiVar21[4] = 0xa18fc5;\n    fcn.00a18ec9();\n    *ppiVar22 = extraout_CL;\n    unaff_ESI = 0x1;\n    *(ppiVar21 + 1) = 0xa19000;\n    uVar39 = fcn.00a18fe1();\n    ppiVar21 = ppiVar21 + 5;\n    goto code_r0x00a19000;\n}\n",
        "token_count": 6473
    },
    "009aaae0": {
        "rules": [
            "execute anti-debugging instructions"
        ],
        "decompiled_code": "\nuint fcn.009aaae0(void)\n\n{\n    uint uVar1;\n    ushort extraout_DX;\n    uint8_t in_CF;\n    uint8_t in_PF;\n    uint8_t in_AF;\n    uint8_t in_ZF;\n    uint8_t in_SF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_OF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint32_t uStack00000004;\n    int32_t in_stack_0000002c;\n    uint8_t uVar2;\n    \n    uStack00000004 =\n         (in_NT & 1) * 0x4000 | (in_OF & 1) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 | (in_SF & 1) * 0x80 |\n         (in_ZF & 1) * 0x40 | (in_AF & 1) * 0x10 | (in_PF & 1) * 4 | in_CF & 1 | (in_ID & 1) * 0x200000 |\n         (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    rdtsc();\n    rdtsc();\n    rdtsc();\n    fcn.009aab25();\n    if (in_stack_0000002c + -0x795962f9 < 0) {\n        uVar2 = (in_ID & 1) * ' ' | (in_VIP & 1) * '\\x10' | (in_VIF & 1) * '\\b' | (in_AC & 1) * '\\x04';\n    }\n    else {\n        uVar2 = (in_ID & 1) * ' ' | (in_VIP & 1) * '\\x10' | (in_VIF & 1) * '\\b' | (in_AC & 1) * '\\x04';\n    }\n    fcn.009aabf0(uVar2);\n    uVar1 = in(extraout_DX);\n    return uVar1;\n}\n",
        "token_count": 521
    }
}