{
    "14000100": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/97fd46272f2f4646aeb4203fef93a0f6",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/fbb3cad0774d4241aca00aa22762cd66"
        ],
        "decompiled_code": "\nuint32_t fcn.140001000(ulong arg1, int64_t arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int32_t in_stack_00000028;\n    int32_t iStack172;\n    int32_t iStack160;\n    uint32_t uStack156;\n    char cStack148;\n    \n    // [00] -r-x section size 98304 named .text\n    iStack172 = arg3 + -0x21b5;\n    uStack156 = arg3 - 0x1ac;\n    uVar1 = arg4 - 0x2302;\n    uVar2 = arg3 - 0x21b5;\n    if (uVar1 < in_stack_00000028 + -0x39f) {\n        uStack156 = arg3 - 0x37e;\n        fcn.140001e40(in_stack_00000028 - 0x26a1U ^ 0x24c1, arg3 - 0x37e, arg3 + 0x7b5, arg2);\n        iStack172 = fcn.140006e60(arg1 + 0xaee, arg2, in_stack_00000028 - 0x26a1U ^ 0x1dc9, arg3 - 0x1ac);\n    }\n    if (iStack172 == arg3 + 0x4ec) {\n        fcn.140003590(arg2, uStack156 ^ uVar2, *0x140040014 ^ *(*0x140040000 + 0xbc) | uVar1, \n                      uVar2 ^ *(arg2 + 0x1c) | arg1 + 0x2ecU);\n        (*_sym.imp.KERNEL32.dll_GetHandleInformation)(uVar2 ^ 0x21b5, *(arg2 + 0x68) & uVar2);\n    }\n    else {\n        fcn.1400016c0(arg1 + 0x2ecU ^ 0x1fb, uStack156, *0x140040000, uVar1 ^ 0x1ff1);\n        for (iStack160 = 0; iStack160 < 0xe4c; iStack160 = iStack160 + 1) {\n            cStack148 = *(*(arg2 + 0x90) + iStack160 * 4) * *(arg2 + 0x6c);\n            *(arg2 + 0x118) = *(arg2 + 0x118) ^ *(*0x140040000 + 0x38) + -0x1c1eff + *(arg2 + 0x40);\n            *(*(arg2 + 0xa8) + *(arg2 + 0x74)) = cStack148;\n            *(arg2 + 0x74) = *(arg2 + 0x74) + 1;\n            *(arg2 + 0x38) = *(arg2 + 0x38) - (*(arg2 + 0x88) + -0xd);\n            *0x140040098 = *0x140040098 * (*(arg2 + 0x4c) + *(arg2 + 0xa0) ^ 0x4ad07U);\n            *(arg2 + 0x88) = *(arg2 + 0x88) - ((*0x14004005c - *(arg2 + 4)) + -0x4acf8);\n            *(*0x140040000 + 0x4c) = *(*0x140040000 + 0x4c) ^ *(arg2 + 0x70) - 0x1d455aU;\n            *0x1400400cc = *0x1400400cc - ((*(arg2 + 0x40) ^ *0x140040048) - 0x1c1eff);\n            *(arg2 + 0x88) = *(arg2 + 0x88) | *(arg2 + 0x1c) ^ 1;\n            *0x1400400cc = *0x1400400cc * ((*(arg2 + 4) ^ *(arg2 + 200)) - 0x1ade9f);\n            *(arg2 + 0x10c) = (*(arg2 + 0x68) ^ *(arg2 + 0x10c) ^ 0x16c0b) + *(arg2 + 0x10c);\n        }\n    }\n    return uVar1 ^ 0x2009;\n}\n",
        "token_count": 1009
    },
    "140001e4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/97fd46272f2f4646aeb4203fef93a0f6",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/fbb3cad0774d4241aca00aa22762cd66"
        ],
        "decompiled_code": "\nuint32_t fcn.140001e40(ulong arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t in_stack_00000028;\n    uint32_t uStack100;\n    uint32_t uStack84;\n    uint32_t uStack80;\n    \n    uVar1 = arg1 - 0x4c8;\n    uVar2 = arg3 - 0x668;\n    uVar3 = in_stack_00000028 ^ 0x3eaa;\n    uVar4 = arg1 + 0x4a9;\n    uStack100 = arg2 - 0x1e37;\n    uVar5 = arg2 - 0x1e37;\n    if ((uVar1 <= (uVar2 ^ 0x14c)) && (arg2 + -0x6e < uVar2)) {\n        uStack84 = uVar1;\n        if (uVar5 == uVar3 + 0x719) {\n            for (; uStack80 = uVar1,  *(*0x140040000 + 0xb0) * uVar3 - uVar4 <= uStack84; uStack84 = uStack84 + 4) {\n                for (; uVar5 * *(arg4 + 0xb0) <= uStack80; uStack80 = uStack80 + 4) {\n                    *(*0x140040000 + 0x104) = *(*0x140040000 + 0x104) ^ uVar5 - *(arg4 + 0x60);\n                }\n            }\n        }\n        else {\n            *(*0x140040000 + 0x6c) = *(*0x140040000 + 0x6c) ^ (*(arg4 + 200) - *(arg4 + 4)) + 0x9134f9a4U;\n            if (*(arg4 + 0x40) != 0x559d) {\n                *(arg4 + 0x90) = 0x140099890;\n            }\n            uStack100 = fcn.140011e30(uVar1, arg2 + 0x21b, arg2 + 0x1c2, arg4);\n            if (*(arg4 + 0xa0) < *(arg4 + 0xbc) || *(arg4 + 0xa0) == *(arg4 + 0xbc)) {\n                *0x14004007c = *0x14004007c + -0x106a;\n            }\n        }\n    }\n    if (uStack100 + 0x2b6 < uVar4) {\n        if (uVar1 == arg2 + 0x1c2U) {\n            if (*(arg4 + 0xbc) != 0xd6ae) {\n                *(arg4 + 0x6c) = *(arg4 + 0x6c) - (*(arg4 + 0x38) ^ *(*0x140040000 + 0x40) ^ 0x1c0f40);\n            }\n        }\n        else if (uVar1 <= (uVar2 - uVar1 ^ uVar4)) {\n            fcn.140016fe0(*(arg4 + 0x70) * 0x21a9, uVar3 * uVar1, uStack100 | *(arg4 + 0x70), \n                          uStack100 & *0x140040058 & 0x2052);\n        }\n    }\n    return uVar5 ^ 0x24c1;\n}\n",
        "token_count": 812
    },
    "14000228": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/97fd46272f2f4646aeb4203fef93a0f6",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/fbb3cad0774d4241aca00aa22762cd66"
        ],
        "decompiled_code": "\n// WARNING: Restarted to delay deadcode elimination for space: ram\n\nvoid fcn.140002280(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    ulong uVar3;\n    uint64_t in_stack_fffffffffffffee0;\n    uint64_t uVar4;\n    \n    *0x140040014 = 0xe;\n    *0x14004002c = 1;\n    *0x140040038 = 0;\n    *0x140040048 = 0x1f;\n    *0x140040050 = 1;\n    *0x14004005c = 1;\n    *0x140040068 = 1;\n    *0x140040120 = arg3;\n    *(*0x140040000 + 0x68) = 0x4a;\n    *0x140040080 = 3;\n    *0x140040098 = 0xd;\n    *0x1400400b0 = 0;\n    *0x1400400cc = 1;\n    *0x1400400d8 = 1;\n    *0x1400400e0 = 0;\n    *0x1400400e4 = 6;\n    *0x140040114 = 1;\n    *0x14004011c = 1;\n    *0x140040128 = 0;\n    uVar4 = in_stack_fffffffffffffee0 & 0xffffffff00000000 | 0x296a;\n    uVar3 = 0x140040010;\n    iVar1 = fcn.140016fe0(0x1d66, 0x21a9, 0x1e37, 0x21b5);\n    if (iVar1 != 0x21b5) {\n        if (iVar1 == 0x2730) {\n            if (*0x140040058 < (0x1e37 - *0x14004002c ^ *0x14004002c)) {\n                (*_sym.imp.KERNEL32.dll_GetCurrentActCtx)((*0x14004005c | *(*0x140040000 + 0x108)) ^ 0x22bf);\n            }\n            else {\n                *0x14004005c = *0x14004005c ^ (*(*0x140040000 + 0x38) | 0x2730 | *0x140040128);\n                (*_sym.imp.KERNEL32.dll_SetNamedPipeHandleState)\n                          (0x27e9, *(*0x140040000 + 0xd4) + 0x1e37, 0x2730U - *0x140040010 ^ 0x27e9, 0x7f8, uVar3, uVar4\n                          );\n                fcn.140012940(0x140040010, *0x140040118 * *0x140040010 * 0x224e, 0x2620, 0xffffff47);\n                *(*0x140040000 + 0x18) = *(*0x140040000 + 0x18) * (*0x140040078 ^ *0x140040048);\n            }\n        }\n        else {\n            iVar1 = fcn.140004f30(0x140040010, 0x1dc9, 0x1ff1, 0x22bf);\n            uVar2 = fcn.140001000(0x1d66, 0x140040010, 0x21b5, 0x2302);\n            iVar1 = fcn.1400122b0(0x2052, 0x22bf, iVar1 - 0x21b, (uVar2 ^ 0x5b) - 0x2aa);\n            fcn.140003fa0(0x26a1, 0x140040010, iVar1 - 0x7f8, 0x1e37);\n        }\n    }\n    (*_sym.imp.KERNEL32.dll_ExitProcess)(*0x1400400f8);\n    return;\n}\n",
        "token_count": 914
    },
    "140002a5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/97fd46272f2f4646aeb4203fef93a0f6",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/fbb3cad0774d4241aca00aa22762cd66"
        ],
        "decompiled_code": "\nint32_t fcn.140002a50(ulong arg1, int64_t arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iStack56;\n    \n    for (iStack56 = 0; iStack56 < 0x1316; iStack56 = iStack56 + 1) {\n        *(*0x140040000 + 0x38) = *(*0x140040000 + 0x38) | *(arg2 + 0x38) - 0x1c1efeU;\n        *0x140040050 = *0x140040050 * (*(arg2 + 0xd0) ^ 0x138f7b);\n        *(*0x140040000 + 0x38) = (*0x14004005c - *0x140040068) + 0x1090e9 + *(*0x140040000 + 0x38);\n        *(*0x140040000 + 4) = *(*0x140040000 + 4) * ((*(*0x140040000 + 0x4c) ^ *(arg2 + 0x40)) - 0x4ad06);\n        *0x140040050 = *0x140040050 - (*(*0x140040000 + 0x10c) + -0x1023d4);\n        *(arg2 + 0xa0) = *(arg2 + 0xa0) * (*(*0x140040000 + 0xbc) ^ 0x6e1c5);\n        *(*(arg2 + 0xd8) + iStack56 * 4) = *(*(*0x140040000 + 0xd8) + iStack56 * 4) ^ *(arg2 + 0x78);\n        *(arg2 + 0x58) = *(arg2 + 0x58) * ((*(arg2 + 0x38) ^ *(arg2 + 0xd4)) - 0x1c1ef7);\n        *(arg2 + 0x78) = *(arg2 + 0x78) + *(arg2 + 0xe0);\n    }\n    return arg3 + -0x4a9;\n}\n",
        "token_count": 484
    },
    "14000359": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/97fd46272f2f4646aeb4203fef93a0f6",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/fbb3cad0774d4241aca00aa22762cd66"
        ],
        "decompiled_code": "\nint32_t fcn.140003590(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t in_stack_00000028;\n    int64_t in_stack_ffffffffffffff38;\n    uint uVar4;\n    ulong in_stack_ffffffffffffff40;\n    uint uVar5;\n    uint32_t uStack168;\n    uint32_t uStack156;\n    uint32_t uStack148;\n    \n    uVar4 = in_stack_ffffffffffffff38 >> 0x20;\n    uVar5 = in_stack_ffffffffffffff40 >> 0x20;\n    uVar1 = arg2 - 0x1da8;\n    uStack168 = arg3 - 0x7f0;\n    uVar2 = arg3 ^ 0x27e9;\n    uStack156 = in_stack_00000028 ^ 0x3c60;\n    uVar3 = arg4 + 0xa1d;\n    if (uStack156 - 0x401 < uVar2) {\n        uStack148 = uVar1;\n        if (*(arg1 + 0xfc) != (uStack156 + uVar1) - *(arg1 + 0x38)) {\n            while( true ) {\n                uVar4 = in_stack_ffffffffffffff38 >> 0x20;\n                uVar5 = in_stack_ffffffffffffff40 >> 0x20;\n                if (uStack148 == (*(arg1 + 0x44) & uStack156)) break;\n                uStack156 = uStack156 - (uStack168 + *(arg1 + 0xd0));\n                in_stack_ffffffffffffff38 = uVar1 & uVar3;\n                in_stack_ffffffffffffff40 = 0;\n                (*_sym.imp.KERNEL32.dll_GetNamedPipeHandleStateA)\n                          (*(*0x140040000 + 0xfc) * uVar1 * uVar2, uStack168 | 0x1dc9, uStack156 * uStack168 + -0x1ff9);\n                uStack148 = uStack148 + 1;\n            }\n        }\n        if (*(arg1 + 0x108) < (*0x140040010 | *(arg1 + 0xd0)) * uVar2) {\n            (*_sym.imp.KERNEL32.dll_CreateNamedPipeA)\n                      (*0x1400400c4 * *(arg1 + 0x38), *(*0x140040000 + 0xd4) - *(*0x140040000 + 0xfc) & uVar2, \n                       uVar3 * *(arg1 + 0xbc) & 0x296a, *(arg1 + 0xd0) + uStack168 + *(arg1 + 0x70), \n                       CONCAT44(uVar4, uVar3 - uStack168 ^ uVar2), CONCAT44(uVar5, (uVar1 ^ 0x24c1) + 0x224e), \n                       (uVar1 ^ 0x1da8) & uVar1, (uVar2 | 0x21b5) & 0x1ff1);\n        }\n    }\n    else {\n        if (*(arg1 + 0x10c) < 0xeeb6) {\n            *(arg1 + 0x4c) = *(arg1 + 0x4c) | *0x140040050 + 0x82b84 + *(arg1 + 0x70);\n        }\n        fcn.140011b00(arg2 + 0xa41, uVar3 ^ 0xef5, uVar2 + 0x2052, arg1);\n        if (*(*0x140040000 + 0xd4) < *(arg1 + 0x104) || *(*0x140040000 + 0xd4) == *(arg1 + 0x104)) {\n            *(arg1 + 0x104) = *(arg1 + 0x104) * 0x2a33d;\n        }\n        else {\n            *(arg1 + 0x70) = *(arg1 + 0x70) ^ *(*0x140040000 + 200) - 0xb974fU;\n        }\n        uStack168 = arg3 - 0x59b;\n    }\n    return uStack168 + 0x71c;\n}\n",
        "token_count": 973
    },
    "140004d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/97fd46272f2f4646aeb4203fef93a0f6",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/fbb3cad0774d4241aca00aa22762cd66"
        ],
        "decompiled_code": "\nint32_t fcn.140004d00(ulong arg1, uint32_t *arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    int32_t in_stack_00000028;\n    \n    arg2[0x41] = arg2[0x41] ^ arg2[0x1c] ^ *(*0x140040000 + 0x58) ^ 0x196312;\n    if ((arg3 ^ 0x359d) <= (arg4 ^ 0x3958)) {\n        if (in_stack_00000028 + -0x3e2 == in_stack_00000028 + -0x39f) {\n            if (((*0x1400400c4 == (in_stack_00000028 - 0x64fU | arg4 ^ 0x6f3) * 0x1ff9) &&\n                (arg2[0x31] != (arg3 ^ 0x359d) * 2 + arg2[0x1c])) &&\n               (uVar1 = arg2[0x35] - *(*0x140040000 + 0x58),  arg2[3] < uVar1 || arg2[3] == uVar1)) {\n                *arg2 = *(*0x140040000 + 0xcc) & in_stack_00000028 - 0x64fU;\n            }\n        }\n        else if (*(*0x140040000 + 0x38) < 0x677f) {\n            *(*0x140040000 + 0x88) = *(*0x140040000 + 0x88) * (*0x140040068 + -0x1ae61 + *(*0x140040000 + 0x70));\n        }\n        else {\n            *(*0x140040000 + 0xe8) = *(*0x140040000 + 0xe8) ^ 0xce4c;\n        }\n    }\n    return (arg4 ^ 0x6f3) - 0x59;\n}\n",
        "token_count": 453
    },
    "140004f3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/97fd46272f2f4646aeb4203fef93a0f6",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/fbb3cad0774d4241aca00aa22762cd66"
        ],
        "decompiled_code": "\nint32_t fcn.140004f30(uint64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    int64_t iVar6;\n    int32_t iVar7;\n    int32_t in_stack_00000038;\n    uint64_t uVar8;\n    uchar uStack196;\n    int32_t iStack184;\n    int32_t iStack176;\n    uint32_t uStack172;\n    uint32_t uStack168;\n    char cStack164;\n    \n    uVar2 = arg4 - 0x559;\n    uVar3 = arg3 + 0x863;\n    uVar4 = arg4 ^ 0xbd5;\n    uVar5 = arg4 - 0x2b6;\n    if ((arg4 + 0x202 <= uVar4) && (uVar5 <= (arg4 ^ 0xaeb))) {\n        if (uVar5 < arg2 + 0x240) {\n            uStack172 = uVar2;\n            if (uVar2 == ((arg4 - 0x22bf) - in_stack_00000038 | uVar3)) {\n                for (; uStack172 != (uVar4 ^ uVar2); uStack172 = uStack172 + 2) {\n                    (*_sym.imp.KERNEL32.dll_HeapLock)();\n                    uVar8 = arg1;\n                    iVar7 = fcn.140014210((*(*0x140040000 + 0x88) ^ 0x22bf) + 0x1dc9, *0x1400400e0 - uVar2, \n                                          *(arg1 + 0x118) * 0x22bf, (arg2 + 0x8d8) * 0x1da8 ^ uVar5);\n                    (*_sym.imp.KERNEL32.dll_ReleaseMutex)(*(*0x140040000 + 0x108) + *(arg1 + 0x100) ^ 0x27e9);\n                    for (uStack168 = *(arg1 + 0x58); *0x140040058 + -0x2302 + uVar3 < uStack168;\n                        uStack168 = uStack168 + 3) {\n                        *(arg1 + 0xa4) = *(arg1 + 0x28) * *(arg1 + 0x1c) + *(arg1 + 0xa4);\n                        (*_sym.imp.KERNEL32.dll_GetHandleInformation)\n                                  (*(arg1 + 0x60) | uVar5 | arg2 + 0x539U, *(arg1 + 0x68) - iVar7 & 0x296a, arg1, arg1, \n                                   uVar8);\n                        *(arg1 + 0xc) = *(arg1 + 0xc) * ((*(arg1 + 0x108) | uVar5) & *(arg1 + 0x88));\n                        uVar8 = uVar8 & 0xffffffff00000000 | arg2 + 0x539U ^ *(*0x140040000 + 0x70);\n                        (*_sym.imp.KERNEL32.dll_CreateThread)(*0x140040078 * iVar7);\n                    }\n                }\n            }\n            else {\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar3 & uVar4 & *(*0x140040000 + 0x54));\n            }\n        }\n        else {\n            *(arg1 + 0x3c) = 0x94797;\n            if (*0x140040078 < *(arg1 + 0x38)) {\n                *(*0x140040000 + 0x3c) = *(*0x140040000 + 0x3c) ^ *(arg1 + 0x58) ^ 0x1fca78;\n            }\n            else {\n                *(arg1 + 4) = *(arg1 + 4);\n            }\n            if (*(arg1 + 0x88) < *(arg1 + 4)) {\n                iVar6 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0);\n                *(*0x140040000 + 0xd8) = iVar6 + 0x1800;\n            }\n            else {\n                *(*0x140040000 + 0x70) = *(*0x140040000 + 0x70) + -0x84b1;\n            }\n            fcn.140012fa0(0x140040010, arg4 + 0x595, arg4 - 0x22bf ^ 0x2302, arg4 - 0x71);\n            *(*0x140040000 + 0x6c) = (*(arg1 + 0x10c) ^ *(arg1 + 0x38)) + 0x1a131ba7;\n        }\n    }\n    if (*0x140040128 == 0xb74) {\n        *(arg1 + 0xa0) = (*(arg1 + 0x10c) ^ *(arg1 + 0x68)) + *(arg1 + 0xa0);\n    }\n    else {\n        *(arg1 + 0x90) = 0x140040130;\n    }\n    for (iStack184 = 0; iStack184 < 0x14e08; iStack184 = iStack184 + 1) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + *(arg1 + 4) + -0xe;\n        *0x14004005c = *0x14004005c * ((*(*0x140040000 + 0xa0) - *(*0x140040000 + 0x10c)) + 0x1023d5);\n        *(*0x140040000 + 4) = (*(*0x140040000 + 4) ^ 0xe) + *(*0x140040000 + 4);\n        uVar1 = *(*0x1400400a0 + iStack184 * 4);\n        *(arg1 + 0xd0) = *(arg1 + 0xd0) - (*(arg1 + 0x58) + *(arg1 + 0x4c) ^ 0x19eaf5U);\n        *0x140040078 = *0x140040078 | *0x140040068 ^ 0x153def;\n        cStack164 = uVar1 * *(*0x140040000 + 0x6c);\n        *(*(arg1 + 0xa8) + *(*0x140040000 + 0x74)) = cStack164;\n        *(*0x140040000 + 0x74) = *(*0x140040000 + 0x74) + 1;\n        *(arg1 + 0xd0) = *(arg1 + 0xd0) - (*(arg1 + 0x68) ^ *(arg1 + 0xd4) ^ 0x114fd9);\n        *(arg1 + 4) = *(arg1 + 4) * (*0x140040050 - *(arg1 + 0x70) ^ 0xffe2baa6);\n        *(*0x140040000 + 0x58) = *(*0x140040000 + 0x58) + *(*0x140040000 + 200) + -0x1adeae;\n        *(arg1 + 0x88) = *(arg1 + 0x88) | *(arg1 + 0x40) - 1U;\n        *(arg1 + 0x38) = (*0x14004005c - *0x1400400e0) + 0xee274 + *(arg1 + 0x38);\n        *(arg1 + 0x1c) = *(arg1 + 0x1c) | (*(*0x140040000 + 200) - *(arg1 + 0x28)) - 0x1adeaeU;\n    }\n    *(*0x140040000 + 0x6c) = *(*0x140040000 + 0xbc) + -0x6e1c3;\n    *(arg1 + 0x90) = 0x1400194f0;\n    for (iStack176 = 0; iStack176 < 0xbee; iStack176 = iStack176 + 1) {\n        *(arg1 + 0x38) = *(arg1 + 0x38) ^ *(arg1 + 0x58) - *(arg1 + 0x28) ^ 0x153defU;\n        iVar7 = *(*(arg1 + 0x90) + iStack176 * 4) * *(arg1 + 0x6c);\n        *0x1400400e0 = *0x1400400e0 ^ *(arg1 + 0x4c) - *(arg1 + 0x58) ^ 0xffef6f17U;\n        *(arg1 + 0x88) = *(arg1 + 0x88) ^ (*0x14004005c - *(*0x140040000 + 0x38)) + 0x1771f8U;\n        *(arg1 + 0x104) = (*(*0x140040000 + 0x1c) + *0x14004005c ^ 0x4ad07U) + *(arg1 + 0x104);\n        *(*(*0x140040000 + 0xa8) + *0x140040084) = iVar7 >> 0x18;\n        *0x140040084 = *0x140040084 + 1;\n        *(*(*0x140040000 + 0xa8) + *(arg1 + 0x74)) = iVar7 >> 0x10;\n        *(arg1 + 0x74) = *(arg1 + 0x74) + 1;\n        *(*(arg1 + 0xa8) + *(arg1 + 0x74)) = iVar7 >> 8;\n        *(arg1 + 0x74) = *(arg1 + 0x74) + 1;\n        uStack196 = iVar7;\n        *(*(arg1 + 0xa8) + *(arg1 + 0x74)) = uStack196;\n        *(arg1 + 0x74) = *(arg1 + 0x74) + 1;\n        *0x140040038 = *0x140040038 - (*(*0x140040000 + 0x1c) + *0x1400400e4 + -7);\n        *(arg1 + 0xbc) = *(arg1 + 0xbc) + *(arg1 + 0xd0) + -0x138f7a;\n        *0x1400400b0 = *0x1400400b0 | (*(arg1 + 0x1c) ^ *(arg1 + 0xd4)) - 7;\n        *(arg1 + 0xd4) = *(arg1 + 0xd4) - ((*(arg1 + 0x40) ^ *(arg1 + 0x10c)) - 0x1023d5);\n        *(arg1 + 200) = *(arg1 + 200) - (*(arg1 + 0x88) + -0xd);\n    }\n    if (*(arg1 + 0x28) < 0x161ac) {\n        *(*0x140040000 + 0x6c) = *(arg1 + 0x40) + 0x3df30;\n    }\n    else {\n        *(*0x140040000 + 0x88) = *(*0x140040000 + 0x88) * *(arg1 + 0x70);\n    }\n    if (*0x140040050 < *0x140040080) {\n        *(arg1 + 0x6c) = *(arg1 + 0x6c) - (*0x14004011c + -0x10088c);\n    }\n    else {\n        *(arg1 + 0x58) = *(*0x140040000 + 0x104) + 0xeabf + *(arg1 + 0x58);\n    }\n    return uVar4 - 0x918;\n}\n",
        "token_count": 2720
    },
    "140006e6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/97fd46272f2f4646aeb4203fef93a0f6",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/fbb3cad0774d4241aca00aa22762cd66"
        ],
        "decompiled_code": "\nuint32_t fcn.140006e60(ulong arg1, int64_t arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t in_stack_00000028;\n    uchar uStack56;\n    int32_t iStack52;\n    \n    uVar1 = arg3 + 0x289;\n    if (arg3 + -0x21 < uVar1) {\n        if (*(arg2 + 0x38) != 0x11f29) {\n            *(arg2 + 0x90) = 0x1400946b0;\n        }\n    }\n    else if (*(arg2 + 0xd0) == (*0x140040114 + uVar1) * (in_stack_00000028 ^ 0xa1a)) {\n        *0x140040038 = *0x140040038 | (arg3 - 99U & arg1 - 0x2854U) - (arg3 + 0x8d8);\n        (*_sym.imp.KERNEL32.dll_DisconnectNamedPipe)(*(arg2 + 0xd4) + *(arg2 + 0xc0));\n    }\n    if (arg1 - 0x2854U < (in_stack_00000028 ^ 0xa1a) - 0x595) {\n        for (iStack52 = 0; iStack52 < 0x1443; iStack52 = iStack52 + 1) {\n            iVar2 = *(*(arg2 + 0x90) + iStack52 * 4);\n            *(arg2 + 200) = *(arg2 + 200) * (*(arg2 + 0x58) + -0x153dee);\n            *(*0x140040000 + 0x28) = *(*0x140040000 + 0x28) - ((*(arg2 + 0xa0) - *(arg2 + 0x4c)) + 0x4ad06);\n            *0x1400400d8 = *0x1400400d8 * ((*(arg2 + 0xa0) - *0x1400400e4) + 7);\n            iVar2 = iVar2 * *(*0x140040000 + 0x6c);\n            *(arg2 + 0x68) = *(arg2 + 0x1c) + -1 + *(arg2 + 0x68);\n            *(*(arg2 + 0xa8) + *0x140040084) = iVar2 >> 0x18;\n            *0x140040084 = *0x140040084 + 1;\n            *(*(arg2 + 0xa8) + *(arg2 + 0x74)) = iVar2 >> 0x10;\n            *(arg2 + 0x74) = *(arg2 + 0x74) + 1;\n            *(arg2 + 0x1c) = *(arg2 + 0x1c) - (*(arg2 + 0x38) + *0x1400400e4 + -0x1c1f04);\n            *(*0x140040000 + 0xd0) = *(*0x140040000 + 0xd0) ^ *(arg2 + 0x88) ^ *(arg2 + 4) ^ 3;\n            *0x140040048 = *0x140040048 + (*(arg2 + 0xbc) + *(arg2 + 0x118) ^ 0x6e1c4U);\n            *(arg2 + 0x38) = *(arg2 + 0x38) - (*(arg2 + 0x1c) + -0x6e1c5 + *(*0x140040000 + 0xbc));\n            *(*(arg2 + 0xa8) + *(*0x140040000 + 0x74)) = iVar2 >> 8;\n            *(*0x140040000 + 0x74) = *(*0x140040000 + 0x74) + 1;\n            *(arg2 + 4) = *(arg2 + 4) + *(arg2 + 0x1c) + -1;\n            *0x1400400b0 = *0x1400400b0 | *(*0x140040000 + 0x4c) + -0x14d0da + *(arg2 + 0x10c);\n            uStack56 = iVar2;\n            *(*0x1400400b8 + *(arg2 + 0x74)) = uStack56;\n            *(arg2 + 0x74) = *(arg2 + 0x74) + 1;\n        }\n        *(arg2 + 0x6c) = *(arg2 + 200) + -0x13ad87 + *0x140040098;\n    }\n    return uVar1 ^ 0x3d34;\n}\n",
        "token_count": 1085
    },
    "1400075c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/97fd46272f2f4646aeb4203fef93a0f6",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/fbb3cad0774d4241aca00aa22762cd66"
        ],
        "decompiled_code": "\nint32_t fcn.1400075c0(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t in_stack_00000028;\n    int32_t in_stack_00000030;\n    int64_t in_stack_00000038;\n    uint32_t uStack40;\n    int32_t iStack36;\n    uint32_t uStack32;\n    uint32_t uStack28;\n    \n    iStack36 = in_stack_00000030 + -0x1d66;\n    uStack32 = arg2 + 0x75b;\n    if ((arg1 ^ 0x351) != (arg1 ^ 0x1d66) + 0x2302) {\n        if (iStack36 < arg4 + 0x595) {\n            *(in_stack_00000038 + 0xe4) = *0x140040080 + -0x1d455a;\n            for (uStack40 = *(*0x140040000 + 0x50); uStack40 <= *(in_stack_00000038 + 100); uStack40 = uStack40 + 1) {\n                *(in_stack_00000038 + 0x118) =\n                     *(in_stack_00000038 + 0x118) -\n                     (*(in_stack_00000038 + 0xbc) ^ *(in_stack_00000038 + 0x1c) ^ 0x6e1c5);\n                *0x140040080 = *0x140040080 - (*0x1400400e4 + -6);\n                *(*0x140040000 + 0xe4) = uStack40 * uStack40 + *(*0x140040000 + 0xe4);\n            }\n            if (*(*0x140040000 + 0x88) < *(in_stack_00000038 + 4)) {\n                *0x1400400f4 = *0x1400400f4 * ((*0x140040050 ^ *(in_stack_00000038 + 200)) - 0x1adea9);\n            }\n            if (*(in_stack_00000038 + 0x68) == *(in_stack_00000038 + 0x40)) {\n                *(*0x140040000 + 0x68) = *(*0x140040000 + 0x68) - *0x14004005c;\n            }\n            else {\n                *(in_stack_00000038 + 0x78) = *0x1400400f4;\n            }\n            iStack36 = in_stack_00000030 + 0xa83;\n            *0x140040088 = *0x140040088 - *(in_stack_00000038 + 0x10);\n        }\n        else if (iStack36 <= (arg1 ^ 0x351 ^ in_stack_00000028 + 0x1c4U) - 0x224e) {\n            for (uStack28 = *(in_stack_00000038 + 0x88); uStack28 != (uStack32 ^ 0x2009); uStack28 = uStack28 + 3) {\n                uStack32 = uStack32 | *(in_stack_00000038 + 0x5c) - *(*0x140040000 + 0xd4);\n                *0x140040024 = *0x140040024 * (uStack32 - *0x140040038);\n                *(in_stack_00000038 + 0x1c) = *(in_stack_00000038 + 0x44) * *(in_stack_00000038 + 0x28) - *0x140040110;\n            }\n        }\n    }\n    return iStack36 + 0x6b;\n}\n",
        "token_count": 822
    },
    "14000790": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/97fd46272f2f4646aeb4203fef93a0f6",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/fbb3cad0774d4241aca00aa22762cd66"
        ],
        "decompiled_code": "\nint32_t fcn.140007900(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t in_stack_00000028;\n    uint32_t in_stack_00000030;\n    uint32_t uStack112;\n    \n    uStack112 = in_stack_00000030 ^ 0x1c;\n    if (arg2 + -0x1da8 < arg3 + -0x228) {\n        if (in_stack_00000030 < in_stack_00000028 + -0xa5) {\n            if (arg2 + -0x1da8 == in_stack_00000030 - in_stack_00000028) {\n                (*_sym.imp.KERNEL32.dll_ExitThread)();\n                uStack112 = uStack112 - ((*(*0x140040000 + 0x4c) | 0x2009) ^ 0x24c1);\n            }\n            (*_sym.imp.KERNEL32.dll_CreateThread)\n                      (*(*0x140040000 + 0x24) + in_stack_00000030 | 0x2302, *0x140040098 * 0x21b5 ^ 0x224e, \n                       (in_stack_00000030 - 0x224e) - uStack112, *(arg1 + 0x38) | *(arg1 + 0xc4), \n                       *(*0x140040000 + 0x28) & *0x14004001c, *(arg1 + 0x54) - 0x224eU ^ arg3 - 0x1ff1U);\n        }\n        else {\n            if (*0x140040014 <= *(arg1 + 0x68)) {\n                *0x140040114 = *0x140040114 ^ *(*0x140040000 + 0x1c) + 0x483c9U;\n            }\n            if (*0x140040098 < *0x140040068) {\n                *(arg1 + 0x70) = *(arg1 + 0x70) ^ *0x14004005c + 0xd5500U;\n            }\n            if (*(arg1 + 200) != 0xcbdd) {\n                *0x1400400f8 = *0x1400400f8 - ((*(arg1 + 0xd4) ^ *(arg1 + 0x88)) + 0x1718);\n            }\n            *0x1400400f8 = *0x1400400f8 ^ *(arg1 + 0xd0) - 0xa4525U;\n            fcn.140012670(in_stack_00000028 - 0x1fc, arg2 + 0x40d, arg1, in_stack_00000028 - 0x255U ^ 0x230);\n            *(arg1 + 0x20) = (*(*0x140040000 + 0x68) ^ *(arg1 + 0x4c)) - 0x15ca33;\n        }\n    }\n    return arg3;\n}\n",
        "token_count": 676
    },
    "1400111d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/97fd46272f2f4646aeb4203fef93a0f6",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/fbb3cad0774d4241aca00aa22762cd66"
        ],
        "decompiled_code": "\nuint32_t fcn.1400111d0(ulong arg1, int64_t arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t in_stack_00000038;\n    uint32_t uStack184;\n    uint32_t uStack168;\n    uint32_t uStack160;\n    uint32_t uStack156;\n    uint32_t uStack152;\n    \n    uVar1 = in_stack_00000038 ^ 0xef5;\n    uStack168 = in_stack_00000038 - 0x26a1;\n    uStack184 = arg3 ^ 0x1ff9;\n    arg4._0_4_ = arg4 ^ 0xfbd;\n    if ((uStack184 <= uVar1 - 0x595) && ((arg3 + 0x309 ^ 0x3ecb) <= arg4)) {\n        if (arg3 < uStack184 + 0x2302) {\n            iVar2 = fcn.140003590(arg2, in_stack_00000038 ^ 0x3b09, in_stack_00000038 ^ 0x148, uStack168 ^ 0x1e37);\n            if (*0x140040078 == 0xeef9) {\n                *0x1400400d8 = *0x1400400d8 * (*(arg2 + 0x28) ^ *(arg2 + 0xbc));\n            }\n            else {\n                *(arg2 + 0x68) = (*(arg2 + 0x88) + *(arg2 + 0xd0) ^ 0x2c012U) + *(arg2 + 0x68);\n            }\n            fcn.140017a50(in_stack_00000038 - 0x6b0, arg3 ^ 0x3e4c, arg3 + 0x6a8, 0x140040010);\n            *(arg2 + 0x4c) = *(arg2 + 0x104) + 0x15f380 + *(arg2 + 0x4c);\n            uStack168 = fcn.140014000(arg2, arg4 - 0x148, arg4 - 0xa41 ^ 0xce, arg3 ^ 0x3cfb);\n            fcn.140004d00(arg4 + 0x6b, arg2, iVar2 - 0x116, arg4 - 0x148);\n        }\n        else {\n            for (uStack160 = *(arg2 + 0xb4); uStack160 == (*(*0x140040000 + 0xb4) | 0x1dc9); uStack160 = uStack160 + 4)\n            {\n                for (uStack156 = *0x140040038; uStack152 = uVar1, \n                    (*(arg2 + 0x18) ^ *(*0x140040000 + 0x9c) | 0x1d66) < uStack156; uStack156 = uStack156 + 1) {\n                    for (; uStack152 == ((uStack184 | 0x21b5) & *(*0x140040000 + 0xb0)); uStack152 = uStack152 + 2) {\n                        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar1 & uStack184);\n                        uStack184 = fcn.140011e30((uStack184 | *(arg2 + 0x38)) & 0x27e9, uStack184 + 0x26a1 ^ 0x26a1, \n                                                  (*(arg2 + 0x44) ^ *(*0x140040000 + 0x54)) + 0x296a, 0x140040010);\n                    }\n                }\n            }\n        }\n    }\n    return uStack168 ^ 0x9e1;\n}\n",
        "token_count": 859
    },
    "140011b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/97fd46272f2f4646aeb4203fef93a0f6",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/fbb3cad0774d4241aca00aa22762cd66"
        ],
        "decompiled_code": "\nint32_t fcn.140011b00(ulong arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    int32_t in_stack_00000028;\n    int32_t in_stack_00000030;\n    \n    arg1._0_4_ = arg1 ^ 0x148;\n    if (((arg2 ^ 0x260) < arg1) && (in_stack_00000030 + -0x296a <= arg2)) {\n        if (arg1 < in_stack_00000028 + 0x559) {\n            if ((*(arg4 + 0x44) & 0x21a9 | *(arg4 + 0x38)) < in_stack_00000030 - 0x296aU) {\n                (*_sym.imp.KERNEL32.dll_ReleaseMutex)(arg1 + *(arg4 + 0xd4) | arg2 ^ 0xef5);\n            }\n        }\n        else {\n            if (*(arg4 + 0x40) < *(arg4 + 0xbc) || *(arg4 + 0x40) == *(arg4 + 0xbc)) {\n                *(arg4 + 0xd0) = *(arg4 + 0xd0) * (*(*0x140040000 + 200) - *(arg4 + 0x70) ^ 0xffe4b5a0U);\n            }\n            else {\n                *(arg4 + 0xbc) = *(arg4 + 0xbc) * 0x1bdfd;\n            }\n            if (*(*0x140040000 + 0x10c) < 0x111c2) {\n                *(arg4 + 0xd0) = *(arg4 + 0xd0) * (*(*0x140040000 + 0x70) ^ 0x170a82);\n            }\n            else {\n                *(*0x140040000 + 0xd0) = *(*0x140040000 + 0xd0) ^ *(arg4 + 0xbc);\n            }\n            *(*0x140040000 + 0xd0) = *(*0x140040000 + 0xd0) ^ *0x1400400e0 + 0xb63f1 + *(arg4 + 0x4c);\n            if (*(*0x140040000 + 0x68) < 0x230c) {\n                *(arg4 + 200) = *(arg4 + 200) * (*(*0x140040000 + 0xd0) + -0xdc55 + *(arg4 + 0x4c));\n            }\n            else {\n                *(arg4 + 200) = *0x140040128 + *(arg4 + 0xd4) ^ 0x8228;\n            }\n        }\n    }\n    return in_stack_00000030 + -0xc04;\n}\n",
        "token_count": 625
    },
    "140011e3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/97fd46272f2f4646aeb4203fef93a0f6",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/fbb3cad0774d4241aca00aa22762cd66"
        ],
        "decompiled_code": "\nint32_t fcn.140011e30(ulong arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    uint uVar1;\n    uint32_t in_stack_00000028;\n    int32_t iStack56;\n    char cStack48;\n    \n    if (arg2 - 0x21b < (arg2 ^ 0x2ed)) {\n        if ((in_stack_00000028 + 0x539 ^ 0x3cfb) < arg3 + 0x971) {\n            for (iStack56 = 0; iStack56 < 0x147c; iStack56 = iStack56 + 1) {\n                *(arg4 + 0x118) = *(arg4 + 0x118) - (*(arg4 + 0x118) + *(arg4 + 0x68) ^ 0x114fdfU);\n                *(arg4 + 4) = *(arg4 + 4) - ((*(arg4 + 0xbc) - *(*0x140040000 + 0x28)) + -0x6e1c4);\n                *(arg4 + 0xd4) = *(arg4 + 0xd4) - (*(arg4 + 0x1c) + *(arg4 + 0x70) + -0x1d455b);\n                *(arg4 + 0xa0) = *(arg4 + 0xa0) * (*(arg4 + 0x10c) + -0x1023d3);\n                uVar1 = *(*(arg4 + 0x90) + iStack56 * 4);\n                *(arg4 + 0xd0) = *(arg4 + 0xd0) ^ (*0x14004002c ^ *0x140040098) - 0xc;\n                *(arg4 + 0x28) = *(arg4 + 0x28) | *0x140040098 - 0xd;\n                cStack48 = uVar1 * *(arg4 + 0x6c);\n                *0x140040114 = *0x140040114 | *0x1400400e4 ^ 6;\n                *(arg4 + 0xbc) = *(arg4 + 0xbc) + *(arg4 + 0x1c) + *(*0x140040000 + 0x88) + -0xe;\n                *(*(*0x140040000 + 0xa8) + *(arg4 + 0x74)) = cStack48;\n                *(arg4 + 0x74) = *(arg4 + 0x74) + 1;\n                *(arg4 + 0x88) = *(arg4 + 0x88) * (*(arg4 + 200) ^ 0x1adeaf);\n                *(arg4 + 4) = *(arg4 + 4) ^ *(arg4 + 0x1c) - 1U;\n                *(arg4 + 0xd4) = *(arg4 + 0xd4) + *(arg4 + 0x1c) + -7 + *(arg4 + 0xd4);\n                *(*0x140040000 + 0x1c) = *(*0x140040000 + 0x1c) * (*0x14004002c + *(arg4 + 0x118));\n            }\n        }\n        *(*0x140040000 + 0x6c) = *(arg4 + 0x118) - *(*0x140040000 + 0x68) ^ 0xffee920b;\n    }\n    else {\n        *(arg4 + 0x4c) = *(arg4 + 0x4c) - (in_stack_00000028 ^ 0x230) * *(arg4 + 0xd0);\n    }\n    return arg2 - 0x49;\n}\n",
        "token_count": 850
    },
    "1400122b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/97fd46272f2f4646aeb4203fef93a0f6",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/fbb3cad0774d4241aca00aa22762cd66"
        ],
        "decompiled_code": "\nuint32_t fcn.1400122b0(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    int32_t in_stack_00000028;\n    int64_t in_stack_00000030;\n    int32_t in_stack_00000038;\n    uint32_t uStack152;\n    uint32_t uStack124;\n    \n    uVar1 = arg3 ^ 0x3f82;\n    uStack152 = in_stack_00000038 + 0x75b;\n    uVar2 = arg1 ^ 0x2052;\n    uVar3 = arg3 + 0x37e;\n    uVar4 = arg3 + 0x4cb;\n    if ((arg3 ^ 0x39f) <= uVar1) {\n        if (uStack152 < (arg1 ^ 0x1fb)) {\n            (*_sym.imp.KERNEL32.dll_GetCurrentDirectoryA)\n                      (*(*0x140040000 + 0x4c) * *(in_stack_00000030 + 0xb0) ^ 0x22bf, uVar2 - 0x47c3);\n        }\n        else {\n            uStack152 = fcn.140017d90(uVar3 ^ 0x1c, arg3 ^ 0x39f, in_stack_00000028 - 0x251U ^ 0x3b09, in_stack_00000030\n                                     );\n            uStack152 = uStack152 ^ 0x3db7;\n        }\n    }\n    if (uVar3 != uVar2 + 0x2052) {\n        if (uVar1 < (uVar3 ^ 0x30a)) {\n            if (0xe5f4 < *(in_stack_00000030 + 0xbc)) {\n                *(in_stack_00000030 + 0xf0) = 0x140040010;\n            }\n            fcn.140002a50(uStack152 - 0x255, *0x140040000, uVar1 + 0x7b5, arg3 ^ 0x39de);\n        }\n        else if ((uVar4 & *0x140040050) <= *(in_stack_00000030 + 0x70)) {\n            for (uStack124 = *(*0x140040000 + 0xd4); uStack124 != (arg3 + 0x2674 | uVar4); uStack124 = uStack124 + 4) {\n                (*_sym.imp.KERNEL32.dll_GetDiskFreeSpaceA)\n                          (uVar2 & 0x24c1, *(in_stack_00000030 + 0x68) + -0x2009, \n                           *(*0x140040000 + 0x44) + *(in_stack_00000030 + 0xd0), \n                           *0x14004001c + *(in_stack_00000030 + 0x1c), uStack152 & *0x140040048);\n            }\n        }\n    }\n    *(in_stack_00000030 + 0x80) = *(in_stack_00000030 + 0xd8);\n    return uVar4 ^ 0x4eb;\n}\n",
        "token_count": 735
    },
    "14001267": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/97fd46272f2f4646aeb4203fef93a0f6",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/fbb3cad0774d4241aca00aa22762cd66"
        ],
        "decompiled_code": "\nuint32_t fcn.140012670(ulong arg1, ulong arg2, int64_t arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    int32_t in_stack_00000028;\n    uint32_t in_stack_00000030;\n    uint32_t in_stack_00000038;\n    \n    uVar1 = in_stack_00000028 + 0x4a9;\n    if ((((arg1 - 0x2052 ^ 0x296a) <= uVar1) && (arg1 - 0x2052 < (arg4 ^ 0x3fe))) &&\n       ((arg4 ^ 0x34a3) != (in_stack_00000038 ^ 0x68f))) {\n        if ((arg4 ^ 0x34a3) < (uVar1 ^ 0xfcb)) {\n            *(arg3 + 0x24) = in_stack_00000038 - 0x2052;\n        }\n        else {\n            if (*(arg3 + 0x28) < *(*0x140040000 + 0xd0)) {\n                *0x1400400f8 = *0x1400400f8 + 0x25;\n            }\n            else {\n                *(arg3 + 200) = *(arg3 + 200) - ((*0x1400400b0 - *(arg3 + 0x70)) - *(*0x140040000 + 0xbc));\n            }\n            if (*(arg3 + 0x58) != 0x14b8b) {\n                *(arg3 + 0xe8) = *0x1400400e4 + *(arg3 + 4) + 0xd00 + *(arg3 + 0xe8);\n            }\n        }\n    }\n    if (((in_stack_00000030 ^ 0x3d46) + 0x309 < uVar1) && ((in_stack_00000030 ^ 0x3d46) != arg1)) {\n        *(*0x140040000 + 0xe8) = *(*0x140040000 + 0xe8) - (*(arg3 + 0x70) + -0x1d2d74 + *(*0x140040000 + 0x1c));\n        *(arg3 + 0x10) = *(*0x140040000 + 0x104) + 0x817f226;\n    }\n    return in_stack_00000030 ^ 0x41e;\n}\n",
        "token_count": 546
    },
    "14001294": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/97fd46272f2f4646aeb4203fef93a0f6",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/fbb3cad0774d4241aca00aa22762cd66"
        ],
        "decompiled_code": "\nuint32_t fcn.140012940(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    int32_t in_stack_00000028;\n    uint32_t in_stack_00000030;\n    \n    uVar1 = in_stack_00000028 + 0x6e;\n    if (arg3 - 0x21b5 <= (arg3 ^ 0x3e4c) - 0x293) {\n        if (uVar1 == arg2 + 0x245U) {\n            if ((arg4 ^ 0x1da8) < (*0x140040054 | *0x1400400e0)) {\n                fcn.140017760((arg3 ^ 0x3e4c) + 0x2854 | 0x27e9, *(arg1 + 0x10c) * 0x1d66 ^ uVar1, arg1, \n                              (in_stack_00000030 ^ 0x37a5) * uVar1 | arg4 ^ 0x1da8);\n            }\n        }\n        else {\n            if (*0x1400400b0 < 0xf5c4) {\n                *0x140040030 = *0x140040030 + 0x2f5c85cd;\n            }\n            if (*(*0x140040000 + 0x4c) < *(arg1 + 200)) {\n                *0x140040060 = *(arg1 + 0xd0) + -0x12b892;\n            }\n            else {\n                *(arg1 + 0x88) = *(arg1 + 0x88) + *(*0x140040000 + 0x4c);\n            }\n        }\n    }\n    return in_stack_00000030 ^ 0x3dbf;\n}\n",
        "token_count": 413
    },
    "140012fa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/97fd46272f2f4646aeb4203fef93a0f6",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/fbb3cad0774d4241aca00aa22762cd66"
        ],
        "decompiled_code": "\nint32_t fcn.140012fa0(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t in_stack_00000030;\n    int32_t in_stack_00000038;\n    uint32_t uStack132;\n    int32_t iStack128;\n    uchar uStack124;\n    uint32_t uStack120;\n    uint32_t uStack108;\n    \n    uStack120 = arg4 + 0x71c;\n    uVar2 = in_stack_00000038 - 0x289;\n    uStack132 = arg2 ^ 0x806;\n    if (uVar2 < uStack132) {\n        if (*(arg1 + 0xd4) < 0xd283) {\n            *0x140040084 = (*(arg1 + 0x104) - *0x140040128) + -0x796d4;\n        }\n        *(arg1 + 0x74) = *(arg1 + 0x74) - (*(arg1 + 0xd4) + *(arg1 + 0x68) ^ 0x114c73U);\n        if (*0x1400400e4 != 0x87b6) {\n            *(*0x140040000 + 0xa8) = *(arg1 + 0xd8);\n        }\n        *(arg1 + 0x6c) = 0xce889;\n        *(arg1 + 0x6c) = *(arg1 + 0x6c) - (*(arg1 + 0x10c) + -0x10151d + *(*0x140040000 + 0x40));\n        if (*(arg1 + 0xd4) != 0x6e8c) {\n            *(arg1 + 0x6c) = *(arg1 + 0x6c) ^ *0x1400400d8 ^ *(arg1 + 0xd0) ^ 0x2fea9;\n        }\n        uStack132 = arg2 ^ 0x37a5;\n        if (*(arg1 + 0x4c) <= *0x1400400cc) {\n            *(arg1 + 0x6c) = *(arg1 + 0x6c) ^ *(*0x140040000 + 0xd0) + 0x8bf2f3f9U;\n        }\n        *(*0x140040000 + 0x90) = 0x14001c530;\n        for (iStack128 = 0; iStack128 < 0x5c0a; iStack128 = iStack128 + 1) {\n            iVar3 = *(*(arg1 + 0x90) + iStack128 * 4);\n            *(arg1 + 0x4c) = *(arg1 + 0x4c) - (*0x140040078 + -0x114fdf);\n            *(arg1 + 0x38) = *(arg1 + 0x38) | *(arg1 + 4) - 0xeU;\n            *(arg1 + 0xd0) = *(*0x140040000 + 0x40) + -1 + *(arg1 + 0xd0);\n            iVar3 = iVar3 * *(*0x140040000 + 0x6c);\n            *(*0x140040000 + 0x1c) = *(*0x140040000 + 0x1c) ^ *(arg1 + 0x70) ^ 0x1d455a;\n            *(arg1 + 0x88) = *(arg1 + 0x88) ^ *(arg1 + 0xbc) ^ 0x6e1c4;\n            *(*(arg1 + 0xa8) + *(arg1 + 0x74)) = iVar3 >> 8;\n            *(arg1 + 0x74) = *(arg1 + 0x74) + 1;\n            uStack124 = iVar3;\n            *(*(arg1 + 0xa8) + *(arg1 + 0x74)) = uStack124;\n            *(arg1 + 0x74) = *(arg1 + 0x74) + 1;\n            *(arg1 + 0x104) = *(arg1 + 200) + -0x1adeae + *(arg1 + 0x104);\n            *(arg1 + 4) = *(arg1 + 4) | *(arg1 + 0x58) - 0x153defU;\n            *(arg1 + 0x38) = ((*(arg1 + 0x58) ^ *(*0x140040000 + 0x4c)) - 0x1190e9) + *(arg1 + 0x38);\n            *(arg1 + 0x4c) = *(arg1 + 0x4c) - (*(arg1 + 0x1c) + -1 + *(*0x140040000 + 0xa0));\n            *(arg1 + 0x4c) = *(arg1 + 0x4c) * (*0x1400400cc - *(arg1 + 0x4c) ^ 0x234bf);\n            *(arg1 + 0xd4) = *(arg1 + 0xd4) ^ *(arg1 + 0x118);\n            *(arg1 + 0x4c) = *(arg1 + 0x4c) * (*(arg1 + 0x4c) ^ 0x4ad07);\n        }\n    }\n    else if ((*0x140040128 + in_stack_00000030 + -0x24c1) * uVar2 <= uStack120) {\n        iVar3 = fcn.140016580(0x2d68, 0x1619, 0x3c9c, 0x134f);\n        *0x14009f650 = iVar3;\n        uVar1 = *(arg1 + 0x118);\n        (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n        (*_sym.imp.KERNEL32.dll_ConnectNamedPipe)(arg2 - 0x595 ^ 0x2302, *(arg1 + 0xc) + 0x1da8);\n        for (uStack108 = *(arg1 + 0x48); uStack108 <= ((*(arg1 + 0x14) ^ *0x1400400c8) & uStack120);\n            uStack108 = uStack108 + 2) {\n            uStack120 = uStack120 ^ uVar2 ^ uVar1 & uStack132;\n        }\n    }\n    return uStack132 + 0x6b0;\n}\n",
        "token_count": 1491
    },
    "14001421": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/97fd46272f2f4646aeb4203fef93a0f6",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/fbb3cad0774d4241aca00aa22762cd66"
        ],
        "decompiled_code": "\nint32_t fcn.140014210(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    int64_t in_stack_00000028;\n    \n    if (((arg1 ^ 0x3969) == arg1 + 0xbc2) &&\n       (uVar1 = *(in_stack_00000028 + 0x70) + 0x21a9, \n       uVar1 <= *(in_stack_00000028 + 200) && *(in_stack_00000028 + 200) != uVar1)) {\n        fcn.140006e60((*(*0x140040000 + 4) ^ arg2 + 0x1a0U) - (arg3 - 0x1dc9U), in_stack_00000028, \n                      (arg1 ^ 0x3eaa | arg1 - 0x1da8) ^ 0x24c1, arg1 - 0x1da8 ^ *(in_stack_00000028 + 0x88));\n    }\n    if (((arg1 ^ 0x251) <= (arg3 - 0x1dc9U ^ 0x27e9)) && (arg2 + 0x1a0 != (arg1 ^ 0x3eaa) + 0x4e7)) {\n        *0x1400400f8 = *0x140040114 + 0x99650;\n    }\n    return (arg1 ^ 0x251) + 0x10;\n}\n",
        "token_count": 345
    },
    "140016fe": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/97fd46272f2f4646aeb4203fef93a0f6",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/fbb3cad0774d4241aca00aa22762cd66"
        ],
        "decompiled_code": "\nuint32_t fcn.140016fe0(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int64_t in_stack_00000028;\n    uint32_t in_stack_00000030;\n    uint32_t uStack232;\n    uint32_t uStack228;\n    uint32_t uStack224;\n    uint32_t uStack220;\n    uint32_t uStack212;\n    uint32_t uStack208;\n    \n    uVar1 = arg4 ^ 0x21b5;\n    uStack232 = arg1 ^ 0x3fd9;\n    uStack212 = in_stack_00000030 ^ 0x938;\n    uStack228 = arg1 - 0x1d66;\n    uStack224 = arg4 + 0x69f;\n    uStack220 = in_stack_00000030 - 0xb33;\n    if (uVar1 + 0x27e9 < uStack232) {\n        *(in_stack_00000028 + 0xc4) = *(in_stack_00000028 + 0xc4) ^ *0x140040080 & 0x1e37;\n        uStack212 = fcn.140011e30(*(in_stack_00000028 + 8) * *(in_stack_00000028 + 0x88), uVar1 - uStack232 | 0x2854, \n                                  uStack224 | *(in_stack_00000028 + 0x44), in_stack_00000028);\n        for (uStack208 = *(in_stack_00000028 + 0x108); uStack208 <= (*(in_stack_00000028 + 0xb4) + uStack220) * 0x22bf;\n            uStack208 = uStack208 + 3) {\n            if (uVar1 <= (*(in_stack_00000028 + 0xc0) ^ *(in_stack_00000028 + 0xd0))) {\n                (*_sym.imp.KERNEL32.dll_ExitThread)(uStack224 | *(in_stack_00000028 + 0xc));\n                uStack220 = fcn.140002a50(*(in_stack_00000028 + 0x4c) ^ 0x296a | *(in_stack_00000028 + 0x14), \n                                          in_stack_00000028, uStack220 ^ *0x140040050 ^ 0x296a, 0);\n                (*_sym.imp.KERNEL32.dll_GetCurrentDirectoryA)(*(in_stack_00000028 + 0x70) + -0x85b);\n            }\n        }\n    }\n    else {\n        uVar2 = fcn.1400111d0(arg4 + 0x4ec, in_stack_00000028, in_stack_00000030 - 0x971, in_stack_00000030 ^ 0x13e);\n        uStack224 = arg4 + 0x99;\n        if (0x15165 < *(*0x140040000 + 0x4c)) {\n            *(in_stack_00000028 + 0xbc) =\n                 *(in_stack_00000028 + 0xbc) ^ *(in_stack_00000028 + 0xd0) + -0xd0e9c + *(*0x140040000 + 0xd4);\n        }\n        uStack228 = fcn.140007900(in_stack_00000028, uVar2 - 0xaac, arg1 + 0x28b, uVar1 + 0x24c1);\n        uStack232 = fcn.140017760(uStack228 + 0x863, uVar2 ^ 0xb56, in_stack_00000028, in_stack_00000030);\n        uStack232 = uStack232 ^ 0x21c;\n        uStack228 = uStack228 ^ 0x3d4e;\n    }\n    if (uStack228 <= (uStack224 ^ 0xb24)) {\n        if (uStack224 - 0x485 <= uStack212) {\n            fcn.1400075c0(uStack228 - 0x559, uStack232 - 0x2ec, uStack228 ^ 0x1bd, uStack212 + 0x26d);\n            if (*(in_stack_00000028 + 200) < *(in_stack_00000028 + 0xbc)) {\n                *(in_stack_00000028 + 0x38) =\n                     *(in_stack_00000028 + 0x38) - ((*(in_stack_00000028 + 0xa0) ^ *0x140040014) + *(*0x140040000 + 4));\n            }\n            else {\n                *(*0x140040000 + 0xe0) = *0x1400400f4;\n            }\n        }\n        *(in_stack_00000028 + 0xe0) = *(in_stack_00000028 + 0xe0) + *(in_stack_00000028 + 0x20);\n    }\n    return uStack212 ^ 0x3e65;\n}\n",
        "token_count": 1132
    },
    "14001776": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/97fd46272f2f4646aeb4203fef93a0f6",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/fbb3cad0774d4241aca00aa22762cd66"
        ],
        "decompiled_code": "\nint32_t fcn.140017760(ulong arg1, ulong arg2, int64_t arg3, ulong arg4)\n\n{\n    int32_t in_stack_00000028;\n    uint32_t in_stack_00000030;\n    uint32_t uStack88;\n    \n    uStack88 = arg4 ^ 0x296a;\n    if (arg4 - 0x296a <= uStack88 + 0x21b5) {\n        if (arg4 - 0x296a < in_stack_00000028 + 0x261) {\n            fcn.140012940(arg3, in_stack_00000030 + 0x10, in_stack_00000030 + 0x1bc, uStack88 + 0x2854 ^ 0x35fc);\n            if (*(arg3 + 0x88) <= *(arg3 + 0x68)) {\n                *0x140040074 = *(arg3 + 0xa0) ^ 0x3c11fa8d;\n            }\n            uStack88 = uStack88 + 0x22bf;\n        }\n        else if ((in_stack_00000028 - 0x1da8U <= (in_stack_00000030 ^ 0x3693 | *(arg3 + 0x68)) - *(*0x140040000 + 0x118)\n                 ) && (in_stack_00000028 - 0x1da8U <= (*(*0x140040000 + 0x10c) | *(arg3 + 0x44)))) {\n            fcn.140003590(arg3, *(arg3 + 0xb8) * (in_stack_00000030 - 0x1ff9) - 0x2302, \n                          ((in_stack_00000030 - 0x1ff9) - (in_stack_00000030 ^ 0x3693)) * 0x27e9, \n                          *(arg3 + 0x118) + 0x2854U & *0x140040080);\n            *(arg3 + 0x4c) = *(arg3 + 0x4c) + (arg4 ^ 0x296a) * -0x1dc9;\n        }\n    }\n    return uStack88 - 0x71;\n}\n",
        "token_count": 508
    },
    "140017a5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/97fd46272f2f4646aeb4203fef93a0f6",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/fbb3cad0774d4241aca00aa22762cd66"
        ],
        "decompiled_code": "\nuint32_t fcn.140017a50(ulong arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t in_stack_00000028;\n    uint32_t uStack88;\n    uint32_t uStack80;\n    \n    uVar1 = arg2 + 0x69f;\n    uStack88 = in_stack_00000028 ^ 0x21a9;\n    uVar2 = in_stack_00000028 ^ 0x21a9;\n    uStack80 = in_stack_00000028;\n    uVar3 = arg2 - 0x21b5;\n    if (uVar3 <= uStack88 + 0x21b5) {\n        uStack88 = fcn.140014210(in_stack_00000028 - 0x401, uVar2 + 0x2009, uVar2 + 0x1dc9, uStack88 + 0x2302);\n        *(arg4 + 0x38) = *(arg4 + 0x38) ^ *(arg4 + 0xd0) + 0x88f66 + *(arg4 + 0x104);\n        uStack88 = uStack88 ^ 0x7e0;\n    }\n    if (in_stack_00000028 + 0x116 <= in_stack_00000028 + 0x7c1) {\n        *(arg4 + 0xbc) = *(arg4 + 0xbc) + *(arg4 + 0x1c) + 0x611e;\n        uStack88 = uStack88 - 0x640;\n    }\n    if (uVar1 <= uVar2 + 0x2854) {\n        if (uVar3 == (in_stack_00000028 ^ 0x2ab)) {\n            if ((uVar2 - *(arg4 + 0x14) <= *(arg4 + 0x4c)) && (uVar1 < *0x140040048 + uStack88 + *0x140040078)) {\n                (*_sym.imp.KERNEL32.dll_CreateMutexA)\n                          (uVar2 - *(arg4 + 0x4c) | uVar3, (in_stack_00000028 + 0x7c1) - *(*0x140040000 + 0x70) | uVar1\n                           , (uStack88 | uVar1) - *0x140040078);\n                *(*0x140040000 + 0x18) = *(arg4 + 0x44) + *(*0x140040000 + 0x4c) + *(*0x140040000 + 0x18);\n            }\n        }\n        else {\n            uStack80 = in_stack_00000028 + 0xa5;\n        }\n    }\n    return uStack80 ^ 0x247;\n}\n",
        "token_count": 650
    },
    "null": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "140009d2": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738",
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x000140009b6c)\n// WARNING: Removing unreachable block (ram,0x000140009b67)\n// WARNING: Removing unreachable block (ram,0x000140009bd5)\n\nvoid fcn.140009d20(ulong arg1)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    int16_t *piVar3;\n    int32_t *piVar4;\n    code *pcVar5;\n    \n    piVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    if ((((piVar3 != NULL) && (*piVar3 == 0x5a4d)) && (piVar4 = *(piVar3 + 0x1e) + piVar3,  *piVar4 == 0x4550)) &&\n       (((*(piVar4 + 6) == 0x20b && (0xe < piVar4[0x21])) && (piVar4[0x3e] != 0)))) {\n        fcn.140009c3c(arg1);\n    }\n    fcn.14000c18c(2);\n    if (*0x14009fab0 == '\\0') {\n        *0x14009faa4 = 1;\n        uVar2 = *0x14009ed10 & 0x3f;\n        uVar1 = 0x40 - uVar2 & 0x3f;\n        if (*0x14009faa8 != ((0 >> uVar1 | 0 << 0x40 - uVar1) ^ *0x14009ed10)) {\n            pcVar5 = (*0x14009ed10 ^ *0x14009faa8) >> uVar2 | (*0x14009ed10 ^ *0x14009faa8) << 0x40 - uVar2;\n            (**0x140019290)(pcVar5);\n            (*pcVar5)(0, 0, 0);\n        }\n        fcn.14000a230(0x14009fac0);\n        fcn.1400099b4(0x1400192f0, 0x140019310);\n        fcn.1400099b4(0x140019318, 0x140019320);\n        *0x14009fab0 = '\\x01';\n    }\n    fcn.14000c1e0(2);\n    fcn.140009bf0(arg1);\n    pcVar5 = swi(3);\n    (*pcVar5)();\n    return;\n}\n",
        "token_count": 569
    },
    "14001027": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nulong fcn.14001027c(ulong arg1)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    uint32_t auStackX8 [2];\n    uchar auStackX16 [8];\n    uint32_t auStackX24 [2];\n    uint32_t auStackX32 [2];\n    uint32_t *apuStack24 [3];\n    \n    auStackX8[0] = arg1;\n    if (arg1 == 0xfffffffe) {\n        puVar1 = fcn.14000afe0();\n        *puVar1 = 0;\n        puVar1 = fcn.14000b000();\n        *puVar1 = 9;\n    }\n    else {\n        if (((-1 < arg1) && (arg1 < *0x1400a0310)) &&\n           ((*(*((arg1 >> 6) * 8 + 0x14009ff10) + 0x38 + (arg1 & 0x3f) * 0x40) & 1) != 0)) {\n            apuStack24[0] = auStackX8;\n            auStackX24[0] = arg1;\n            auStackX32[0] = arg1;\n            uVar2 = fcn.140010208(auStackX16, auStackX32, apuStack24, auStackX24);\n            return uVar2;\n        }\n        puVar1 = fcn.14000afe0();\n        *puVar1 = 0;\n        puVar1 = fcn.14000b000();\n        *puVar1 = 9;\n        fcn.14000ad94();\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 373
    },
    "140002da": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b"
        ],
        "decompiled_code": "\nuint64_t fcn.140002da0(int64_t arg1, int64_t arg2, ulong arg3, int64_t arg4)\n\n{\n    uint16_t uVar1;\n    uint16_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    ulong uVar6;\n    ulong uVar7;\n    uint64_t uVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    int32_t iVar11;\n    int64_t iVar12;\n    int64_t iVar13;\n    uint16_t *puVar14;\n    int64_t iVar15;\n    uint32_t uVar16;\n    uint32_t uVar17;\n    int64_t iVar18;\n    int64_t in_stack_00000030;\n    int32_t in_stack_00000038;\n    int64_t in_stack_00000040;\n    int64_t in_stack_00000048;\n    int32_t *in_stack_00000050;\n    int64_t in_stack_00000058;\n    uint32_t uStack164;\n    uint8_t *puStack160;\n    \n    iVar3 = *(*0x14009f608 + *0x14009f5e4 * 3 * 4);\n    puStack160 = in_stack_00000038;\n    uVar16 = *0x14009f644;\n    iVar4 = *(arg1 + *0x14009f5e0 * 4);\n    *0x14009f5e0 = *0x14009f5e0 - 1;\n    iVar5 = *(in_stack_00000030 + *0x14009f5e0 * 4);\n    iVar18 = *0x14009f600 - *0x14009f5e2;\n    iVar12 = *0x14009f610 | *0x14009f5f0;\n    iVar13 = *0x14009f638 / in_stack_00000050[*0x14009f5e8 * 2];\n    *0x14009f638 = *0x14009f638 + -1;\n    uVar9 = *0x14009f614;\n    *0x14009f614 = *0x14009f614 + 1;\n    puVar14 = *(in_stack_00000048 + in_stack_00000038 * 8) - *0x14009f63c;\n    iVar15 = *0x14009f610;\n    uVar1 = *(in_stack_00000058 + 0x16d0);\n    *(iVar12 + uVar9 * 8) = 0xcb8deb - *(iVar13 + 0x559c) & *(iVar12 + uVar9 * 8);\n    uVar6 = *(in_stack_00000048 + 0x8d98);\n    uVar7 = *(*puStack160 * 3 * 8 + 0x3ad);\n    *0x14009f5e0 = *0x14009f5e0 - 1;\n    *0x14009f5e4 = (*(*0x14009f620 + (*puStack160 << 1) * 2) + *(in_stack_00000058 + (*0x14009f5e0 + 5) * 2)) /\n                   *(iVar18 + in_stack_00000038 * 3) + *0x14009f5e4;\n    uVar10 = *(in_stack_00000058 + 0x2ecc) & *0x14009f62c;\n    uVar17 = *0x14009f5f0;\n    for (uStack164 = *(in_stack_00000058 + uVar9 * 2); 0x1a4f < uStack164; uStack164 = uStack164 + 1) {\n        iVar11 = in_stack_00000050[*0x14009f5e0];\n        uVar8 = *(iVar3 + -0x1840 + (*puStack160 + 4) * 8);\n        uVar2 = *(in_stack_00000058 + *in_stack_00000050 * 3 * 2);\n        *in_stack_00000050 = *in_stack_00000050 + 1;\n        iVar11 = fcn.140011790(iVar11 % uVar8 & 0xffffffff, uVar2);\n        *(uVar1 + (*in_stack_00000050 << 1) * 8) = iVar11;\n        *(in_stack_00000058 + (*puVar14 * 3 + 5) * 2) =\n             (*(arg4 + (*puStack160 + 4) * 8) ^ *(iVar13 + 0x2df8)) / *(iVar15 + (uVar9 + 5) * 4);\n        *(in_stack_00000040 + *puVar14 * 3 * 2) =\n             (*(iVar12 + uStack164 * 8) ^ *(iVar12 + uStack164 * 3 * 8)) + 0xedf2 +\n             *(in_stack_00000040 + (uVar9 * 3 + 7) * 2) ^ *(in_stack_00000040 + *puVar14 * 3 * 2);\n        *(iVar18 + (uStack164 << 2)) =\n             (*(uVar1 + (*puStack160 + 1) * 8) - *(in_stack_00000058 + uStack164 * 3 * 2)) / uStack164 + *0x14009f5e2 |\n             *(iVar18 + (uStack164 << 2));\n        puStack160 = puStack160 + -1;\n        *0x14009f628 = (*(in_stack_00000048 + uVar9 * 8) ^ *(arg1 + uVar9 * 3 * 4)) - *0x14009f63c ^ *0x14009f628;\n    }\n    *(iVar18 + (uVar9 << 1)) = (puVar14[*0x14009f5e0 + 5] ^ in_stack_00000050[*0x14009f5e0]) / *(iVar18 + (uVar9 << 1));\n    *(in_stack_00000040 + *puStack160 * 3 * 2) =\n         (0xbc8 - *(iVar13 + (*puStack160 << 1) * 4)) * *(iVar15 + 0x7968) + *(in_stack_00000040 + *puStack160 * 3 * 2);\n    uVar1 = *(*0x14009f618 + 0x2e56);\n    uVar8 = *(arg4 + (*0x14009f5e0 + 3) * 8);\n    *(arg2 + *puStack160) =\n         SUB161((ZEXT816(0) << 0x40 |\n                ZEXT816((uVar10 ^ uVar17) / 0x1e16 & 0xad5) % ZEXT116(puStack160[*0x14009f5e0]) & 0xffffffffffffffff) /\n                ZEXT816(*(in_stack_00000030 + *in_stack_00000050 * 3 * 4)), 0) - *(arg2 + *puStack160);\n    *0x14009f5e0 = *0x14009f5e0 + 1;\n    *(arg1 + (*0x14009f5e0 + 4) * 4) = (uVar7 | uVar6) / *0x14009f64c;\n    *0x14009f64c = *0x14009f64c + 1;\n    *(iVar13 + *0x14009f5e0 * 3 * 4) =\n         SUB164((ZEXT816(0) << 0x40 |\n                ZEXT816(*(iVar13 + *in_stack_00000050 * 3 * 4)) /\n                ZEXT816(*(iVar4 * uVar16 + ((uVar1 * 0x19ac) / uVar8 << 2) * 8)) & 0xffffffffffffffff) /\n                ZEXT816(*((0x13d1 - iVar5) + *0x14009f5e0 * 3 * 4)), 0) * *(iVar13 + *0x14009f5e0 * 3 * 4);\n    *0x14009f5e0 = *0x14009f5e0 + 1;\n    return *(in_stack_00000040 + 0x2cd6) % 0x3fd;\n}\n",
        "token_count": 1909
    },
    "140003fa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b"
        ],
        "decompiled_code": "\nint32_t fcn.140003fa0(ulong arg1, int64_t arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t in_stack_00000028;\n    int32_t iStack136;\n    uint32_t uStack132;\n    int32_t iStack124;\n    uint32_t uStack120;\n    int32_t iStack116;\n    int32_t iStack112;\n    int32_t iStack108;\n    uint32_t uStack104;\n    int32_t iStack92;\n    uint32_t uStack88;\n    int32_t iStack84;\n    uint32_t uStack80;\n    \n    iStack124 = arg3 - 0x28b;\n    uStack120 = arg4 ^ 0x1e37;\n    uVar1 = arg1 - 0x3e2;\n    if (uVar1 != (arg3 ^ 0x259)) {\n        if (iStack124 < arg1 + -0x86a) {\n            uStack132 = 0;\n            iStack108 = 0;\n            for (iStack116 = 0; iStack116 < 0x1e; iStack116 = iStack116 + 1) {\n                iVar2 = uStack132 * iStack108 * iStack108 - iStack108 * uStack132;\n                (*_sym.imp.KERNEL32.dll_Sleep)();\n                iVar2 = (iVar2 * iVar2 - iVar2) * 2;\n                iVar4 = iVar2 + uStack132 * -100;\n                (*_sym.imp.KERNEL32.dll_Sleep)(0xfa);\n                if ((iVar2 == 0) || (iVar4 == 0)) {\n                    iStack92 = 0;\n                }\n                else {\n                    iStack92 = 1;\n                }\n                if ((iVar4 == 0) && (iStack92 == 0)) {\n                    uStack88 = 0;\n                }\n                else {\n                    uStack88 = 1;\n                }\n                uStack132 = uStack88;\n                (*_sym.imp.KERNEL32.dll_Sleep)();\n                iStack108 = iStack92;\n            }\n            iStack136 = iStack108;\n            for (iStack112 = 0; iStack112 < 0x1e; iStack112 = iStack112 + 1) {\n                iStack136 = uStack132 * iStack136 * iStack136 - iStack136;\n                (*_sym.imp.KERNEL32.dll_Sleep)();\n                uVar1 = uStack132 ^ -(iStack136 * uStack132 * iStack136 - iStack136);\n                iVar2 = uVar1 + uStack132 * -100;\n                (*_sym.imp.KERNEL32.dll_Sleep)();\n                if ((uVar1 == 0) || (iVar2 + uVar1 == 0)) {\n                    iStack84 = 0;\n                }\n                else {\n                    iStack84 = 1;\n                }\n                iStack136 = iStack84;\n                if ((iVar2 == 0) && (iStack84 == 0)) {\n                    uStack80 = 0;\n                }\n                else {\n                    uStack80 = 1;\n                }\n                uStack132 = uStack80;\n                (*_sym.imp.KERNEL32.dll_Sleep)();\n            }\n            uVar3 = (**(arg2 + 0x80))(*(*0x140040000 + 0xf0), *(*0x140040000 + 0x110));\n            *(*0x140040000 + 0xe8) = uVar3;\n        }\n        else {\n            for (uStack104 = *(arg2 + 0xfc); *(*0x140040000 + 0xc0) + 0x22bfU <= uStack104; uStack104 = uStack104 + 1) {\n                if (iStack124 <= ((uVar1 | arg3 ^ 0x297) ^ 0x27e9)) {\n                    uStack120 = fcn.140002a50(*0x140040078 + *(arg2 + 0x108), arg2, (uVar1 | arg4 + 0x4cb) ^ 0x21a9, \n                                              *(arg2 + 0x68) * uStack120);\n                    iStack124 = fcn.140014210((*0x140040048 - *(arg2 + 0xfc)) + *(*0x140040000 + 0xbc), \n                                              *(*0x140040000 + 0xd4) - uVar1, *(arg2 + 0xd4) - 0x2009, \n                                              *(*0x140040000 + 0x88) + 0x4550);\n                }\n            }\n        }\n    }\n    return in_stack_00000028 + -0x1d2;\n}\n",
        "token_count": 1069
    },
    "14000450": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b"
        ],
        "decompiled_code": "\nuint32_t fcn.140004500(int64_t arg1, int64_t arg2, uint64_t arg3)\n\n{\n    uint32_t *puVar1;\n    int64_t iVar2;\n    uint8_t uVar3;\n    uint64_t uVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    int64_t iVar8;\n    uint32_t uVar9;\n    uint64_t uVar10;\n    uint16_t in_R9W;\n    uint16_t uStackX32;\n    int64_t in_stack_00000028;\n    uint8_t in_stack_00000030;\n    uint8_t *in_stack_00000038;\n    int64_t in_stack_00000040;\n    uint8_t uStack104;\n    \n    iVar2 = *0x14009f5e8;\n    uVar4 = *0x14009f628;\n    iVar5 = *(arg1 + 0x1cc6) | 0x7d8;\n    uStack104 = *(*0x14009f620 + 0x212e) ^ 0x3a;\n    iVar6 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x1c74)) / ZEXT816(arg3), 0);\n    uVar10 = *0x14009f600 | *0x14009f644;\n    iVar7 = *(arg1 + *0x14009f5e0) | 0x13c;\n    iVar8 = *0x14009f64c | 0x1155;\n    if (((in_stack_00000038[*0x14009f5e0] < in_stack_00000038[*0x14009f5e0]) ||\n        (uStackX32 = in_R9W,  *(iVar7 + uStack104 * 4) < *(uVar4 + (uStack104 << 2) * 4))) &&\n       (uStackX32 = in_R9W - 1,  uStack104 <= uStackX32)) {\n        *(in_stack_00000028 + *in_stack_00000038 * 8) = in_stack_00000030;\n        *(iVar8 + *0x14009f5e0 * 8) =\n             (((uStackX32 + *0x2378) / in_stack_00000038[*in_stack_00000038]) % 0xdcb) / *(iVar8 + *0x14009f5e0 * 8);\n        in_stack_00000038 = in_stack_00000038 + 1;\n        uStack104 = (*(arg1 + *in_stack_00000038) ^ 0x194c) % 0x1a13 + *(iVar8 + (uStack104 - 1 << 2) * 8);\n        *0x14009f5e0 = *0x14009f5e0 + 1;\n        *(iVar7 + *0x14009f5e0 * 4) =\n             (*(in_stack_00000040 + uStack104) + *(uVar4 + *0x14009f5e0 * 4)) - *(iVar7 + *0x14009f5e0 * 4);\n        *(uStack104 * 2 + 0x2ac) = *(iVar6 + 0xbf8) % *(uStack104 * 2 + 0x2ac);\n        uStack104 = uStack104 + 1;\n        *(iVar6 + uStack104) = *(iVar5 + (uStack104 << 1)) / *(iVar6 + uStack104);\n    }\n    *(iVar2 + uStack104 * 8) =\n         (((*(iVar2 + 0xf4f8) ^ *(iVar8 + *0x14009f5e0 * 8)) & *(iVar2 + uStack104 * 8)) - *(*0x14009f618 + 0x380c)) *\n         *(iVar2 + uStack104 * 8);\n    uVar3 = uStack104 + 1;\n    *(iVar5 + (uVar3 + 5)) = (((*0x14009f640 | *uVar3) - 6) - *(uVar3 * 3 * 2 + 0x2ac)) + *(iVar5 + (uVar3 + 5));\n    *in_stack_00000038 = *in_stack_00000038 - 1;\n    *(iVar7 + (*in_stack_00000038 + 0x25) * 4) =\n         ((uStackX32 - *(iVar5 + *0x14009f5f0)) * *(uVar4 + *0x14009f5e0 * 4)) % *(in_stack_00000028 + *0x14009f5e0 * 8)\n         ^ *(iVar7 + (*in_stack_00000038 + 0x25) * 4);\n    *0x14009f5e0 = *0x14009f5e0 - 1;\n    *(in_stack_00000028 + uVar3 * 8) = *(iVar8 + *0x14009f5e0 * 8) ^ *(in_stack_00000028 + uVar3 * 8);\n    puVar1 = arg2 + uStack104 * 4;\n    if (((*puVar1 == uStack104 || *puVar1 < uStack104) ||\n        (*(*0x14009f5e0 * 2 + 0x2ac) < *(uVar4 + (uStack104 * 3 + 3) * 4))) ||\n       (*0x14009f62c != *(uVar10 + *0x14009f5e0 * 8))) {\n        *0x14009f5e2 = *0x14009f5e4 * '\\x17';\n        *0x14009f62c = (*(iVar7 + 0x58f8) / *0x14009f628 ^ arg3) / *0x14009f62c;\n        *0x14009f63c = *0x14009f63c + 0x1153;\n        uVar9 = *0x14009f62c & *0x14009f5e0;\n    }\n    else {\n        uVar9 = *0x14009f62c & *0x14009f5e0;\n    }\n    return uVar9;\n}\n",
        "token_count": 1434
    },
    "14001179": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b"
        ],
        "decompiled_code": "\nushort fcn.140011790(ulong arg1, int64_t arg2)\n\n{\n    uint16_t uVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    \n    *0x14009f5e0 = *0x14009f5e0 - 1;\n    uVar1 = *(*0x14009f5f8 + (*0x14009f5e0 * 4 + 1) * 2);\n    uVar6 = *0x14009f644;\n    *0x14009f644 = *0x14009f644 - 1;\n    iVar4 = *0x14009f610;\n    uVar5 = *0x14009f614 | *(arg2 + (arg1 << 1) * 8);\n    uVar7 = *0x14009f62c ^ *((*0x14009f5e0 * 4 + 0x18) * 4 + 0x1a0a);\n    *0x14009f62c = *0x14009f62c + 1;\n    uVar2 = fcn.140003b70(uVar7, 0xa9, *0x14009f62c & uVar5, 0x1a95 / *(arg1 + *0x14009f5e0 * 4) & 0xffffffff);\n    *((arg1 << 1) * 4 + 0x1a0a) = uVar2;\n    *(arg1 * 8 + 0x8aa) = (0xe0f / (uVar1 + uVar6)) % arg1 - arg1 & *(arg1 * 8 + 0x8aa);\n    iVar3 = arg1 + 1;\n    *(iVar3 * 4 + 0x1a0a) = *0x14009f5e3 & *(iVar3 * 8 + 0x8aa) | *(iVar3 * 4 + 0x1a0a);\n    iVar3 = fcn.140001aa0(iVar3 * 0xe8b, *(*0x14009f618 + 0x2690), 0x1631, *(*0x14009f5f8 + 0x1406));\n    *(arg2 + uVar5 * 8) =\n         (*(*0x14009f5f8 + iVar3 * 3 * 2) * 0x1769) / *0x14009f63c ^ *((iVar3 + 7) * 4 + 0x1a0a) | *(arg2 + uVar5 * 8);\n    return *(iVar4 + (arg1 + 0x1c76) * 2);\n}\n",
        "token_count": 637
    },
    "14001460": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.140014600(ulong noname_0, uint64_t arg2, ulong noname_2, int64_t arg4)\n\n{\n    uint16_t uVar1;\n    int64_t iVar2;\n    uchar uVar3;\n    uint32_t uVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    uint16_t *puVar7;\n    int64_t iVar8;\n    uint64_t uVar9;\n    int64_t iVar10;\n    uint64_t uVar11;\n    int64_t iVar12;\n    int64_t iVar13;\n    uint64_t uVar14;\n    int64_t iVar15;\n    uint64_t uStackX16;\n    int64_t in_stack_00000028;\n    int32_t in_stack_00000030;\n    int64_t in_stack_00000038;\n    int32_t in_stack_00000048;\n    int64_t in_stack_00000050;\n    int32_t *piStack272;\n    int32_t iStack260;\n    \n    uVar4 = in_stack_00000048 - 1;\n    iVar5 = uVar4;\n    uVar1 = *(in_stack_00000050 + noname_0 * 3 * 2);\n    iVar2 = *(in_stack_00000028 + *0x14009f5f0 * 8);\n    piStack272 = arg2 ^ *(in_stack_00000038 + *0x14009f5e0 * 3 * 4);\n    *0x14009f5e3 = *0x14009f5e3 + 1;\n    iVar6 = *0x14009f5e3 * *0x14009f614;\n    puVar7 = *(arg4 + (noname_0 << 2) * 2) * 0xb1d;\n    iVar8 = uVar4;\n    uVar9 = *0x14009f5f0;\n    uStackX16._0_1_ = arg2;\n    iVar10 = *(in_stack_00000050 + *0x14009f5e0 * 2) * 0xcd3;\n    *0x14009f5e0 = *0x14009f5e0 + 1;\n    uVar11 = *0x14009f64c;\n    iVar15 = *0x14009f600 * noname_0;\n    iVar12 = *0x14009f640 + *(in_stack_00000028 + (*0x14009f5e0 << 1) * 8);\n    iVar13 = *(arg4 + 0x10 + arg2 * 2) - *0x14009f5e0;\n    uVar14 = *0x14009f614;\n    if ((*(*0x14009f5f8 + *puVar7 * 3 * 2) == 0x1877) || (uStackX16 = arg2,  *(uVar14 + *puVar7) < 0x1ed)) {\n        *(in_stack_00000050 + *piStack272 * 2) = *(*0x14009f618 + *0x14009f5e0 * 2);\n        *(iVar13 + (*0x14009f5e0 << 1)) = *(uVar14 + *piStack272) ^ 0x88;\n        *(uVar1 + iVar2 + (*0x14009f5e0 + 0x10) * 2) = *0x14009f638;\n        uStackX16 = arg2 + 1;\n        *(arg4 + uStackX16 * 2) =\n             ((*(iVar5 + (*puVar7 << 2)) % in_stack_00000030) % *(in_stack_00000050 + *puVar7 * 2) | *0x14009f64c) %\n             *(arg4 + uStackX16 * 2);\n        for (iStack260 = *(in_stack_00000038 + *0x14009f5e0 * 4); iStack260 == *(iVar6 + *0x14009f5e0 * 4);\n            iStack260 = iStack260 + 1) {\n            *(iVar8 + iStack260 * 3) =\n                 ((uVar4 ^ noname_0) % *0x14009f5e0 + *(iVar10 + *piStack272)) * *(iVar8 + iStack260 * 3);\n        }\n    }\n    if (((*(*0x14009f5f8 + uStackX16 * 6) < *(iVar13 + (*0x14009f5e0 - 1 << 1))) &&\n        (uVar1 = *0x14009f5e0 - 1,  *(uVar9 + *piStack272 * 4) <= *0x14009f648)) ||\n       (uVar1 = *0x14009f5e0,  *(uVar9 + *piStack272 * 4) < *(*0x14009f5f8 + *0x14009f5e0 * 2))) {\n        *0x14009f5e0 = uVar1;\n        *0x14009f5f0 = (*0x14009f614 / *(iVar5 + noname_0 * 3)) / *0x14009f5f0;\n        *(iVar5 + (noname_0 + 5)) = *0x14009f600 * -0x58 + *(iVar5 + (noname_0 + 5));\n        *(in_stack_00000038 + *piStack272 * 4) =\n             *(uVar11 + *piStack272) / noname_2 & *(in_stack_00000038 + *piStack272 * 4);\n        *0x14009f644 = (*(iVar12 + noname_0 * 2) ^ 0x6ed) % uStackX16 - *0x14009f644;\n        *(iVar13 + *piStack272) = noname_2 + *(iVar13 + *piStack272);\n    }\n    else {\n        *piStack272 = *piStack272 + 1;\n        *(in_stack_00000028 + *piStack272 * 8) =\n             SUB168((ZEXT816(0) << 0x40 |\n                    ZEXT816(*(iVar15 + (*piStack272 << 1) * 8)) / ZEXT816(*0x14009f610) & 0xffffffffffffffff) %\n                    ZEXT816(*(in_stack_00000038 + *piStack272 * 4)), 0) * *(in_stack_00000028 + *piStack272 * 8);\n        *0x14009f64c = SUB162(ZEXT816(*(in_stack_00000028 + *0x14009f5e0 * 8)) / ZEXT216(*0x14009f64c), 0);\n        *(iVar6 + *piStack272 * 4) = *(iVar6 + *piStack272 * 4) + 0x86b;\n        piStack272 = piStack272 + 1;\n        *0x14009f5e0 = *0x14009f5e0 - 1;\n        *(iVar5 + (*0x14009f5e0 + 3)) =\n             ((*(*0x14009f650 + (noname_0 + 7 + noname_0) * 4) ^ *(iVar12 + 0x1f54)) % *0x14009f638) *\n             *(iVar5 + (*0x14009f5e0 + 3));\n    }\n    uVar4 = *0x14009f5e0;\n    *0x14009f5e0 = *0x14009f5e0 + 1;\n    uVar3 = fcn.140003b70(arg2 & 0xff, 0xba4, noname_0 & 0x13a5, \n                          *(*0x14009f618 + uVar4 * 3 * 2) - *(iVar10 + *piStack272));\n    *(uVar11 + *0x14009f5e0) = uVar3;\n    *(arg4 + *piStack272 * 2) = *(iVar8 + *0x14009f5e0) * *(iVar12 + noname_0 * 3 * 2);\n    *0x14009f63c = fcn.140001aa0(0x668, *(iVar15 + 0x5bd0) + -0x7b6, *0x14009f648, *(uVar14 + piStack272[-1]));\n    *(iVar5 + *0x14009f5e0) = uStackX16 + *(iVar5 + *0x14009f5e0);\n    return *0x14009f614 + *(iVar15 + piStack272[-2] * 8);\n}\n",
        "token_count": 1993
    },
    "140017ee": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b"
        ],
        "decompiled_code": "\nuint fcn.140017ee0(int64_t arg1, int64_t arg2, ulong arg3, uint16_t *arg4)\n\n{\n    uint16_t uVar1;\n    uint16_t uVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    uint8_t uVar5;\n    uint32_t uVar6;\n    uint16_t uVar7;\n    uint16_t uVar8;\n    uint32_t uVar9;\n    int64_t iVar10;\n    uint64_t uVar11;\n    int64_t iVar12;\n    int32_t *piVar13;\n    uint64_t uVar14;\n    int32_t iVar15;\n    int32_t *piVar16;\n    int64_t in_stack_00000028;\n    uint16_t in_stack_00000030;\n    int64_t in_stack_00000038;\n    int64_t in_stack_00000040;\n    uint32_t uStack240;\n    int32_t iStack200;\n    uint64_t uStack144;\n    \n    uVar7 = *0x14009f644;\n    uVar6 = *0x14009f63c;\n    uStack240 = *0x14009f5f4;\n    arg3._0_4_ = arg3 + *0x14009f5f4;\n    iVar3 = *(in_stack_00000028 + *0x14009f5e4 * 8);\n    piVar16 = *0x14009f600 - *(in_stack_00000038 + (*0x14009f5e4 << 2) * 4);\n    iStack200 = 0x1a14;\n    iVar10 = *0x14009f638;\n    iVar15 = *0x14009f648 - *0x14009f64c;\n    uVar1 = *(arg2 + *0x14009f5f0 * 4);\n    uStack144 = *0x14009f644 | *0x14009f5e2;\n    *0x14009f63c = *0x14009f63c - 1;\n    uVar8 = *0x14009f5e2;\n    uVar11 = arg4[*0x14009f5e0];\n    uVar2 = arg4[*0x14009f5e0];\n    uVar4 = *0x14009f64c;\n    uVar5 = uVar4 % uVar2;\n    iVar12 = *0x14009f63c;\n    piVar13 = *(arg1 + *0x14009f5e0 * 8) | in_stack_00000030;\n    uVar14 = *0x14009f644;\n    *0x14009f5e0 = *0x14009f5e0 - 1;\n    *0x14009f5f0 = *0x14009f5f0 - 2;\n    *(*0x14009f620 + in_stack_00000030 * 2) =\n         *0x14009f5f0 * *(in_stack_00000028 + *piVar16 * 8) ^ *(arg2 + 0x2ec) | *(*0x14009f620 + in_stack_00000030 * 2);\n    *0x14009f5f4 = (*0x14009f644 | *(arg3 + (*arg4 << 1) * 4)) % uVar5;\n    *(uVar11 + 0x3816) = 0x13bd;\n    *(uVar11 + 0x2e9e) =\n         SUB162((ZEXT816(0) << 0x40 |\n                ZEXT816(uVar14 ^ *(in_stack_00000038 + *piVar16 * 4)) / ZEXT116(*(iVar3 + *piVar13)) &\n                0xffffffffffffffff) % ZEXT216(*(*0x14009f618 + *0x14009f600 * 2)), 0) ^ *(uVar11 + 0x2e9e);\n    uVar9 = iVar15 - 1;\n    *0x14009f630 = *0x14009f630 + 1;\n    *(in_stack_00000040 + *0x14009f5e8 * 0x20) =\n         (*(iVar12 + uVar9 * 4) * *0x14009f630 + *(iVar10 + *arg4 * 8)) - *(in_stack_00000040 + *0x14009f5e8 * 0x20);\n    *(*0x14009f618 + (*piVar13 << 2) * 2) =\n         (*(arg3 + uVar5 * 4) - *(*0x14009f620 + 0x24c2)) / *0x646e ^ *(*0x14009f618 + (*piVar13 << 2) * 2);\n    *(iVar10 + *0x14009f5e0 * 8) = *(iVar12 + *0x14009f5e0 * 4) % *0x14009f64c - *(iVar10 + *0x14009f5e0 * 8);\n    *(arg1 + *0x14009f5e0 * 8) = (uVar4 % uVar2 & 0xff) % *(arg1 + *0x14009f5e0 * 8);\n    *(arg1 + 0xe060) = uVar1 % *(arg1 + *0x14009f5e0 * 8) | *(arg1 + 0xe060);\n    for (uStack240 = uStack240 & 0xffff; uVar8 - 0xb19 < uStack240; uStack240 = uStack240 + 1) {\n        iStack200 = iStack200 + -1;\n        *(in_stack_00000038 + uStack240 * 4) = iStack200 * piVar13[*0x14009f5e0] ^ *(in_stack_00000038 + uStack240 * 4);\n        *(*0x14009f620 + (*arg4 << 2) * 2) = *(arg1 + 0x38160) * *(*0x14009f620 + (*arg4 << 2) * 2);\n        *arg4 = *arg4 - 1;\n        *(in_stack_00000028 + *arg4 * 8) =\n             ((uVar6 & 0xffff ^ uVar9 | *(in_stack_00000028 + uStack240 * 8)) + uVar14) %\n             *(in_stack_00000028 + *arg4 * 8);\n        uStack144 = uStack144 + 1;\n        arg4[uStack240] =\n             SUB162((ZEXT816(0) << 0x40 | ZEXT816(uStack144) % ZEXT816(uStack240) & 0xffffffffffffffff) %\n                    ZEXT816(uStack240), 0) - arg4[uStack240];\n        *0x14009f640 = *(*0x14009f650 + (*arg4 << 2) * 4) | *0x14009f640;\n        *0x14009f628 = uVar7 * *(in_stack_00000028 + (*0x14009f5e0 << 2) * 8) & *0x14009f628;\n    }\n    return 0x13bd;\n}\n",
        "token_count": 1646
    },
    "1400064e": {
        "rules": [
            "64-bit execution via heavens gate/d0eb93f2c5e64800b89b59bc3f7592fa"
        ],
        "decompiled_code": "\nuint8_t fcn.1400064e0(int64_t *arg1, int64_t arg2, ulong noname_2, ulong arg4)\n\n{\n    uint16_t uVar1;\n    uint8_t uVar2;\n    uint32_t uVar3;\n    uint8_t uVar4;\n    uint16_t uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint uVar8;\n    uint64_t uVar9;\n    uint64_t uVar10;\n    uint64_t uVar11;\n    int64_t iVar12;\n    uint8_t *in_stack_00000028;\n    int64_t in_stack_00000030;\n    int64_t in_stack_00000040;\n    int64_t in_stack_00000048;\n    uint8_t uStack296;\n    uint32_t uStack292;\n    \n    uVar3 = *0x14009f610;\n    uVar2 = *0x14009f5e2;\n    *0x14009f5e2 = *0x14009f5e2 - 1;\n    uVar5 = *0x14009f610;\n    uVar9 = *0x14009f644;\n    uVar6 = *0x14009f5f4 ^ 0xec9;\n    *0x14009f600 = *0x14009f600 + 1;\n    uStack296 = *(arg2 + *0x14009f600 * 8);\n    uVar7 = *0x14009f644;\n    uVar1 = *(arg2 + *0x14009f5e0 * 2);\n    iVar12 = *0x14009f5e8 - *0x14009f5e4;\n    *0x14009f640 = *0x14009f640 + -1;\n    uVar10 = *0x14009f640 / *(in_stack_00000040 + 0x5e18);\n    uVar11 = *0x14009f5e2;\n    uStack292 = uStack296;\n    for (; uStack292 < uStack296; uStack292 = uStack292 + 1) {\n        *(uVar10 + (uStack292 << 2) * 8) = 0xe40 - uStack292 ^ *0x14009f5e3 | *(uVar10 + (uStack292 << 2) * 8);\n        *(in_stack_00000048 + uStack292 * 4) =\n             (noname_2 / *0x14009f63c ^ *(iVar12 + *0x14009f5e0) ^ uStack292) - *(in_stack_00000048 + uStack292 * 4);\n        *0x14009f63c = *0x14009f63c + -1;\n        *(in_stack_00000030 + uStack292 * 3) =\n             ((*0x14009f628 & arg1[*in_stack_00000028]) - 0x3e | uVar1) & *(in_stack_00000030 + uStack292 * 3);\n        in_stack_00000028 = in_stack_00000028 + 1;\n        *0x14009f628 = *0x14009f628 + -1;\n        *0x14009f5e0 = *0x14009f5e0 + 1;\n        uVar4 = fcn.140017ee0(uVar5 ^ *(*0x14009f5f8 + (uVar1 + 8) * 2), *(uVar6 + 0x7770), uStack296, uStack292);\n        in_stack_00000028[*0x14009f5e0 + 0x15] = uVar4;\n        if (*(uVar6 + uVar2 * 4) <= *0x14009f630) {\n            *(in_stack_00000030 + (uStack292 + 0x1b)) =\n                 (*0x14009f5e3 / *(*arg1 * 4 + 0x979) | *0x14009f638) ^ *(in_stack_00000030 + (uStack292 + 0x1b));\n        }\n        uStack296 = uStack296 + 1;\n    }\n    *0x14009f5e0 = *0x14009f5e0 - 1;\n    *(in_stack_00000048 + *0x14009f5e0 * 4) = noname_2 ^ *(in_stack_00000048 + *0x14009f5e0 * 4);\n    *0x14009f64c = 0x1bb7 - *0x14009f64c;\n    *(uVar11 + uVar7 * 3 * 8) =\n         ((*0x14009f5e3 | uStack296) ^ *0x14009f62c) / *(uVar9 + *0x14009f600) - *(uVar11 + uVar7 * 3 * 8);\n    *0x14009f5e8 = *(in_stack_00000048 + (*0x14009f5e0 + 1) * 4);\n    *0x14009f5e0 = *0x14009f5e0 - 1;\n    *0x14009f648 = uVar2 + 1 ^ *0x14009f648;\n    *0x14009f610 = noname_2 + 1;\n    if ((*(in_stack_00000030 + uVar7) <= *(*0x14009f608 + 0x1bf0)) && ((uVar3 & 0xffff) < *0x14009f62c)) {\n        *(*0x14009f650 + 0x6e40) =\n             ((*0x14009f63c - *((arg4 ^ noname_2) + 0x1b94)) + *0x14009f5e8) % *(*0x14009f650 + 0x6e40);\n        uVar5 = *0x14009f5e0 + 1;\n        *0x14009f5e0 = *0x14009f5e0 + 2;\n        uVar8 = fcn.140014600(*(in_stack_00000030 + uVar5) + 0x7b, uVar1 - (arg4 + 1), *(uVar11 + 0x75d8), \n                              *0x14009f600 + 0x264);\n        *((arg4 ^ noname_2) + *0x14009f5e4 * 4) = uVar8;\n    }\n    return noname_2 + 1;\n}\n",
        "token_count": 1497
    },
    "14000c98": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.14000c980(ulong arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x00014000c99c. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)((arg1 & 0x3f) * 0x40 + *((arg1 >> 6) * 8 + 0x14009ff10));\n    return;\n}\n",
        "token_count": 101
    },
    "14000c9a": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.14000c9a4(ulong arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x00014000c9c0. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)((arg1 & 0x3f) * 0x40 + *((arg1 >> 6) * 8 + 0x14009ff10));\n    return;\n}\n",
        "token_count": 105
    },
    "14000d88": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nuint64_t fcn.14000d888(ulong noname_0, uint32_t *arg2, ulong noname_2, uint32_t *arg4)\n\n{\n    uint8_t uVar1;\n    uint64_t uVar2;\n    \n    fcn.14000c18c(*arg2);\n    uVar1 = *0x14009ed10 & 0x3f;\n    uVar2 = *0x14009ed10 ^ *0x1400a0348;\n    fcn.14000c1e0(*arg4);\n    return uVar2 >> uVar1 | uVar2 << 0x40 - uVar1;\n}\n",
        "token_count": 148
    },
    "14000fd3": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nint64_t fcn.14000fd38(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    uint8_t *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    uint *puVar5;\n    int64_t iStackX32;\n    \n    iVar4 = fcn.14000ca84(arg1 & 0xffffffff);\n    if (iVar4 == -1) {\n        puVar5 = fcn.14000b000();\n        *puVar5 = 9;\n    }\n    else {\n        iVar2 = (*_sym.imp.KERNEL32.dll_SetFilePointerEx)(iVar4, arg2, &iStackX32, arg3);\n        if (iVar2 == 0) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            fcn.14000af90(uVar3);\n        }\n        else if (iStackX32 != -1) {\n            puVar1 = *((arg1 >> 6) * 8 + 0x14009ff10) + 0x38 + (arg1 & 0x3f) * 0x40;\n            *puVar1 = *puVar1 & 0xfd;\n            return iStackX32;\n        }\n    }\n    return -1;\n}\n",
        "token_count": 291
    },
    "140008ce": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuchar fcn.140008ce4(void)\n\n{\n    if (*0x14009ed20 != 0xffffffff) {\n        fcn.140008fa4(*0x14009ed20);\n        *0x14009ed20 = 0xffffffff;\n    }\n    return 1;\n}\n",
        "token_count": 64
    },
    "14000ab6": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuchar fcn.14000ab64(void)\n\n{\n    if (*0x14009ed34 != 0xffffffff) {\n        fcn.14000c3f4(*0x14009ed34);\n        *0x14009ed34 = 0xffffffff;\n    }\n    return 1;\n}\n",
        "token_count": 66
    },
    "14000a42": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14000a42c(void)\n\n{\n    code *pcVar1;\n    char cVar2;\n    ulong uVar3;\n    code **ppcVar4;\n    bool bVar5;\n    \n    ppcVar4 = 0x140038720;\n    do {\n        pcVar1 = *ppcVar4;\n        if (pcVar1 != NULL) {\n            (**0x140019290)(pcVar1);\n            cVar2 = (*pcVar1)();\n            if (cVar2 == '\\0') break;\n        }\n        ppcVar4 = ppcVar4 + 2;\n    } while (ppcVar4 != 0x140038810);\n    if (ppcVar4 == 0x140038810) {\n        uVar3 = 1;\n    }\n    else {\n        if (ppcVar4 != 0x140038720) {\n            ppcVar4 = ppcVar4 + -1;\n            do {\n                if ((ppcVar4[-1] != NULL) && (pcVar1 = *ppcVar4,  pcVar1 != NULL)) {\n                    (**0x140019290)(pcVar1);\n                    (*pcVar1)(0);\n                }\n                bVar5 = ppcVar4 != 0x140038728;\n                ppcVar4 = ppcVar4 + -2;\n            } while (bVar5);\n        }\n        uVar3 = 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 325
    },
    "14000ea2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00014000eab4)\n// WARNING: Removing unreachable block (ram,0x00014000eab8)\n// WARNING: Removing unreachable block (ram,0x00014000eac1)\n// WARNING: Removing unreachable block (ram,0x00014000ead0)\n// WARNING: Removing unreachable block (ram,0x00014000ead4)\n\nint32_t fcn.14000ea20(void)\n\n{\n    int64_t *piVar1;\n    int64_t arg1;\n    int32_t iVar2;\n    int64_t *piVar3;\n    int32_t iStack52;\n    \n    iStack52 = 0;\n    fcn.14000c18c(8);\n    piVar1 = *0x1400a0370 + *0x1400a0368;\n    for (piVar3 = *0x1400a0370; piVar3 != piVar1; piVar3 = piVar3 + 1) {\n        arg1 = *piVar3;\n        if (arg1 != 0) {\n            fcn.14000df18(arg1);\n            if (((*(arg1 + 0x14) >> 0xd & 1) != 0) && (iVar2 = fcn.14000e9d4(arg1),  iVar2 != -1)) {\n                iStack52 = iStack52 + 1;\n            }\n            fcn.14000df24(arg1);\n        }\n    }\n    fcn.14000c1e0(8);\n    return iStack52;\n}\n",
        "token_count": 350
    },
    "14000b5f": {
        "rules": [
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_bp_18h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14000b5f0(int64_t *arg1, int64_t *arg2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    uint64_t uVar6;\n    int64_t *piVar7;\n    uint64_t uVar8;\n    uint64_t uVar9;\n    uint64_t uVar10;\n    int64_t iVar11;\n    uchar auStack184 [32];\n    ulong uStack152;\n    int64_t iStack136;\n    uchar auStack128 [16];\n    ulong uStack112;\n    int64_t iStack104;\n    int64_t *piStack96;\n    int64_t var_50h;\n    uint64_t var_48h;\n    uint64_t var_40h;\n    ulong var_38h;\n    ulong var_30h;\n    ulong var_28h;\n    ulong var_20h;\n    ulong var_bp_18h;\n    ulong var_10h;\n    \n    var_40h = *0x14009ed10 ^ auStack184;\n    uVar8 = 0;\n    piStack96 = arg2;\n    if (arg2 == NULL) {\n        puVar3 = fcn.14000b000();\n        *puVar3 = 0x16;\n        fcn.14000ad94();\n    }\n    else {\n        *arg2 = 0;\n        iVar4 = *arg1;\n        auStack128 = ZEXT816(0);\n        uStack112 = 0;\n        while (iVar4 != 0) {\n            var_48h = CONCAT26(var_48h._6_2_, 0x3f002a);\n            iVar4 = fcn.14000d068(*arg1, &var_48h);\n            if (iVar4 == 0) {\n                iVar2 = fcn.14000b264(*arg1, 0, 0, auStack128);\n            }\n            else {\n                iVar2 = fcn.14000b378(*arg1, iVar4, auStack128);\n            }\n            if (iVar2 != 0) {\n                goto code_r0x00014000b1eb;\n            }\n            arg1 = arg1 + 1;\n            iVar4 = *arg1;\n        }\n        var_48h = 0;\n        iVar4 = (auStack128._8_8_ - auStack128._0_8_ >> 3) + 1;\n        uVar6 = (auStack128._8_8_ - auStack128._0_8_) + 7U >> 3;\n        if (auStack128._8_8_ < auStack128._0_8_) {\n            uVar6 = uVar8;\n        }\n        piVar7 = auStack128._0_8_;\n        uVar9 = uVar8;\n        uVar10 = uVar8;\n        if (uVar6 != 0) {\n            do {\n                iVar5 = -1;\n                do {\n                    iVar5 = iVar5 + 1;\n                } while (*(*piVar7 + iVar5 * 2) != 0);\n                piVar7 = piVar7 + 1;\n                uVar10 = uVar10 + 1 + iVar5;\n                uVar9 = uVar9 + 1;\n                var_48h = uVar10;\n            } while (uVar9 != uVar6);\n        }\n        iVar5 = fcn.140009564(iVar4, var_48h);\n        if (iVar5 != 0) {\n            iStack136 = iVar5 + iVar4 * 8;\n            var_50h = iStack136;\n            if (auStack128._0_8_ != auStack128._8_8_) {\n                iStack104 = iVar5 - auStack128._0_8_;\n                piVar7 = auStack128._0_8_;\n                do {\n                    iVar4 = -1;\n                    do {\n                        iVar11 = iVar4;\n                        iVar4 = iVar11 + 1;\n                    } while (*(*piVar7 + iVar4 * 2) != 0);\n                    iVar11 = iVar11 + 2;\n                    iVar2 = fcn.14000ae64(iStack136, var_48h - (iStack136 - var_50h >> 1), *piVar7, iVar11);\n                    if (iVar2 != 0) {\n                        uStack152 = 0;\n                        fcn.14000adb4(0, 0, 0, 0);\n                        pcVar1 = swi(3);\n                        (*pcVar1)();\n                        return;\n                    }\n                    *(iStack104 + piVar7) = iStack136;\n                    piVar7 = piVar7 + 1;\n                    iStack136 = iStack136 + iVar11 * 2;\n                } while (piVar7 != auStack128._8_8_);\n            }\n            *piStack96 = iVar5;\n        }\n        fcn.14000a47c(0);\ncode_r0x00014000b1eb:\n        uVar6 = auStack128._8_8_ + (7 - auStack128._0_8_) >> 3;\n        if (auStack128._8_8_ < auStack128._0_8_) {\n            uVar6 = uVar8;\n        }\n        piVar7 = auStack128._0_8_;\n        if (uVar6 != 0) {\n            do {\n                fcn.14000a47c(*piVar7);\n                uVar8 = uVar8 + 1;\n                piVar7 = piVar7 + 1;\n            } while (uVar8 != uVar6);\n        }\n        fcn.14000a47c(auStack128._0_8_);\n    }\n    fcn.140010a70(var_40h ^ auStack184);\n    return;\n}\n",
        "token_count": 1391
    },
    "14000df1": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000df18(int64_t arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x00014000df1c. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(arg1 + 0x30);\n    return;\n}\n",
        "token_count": 76
    },
    "14000df2": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000df24(int64_t arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x00014000df28. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(arg1 + 0x30);\n    return;\n}\n",
        "token_count": 76
    },
    "1400016c": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nuint32_t fcn.1400016c0(ulong arg1, ulong arg2, int64_t arg3, ulong arg4)\n\n{\n    if ((arg4 - 0x1ff1U != (arg1 + 0x7c1U ^ 0x340c)) && (arg1 - 0x401U <= arg1 + -0x1a0)) {\n        *(arg3 + 0x6c) = *(arg3 + 0x6c) ^ *0x140040048 + 0x8bf8442bU;\n    }\n    *0x1400400a0 = 0x140034070;\n    return arg1 - 0x401U ^ 0x3dfa;\n}\n",
        "token_count": 163
    },
    "1400098e": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.1400098ec(int64_t *arg1)\n\n{\n    if (*arg1 != *0x14009fa98) {\n        fcn.1400098a8(*arg1);\n    }\n    return;\n}\n",
        "token_count": 51
    },
    "14000990": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.140009908(int64_t *arg1)\n\n{\n    if (*arg1 != *0x14009fa90) {\n        fcn.1400098a8(*arg1);\n    }\n    return;\n}\n",
        "token_count": 50
    },
    "14000995": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nulong fcn.14000995c(ulong param_1)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    int64_t arg1;\n    int64_t iVar3;\n    \n    uVar2 = 0;\n    if (*0x14009fa88 == 0) {\n        arg1 = fcn.14000c0ac(param_1);\n        if (arg1 == 0) {\n            uVar2 = 0xffffffff;\n        }\n        else {\n            iVar3 = fcn.1400097a4(arg1);\n            iVar1 = iVar3;\n            if (iVar3 == 0) {\n                uVar2 = 0xffffffff;\n                iVar3 = *0x14009fa88;\n                iVar1 = *0x14009fa90;\n            }\n            *0x14009fa90 = iVar1;\n            *0x14009fa88 = iVar3;\n            fcn.14000a47c(0);\n        }\n        fcn.14000a47c(arg1);\n    }\n    else {\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 245
    },
    "14000a44": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nulong fcn.14000a440(void)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    bool bVar3;\n    \n    ppcVar2 = 0x140038808;\n    do {\n        pcVar1 = *ppcVar2;\n        if (pcVar1 != NULL) {\n            (**0x140019290)(pcVar1);\n            (*pcVar1)(0);\n        }\n        bVar3 = ppcVar2 != 0x140038728;\n        ppcVar2 = ppcVar2 + -2;\n    } while (bVar3);\n    return 1;\n}\n",
        "token_count": 138
    },
    "14000ce6": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.14000ce6c(int64_t *arg1)\n\n{\n    if (arg1 != NULL) {\n        if (*arg1 != *0x14009f3f0) {\n            fcn.14000a47c(*arg1);\n        }\n        if (arg1[1] != *0x14009f3f8) {\n            fcn.14000a47c(arg1[1]);\n        }\n        if (arg1[2] != *0x14009f400) {\n            fcn.14000a47c(arg1[2]);\n        }\n        if (arg1[0xb] != *0x14009f448) {\n            fcn.14000a47c(arg1[0xb]);\n        }\n        if (arg1[0xc] != *0x14009f450) {\n            fcn.14000a47c(arg1[0xc]);\n        }\n    }\n    return;\n}\n",
        "token_count": 207
    },
    "14000dd0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.14000dd0c(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    \n    if ((*arg2 != *0x1400a0318) && ((*0x14009f490 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.14000d588();\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 98
    },
    "14000dd4": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.14000dd40(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    \n    if ((*arg2 != *0x14009ef68) && ((*0x14009f490 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.14000bd1c();\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 97
    },
    "14001400": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nint32_t fcn.140014000(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t in_stack_00000030;\n    uint32_t uStack32;\n    \n    uStack32 = arg2 + 0x1b3;\n    if ((in_stack_00000030 ^ 0x1ff1) != (in_stack_00000030 + 0x1b8 ^ 0x1a0)) {\n        if (in_stack_00000030 + 0x1b8 == (in_stack_00000030 ^ 0x1ff1) + 0x21b5) {\n            if ((*(*0x140040000 + 0x58) | 0x1dc9) <= *(arg1 + 0x40)) {\n                *(arg1 + 0x60) = *(arg1 + 0x60) | *(arg1 + 0x68) | 0x26a1;\n            }\n        }\n        else {\n            *0x140040068 = *(arg1 + 0x28) + *0x1400400cc ^ 0x155ccf;\n            uStack32 = uStack32 ^ 0x35fc;\n            *0x14004005c = *0x14004005c - (*(*0x140040000 + 0x40) + 0x197203);\n            if (*(*0x140040000 + 0x4c) < *(arg1 + 0x38) || *(*0x140040000 + 0x4c) == *(arg1 + 0x38)) {\n                *(*0x140040000 + 0x10c) = *(*0x140040000 + 0x10c) * (*(arg1 + 0x40) - *0x14004005c ^ 0xffeb712fU);\n            }\n        }\n    }\n    return uStack32 + 0x40d;\n}\n",
        "token_count": 435
    },
    "140017d9": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nint32_t fcn.140017d90(ulong arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    uint32_t uVar1;\n    int32_t in_stack_00000028;\n    \n    uVar1 = arg1 - 0x21a9;\n    if (((((arg1 ^ 0x3e58) != (arg1 ^ 0x3ccf)) && (arg1 + 0x318 <= (arg1 ^ 0x3c01))) &&\n        (uVar1 * 0x2052 <= *0x14004005c && *0x14004005c + uVar1 * -0x2052 != 0)) &&\n       ((arg3 ^ 0x26a1) <= (uVar1 & *(arg4 + 0xd0)) - (arg1 ^ 0x3c01))) {\n        *(arg4 + 0x10c) = *(arg4 + 0x10c) - (in_stack_00000028 - 0x4067U & 0x27e9);\n    }\n    return arg1 - 0x1b0;\n}\n",
        "token_count": 256
    },
    "140001aa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nuint16_t fcn.140001aa0(int64_t arg1, ulong arg2, int64_t arg3, int64_t arg4)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    int64_t *piVar3;\n    int64_t iStackX24;\n    int64_t in_stack_00000028;\n    uint8_t uStack136;\n    uint32_t uStack132;\n    int32_t iStack128;\n    \n    uStack136 = 0x98;\n    uVar1 = arg3 + 1;\n    piVar3 = uVar1 % uVar1;\n    iVar2 = *0x14009f5f4;\n    for (iStack128 = *0x14009f648; iStack128 < *(arg1 + uVar1 * 8); iStack128 = iStack128 + 1) {\n        *(*0x14009f620 + (*0x14009f5e0 * 3 + 0x27) * 2) = *0x14009f5e8 / *(arg1 + 0x3058) & *0x14009f63c;\n        *0x14009f5e0 = *0x14009f5e0 - 1;\n        uStack136 = *(iStack128 * 2 + 0xa23) ^ uStack136;\n    }\n    uStack136 = uStack136 + 1;\n    piVar3[*piVar3] = *(arg4 + uStack136 * 3) % piVar3[*piVar3];\n    iStackX24 = arg3 + 2;\n    *(arg4 + iStackX24) = *(in_stack_00000028 + uStack136 * 4) / *0x14009f5e4 & *(arg4 + iStackX24);\n    *(iVar2 + iStackX24 * 2) = 0;\n    for (uStack132 = *(arg1 + *0x395 * 8); uStack132 == uStack136; uStack132 = uStack132 + 1) {\n        iStackX24 = iStackX24 + -1;\n        *(uStack132 * 3 * 2 + 0xa23) = SUB162(ZEXT816(0xdb9 - iStackX24) % ZEXT216(*(uStack132 * 3 * 2 + 0xa23)), 0);\n        *(*0x14009f650 + *0x14009f5e0 * 4) = *(*0x14009f650 + *0x14009f5e0 * 4) + *((uStack132 * 2 + 8) * 8 + 0x395);\n    }\n    return *0x14009f628 ^ *0x14009f5e2;\n}\n",
        "token_count": 618
    },
    "140003b7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "hash data using fnv/71d430608aea45068f0f63fc2cdc3004",
            "contain loop"
        ],
        "decompiled_code": "\nuint64_t fcn.140003b70(int64_t arg1, int64_t arg2, int64_t arg3, ulong arg4)\n\n{\n    uint16_t uVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint64_t uVar8;\n    uint64_t uVar9;\n    int32_t iStack132;\n    \n    uVar5 = *0x14009f5e0;\n    uVar1 = *(arg2 + (*0x14009f5e0 * 4 + 3) * 2);\n    *0x14009f5e0 = *0x14009f5e0 - 1;\n    iVar6 = arg4 + -1;\n    uVar8 = *(*0x14009f5f8 + iVar6 * 2) | *(arg3 + *0x14009f5e0 * 8);\n    *0x14009f5f0 = *0x14009f5f0 + -1;\n    uVar7 = *(*0x14009f5f8 + *0x14009f600 * 2);\n    *0x14009f600 = *0x14009f600 + -1;\n    iVar2 = *(*0x14009f608 + 0x6e60);\n    iVar3 = *(arg3 + (iVar6 * 3 + 6) * 8);\n    iVar4 = *(arg3 + 0x9e08);\n    *0x14009f644 = *0x14009f644 + -1;\n    *(arg1 + *0x14009f5e4 * 2) = *(arg1 + (uVar7 * 0x618c + 0xd) * 2) & *(arg1 + *0x14009f5e4 * 2);\n    *0x14009f638 = ((*(iVar6 + (arg4 + -2) * 3 * 4) + *(uVar8 + (uVar7 * 0x1863 + 1) * 4) & 0x1592U) + *0x14009f5e4) -\n                   *0x14009f638;\n    *(*0x14009f620 + *0x14009f5e0 * 2) = *0x14009f640;\n    for (iStack132 = *0x14009f610; iStack132 <= *(iVar6 + *0x14009f5e0 * 4); iStack132 = iStack132 + 1) {\n        uVar9 = (uVar5 - uVar1) + 1;\n        *0x14009f5e4 = ((*((iVar4 - iVar3) + *0x14009f5e0 * 4) ^ uVar9) - 0x18e8) % *0x14009f5e4;\n        *(uVar8 + *0x14009f5e8 * 4) =\n             ((*0x14009f640 ^ uVar9) - (arg4 + -1)) - *(*0x14009f608 + *0x14009f5e0 * 4) ^ *(uVar8 + *0x14009f5e8 * 4);\n    }\n    return *(uVar8 + (arg4 + -2) * 4) ^ *((0xc86 - iVar2) + (arg4 + 1) * 8);\n}\n",
        "token_count": 793
    },
    "14000859": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140008594(void)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    \n    for (ppcVar2 = 0x14003eaa0; ppcVar2 < 0x14003eaa0; ppcVar2 = ppcVar2 + 1) {\n        pcVar1 = *ppcVar2;\n        if (pcVar1 != NULL) {\n            fcn.14000862c(pcVar1);\n            (*pcVar1)();\n        }\n    }\n    return;\n}\n",
        "token_count": 119
    },
    "140008d5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140008d50(void)\n\n{\n    uint64_t uVar1;\n    \n    uVar1 = *0x14009f770;\n    while (uVar1 != 0) {\n        uVar1 = uVar1 - 1;\n        (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(uVar1 * 0x28 + 0x14009f748);\n        *0x14009f770 = *0x14009f770 - 1;\n    }\n    return 1;\n}\n",
        "token_count": 114
    },
    "14000a2a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14000a2ac(ulong arg1, ulong arg2)\n\n{\n    ulong uStackX8;\n    ulong uStackX16;\n    ulong var_20h_2;\n    ulong var_28h;\n    ulong var_20h;\n    ulong *var_18h;\n    ulong *var_bp_10h;\n    \n    var_18h = &uStackX8;\n    var_bp_10h = &uStackX16;\n    var_28h._0_4_ = 2;\n    var_20h._0_4_ = 2;\n    uStackX8 = arg1;\n    uStackX16 = arg2;\n    fcn.140009e68(&var_20h_2, &var_20h, &var_18h, &var_28h);\n    return;\n}\n",
        "token_count": 194
    },
    "14000c1a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000c1a8(void)\n\n{\n    uint64_t uVar1;\n    \n    uVar1 = *0x14009fd58;\n    while (uVar1 != 0) {\n        uVar1 = uVar1 - 1;\n        (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(uVar1 * 0x28 + 0x14009fb50);\n        *0x14009fd58 = *0x14009fd58 - 1;\n    }\n    return 1;\n}\n",
        "token_count": 116
    },
    "14000d66": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14000d660(int64_t arg1, uint64_t arg2, uint64_t arg3)\n\n{\n    uint *puVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    \n    if ((arg2 == 0) || (arg3 <= 0xffffffffffffffe0 / arg2)) {\n        if (arg1 == 0) {\n            uVar2 = 0;\n        }\n        else {\n            uVar2 = fcn.14000e83c(arg1);\n        }\n        arg2 = arg2 * arg3;\n        iVar3 = fcn.14000e878(arg1, arg2);\n        if ((iVar3 != 0) && (uVar2 < arg2)) {\n            fcn.140008a70(iVar3 + uVar2, 0, arg2 - uVar2);\n        }\n    }\n    else {\n        puVar1 = fcn.14000b000(arg1, 0xffffffffffffffe0 % arg2);\n        *puVar1 = 0xc;\n        iVar3 = 0;\n    }\n    return iVar3;\n}\n",
        "token_count": 248
    },
    "14001015": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140010150(ulong param_1, ulong param_2, ulong param_3)\n\n{\n    fcn.140010170(param_1, param_2, param_3, 0x1b);\n    return;\n}\n",
        "token_count": 54
    },
    "14001042": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "create or open file"
        ],
        "decompiled_code": "\nvoid fcn.140010420(void)\n\n{\n    *0x14009f5b0 = (*_sym.imp.KERNEL32.dll_CreateFileW)(L\"CONOUT$\", 0x40000000, 3, 0, 3, 0, 0);\n    return;\n}\n",
        "token_count": 65
    },
    "14001658": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "hash data using fnv/71d430608aea45068f0f63fc2cdc3004",
            "contain loop"
        ],
        "decompiled_code": "\nuint fcn.140016580(int64_t arg1, ulong noname_1, int64_t arg3, int64_t arg4)\n\n{\n    uint8_t uVar1;\n    uint16_t uVar2;\n    int32_t iVar3;\n    char cVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint uVar7;\n    int64_t *piVar8;\n    int64_t iVar9;\n    uint64_t uVar10;\n    uint64_t uVar11;\n    uint64_t uVar12;\n    uint32_t uVar13;\n    uint64_t uVar14;\n    uint64_t uVar15;\n    int64_t *in_stack_00000038;\n    int64_t in_stack_00000040;\n    int64_t in_stack_00000048;\n    uint8_t uStack392;\n    uint32_t uStack384;\n    uint32_t uStack380;\n    \n    uStack392 = *(in_stack_00000038 + *in_stack_00000038 * 3);\n    piVar8 = in_stack_00000038 + -1;\n    cVar4 = *0x14009f63c;\n    iVar9 = *0x14009f640;\n    *piVar8 = *piVar8 + -1;\n    uVar1 = *(arg3 + *piVar8 * 3);\n    iVar3 = *(arg1 + *0x14009f5e0 * 4);\n    uVar10 = *(*0x14009f618 + (*0x14009f5e0 << 2) * 2);\n    iVar5 = *(in_stack_00000040 + *0x14009f5e0 * 4) - *0x14009f638;\n    *0x14009f5e4 = *0x14009f5e4 + 1;\n    uVar11 = *0x14009f5e4;\n    uVar2 = *(*0x14009f620 + 0xe54);\n    uVar15 = *0x14009f5e8 % 0x1a46;\n    *0x14009f5e8 = *0x14009f5e8 - 1;\n    *0x14009f5e2 = *0x14009f5e2 + 1;\n    uVar12 = *0x14009f5e2;\n    uVar14 = *0x14009f5e8 | *(in_stack_00000048 + *piVar8 * 0x20);\n    uVar6 = *0x14009f5e0;\n    *0x14009f5e0 = *0x14009f5e0 - 1;\n    for (uStack380 = *(arg1 + uVar6 * 4); uStack380 < *(uVar15 + *piVar8 * 4); uStack380 = uStack380 + 1) {\n        *(uVar11 + uStack392 * 4) = *(*0x14009f5f8 + uStack380 * 2) | *0x14009f5e4 | *(uVar11 + uStack392 * 4);\n        *0x14009f62c = *(uVar14 + uStack380) & uStack380 | *0x14009f62c;\n        *0x14009f600 = ((0x1178 % uStack380) % *(arg4 + 0x1728)) % *(*0x14009f620 + (uStack380 * 4 + 6) * 2);\n    }\n    *0x14009f644 = *0x14009f644 + 1;\n    *(uVar10 + *0x14009f5e0 * 4) = ((noname_1 ^ *0x14009f64c) / *0x14009f644) / noname_1;\n    *0x14009f5e4 = (0x14 - cVar4 | 0x707) % *0x14009f5e4;\n    *0x14009f644 = *(*0x14009f620 + (*0x14009f5e0 << 2) * 2) % *(uVar10 + 0x5c8c) + *0x14009f644;\n    uVar6 = *0x14009f5e0;\n    *0x14009f5e0 = *0x14009f5e0 - 1;\n    uVar7 = fcn.1400064e0(iVar5 * 0xf0, *(uVar2 + uVar6) - *(uVar1 + iVar3 + 8 + *piVar8), 0xed, 0xa8e - *0x14009f5e8);\n    *(arg4 + (*0x14009f5e0 << 2) * 4) = uVar7;\n    uVar6 = *0x14009f5e0;\n    uVar13 = *0x14009f5e0;\n    *0x14009f5e0 = *0x14009f5e0 + 1;\n    *0x14009f640 = *0x14009f640 + -1;\n    *0x14009f600 = *0x14009f600 + 1;\n    uStack392 = uStack392 + 1;\n    uVar7 = fcn.140002da0(*(uVar10 + uVar6 * 4) ^ *(arg1 + uVar13 * 4), *0x14009f628 ^ *(uVar12 + 0x10b4), 0x4f7, \n                          noname_1 + 1);\n    *(iVar9 + uStack392 * 4) = uVar7;\n    for (uStack384 = *0x14009f638; uStack384 <= *0x14009f5f0; uStack384 = uStack384 + 1) {\n        *(arg3 + uStack384) = *(uVar15 + (uStack384 << 2)) | *(arg3 + uStack384);\n        uStack392 = uStack392 + 1;\n        *(arg4 + (uStack392 * 4 + 0xb) * 4) =\n             ((piVar8[uStack392] | *0x14009f5e3) ^ uStack384 ^ *(arg4 + uStack384 * 4)) +\n             *(arg4 + (uStack392 * 4 + 0xb) * 4);\n        fcn.140004500(0x8ab, *(*0x14009f650 + (*0x14009f5e0 + 0x1c) * 4), 0x76e);\n    }\n    return 0xfbb1a2;\n}\n",
        "token_count": 1509
    },
    "140009cd": {
        "rules": [
            "parse PE header"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x000140009b7d)\n// WARNING: Removing unreachable block (ram,0x000140009b1f)\n// WARNING: Removing unreachable block (ram,0x000140009b44)\n// WARNING: Removing unreachable block (ram,0x000140009b5e)\n// WARNING: Removing unreachable block (ram,0x000140009b6c)\n// WARNING: Removing unreachable block (ram,0x000140009b73)\n// WARNING: Removing unreachable block (ram,0x000140009bd5)\n\nvoid fcn.140009cd0(ulong arg1)\n\n{\n    code *pcVar1;\n    int16_t *piVar2;\n    int32_t *piVar3;\n    \n    piVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    if ((((piVar2 != NULL) && (*piVar2 == 0x5a4d)) && (piVar3 = *(piVar2 + 0x1e) + piVar2,  *piVar3 == 0x4550)) &&\n       (((*(piVar3 + 6) == 0x20b && (0xe < piVar3[0x21])) && (piVar3[0x3e] != 0)))) {\n        fcn.140009c3c(arg1);\n    }\n    fcn.14000c18c(2);\n    if (*0x14009fab0 == '\\0') {\n        *0x14009faa4 = 1;\n        fcn.1400099b4(0x140019318, 0x140019320);\n        *0x14009fab0 = '\\x01';\n    }\n    fcn.14000c1e0(2);\n    fcn.140009bf0(arg1);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 422
    }
}