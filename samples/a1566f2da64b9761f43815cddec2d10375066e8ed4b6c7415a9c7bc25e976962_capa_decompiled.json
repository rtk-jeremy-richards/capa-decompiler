{
    "null": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1",
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid main(ulong argc)\n\n{\n    char cVar1;\n    char cVar2;\n    int32_t iVar3;\n    ulong *puVar4;\n    uint32_t *puVar5;\n    int64_t iVar6;\n    ulong uVar7;\n    int64_t arg1;\n    uchar *lpMultiByteStr;\n    char *pcVar8;\n    char *arg2;\n    ulong in_R8;\n    int64_t iVar9;\n    ulong in_R9;\n    ulong uStack32;\n    uchar auStack24 [8];\n    \n    // [00] -r-x section size 139264 named .text\n    puVar4 = fcn.14000a418();\n    uVar7 = *puVar4;\n    puVar5 = fcn.14000a410();\n    puVar4 = fcn.140004f20(*puVar5, uVar7);\n    uStack32 = 0x140002762;\n    iVar6 = fcn.140008570();\n    iVar6 = -iVar6;\n    *(&stack0x00003008 + iVar6) = *0x140034018 ^ &stack0xffffffffffffffe8 + iVar6;\n    *(&stack0xffffffffffffffe0 + iVar6) = 0x140002786;\n    uVar7 = fcn.14000b450(2);\n    *(&stack0xffffffffffffffe0 + iVar6) = 0x140002790;\n    fcn.14000f3e8(uVar7, 0, in_R8, in_R9);\n    *(&stack0xffffffffffffffe0 + iVar6) = 0x140002797;\n    arg1 = fcn.140001ae0(0);\n    if (arg1 != 0) {\n        uVar7 = *puVar4;\n        *(&stack0xffffffffffffffe0 + iVar6) = 0x1400027b0;\n        iVar3 = fcn.140002aa0(&stack0x00000008 + iVar6, uVar7);\n        if (iVar3 != 0) {\n            *(&stack0xffffffffffffffe0 + iVar6) = 0x1400027ca;\n            iVar3 = fcn.1400029d0(&stack0x00002008 + iVar6, &stack0x00000008 + iVar6);\n            if (iVar3 != 0) {\n                *(&stack0xffffffffffffffe0 + iVar6) = 0x1400027e0;\n                iVar3 = fcn.140002a20(&stack0x00001008 + iVar6, &stack0x00000008 + iVar6);\n                if (iVar3 != 0) {\n                    *(&stack0xffffffffffffffe0 + iVar6) = 0x1400027f0;\n                    lpMultiByteStr = fcn.140004230(\"_MEIPASS2\");\n                    *(&stack0xffffffffffffffe0 + iVar6) = 0x1400027ff;\n                    fcn.140004890(\"_MEIPASS2\");\n                    *(&stack0xffffffffffffffe0 + iVar6) = 0x14000280c;\n                    iVar3 = fcn.1400019f0(arg1, &stack0x00000008 + iVar6);\n                    if (iVar3 == 0) {\n                        *(&stack0xffffffffffffffe0 + iVar6) = 0x140002820;\n                        iVar3 = fcn.1400019f0(arg1, &stack0x00002008 + iVar6);\n                        if (iVar3 == 0) {\n                            *(&stack0xffffffffffffffe0 + iVar6) = 0x14000283d;\n                            fcn.140001bf0(\"Cannot open self %s or archive %s\\n\", &stack0x00000008 + iVar6, \n                                          &stack0x00002008 + iVar6, in_R9);\n                            goto code_r0x000140002842;\n                        }\n                    }\n                    *(arg1 + 0x4080) = argc;\n                    *(arg1 + 0x4088) = puVar4;\n                    if (lpMultiByteStr == NULL) {\n                        *(&stack0xffffffffffffffe0 + iVar6) = 0x14000287f;\n                        iVar3 = fcn.140002680(arg1);\n                        if (iVar3 != 0) {\n                            *(&stack0xffffffffffffffe0 + iVar6) = 0x14000294a;\n                            iVar3 = fcn.1400024b0(arg1);\n                            if (iVar3 == 0) {\n                                pcVar8 = arg1 + 0x2078;\n                                arg2 = &stack0x00001008 + iVar6;\n                                if (*pcVar8 != '\\0') {\n                                    arg2 = pcVar8;\n                                }\n                                *(&stack0xffffffffffffffe0 + iVar6) = 0x140002973;\n                                fcn.140004820(\"_MEIPASS2\", arg2);\n                                *(&stack0xffffffffffffffe0 + iVar6) = 0x14000297f;\n                                fcn.140004230(\"_MEIPASS2\");\n                                *(&stack0xffffffffffffffe0 + iVar6) = 0x140002987;\n                                iVar3 = fcn.140004ae0(arg1);\n                                if (iVar3 != -1) {\n                                    *(&stack0xffffffffffffffe0 + iVar6) = 0x140002995;\n                                    fcn.1400026e0();\n                                    *(&stack0xffffffffffffffe0 + iVar6) = 0x1400029a8;\n                                    fcn.1400048d0(&stack0x00000008 + iVar6, arg1, argc, puVar4);\n                                    if (*(arg1 + 0x4078) == 1) {\n                                        *(&stack0xffffffffffffffe0 + iVar6) = 0x1400029bb;\n                                        fcn.1400044d0(pcVar8);\n                                    }\n                                    *(&stack0xffffffffffffffe0 + iVar6) = 0x1400029c3;\n                                    fcn.140001aa0(arg1);\n                                }\n                            }\n                            goto code_r0x000140002842;\n                        }\n                        lpMultiByteStr = &stack0x00001008 + iVar6;\n                    }\n                    *(&stack0xffffffffffffffe0 + iVar6) = 0x14000289c;\n                    uVar7 = fcn.140005410(0, lpMultiByteStr, 0);\n                    *(&stack0xffffffffffffffe0 + iVar6) = 0x1400028a8;\n                    (*_sym.imp.KERNEL32.dll_SetDllDirectoryW)(uVar7);\n                    *(&stack0xffffffffffffffe0 + iVar6) = 0x1400028b0;\n                    fcn.14000a428(uVar7);\n                    pcVar8 = &stack0x00001008 + iVar6;\n                    iVar9 = lpMultiByteStr - pcVar8;\n                    do {\n                        cVar1 = *pcVar8;\n                        cVar2 = pcVar8[iVar9];\n                        if (cVar1 != cVar2) break;\n                        pcVar8 = pcVar8 + 1;\n                    } while (cVar2 != '\\0');\n                    if (cVar1 != cVar2) {\n                        pcVar8 = arg1 + 0x2078;\n                        *(&stack0xffffffffffffffe0 + iVar6) = 0x1400028f5;\n                        iVar3 = fcn.1400026f0(pcVar8, 0x1000, 0x140023804, lpMultiByteStr);\n                        if (0xfff < iVar3) goto code_r0x000140002842;\n                        *(arg1 + 0x4078) = 1;\n                        do {\n                            cVar1 = *pcVar8;\n                            pcVar8[0x1000] = cVar1;\n                            pcVar8 = pcVar8 + 1;\n                        } while (cVar1 != '\\0');\n                    }\n                    *(&stack0xffffffffffffffe0 + iVar6) = 0x140002929;\n                    fcn.1400025f0(arg1);\n                    *(&stack0xffffffffffffffe0 + iVar6) = 0x140002931;\n                    fcn.140002260(arg1);\n                    *(&stack0xffffffffffffffe0 + iVar6) = 0x14000293b;\n                    fcn.1400025e0(arg1);\n                }\n            }\n        }\n    }\ncode_r0x000140002842:\n    *(&stack0xffffffffffffffe0 + iVar6) = 0x140002852;\n    fcn.1400085e0(*(&stack0x00003008 + iVar6) ^ &stack0xffffffffffffffe8 + iVar6);\n    return;\n}\n",
        "token_count": 1918
    },
    "14000143": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint64_t fcn.140001430(int64_t *arg1, int64_t arg2, ulong arg3)\n\n{\n    int64_t arg3_00;\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    int64_t arg4;\n    int64_t iVar4;\n    int64_t iVar5;\n    char *arg1_00;\n    char *arg2_00;\n    uint64_t arg2_01;\n    uint64_t uVar6;\n    ulong in_R9;\n    int64_t arg4_00;\n    \n    uVar3 = fcn.140003fc0(arg1, arg2, arg3, in_R9);\n    if (uVar3 == -1) {\n        return uVar3;\n    }\n    arg3_00 = arg2 + 0x12;\n    arg4 = fcn.1400042e0(arg1 + 0x40f);\n    if (arg4 == 0) {\n        fcn.140001bb0(\"fopen\", \"Failed to extract %s: failed to open target file!\\n\", arg3_00, in_R9);\n        return 0xffffffff;\n    }\n    iVar4 = *arg1;\n    if (iVar4 == 0) {\n        iVar4 = fcn.140002bb0(arg1 + 0xf);\n        *arg1 = iVar4;\n        if (iVar4 == 0) {\n            fcn.140001bf0(\"Failed to extract %s: failed to open archive file!\\n\", arg3_00, arg3, in_R9);\n            uVar3 = 0xffffffff;\n            goto code_r0x000140001607;\n        }\n    }\n    iVar1 = fcn.14000aae4(iVar4, *(arg2 + 4) + arg1[1], 0);\n    if (iVar1 < 0) {\n        fcn.140001bb0(\"fseek\", \"Failed to extract %s: failed to seek to the entry\\'s data!\\n\", arg3_00, in_R9);\n        uVar3 = 0xffffffff;\n    }\n    else if (*(arg2 + 0x10) == '\\x01') {\n        uVar2 = fcn.140001040(arg1, arg2, arg4, 0);\n        uVar3 = uVar2;\n    }\n    else {\n        uVar3 = 0;\n        iVar4 = fcn.14000a43c(0x2000);\n        if (iVar4 == 0) {\n            fcn.140001bb0(\"malloc\", \"Failed to extract %s: failed to allocate temporary buffer!\\n\", arg3_00, in_R9);\n            uVar3 = 0xffffffff;\n        }\n        else {\n            for (uVar6 = *(arg2 + 0xc); uVar6 != 0; uVar6 = uVar6 - arg2_01) {\n                arg4_00 = *arg1;\n                arg2_01 = uVar6;\n                if (0x2000 < uVar6) {\n                    arg2_01 = 0x2000;\n                }\n                iVar5 = fcn.14000a814(iVar4, arg2_01, 1, arg4_00);\n                if (iVar5 == 0) {\n                    arg2_00 = \"Failed to extract %s: failed to read data chunk!\\n\";\n                    arg1_00 = \"fread\";\ncode_r0x0001400015e3:\n                    fcn.140001bb0(arg1_00, arg2_00, arg3_00, arg4_00);\n                    uVar3 = 0xffffffff;\n                    break;\n                }\n                arg4_00 = arg4;\n                iVar5 = fcn.14000b21c(iVar4, arg2_01, 1, arg4);\n                if (iVar5 == 0) {\n                    arg2_00 = \"Failed to extract %s: failed to write data chunk!\\n\";\n                    arg1_00 = \"fwrite\";\n                    goto code_r0x0001400015e3;\n                }\n            }\n            fcn.14000a428(iVar4);\n        }\n    }\ncode_r0x000140001607:\n    if (*arg1 != 0) {\n        fcn.14000a4c8(*arg1);\n        *arg1 = 0;\n    }\n    fcn.14000a4c8(arg4);\n    return uVar3;\n}\n",
        "token_count": 986
    },
    "140001d7": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.140001d70(int64_t *param_1, ulong param_2)\n\n{\n    uint8_t *puVar1;\n    char cVar2;\n    char cVar3;\n    int64_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int64_t iVar7;\n    uchar *puVar8;\n    int64_t iVar9;\n    uint8_t *puVar10;\n    uint64_t arg2;\n    char *pcVar11;\n    uchar *arg2_00;\n    ulong arg2_01;\n    ulong unaff_RDI;\n    uint32_t uVar12;\n    uchar *arg4;\n    ulong unaff_R14;\n    int64_t aiStackX8 [3];\n    uint8_t auStackX38 [2];\n    ulong var_3f50h;\n    ulong var_4f50h;\n    char acStack16424 [4096];\n    char acStack12328 [4096];\n    uchar auStack8232 [4096];\n    uchar auStack4136 [4096];\n    uint64_t uStack40;\n    ulong uStack32;\n    uint64_t arg3;\n    \n    uStack32 = 0x140001d86;\n    iVar7 = fcn.140008570();\n    iVar7 = -iVar7;\n    uStack40 = *0x140034018 ^ &stack0xffffffffffffffe8 + iVar7;\n    iVar9 = *param_1;\n    *(&stack0xffffffffffffffe0 + iVar7) = 0x140001dbb;\n    iVar5 = fcn.1400026f0(&stack0xffffffffffffbfd8, 0x1000, 0x140023804, param_2);\n    if (0xfff < iVar5) goto code_r0x000140001f1b;\n    *(&stack0xffffffffffffffe0 + iVar7) = 0x140001dd7;\n    puVar8 = fcn.1400096c8(&stack0xffffffffffffbfd8, 0x3a);\n    if (puVar8 == NULL) goto code_r0x000140001f1b;\n    pcVar11 = puVar8 + 1;\n    *puVar8 = 0;\n    iVar4 = iVar7 - pcVar11;\n    do {\n        cVar2 = *pcVar11;\n        pcVar11[&stack0x00000038 + iVar4] = cVar2;\n        pcVar11 = pcVar11 + 1;\n    } while (cVar2 != '\\0');\n    if ((acStack16424[0] == '\\0') || ((&stack0x00000038)[iVar7] == '\\0')) goto code_r0x000140001f1b;\n    *(&stack0x00005078 + iVar7) = unaff_RDI;\n    *(&stack0x00005080 + iVar7) = unaff_R14;\n    *(&stack0xffffffffffffffe0 + iVar7) = 0x140001e37;\n    fcn.140002a20(&stack0xffffffffffffefd8, &stack0xffffffffffffbfd8);\n    *(&stack0x00000018 + iVar7) = &stack0x00000038 + iVar7;\n    *(&stack0x00000010 + iVar7) = 0x140023854;\n    arg4 = 0x140023854;\n    *(&stack0x00000008 + iVar7) = &stack0xffffffffffffefd8;\n    puVar8 = iVar9 + 0x1078;\n    pcVar11 = \"%s%s%s%s%s\";\n    *(&stack0xffffffffffffffe0 + iVar7) = 0x140001e76;\n    iVar5 = fcn.1400021c0(&stack0xffffffffffffdfd8, \"%s%s%s%s%s\", puVar8, 0x140023854);\n    if (iVar5 == 0) {\ncode_r0x000140001ec7:\n        *(&stack0xffffffffffffffe0 + iVar7) = 0x140001ecf;\n        iVar5 = fcn.140003fc0(iVar9, pcVar11, puVar8, arg4);\n        if (iVar5 != -1) {\n            puVar8 = &stack0x00000038 + iVar7;\n            *(&stack0xffffffffffffffe0 + iVar7) = 0x140001eec;\n            iVar5 = fcn.140003ea0(&stack0xffffffffffffdfd8, iVar9 + 0x2078);\n            if (iVar5 != -1) goto code_r0x000140001f1b;\n        }\n        arg2_00 = &stack0x00000038 + iVar7;\n        pcVar11 = \"Error copying %s\\n\";\n    }\n    else {\n        arg4 = 0x140023854;\n        *(&stack0x00000028 + iVar7) = &stack0x00000038 + iVar7;\n        puVar8 = iVar9 + 0x1078;\n        *(&stack0x00000020 + iVar7) = 0x140023854;\n        *(&stack0x00000018 + iVar7) = &stack0xffffffffffffefd8;\n        pcVar11 = \"%s%s%s%s%s%s%s\";\n        *(&stack0x00000010 + iVar7) = 0x140023854;\n        *(&stack0x00000008 + iVar7) = 0x14002387c;\n        *(&stack0xffffffffffffffe0 + iVar7) = 0x140001ec3;\n        iVar5 = fcn.1400021c0(&stack0xffffffffffffdfd8, \"%s%s%s%s%s%s%s\", puVar8, 0x140023854);\n        if (iVar5 == 0) goto code_r0x000140001ec7;\n        arg4 = 0x140023854;\n        puVar8 = iVar9 + 0x1078;\n        *(&stack0x00000008 + iVar7) = &stack0xffffffffffffbfd8;\n        pcVar11 = \"%s%s%s.pkg\";\n        *(&stack0xffffffffffffffe0 + iVar7) = 0x140001f5e;\n        iVar5 = fcn.1400021c0(&stack0xffffffffffffcfd8, \"%s%s%s.pkg\", puVar8, 0x140023854);\n        if (iVar5 == 0) {\ncode_r0x000140001fc0:\n            iVar9 = *param_1;\n            *(&stack0xffffffffffffffe0 + iVar7) = 0x140001fc8;\n            iVar5 = fcn.140003fc0(iVar9, pcVar11, puVar8, arg4);\n            if (iVar5 != -1) {\n                iVar9 = param_1[1];\n                iVar5 = 1;\n                if (iVar9 != 0) {\n                    arg4 = 0x1;\n                    do {\n                        pcVar11 = iVar9 + 0x78;\n                        puVar8 = &stack0xffffffffffffcfd8 + -pcVar11;\n                        do {\n                            cVar2 = *pcVar11;\n                            cVar3 = pcVar11[puVar8];\n                            if (cVar2 != cVar3) break;\n                            pcVar11 = pcVar11 + 1;\n                        } while (cVar3 != '\\0');\n                        if (cVar2 == cVar3) {\n                            if (iVar9 != 0) goto code_r0x000140002105;\n                            arg2_00 = &stack0xffffffffffffcfd8;\n                            pcVar11 = \"Archive not found: %s\\n\";\n                            goto code_r0x000140001f01;\n                        }\n                        iVar9 = param_1[arg4 + 1];\n                        arg4 = arg4 + 1;\n                        iVar5 = iVar5 + 1;\n                    } while (iVar9 != 0);\n                }\n                *(&stack0xffffffffffffffe0 + iVar7) = 0x14000201f;\n                iVar9 = fcn.140001ae0();\n                if (iVar9 != 0) {\n                    arg2_01 = 0x1000;\n                    arg4 = &stack0xffffffffffffcfd8;\n                    puVar8 = 0x140023804;\n                    *(&stack0xffffffffffffffe0 + iVar7) = 0x140002047;\n                    iVar6 = fcn.1400026f0(iVar9 + 0x78, 0x1000, 0x140023804, arg4);\n                    if (iVar6 < 0x1000) {\n                        arg4 = *param_1 + 0x1078;\n                        puVar8 = 0x140023804;\n                        arg2_01 = 0x1000;\n                        *(&stack0xffffffffffffffe0 + iVar7) = 0x140002074;\n                        iVar6 = fcn.1400026f0(iVar9 + 0x1078, 0x1000, 0x140023804, arg4);\n                        if (0xfff < iVar6) goto code_r0x000140002182;\n                        arg4 = *param_1 + 0x2078;\n                        puVar8 = 0x140023804;\n                        arg2_01 = 0x1000;\n                        *(&stack0xffffffffffffffe0 + iVar7) = 0x1400020a1;\n                        iVar6 = fcn.1400026f0(iVar9 + 0x2078, 0x1000, 0x140023804, arg4);\n                        if (0xfff < iVar6) goto code_r0x000140002182;\n                        *(iVar9 + 0x4078) = *(*param_1 + 0x4078);\n                        *(&stack0xffffffffffffffe0 + iVar7) = 0x1400020c3;\n                        iVar6 = fcn.140001710(iVar9);\n                        if (iVar6 == 0) {\n                            param_1[iVar5] = iVar9;\ncode_r0x000140002105:\n                            arg2 = *(iVar9 + 0x10);\n                            if (arg2 < *(iVar9 + 0x18)) {\n                                do {\n                                    puVar10 = arg2 + 0x12;\n                                    puVar8 = &stack0x00000038 + (iVar7 - puVar10);\n                                    do {\n                                        puVar1 = puVar10 + puVar8;\n                                        uVar12 = *puVar10 - *puVar1;\n                                        arg3 = uVar12;\n                                        if (uVar12 != 0) break;\n                                        puVar10 = puVar10 + 1;\n                                    } while (*puVar1 != 0);\n                                    if (uVar12 == 0) {\n                                        *(&stack0xffffffffffffffe0 + iVar7) = 0x140002145;\n                                        iVar5 = fcn.140001430(iVar9, arg2, arg3);\n                                        if (iVar5 != 0) {\n                                            *(&stack0xffffffffffffffe0 + iVar7) = 0x140002175;\n                                            fcn.140001bf0(\"Error extracting %s\\n\", &stack0x00000038 + iVar7, arg3, \n                                                          puVar8);\n                                            *(&stack0xffffffffffffffe0 + iVar7) = 0x14000217d;\n                                            fcn.140001aa0(iVar9);\n                                            break;\n                                        }\n                                    }\n                                    *(&stack0xffffffffffffffe0 + iVar7) = 0x140002154;\n                                    arg2 = fcn.1400016e0(iVar9, arg2, arg3, puVar8);\n                                } while (arg2 < *(iVar9 + 0x18));\n                            }\n                            goto code_r0x000140001f1b;\n                        }\n                        puVar8 = &stack0xffffffffffffcfd8;\n                        *(&stack0xffffffffffffffe0 + iVar7) = 0x1400020e1;\n                        fcn.140001bb0(\"malloc\", \"Error opening archive %s\\n\", puVar8, arg4);\n                    }\n                    else {\ncode_r0x000140002182:\n                        *(&stack0xffffffffffffffe0 + iVar7) = 0x14000218e;\n                        fcn.140001bf0(\"Archive path exceeds PATH_MAX\\n\", arg2_01, puVar8, arg4);\n                    }\n                    *(&stack0xffffffffffffffe0 + iVar7) = 0x140002196;\n                    fcn.140001aa0(iVar9);\n                }\n            }\n        }\n        else {\n            arg4 = 0x140023854;\n            puVar8 = iVar9 + 0x1078;\n            *(&stack0x00000008 + iVar7) = &stack0xffffffffffffbfd8;\n            pcVar11 = \"%s%s%s.exe\";\n            *(&stack0xffffffffffffffe0 + iVar7) = 0x140001f8b;\n            iVar5 = fcn.1400021c0(&stack0xffffffffffffcfd8, \"%s%s%s.exe\", puVar8, 0x140023854);\n            if (iVar5 == 0) goto code_r0x000140001fc0;\n            arg4 = 0x140023854;\n            puVar8 = iVar9 + 0x1078;\n            *(&stack0x00000008 + iVar7) = &stack0xffffffffffffbfd8;\n            pcVar11 = \"%s%s%s\";\n            *(&stack0xffffffffffffffe0 + iVar7) = 0x140001fb8;\n            iVar5 = fcn.1400021c0(&stack0xffffffffffffcfd8, \"%s%s%s\", puVar8, 0x140023854);\n            if (iVar5 == 0) goto code_r0x000140001fc0;\n        }\n        arg2_00 = &stack0xffffffffffffcfd8;\n        pcVar11 = \"Archive not found: %s\\n\";\n    }\ncode_r0x000140001f01:\n    *(&stack0xffffffffffffffe0 + iVar7) = 0x140001f06;\n    fcn.140001bf0(pcVar11, arg2_00, puVar8, arg4);\ncode_r0x000140001f1b:\n    *(&stack0xffffffffffffffe0 + iVar7) = 0x140001f2a;\n    fcn.1400085e0(uStack40 ^ &stack0xffffffffffffffe8 + iVar7);\n    return;\n}\n",
        "token_count": 3193
    },
    "1400024b": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.1400024b0(int64_t arg1)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint64_t arg2;\n    int64_t iVar3;\n    ulong in_R8;\n    ulong in_R9;\n    uchar auStack216 [32];\n    int64_t iStack184;\n    uchar auStack176 [16];\n    uchar auStack160 [16];\n    uchar auStack144 [16];\n    uchar auStack128 [16];\n    uchar auStack112 [16];\n    uchar auStack96 [16];\n    uchar auStack80 [16];\n    uchar auStack64 [16];\n    uchar auStack48 [16];\n    ulong uStack32;\n    uint64_t uStack24;\n    \n    uStack24 = *0x140034018 ^ auStack216;\n    arg2 = *(arg1 + 0x10);\n    auStack176 = ZEXT816(0);\n    auStack160 = ZEXT816(0);\n    auStack144 = ZEXT816(0);\n    auStack128 = ZEXT816(0);\n    auStack112 = ZEXT816(0);\n    auStack96 = ZEXT816(0);\n    uStack32 = 0;\n    auStack80 = ZEXT816(0);\n    auStack64 = ZEXT816(0);\n    auStack48 = ZEXT816(0);\n    iStack184 = arg1;\n    if (arg2 < *(arg1 + 0x18)) {\n        do {\n            uVar1 = *(arg2 + 0x11) - 0x5a;\n            if ((uVar1 < 0x1f) && ((0x40000101U >> (uVar1 & 0x1f) & 1) != 0)) {\n                iVar2 = fcn.140001430(arg1, arg2, in_R8);\n                if (iVar2 != 0) break;\n            }\n            else if ((*(arg2 + 0x11) == 100) && (iVar2 = fcn.140001d70(&iStack184, arg2 + 0x12),  iVar2 == -1)) break;\n            arg2 = fcn.1400016e0(arg1, arg2, in_R8, in_R9);\n        } while (arg2 < *(arg1 + 0x18));\n    }\n    iVar3 = 1;\n    while (auStack176._0_8_ != 0) {\n        fcn.140001aa0(auStack176._0_8_);\n        iVar3 = iVar3 + 1;\n        auStack176._0_8_ = *(auStack176 + iVar3 * 8 + -8);\n    }\n    fcn.1400085e0(uStack24 ^ auStack216);\n    return;\n}\n",
        "token_count": 612
    },
    "140009f7": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuchar fcn.140009f70(void)\n\n{\n    if (*0x140034040 != 0xffffffff) {\n        fcn.14000a194(*0x140034040);\n        *0x140034040 = 0xffffffff;\n    }\n    return 1;\n}\n",
        "token_count": 61
    },
    "14000c90": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nulong fcn.14000c90c(int64_t arg1)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    int64_t arg1_00;\n    \n    arg1_00 = arg1;\n    cVar1 = fcn.14000c9f0(arg1);\n    if (cVar1 != '\\0') {\n        if ((((*(*(arg1 + 0x468) + 0x14) >> 0xc & 1) == 0) || (*(*(arg1 + 0x468) + 8) != 0)) &&\n           (iVar2 = fcn.1400183ec(*(arg1 + 0x41), *(arg1 + 0x468)),  iVar2 == -1)) {\n            *(arg1 + 0x28) = 0xffffffff;\n        }\n        else {\n            *(arg1 + 0x28) = *(arg1 + 0x28) + 1;\n        }\n        return 1;\n    }\n    puVar3 = fcn.140014204(arg1_00);\n    *puVar3 = 0x16;\n    fcn.1400140e4();\n    return 0;\n}\n",
        "token_count": 269
    },
    "140011ab": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint fcn.140011ab8(int64_t arg1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint *puVar3;\n    int64_t iVar4;\n    \n    if (arg1 != 0) {\n        fcn.14000b4c0(arg1);\n        LOCK();\n        *(arg1 + 0x14) = *(arg1 + 0x14) & 0xffffffe7;\n        iVar1 = fcn.140013370(arg1);\n        if ((iVar1 == -1) || (iVar1 = fcn.140013370(arg1),  iVar1 == -2)) {\n            iVar4 = 0x140034270;\n        }\n        else {\n            iVar1 = fcn.140013370(arg1);\n            uVar2 = fcn.140013370(arg1);\n            iVar4 = *((iVar1 >> 6) * 8 + 0x1400437a0) + (uVar2 & 0x3f) * 0x48;\n        }\n        *(iVar4 + 0x38) = *(iVar4 + 0x38) & 0xfd;\n        fcn.14000b4cc(arg1);\n        return 0;\n    }\n    puVar3 = fcn.140014204(0);\n    *puVar3 = 0x16;\n    fcn.1400140e4();\n    return 0x16;\n}\n",
        "token_count": 317
    },
    "1400177c": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuchar fcn.1400177c4(void)\n\n{\n    if (*0x1400342b8 != 0xffffffff) {\n        fcn.140016a88(*0x1400342b8);\n        *0x1400342b8 = 0xffffffff;\n    }\n    return 1;\n}\n",
        "token_count": 68
    },
    "1400189e": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_1ch\n// WARNING: Variable defined which should be unmapped: var_24h\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Variable defined which should be unmapped: var_3ch\n\nvoid fcn.1400189e0(uint64_t arg1, ulong arg2, ulong arg3, ulong arg4, ulong noname_4, ulong noname_5, ulong noname_6, \n                  ulong noname_7, ulong noname_8, ulong noname_9, ulong noname_10, ulong arg_68h, ulong arg_70h, \n                  ulong arg_78h)\n\n{\n    code *pcVar1;\n    char cVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint32_t uVar5;\n    int64_t iVar6;\n    uint32_t uVar7;\n    uchar auStack184 [32];\n    ulong uStack152;\n    uint32_t uStack136;\n    uint uStack132;\n    uint uStack128;\n    int32_t iStack124;\n    uint32_t uStack120;\n    uint32_t uStack116;\n    uint32_t uStack112;\n    uint32_t uStack104;\n    uint32_t uStack100;\n    int32_t iStack92;\n    uint64_t var_48h;\n    ulong var_3ch;\n    ulong var_30h;\n    ulong var_24h;\n    ulong var_1ch;\n    ulong var_10h;\n    \n    var_48h = *0x140034018 ^ auStack184;\n    uVar5 = arg1 - 0x76c;\n    iVar3 = arg2;\n    iVar6 = iVar3;\n    uStack136 = arg4;\n    if ((((0x45 < uVar5) && (uVar5 < 0x44e)) && (uVar7 = iVar3 - 1,  uVar7 < 0xc)) && (0 < arg3)) {\n        if (*(iVar6 * 4 + 0x14002e9e8) - *(iVar6 * 4 + 0x14002e9e4) < arg3) {\n            arg1 = uVar5;\n            cVar2 = fcn.140018754(arg1, arg2);\n            if (((cVar2 == '\\0') || (iVar3 != 2)) || (0x1d < arg3)) goto code_r0x00014001899c;\n        }\n        arg1 = 0x14002e9e8;\n        if (((uStack136 < 0x18) && (noname_4 < 0x3c)) && (noname_5 < 0x3c)) {\n            arg3._0_4_ = arg3 + *(iVar6 * 4 + 0x14002e9e4);\n            cVar2 = fcn.140018754(uVar5, arg2);\n            if ((cVar2 != '\\0') && (2 < iVar3)) {\n                arg3._0_4_ = arg3 + 1;\n            }\n            fcn.14001ea2c();\n            iStack124 = 0;\n            uStack128 = 0;\n            uStack132 = 0;\n            iVar3 = fcn.14001dff8(&iStack124);\n            if (((iVar3 != 0) || (iVar3 = fcn.14001e028(&uStack128),  iVar3 != 0)) ||\n               (iVar3 = fcn.14001e058(&uStack132),  iVar3 != 0)) {\n                uStack152 = 0;\n                fcn.140014104(0, 0, 0, 0);\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n            if (noname_6 != 1) {\n                uStack112 = uStack136;\n                uStack116 = noname_4;\n                uStack120 = noname_5;\n                uStack104 = uVar7;\n                uStack100 = uVar5;\n                iStack92 = arg3;\n                if ((noname_6 == -1) && (iStack124 != 0)) {\n                    fcn.14001ea6c(&uStack120);\n                }\n            }\n            goto code_r0x0001400189ab;\n        }\n    }\ncode_r0x00014001899c:\n    puVar4 = fcn.140014204(arg1);\n    *puVar4 = 0x16;\ncode_r0x0001400189ab:\n    fcn.1400085e0(var_48h ^ auStack184);\n    return;\n}\n",
        "token_count": 1052
    },
    "14000104": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint32_t fcn.140001040(int64_t *arg1, int64_t arg2, int64_t arg3, int64_t arg4)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t noname_0;\n    int64_t arg2_00;\n    uint64_t uVar4;\n    int64_t iVar5;\n    uint64_t arg3_00;\n    int64_t arg3_01;\n    int64_t iVar6;\n    uint64_t uVar7;\n    int64_t iStack152;\n    uint uStack144;\n    int64_t iStack136;\n    uint32_t uStack128;\n    ulong uStack104;\n    ulong uStack96;\n    ulong uStack88;\n    \n    arg2_00 = 0;\n    uStack104 = 0;\n    uStack96 = 0;\n    uStack88 = 0;\n    uStack144 = 0;\n    iStack152 = 0;\n    iVar6 = arg4;\n    uVar1 = fcn.1400072d0(&iStack152, \"1.2.11\", 0x58);\n    if (uVar1 != 0) {\n        fcn.140001bf0(\"Failed to extract %s: inflateInit() failed with return code %d!\\n\", arg2 + 0x12, uVar1, iVar6);\n        return 0xffffffff;\n    }\n    noname_0 = fcn.14000a43c(0x2000);\n    if (noname_0 == 0) {\n        fcn.140001bb0(\"malloc\", \"Failed to extract %s: failed to allocate temporary input buffer!\\n\", arg2 + 0x12, iVar6\n                     );\n    }\n    else {\n        arg2_00 = fcn.14000a43c(0x2000);\n        if (arg2_00 == 0) {\n            fcn.140001bb0(\"malloc\", \"Failed to extract %s: failed to allocate temporary output buffer!\\n\", arg2 + 0x12, \n                          iVar6);\n        }\n        else {\n            uVar7 = *(arg2 + 8);\n            do {\n                iVar6 = *arg1;\n                arg3_00 = uVar7;\n                if (0x2000 < uVar7) {\n                    arg3_00 = 0x2000;\n                }\n                uVar4 = fcn.14000a814(noname_0, 1, arg3_00, iVar6);\n                if ((uVar4 != arg3_00) || (iVar2 = fcn.14000a558(*arg1),  iVar2 != 0)) {\n                    uVar1 = 0xffffffff;\n                    goto code_r0x000140001267;\n                }\n                uVar7 = uVar7 - arg3_00;\n                uStack144 = arg3_00;\n                iStack152 = noname_0;\n                do {\n                    uStack128 = 0x2000;\n                    iStack136 = arg2_00;\n                    uVar3 = fcn.140005790(&iStack152, 0);\n                    uVar1 = 0xffffffff;\n                    if (-5 < uVar3) {\n                        if (uVar3 < -1) goto code_r0x0001400011f8;\n                        if (uVar3 == 2) {\n                            uVar3 = 0xfffffffd;\n                            goto code_r0x0001400011f8;\n                        }\n                    }\n                    arg3_01 = 0x2000 - uStack128;\n                    if (arg3 == 0) {\n                        if (arg4 != 0) {\n                            fcn.1400092f0(arg4, arg2_00, arg3_01);\n                            arg4 = arg4 + arg3_01;\n                        }\n                    }\n                    else {\n                        iVar6 = arg3;\n                        iVar5 = fcn.14000b21c(arg2_00, 1, arg3_01, arg3);\n                        if ((iVar5 != arg3_01) || (iVar2 = fcn.14000a558(arg3),  iVar2 != 0)) {\n                            uVar3 = 0xffffffff;\n                            goto code_r0x0001400011f8;\n                        }\n                    }\n                } while (uStack128 == 0);\n                if (uVar3 == 1) {\n                    uVar1 = 0;\n                    goto code_r0x000140001267;\n                }\n            } while (uVar7 != 0);\ncode_r0x0001400011f8:\n            fcn.140001bf0(\"Failed to extract %s: decompression resulted in return code %d!\\n\", arg2 + 0x12, uVar3, iVar6\n                         );\n        }\n    }\ncode_r0x000140001267:\n    fcn.140006fc0(&iStack152);\n    fcn.14000a428(noname_0);\n    fcn.14000a428(arg2_00);\n    return uVar1;\n}\n",
        "token_count": 1116
    },
    "1400012a": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t fcn.1400012a0(int64_t *arg1, int64_t arg2)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    int64_t noname_0;\n    uint64_t arg2_00;\n    ulong in_R8;\n    ulong in_R9;\n    int64_t arg4;\n    \n    iVar2 = *arg1;\n    if (iVar2 == 0) {\n        iVar2 = fcn.140002bb0(arg1 + 0xf);\n        *arg1 = iVar2;\n        if (iVar2 == 0) {\n            fcn.140001bf0(\"Failed to extract %s: failed to open archive file!\\n\", arg2 + 0x12, in_R8, in_R9);\n            return 0;\n        }\n    }\n    iVar1 = fcn.14000aae4(iVar2, *(arg2 + 4) + arg1[1], 0);\n    if (iVar1 < 0) {\n        fcn.140001bb0(\"fseek\", \"Failed to extract %s: failed to seek to the entry\\'s data!\\n\", arg2 + 0x12, in_R9);\n        return 0;\n    }\n    iVar2 = fcn.14000a43c(*(arg2 + 0xc));\n    if (iVar2 == 0) {\n        fcn.140001bb0(\"malloc\", \"Failed to extract %s: failed to allocate data buffer (%u bytes)!\\n\", arg2 + 0x12, \n                      *(arg2 + 0xc));\n    }\n    else if (*(arg2 + 0x10) == '\\x01') {\n        iVar1 = fcn.140001040(arg1, arg2, 0, iVar2);\n        if (iVar1 != 0) {\ncode_r0x0001400013e5:\n            fcn.14000a428(iVar2);\n            iVar2 = 0;\n        }\n    }\n    else {\n        noname_0 = iVar2;\n        for (uVar4 = *(arg2 + 0xc); uVar4 != 0; uVar4 = uVar4 - arg2_00) {\n            arg4 = *arg1;\n            arg2_00 = uVar4;\n            if (0x2000 < uVar4) {\n                arg2_00 = 0x2000;\n            }\n            iVar3 = fcn.14000a814(noname_0, arg2_00, 1, arg4);\n            if (iVar3 == 0) {\n                fcn.140001bb0(\"fread\", \"Failed to extract %s: failed to read data chunk!\\n\", arg2 + 0x12, arg4);\n                goto code_r0x0001400013e5;\n            }\n            noname_0 = noname_0 + arg2_00;\n        }\n    }\n    if (*arg1 != 0) {\n        fcn.14000a4c8(*arg1);\n        *arg1 = 0;\n    }\n    return iVar2;\n}\n",
        "token_count": 694
    },
    "14000164": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nchar * fcn.140001640(int64_t arg1, int64_t arg2, int64_t arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    char *pcVar3;\n    int64_t arg2_00;\n    int64_t arg3_00;\n    int64_t iVar4;\n    \n    piVar2 = *(arg1 + 0x10);\n    arg3_00 = -1;\n    do {\n        iVar4 = arg3_00;\n        arg3_00 = iVar4 + 1;\n    } while (*(arg3_00 + arg2) != '\\0');\n    arg2_00 = arg2;\n    if (piVar2 < *(arg1 + 0x18)) {\n        do {\n            if ((*(piVar2 + 0x11) == 'o') &&\n               (arg2_00 = arg2,  arg3 = arg3_00,  iVar1 = fcn.14000b2b0(piVar2 + 0x12, arg2, arg3_00),  iVar1 == 0)) {\n                pcVar3 = piVar2 + iVar4 + 0x13;\n                if (*pcVar3 != '\\0') {\n                    return piVar2 + iVar4 + 0x14;\n                }\n                return pcVar3;\n            }\n            piVar2 = *piVar2 + piVar2;\n            if (piVar2 < *(arg1 + 0x10)) {\n                fcn.140001bf0(\"Cannot read Table of Contents.\\n\", arg2_00, arg3, arg4);\n                return NULL;\n            }\n        } while (piVar2 < *(arg1 + 0x18));\n    }\n    return NULL;\n}\n",
        "token_count": 389
    },
    "14000171": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.140001710(int64_t *arg1)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    uint64_t uVar6;\n    uint32_t *arg2;\n    uint32_t uVar7;\n    int64_t iVar8;\n    int64_t *piVar9;\n    char *arg2_00;\n    int64_t arg2_01;\n    ulong uVar10;\n    int64_t in_R9;\n    \n    iVar3 = *arg1;\n    if (iVar3 == 0) {\n        iVar3 = fcn.140002bb0(arg1 + 0xf);\n        *arg1 = iVar3;\n        if (iVar3 == 0) {\n            return 0xffffffff;\n        }\n    }\n    iVar4 = fcn.14000a43c(0x2000);\n    iVar8 = 0;\n    if (((iVar4 != 0) && (iVar2 = fcn.14000aae4(iVar3, 0, 2),  iVar8 = 0,  -1 < iVar2)) &&\n       (uVar5 = fcn.14000afbc(iVar3),  7 < uVar5)) {\n        do {\n            arg2_01 = uVar5 - 0x2000;\n            if (uVar5 < 0x2000) {\n                arg2_01 = 0;\n            }\n            uVar5 = uVar5 - arg2_01;\n            if (((uVar5 < 8) || (iVar2 = fcn.14000aae4(iVar3, arg2_01, 0),  iVar2 < 0)) ||\n               (in_R9 = iVar3,  uVar6 = fcn.14000a814(iVar4, 1, uVar5, iVar3),  uVar6 != uVar5)) break;\n            iVar8 = uVar5 - 7;\n            if (iVar8 != 0) {\n                piVar9 = iVar4 + -1 + iVar8;\n                do {\n                    if (*piVar9 == str.MEI_f_v_n_v) {\n                        iVar8 = arg2_01 + -1 + iVar8;\n                        goto code_r0x00014000182f;\n                    }\n                    piVar9 = piVar9 + -1;\n                    iVar8 = iVar8 + -1;\n                } while (iVar8 != 0);\n            }\n            uVar5 = arg2_01 + 7;\n        } while (arg2_01 != 0);\n        fcn.14000a428(iVar4);\n        return 0xffffffff;\n    }\ncode_r0x00014000182f:\n    fcn.14000a428(iVar4);\n    if (iVar8 != 0) {\n        uVar10 = 0;\n        iVar2 = fcn.14000aae4(*arg1, iVar8, 0);\n        if (-1 < iVar2) {\n            iVar3 = *arg1;\n            uVar10 = 1;\n            iVar4 = fcn.14000a814(arg1 + 4, 0x58, 1, iVar3);\n            if (iVar4 == 0) {\n                arg2_00 = \"failed to read cookie.\";\n            }\n            else {\n                uVar7 = *(arg1 + 5);\n                uVar10 = 0;\n                uVar1 = *(arg1 + 0x2c);\n                *(arg1 + 0x2c) = uVar1 >> 0x18 | (uVar1 & 0xff0000) >> 8 | (uVar1 & 0xff00) << 8 | uVar1 << 0x18;\n                uVar1 = *(arg1 + 6);\n                *(arg1 + 6) = uVar1 >> 0x18 | (uVar1 & 0xff0000) >> 8 | (uVar1 & 0xff00) << 8 | uVar1 << 0x18;\n                uVar1 = *(arg1 + 0x34);\n                uVar7 = uVar7 >> 0x18 | (uVar7 & 0xff0000) >> 8 | (uVar7 & 0xff00) << 8 | uVar7 << 0x18;\n                *(arg1 + 5) = uVar7;\n                *0x140034b04 = uVar1 >> 0x18 | (uVar1 & 0xff0000) >> 8 | (uVar1 & 0xff00) << 8 | uVar1 << 0x18;\n                *(arg1 + 0x34) = *0x140034b04;\n                arg1[1] = (iVar8 - uVar7) + 0x58;\n                *(arg1 + 0x407c) = 0;\n                fcn.14000aae4(*arg1, *(arg1 + 0x2c) + arg1[1], 0);\n                iVar8 = fcn.14000a43c(*(arg1 + 6));\n                arg1[2] = iVar8;\n                if (iVar8 == 0) {\n                    fcn.140001bb0(\"malloc\", \"Could not allocate buffer for TOC.\", uVar10, iVar3);\n                    return 0xffffffff;\n                }\n                iVar4 = *(arg1 + 6);\n                uVar10 = 1;\n                iVar3 = *arg1;\n                iVar8 = fcn.14000a814(iVar8, iVar4, 1, iVar3);\n                if (iVar8 != 0) {\n                    arg1[3] = *(arg1 + 6) + arg1[2];\n                    iVar2 = fcn.14000a558(*arg1);\n                    if (iVar2 != 0) {\n                        fcn.140001bf0(\"Error on file\\n.\", iVar4, uVar10, iVar3);\n                        return 0xffffffff;\n                    }\n                    arg2 = arg1[2];\n                    if (arg2 < arg1[3]) {\n                        do {\n                            uVar7 = arg2[1];\n                            uVar1 = *arg2;\n                            arg2[1] = uVar7 >> 0x18 | (uVar7 & 0xff0000) >> 8 | (uVar7 & 0xff00) << 8 | uVar7 << 0x18;\n                            uVar7 = arg2[2];\n                            arg2[2] = uVar7 >> 0x18 | (uVar7 & 0xff0000) >> 8 | (uVar7 & 0xff00) << 8 | uVar7 << 0x18;\n                            uVar7 = arg2[3];\n                            arg2[3] = uVar7 >> 0x18 | (uVar7 & 0xff0000) >> 8 | (uVar7 & 0xff00) << 8 | uVar7 << 0x18;\n                            uVar7 = uVar1 >> 0x18 | (uVar1 & 0xff0000) >> 8 | (uVar1 & 0xff00) << 8 | uVar1 << 0x18;\n                            *arg2 = uVar7;\n                            arg2 = uVar7 + arg2;\n                            if (arg2 < arg1[2]) {\n                                fcn.140001bf0(\"Cannot read Table of Contents.\\n\", arg2, uVar10, iVar3);\n                                break;\n                            }\n                        } while (arg2 < arg1[3]);\n                    }\n                    if (*arg1 != 0) {\n                        fcn.14000a4c8(*arg1);\n                        *arg1 = 0;\n                    }\n                    return 0;\n                }\n                arg2_00 = \"Could not read from file.\";\n            }\n            fcn.140001bb0(\"fread\", arg2_00, uVar10, iVar3);\n            return 0xffffffff;\n        }\n        fcn.140001bb0(\"fseek\", \"failed to seek to cookie position.\", uVar10, in_R9);\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 1814
    },
    "1400019f": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.1400019f0(int64_t *arg1, char *arg2)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint64_t uVar3;\n    char *pcVar4;\n    int64_t *arg1_00;\n    \n    uVar3 = 0xffffffffffffffff;\n    do {\n        uVar3 = uVar3 + 1;\n    } while (arg2[uVar3] != '\\0');\n    if (uVar3 < 0x1000) {\n        pcVar4 = arg2;\n        do {\n            cVar1 = *pcVar4;\n            pcVar4[arg1 + (0x78 - arg2)] = cVar1;\n            pcVar4 = pcVar4 + 1;\n        } while (cVar1 != '\\0');\n        arg1_00 = arg1 + 0x20f;\n        fcn.140002a20(arg1_00, arg2);\n        *(arg1 + 0x80f) = 0;\n        do {\n            cVar1 = *arg1_00;\n            *(arg1_00 + 0x400) = cVar1;\n            arg1_00 = arg1_00 + 1;\n        } while (cVar1 != '\\0');\n        iVar2 = fcn.140001710(arg1);\n        if (iVar2 == 0) {\n            return 1;\n        }\n        if (*arg1 != 0) {\n            fcn.14000a4c8(*arg1);\n            *arg1 = 0;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 353
    },
    "1400025e": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.1400025e0(int64_t arg1)\n\n{\n    if (*(arg1 + 0x407c) == 1) {\n        (**0x140034ba0)(\n                       \"import sys; sys.stdout.flush();                 (sys.__stdout__.flush if sys.__stdout__                 is not sys.stdout else (lambda: None))()\"\n                       );\n        (**0x140034ba0)(\n                       \"import sys; sys.stderr.flush();                 (sys.__stderr__.flush if sys.__stderr__                 is not sys.stderr else (lambda: None))()\"\n                       );\n    // WARNING: Could not recover jumptable at 0x00014000353b. Too many branches\n    // WARNING: Treating indirect jump as call\n        (**0x140034b58)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 175
    },
    "1400029d": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.1400029d0(int64_t arg1, char *arg2)\n\n{\n    char cVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    \n    iVar3 = arg1 - arg2;\n    do {\n        cVar1 = *arg2;\n        arg2[iVar3] = cVar1;\n        arg2 = arg2 + 1;\n    } while (cVar1 != '\\0');\n    iVar3 = -1;\n    do {\n        iVar2 = iVar3;\n        iVar3 = iVar2 + 1;\n    } while (*(arg1 + 1 + iVar2) != '\\0');\n    *(iVar2 + -2 + arg1) = 0x676b70;\n    return 1;\n}\n",
        "token_count": 166
    },
    "140002a2": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140002a20(ushort *arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uchar *puVar4;\n    \n    iVar2 = fcn.1400026f0(arg1, 0x1000, 0x140023804, arg2);\n    if (0xfff < iVar2) {\n        return 0;\n    }\n    iVar1 = -1;\n    do {\n        iVar3 = iVar1;\n        iVar1 = iVar3 + 1;\n    } while (*(arg1 + iVar3 + 1) != '\\0');\n    if (*(iVar3 + arg1) == '\\\\') {\n        *(iVar3 + arg1) = 0;\n    }\n    puVar4 = fcn.140009748(arg1, 0x5c);\n    if (puVar4 != NULL) {\n        *puVar4 = 0;\n        return 1;\n    }\n    *arg1 = 0x2e;\n    return 1;\n}\n",
        "token_count": 231
    },
    "140002c3": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t fcn.140002c30(int64_t arg1, ulong arg2, int64_t arg3)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    uint64_t uVar3;\n    uint64_t uVar5;\n    int64_t iVar6;\n    uint64_t uVar4;\n    \n    iVar2 = fcn.1400026f0(arg1, 0x1000, 0x140023804, arg2);\n    uVar5 = iVar2;\n    if (uVar5 < 0xfff) {\n        if (*((uVar5 - 1) + arg1) != '\\\\') {\n            *(uVar5 + arg1) = 0x5c;\n            uVar5 = uVar5 + 2;\n        }\n        uVar5 = 0x1000 - uVar5;\n        uVar3 = 0xffffffffffffffff;\n        do {\n            uVar4 = uVar3;\n            uVar3 = uVar4 + 1;\n        } while (*(arg3 + uVar3) != '\\0');\n        if (uVar3 < uVar5) {\n            if (*(uVar4 + arg3) == '\\\\') {\n                fcn.14000f420(arg1, arg3, uVar5);\n                iVar1 = -1;\n                do {\n                    iVar6 = iVar1;\n                    iVar1 = iVar6 + 1;\n                } while (*(arg1 + 1 + iVar6) != '\\0');\n                *(iVar6 + arg1) = 0;\n                return arg1;\n            }\n            fcn.14000f420(arg1, arg3, uVar5);\n            return arg1;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 377
    },
    "14000355": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140003550(int64_t arg1)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    uint64_t arg2;\n    int64_t iVar3;\n    char *arg3;\n    uint32_t uVar4;\n    char *arg4;\n    \n    iVar3 = -1;\n    do {\n        iVar3 = iVar3 + 1;\n    } while (*(arg1 + 0x3078 + iVar3) != '\\0');\n    arg4 = \"strict\";\n    arg3 = \"utf-8\";\n    iVar1 = (**0x140034c60)();\n    if (iVar1 != 0) {\n        (**0x140034c30)(\"_MEIPASS\", iVar1);\n        uVar2 = (**0x140034bb0)(\"marshal\");\n        uVar2 = (**0x140034bf8)(uVar2);\n        uVar2 = (**0x140034c00)(uVar2, \"loads\");\n        arg2 = *(arg1 + 0x10);\n        if (arg2 < *(arg1 + 0x18)) {\n            do {\n                if ((*(arg2 + 0x11) + 0xb3U & 0xdf) == 0) {\n                    iVar3 = fcn.1400012a0(arg1, arg2);\n                    if (*0x140034b04 < 0x25) {\n                        uVar4 = *(arg2 + 0xc) - 0xc;\n                        arg3 = iVar3 + 0xc;\n                    }\n                    else {\n                        uVar4 = *(arg2 + 0xc) - 0x10;\n                        arg3 = iVar3 + 0x10;\n                    }\n                    arg4 = uVar4;\n                    iVar1 = (**0x140034be8)(uVar2, 0x140024bb0);\n                    if ((iVar1 == 0) || (iVar1 = (**0x140034ba8)(arg2 + 0x12, iVar1),  iVar1 == 0)) {\n                        fcn.140001bf0(\"mod is NULL - %s\", arg2 + 0x12, arg3, arg4);\n                    }\n                    iVar1 = (**0x140034c10)();\n                    if (iVar1 != 0) {\n                        (**0x140034c18)();\n                        (**0x140034c08)();\n                    }\n                    fcn.14000a428(iVar3);\n                }\n                arg2 = fcn.1400016e0(arg1, arg2, arg3, arg4);\n            } while (arg2 < *(arg1 + 0x18));\n        }\n        return 0;\n    }\n    fcn.140001bf0(\"Failed to get _MEIPASS as PyObject.\\n\", iVar3, arg3, arg4);\n    return 0xffffffff;\n}\n",
        "token_count": 618
    },
    "1400036d": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.1400036d0(int64_t arg1, ulong noname_1, int64_t arg3, char *arg4)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    ulong arg2;\n    uint64_t arg2_00;\n    int64_t iVar3;\n    ulong arg2_01;\n    \n    arg2_00 = *(arg1 + 0x10);\n    if (arg2_00 < *(arg1 + 0x18)) {\n        do {\n            if (*(arg2_00 + 0x11) == 'z') {\n                arg3 = *(arg2_00 + 4) + *(arg1 + 8);\n                iVar3 = -1;\n                do {\n                    iVar3 = iVar3 + 1;\n                } while (*(arg1 + 0x78 + iVar3) != '\\0');\n                arg4 = \"strict\";\n                uVar2 = (**0x140034c60)(arg1 + 0x78, iVar3, \"utf-8\");\n                arg2_01 = uVar2;\n                arg2 = (**0x140034c50)(\"%U?%llu\");\n                (**0x140034b68)(uVar2);\n                iVar3 = (**0x140034c48)(\"path\");\n                if (iVar3 == 0) {\n                    fcn.140001bf0(\"Installing PYZ: Could not get sys.path\\n\", arg2_01, arg3, arg4);\n                    (**0x140034b68)(arg2);\n                }\n                else {\n                    iVar1 = (**0x140034bd0)(iVar3);\n                    if (iVar1 != 0) {\n                        fcn.140001bf0(\"Failed to append to sys.path\\n\", arg2, arg3, arg4);\n                    }\n                }\n            }\n            arg2_00 = fcn.1400016e0(arg1, arg2_00, arg3, arg4);\n        } while (arg2_00 < *(arg1 + 0x18));\n    }\n    return 0;\n}\n",
        "token_count": 450
    },
    "1400037d": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400037d0(int64_t param_1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    uchar *arg3;\n    int64_t arg4;\n    uchar auStackX24 [16];\n    ulong uStack16;\n    \n    uStack16 = 0x1400037e0;\n    iVar2 = fcn.140008570();\n    iVar2 = -iVar2;\n    *(&stack0x00002058 + iVar2) = *0x140034018 ^ &stack0xfffffffffffffff8 + iVar2;\n    arg4 = param_1 + 0x38;\n    *(&stack0xfffffffffffffff0 + iVar2) = 0x140003812;\n    iVar1 = fcn.1400026f0(&stack0x00000018 + iVar2, 0x40, 0x140023804, arg4);\n    if (iVar1 < 0x40) {\n        if (*(param_1 + 0x4078) != 0) {\n            *(&stack0xfffffffffffffff0 + iVar2) = 0x14000385c;\n            iVar3 = fcn.140002c30(&stack0x00000058 + iVar2, param_1 + 0x2078, \"ucrtbase.dll\");\n            if (iVar3 == 0) {\n                *(&stack0xfffffffffffffff0 + iVar2) = 0x14000387a;\n                fcn.140001bf0(\"Path of ucrtbase.dll (%s) length exceeds buffer[%d] space\\n\", param_1 + 0x2078, 0x1000, \n                              arg4);\n            }\n            *(&stack0xfffffffffffffff0 + iVar2) = 0x140003884;\n            iVar1 = fcn.140002b40(&stack0x00000058 + iVar2);\n            if (iVar1 != 0) {\n                *(&stack0xfffffffffffffff0 + iVar2) = 0x140003892;\n                fcn.140004a90(&stack0x00000058 + iVar2);\n            }\n        }\n        arg3 = &stack0x00000018 + iVar2;\n        *(&stack0xfffffffffffffff0 + iVar2) = 0x1400038ab;\n        iVar3 = fcn.140002c30(&stack0x00001058 + iVar2, param_1 + 0x3078, arg3);\n        if (iVar3 == 0) {\n            arg3 = 0x1000;\n            *(&stack0xfffffffffffffff0 + iVar2) = 0x1400038c9;\n            fcn.140001bf0(\"Path of DLL (%s) length exceeds buffer[%d] space\\n\", param_1 + 0x3078, 0x1000, arg4);\n        }\n        *(&stack0xfffffffffffffff0 + iVar2) = 0x1400038d6;\n        iVar3 = fcn.140004a90(&stack0x00001058 + iVar2);\n        if (iVar3 == 0) {\n            *(&stack0xfffffffffffffff0 + iVar2) = 0x1400038f6;\n            fcn.140001c50(\"LoadLibrary\", \"Error loading Python DLL \\'%s\\'.\\n\", &stack0x00001058 + iVar2, arg4);\n        }\n        else {\n            *(&stack0xfffffffffffffff0 + iVar2) = 0x14000390b;\n            fcn.140002cf0(iVar3, *0x140034b04, arg3, arg4);\n        }\n    }\n    else {\n        *(&stack0xfffffffffffffff0 + iVar2) = 0x140003831;\n        fcn.140001bf0(\"Reported length (%d) of DLL name (%s) length exceeds buffer[%d] space\\n\", iVar1, param_1 + 0x38, \n                      0x40);\n    }\n    *(&stack0xfffffffffffffff0 + iVar2) = 0x14000391b;\n    fcn.1400085e0(*(&stack0x00002058 + iVar2) ^ &stack0xfffffffffffffff8 + iVar2);\n    return;\n}\n",
        "token_count": 928
    },
    "14000393": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.140003930(int64_t param_1, ulong param_2, ulong param_3, ulong param_4)\n\n{\n    char cVar1;\n    bool bVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    uint *puVar7;\n    uint64_t arg2;\n    ulong uVar8;\n    ulong uStack16;\n    \n    uStack16 = 0x14000394a;\n    iVar5 = fcn.140008570();\n    iVar5 = -iVar5;\n    *(&stack0x00002028 + iVar5) = *0x140034018 ^ &stack0xfffffffffffffff8 + iVar5;\n    bVar2 = false;\n    arg2 = *(param_1 + 0x10);\n    **0x140034b10 = 1;\n    **0x140034b08 = 1;\n    **0x140034b38 = 1;\n    **0x140034b40 = 1;\n    **0x140034b30 = 1;\n    **0x140034b28 = 0;\n    if (arg2 < *(param_1 + 0x18)) {\n        do {\n            if (*(arg2 + 0x11) == 'o') {\n                param_3 = 4;\n                *(&stack0xfffffffffffffff0 + iVar5) = 0x1400039dc;\n                iVar3 = fcn.14000b2b0(arg2 + 0x12, \"pyi-\", 4);\n                if (iVar3 != 0) {\n                    cVar1 = *(arg2 + 0x12);\n                    puVar7 = *0x140034b18;\n                    if (cVar1 == 'O') {\ncode_r0x000140003a3a:\n                        *puVar7 = 1;\n                    }\n                    else if (cVar1 == 'W') {\n                        param_3 = 0x1000;\n                        *(&stack0xfffffffffffffff0 + iVar5) = 0x140003a1c;\n                        iVar6 = fcn.14000fbb4(&stack0x00000018 + iVar5, arg2 + 0x14, 0x1000);\n                        if (iVar6 == -1) {\n                            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003b3e;\n                            fcn.140001bf0(\"Failed to convert Wflag %s using mbstowcs (invalid multibyte string)\\n\", \n                                          arg2 + 0x14, param_3, param_4);\n                            goto code_r0x000140003b05;\n                        }\n                        *(&stack0xfffffffffffffff0 + iVar5) = 0x140003a31;\n                        (**0x140034c20)(&stack0x00000018 + iVar5);\n                    }\n                    else if (cVar1 == 'u') {\n                        bVar2 = true;\n                    }\n                    else {\n                        puVar7 = *0x140034b28;\n                        if (cVar1 == 'v') goto code_r0x000140003a3a;\n                    }\n                }\n            }\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003a4b;\n            arg2 = fcn.1400016e0(param_1, arg2, param_3, param_4);\n        } while (arg2 < *(param_1 + 0x18));\n        if (bVar2) {\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003a67;\n            uVar8 = fcn.14000b450(0);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003a6f;\n            uVar4 = fcn.140013370(uVar8);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003a7b;\n            fcn.14000fc40(uVar4, 0x8000);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003a85;\n            uVar8 = fcn.14000b450(1);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003a8d;\n            uVar4 = fcn.140013370(uVar8);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003a99;\n            fcn.14000fc40(uVar4, 0x8000);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003aa3;\n            uVar8 = fcn.14000b450(1);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003aab;\n            fcn.140010110(uVar8);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003ab5;\n            uVar8 = fcn.14000b450(2);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003abd;\n            fcn.140010110(uVar8);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003ac4;\n            uVar8 = fcn.14000b450(0);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003ace;\n            fcn.14000f3e8(uVar8, 0, param_3, param_4);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003ad8;\n            uVar8 = fcn.14000b450(1);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003ae2;\n            fcn.14000f3e8(uVar8, 0, param_3, param_4);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003aec;\n            uVar8 = fcn.14000b450(2);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003af6;\n            fcn.14000f3e8(uVar8, 0, param_3, param_4);\n            **0x140034b48 = 1;\n        }\n    }\ncode_r0x000140003b05:\n    *(&stack0xfffffffffffffff0 + iVar5) = 0x140003b15;\n    fcn.1400085e0(*(&stack0x00002028 + iVar5) ^ &stack0xfffffffffffffff8 + iVar5);\n    return;\n}\n",
        "token_count": 1462
    },
    "140003fc": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.140003fc0(int64_t arg1, ulong noname_1, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    ulong arg2;\n    \n    if (*(arg1 + 0x4078) != 1) {\n        arg2 = fcn.140001640(arg1, \"pyi-runtime-tmpdir\", arg3, arg4);\n        iVar1 = fcn.140004020(arg1 + 0x2078);\n        if (iVar1 == 0) {\n            fcn.140001bf0(\"INTERNAL ERROR: cannot create temporary directory!\\n\", arg2, arg3, arg4);\n            return 0xffffffff;\n        }\n        *(arg1 + 0x4078) = 1;\n    }\n    return 0;\n}\n",
        "token_count": 175
    },
    "14000423": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140004230(ulong param_1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    ulong uVar3;\n    char *arg1;\n    uchar auStackX32 [8];\n    ulong uStack8;\n    \n    uStack8 = 0x14000423a;\n    iVar2 = fcn.140008570();\n    iVar2 = -iVar2;\n    *(&stack0x00004020 + iVar2) = *0x140034018 ^ &stack0x00000000 + iVar2;\n    *(&stack0xfffffffffffffff8 + iVar2) = 0x14000425c;\n    uVar3 = fcn.140005410(0, param_1, 0);\n    *(&stack0xfffffffffffffff8 + iVar2) = 0x140004270;\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetEnvironmentVariableW)(uVar3, &stack0x00000020 + iVar2, 0x2000);\n    if (iVar1 != 0) {\n        *(&stack0xfffffffffffffff8 + iVar2) = 0x14000428d;\n        (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(&stack0x00000020 + iVar2, &stack0x00002020 + iVar2);\n        *(&stack0xfffffffffffffff8 + iVar2) = 0x14000429c;\n        arg1 = fcn.140005520(0, &stack0x00000020 + iVar2, 0);\n        if ((arg1 != NULL) && (*arg1 != '\\0')) {\n            *(&stack0xfffffffffffffff8 + iVar2) = 0x1400042ae;\n            fcn.1400132f8(arg1);\n            *(&stack0xfffffffffffffff8 + iVar2) = 0x1400042be;\n            fcn.1400085e0(*(&stack0x00004020 + iVar2) ^ &stack0x00000000 + iVar2);\n            return;\n        }\n    }\n    *(&stack0xfffffffffffffff8 + iVar2) = 0x1400042d8;\n    fcn.1400085e0(*(&stack0x00004020 + iVar2) ^ &stack0x00000000 + iVar2);\n    return;\n}\n",
        "token_count": 507
    },
    "1400042e": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400042e0(ulong param_1, ulong param_2)\n\n{\n    char *pcVar1;\n    char cVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    uchar *puVar6;\n    int64_t iVar7;\n    ushort *puVar8;\n    uint64_t uVar9;\n    ulong arg3;\n    ulong uStack16;\n    \n    uStack16 = 0x1400042f0;\n    iVar4 = fcn.140008570();\n    iVar4 = -iVar4;\n    *(&stack0x00004048 + iVar4) = *0x140034018 ^ &stack0xfffffffffffffff8 + iVar4;\n    *(&stack0xfffffffffffffff0 + iVar4) = 0x140004321;\n    iVar3 = fcn.1400026f0(&stack0x00000048 + iVar4, 0x1000, 0x140023804, param_1);\n    if (iVar3 < 0x1000) {\n        *(&stack0xfffffffffffffff0 + iVar4) = 0x140004348;\n        iVar3 = fcn.1400026f0(&stack0x00001048 + iVar4, 0x1000, 0x140023804, param_2);\n        if (iVar3 < 0x1000) {\n            uVar9 = 0xffffffffffffffff;\n            do {\n                uVar9 = uVar9 + 1;\n            } while ((&stack0x00000049)[uVar9 + iVar4 + -1] != '\\0');\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x14000437d;\n            iVar5 = fcn.14000f5b8(&stack0x00001048 + iVar4, 0x140023854);\n            if (iVar5 != 0) {\n                while( true ) {\n                    iVar7 = -1;\n                    do {\n                        iVar7 = iVar7 + 1;\n                    } while (*(iVar5 + iVar7) != '\\0');\n                    uVar9 = uVar9 + 1 + iVar7;\n                    if (0xffe < uVar9) goto code_r0x0001400044ad;\n                    puVar8 = &stack0x00000047 + iVar4;\n                    do {\n                        pcVar1 = puVar8 + 1;\n                        puVar8 = puVar8 + 1;\n                    } while (*pcVar1 != '\\0');\n                    *puVar8 = *0x140023854;\n                    puVar6 = &stack0x00000047 + iVar4;\n                    do {\n                        pcVar1 = puVar6 + 1;\n                        puVar6 = puVar6 + 1;\n                    } while (*pcVar1 != '\\0');\n                    iVar7 = 0;\n                    do {\n                        cVar2 = *(iVar5 + iVar7);\n                        puVar6[iVar7] = cVar2;\n                        iVar7 = iVar7 + 1;\n                    } while (cVar2 != '\\0');\n                    *(&stack0xfffffffffffffff0 + iVar4) = 0x14000440d;\n                    iVar5 = fcn.14000f5b8(0, 0x140023854);\n                    if (iVar5 == 0) break;\n                    *(&stack0xfffffffffffffff0 + iVar4) = 0x14000442d;\n                    fcn.140005410(&stack0x00002048 + iVar4, &stack0x00000048 + iVar4, 0x1000);\n                    *(&stack0xfffffffffffffff0 + iVar4) = 0x14000443f;\n                    iVar3 = fcn.14000f3e0(&stack0x00002048 + iVar4, &stack0x00000018 + iVar4);\n                    if (iVar3 < 0) {\n                        *(&stack0xfffffffffffffff0 + iVar4) = 0x140004454;\n                        fcn.1400050c0(&stack0x00002048 + iVar4);\n                    }\n                }\n            }\n            arg3 = 0x1000;\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x140004471;\n            fcn.140005410(&stack0x00002048 + iVar4, &stack0x00000048 + iVar4, 0x1000);\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x140004483;\n            iVar3 = fcn.14000f3e0(&stack0x00002048 + iVar4, &stack0x00000018 + iVar4);\n            if (iVar3 == 0) {\n                *(&stack0xfffffffffffffff0 + iVar4) = 0x140004498;\n                fcn.140001bf0(\"WARNING: file already exists but should not: %s\\n\", &stack0x00000048 + iVar4, arg3, \n                              param_2);\n            }\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x1400044a9;\n            fcn.140002bb0(&stack0x00000048 + iVar4, 0x140024f24);\n        }\n    }\ncode_r0x0001400044ad:\n    *(&stack0xfffffffffffffff0 + iVar4) = 0x1400044bd;\n    fcn.1400085e0(*(&stack0x00004048 + iVar4) ^ &stack0xfffffffffffffff8 + iVar4);\n    return;\n}\n",
        "token_count": 1210
    },
    "140004af": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140004af0(int64_t param_1, int64_t param_2, uint8_t *param_3)\n\n{\n    int16_t *piVar1;\n    int16_t iVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    uchar auStackX24 [16];\n    ulong uStack16;\n    \n    uStack16 = 0x140004afc;\n    iVar4 = fcn.140008570();\n    iVar4 = -iVar4;\n    *(&stack0x00001028 + iVar4) = *0x140034018 ^ &stack0xfffffffffffffff8 + iVar4;\n    if ((*(param_3 + 0x24) != 0x2e) ||\n       ((*(param_3 + 0x26) != 0 &&\n        (((*(param_3 + 0x24) != 0x2e || (*(param_3 + 0x26) != 0x2e)) || (*(param_3 + 0x28) != 0)))))) {\n        *(param_1 + param_2 * 2) = 0;\n        iVar5 = param_1 + -2;\n        do {\n            piVar1 = iVar5 + 2;\n            iVar5 = iVar5 + 2;\n        } while (*piVar1 != 0);\n        iVar6 = 0;\n        do {\n            iVar2 = *(param_3 + iVar6 * 2 + 0x24);\n            *(iVar5 + iVar6 * 2) = iVar2;\n            iVar6 = iVar6 + 1;\n        } while (iVar2 != 0);\n        if ((*param_3 & 0x10) == 0) {\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x140004ba1;\n            iVar3 = fcn.1400116d8(param_1);\n            if (iVar3 != 0) {\n                *(&stack0xfffffffffffffff0 + iVar4) = 0x140004bb0;\n                (*_sym.imp.KERNEL32.dll_Sleep)(100);\n                *(&stack0xfffffffffffffff0 + iVar4) = 0x140004bb8;\n                fcn.1400116d8(param_1);\n            }\n        }\n        else {\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x140004b8d;\n            fcn.140005520(&stack0x00000018 + iVar4, param_1, 0x1000);\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x140004b97;\n            fcn.1400044d0(&stack0x00000018 + iVar4);\n        }\n    }\n    *(&stack0xfffffffffffffff0 + iVar4) = 0x140004bc8;\n    fcn.1400085e0(*(&stack0x00001028 + iVar4) ^ &stack0xfffffffffffffff8 + iVar4);\n    return;\n}\n",
        "token_count": 664
    },
    "14000579": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.140005790(uint8_t **arg1, ulong arg2)\n\n{\n    uint8_t uVar1;\n    ulong *puVar2;\n    char cVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint uVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    int32_t iVar9;\n    int64_t iVar10;\n    uint32_t uVar11;\n    uint32_t uVar12;\n    uint32_t uVar13;\n    uint8_t *arg2_00;\n    uint32_t uVar14;\n    uint16_t uVar15;\n    ushort uVar16;\n    int32_t iVar17;\n    uint8_t *puVar18;\n    uint64_t uVar19;\n    uint64_t uVar20;\n    uint32_t uStackX8;\n    int32_t iStackX24;\n    uint32_t uStackX32;\n    ushort uStack104;\n    uchar uStack102;\n    uchar uStack101;\n    uint uStack100;\n    uint32_t uStack96;\n    uint8_t *puStack88;\n    \n    if ((((((arg1 != NULL) && (arg1[6] != NULL)) && (arg1[7] != NULL)) &&\n         ((puVar2 = arg1[5],  puVar2 != NULL && (*puVar2 == arg1)))) && (iVar4 = *(puVar2 + 1),  iVar4 - 0x3f34U < 0x20)\n        ) && ((puVar18 = arg1[2],  puVar18 != NULL && ((arg2_00 = *arg1,  arg2_00 != NULL || (*(arg1 + 1) == 0)))))) {\n        if (iVar4 == 0x3f3f) {\n            *(puVar2 + 1) = 0x3f40;\n            iVar4 = 0x3f40;\n            puVar18 = arg1[2];\n            arg2_00 = *arg1;\n        }\n        uVar7 = *(arg1 + 3);\n        uVar14 = *(arg1 + 1);\n        uVar13 = *(puVar2 + 9);\n        uVar11 = *(puVar2 + 0x4c);\n        iStackX24 = 0;\n        uStackX8 = uVar7;\n        uStackX32 = uVar7;\n        uStack96 = uVar14;\n        puStack88 = puVar18;\n        while (iVar4 - 0x3f34U < 0x1f) {\n            uVar20 = 0;\n            uVar5 = 0;\n    // switch table (31 cases) at 0x140006f3c\n            switch(*((iVar4 - 0x3f34U) * 4 + 0x140006f3c) + 0x140000000) {\n            case 0x14000588d:\n                uVar5 = *(puVar2 + 2);\n                if (uVar5 == 0) {\n                    *(puVar2 + 1) = 0x3f40;\n                }\n                else {\n                    for (; uVar11 < 0x10; uVar11 = uVar11 + 8) {\n                        if (uVar14 == 0) goto code_r0x0001400060d6;\n                        uVar14 = uVar14 - 1;\n                        uVar13 = uVar13 + (*arg2_00 << (uVar11 & 0x1f));\n                        arg2_00 = arg2_00 + 1;\n                    }\n                    if (((uVar5 & 2) == 0) || (uVar13 != 0x8b1f)) {\n                        *(puVar2 + 3) = 0;\n                        if (puVar2[5] != 0) {\n                            *(puVar2[5] + 0x40) = 0xffffffff;\n                            uVar5 = *(puVar2 + 2);\n                        }\n                        if (((uVar5 & 1) == 0) ||\n                           (uVar5 = (uVar13 & 0xff) * 0x100 + (uVar13 >> 8), \n                           uVar5 != ((uVar5 - uVar5 / 0x1f >> 1) + uVar5 / 0x1f >> 4) * 0x1f)) {\n                            arg1[4] = \"incorrect header check\";\n                            *(puVar2 + 1) = 0x3f51;\n                        }\n                        else if ((uVar13 & 0xf) == 8) {\n                            uVar11 = uVar11 - 4;\n                            uVar8 = (uVar13 >> 4 & 0xf) + 8;\n                            uVar5 = *(puVar2 + 6);\n                            if (*(puVar2 + 6) == 0) {\n                                *(puVar2 + 6) = uVar8;\n                                uVar5 = uVar8;\n                            }\n                            if ((uVar8 < 0x10) && (uVar8 <= uVar5)) {\n                                *(puVar2 + 0x1c) = 1 << uVar8;\n                                uVar6 = fcn.1400073f0(0, 0, 0);\n                                uVar11 = 0;\n                                *(puVar2 + 4) = uVar6;\n                                *(arg1 + 0x4c) = uVar6;\n                                *(puVar2 + 1) = ~(uVar13 >> 0xc) & 2 | 0x3f3d;\n                                uVar13 = 0;\n                                puVar18 = puStack88;\n                                uVar7 = uStackX32;\n                            }\n                            else {\n                                arg1[4] = \"invalid window size\";\n                                *(puVar2 + 1) = 0x3f51;\n                                uVar13 = uVar13 >> 4;\n                            }\n                        }\n                        else {\n                            arg1[4] = \"unknown compression method\";\n                            *(puVar2 + 1) = 0x3f51;\n                        }\n                    }\n                    else {\n                        if (*(puVar2 + 6) == 0) {\n                            *(puVar2 + 6) = 0xf;\n                        }\n                        uVar6 = fcn.1400076e0(0, 0, 0);\n                        *(puVar2 + 4) = uVar6;\n                        uStack104 = 0x8b1f;\n                        uVar6 = fcn.1400076e0(*(puVar2 + 4), &uStack104, 2);\n                        *(puVar2 + 4) = uVar6;\n                        uVar13 = 0;\n                        uVar11 = 0;\n                        *(puVar2 + 1) = 0x3f35;\n                        puVar18 = puStack88;\n                        uVar7 = uStackX32;\n                    }\n                }\n                break;\n            case 0x140005a24:\n                for (; uVar11 < 0x10; uVar11 = uVar11 + 8) {\n                    if (uVar14 == 0) goto code_r0x0001400060d6;\n                    uVar14 = uVar14 - 1;\n                    uVar13 = uVar13 + (*arg2_00 << (uVar11 & 0x1f));\n                    arg2_00 = arg2_00 + 1;\n                }\n                *(puVar2 + 3) = uVar13;\n                if (uVar13 == '\\b') {\n                    if ((uVar13 & 0xe000) == 0) {\n                        uVar7 = uVar13;\n                        if (puVar2[5] != NULL) {\n                            *puVar2[5] = uVar13 >> 8 & 1;\n                            uVar7 = *(puVar2 + 3);\n                        }\n                        if (((uVar7 >> 9 & 1) != 0) && ((*(puVar2 + 2) & 4) != 0)) {\n                            uStack104 = uVar13;\n                            uVar6 = fcn.1400076e0(*(puVar2 + 4), &uStack104, 2);\n                            *(puVar2 + 4) = uVar6;\n                        }\n                        *(puVar2 + 1) = 0x3f36;\n                        uVar13 = uVar5;\n                        uVar11 = uVar5;\n                        do {\n                            if (uVar14 == 0) goto code_r0x0001400060d6;\n                            uVar14 = uVar14 - 1;\n                            uVar13 = uVar13 + (*arg2_00 << (uVar11 & 0x1f));\n                            arg2_00 = arg2_00 + 1;\n                            uVar11 = uVar11 + 8;\njoined_r0x000140005aee:\n                        } while (uVar11 < 0x20);\n                        if (puVar2[5] != 0) {\n                            *(puVar2[5] + 4) = uVar13;\n                        }\n                        if (((*(puVar2 + 3) & 0x200) != 0) && ((*(puVar2 + 2) & 4) != 0)) {\n                            uStack104 = uVar13;\n                            uStack102 = uVar13 >> 0x10;\n                            uStack101 = uVar13 >> 0x18;\n                            uVar6 = fcn.1400076e0(*(puVar2 + 4), &uStack104, 4);\n                            *(puVar2 + 4) = uVar6;\n                        }\n                        *(puVar2 + 1) = 0x3f37;\n                        uVar13 = uVar5;\n                        uVar11 = uVar5;\n                        do {\n                            if (uVar14 == 0) goto code_r0x0001400060d6;\n                            uVar14 = uVar14 - 1;\n                            uVar13 = uVar13 + (*arg2_00 << (uVar11 & 0x1f));\n                            arg2_00 = arg2_00 + 1;\n                            uVar11 = uVar11 + 8;\njoined_r0x000140005b75:\n                        } while (uVar11 < 0x10);\n                        if (puVar2[5] != 0) {\n                            *(puVar2[5] + 8) = uVar13 & 0xff;\n                            *(puVar2[5] + 0xc) = uVar13 >> 8;\n                        }\n                        if (((*(puVar2 + 3) & 0x200) != 0) && ((*(puVar2 + 2) & 4) != 0)) {\n                            uStack104 = uVar13;\n                            uVar6 = fcn.1400076e0(*(puVar2 + 4), &uStack104, 2);\n                            *(puVar2 + 4) = uVar6;\n                        }\n                        *(puVar2 + 1) = 0x3f38;\n                        uVar13 = uVar5;\n                        uVar11 = uVar5;\n                        goto code_r0x000140005bf8;\n                    }\n                    arg1[4] = \"unknown header flags set\";\n                    *(puVar2 + 1) = 0x3f51;\n                }\n                else {\n                    arg1[4] = \"unknown compression method\";\n                    *(puVar2 + 1) = 0x3f51;\n                }\n                break;\n            case 0x140005aeb:\n                goto joined_r0x000140005aee;\n            case 0x140005b72:\n                goto joined_r0x000140005b75;\n            case 0x140005bf8:\ncode_r0x000140005bf8:\n                if ((*(puVar2 + 3) & 0x400) == 0) {\n                    uVar5 = uVar13;\n                    if (puVar2[5] != 0) {\n                        *(puVar2[5] + 0x10) = 0;\n                    }\n                }\n                else {\n                    for (; uVar11 < 0x10; uVar11 = uVar11 + 8) {\n                        if (uVar14 == 0) goto code_r0x0001400060d6;\n                        uVar14 = uVar14 - 1;\n                        uVar13 = uVar13 + (*arg2_00 << (uVar11 & 0x1f));\n                        arg2_00 = arg2_00 + 1;\n                    }\n                    *(puVar2 + 10) = uVar13;\n                    if (puVar2[5] != 0) {\n                        *(puVar2[5] + 0x18) = uVar13;\n                    }\n                    uVar11 = uVar5;\n                    if (((*(puVar2 + 3) & 0x200) != 0) && ((*(puVar2 + 2) & 4) != 0)) {\n                        uStack104 = uVar13;\n                        uVar6 = fcn.1400076e0(*(puVar2 + 4), &uStack104, 2);\n                        *(puVar2 + 4) = uVar6;\n                    }\n                }\n                uVar13 = uVar5;\n                *(puVar2 + 1) = 0x3f39;\n            case 0x140005c88:\n                uVar7 = *(puVar2 + 3);\n                if ((uVar7 >> 10 & 1) != 0) {\n                    uVar5 = *(puVar2 + 10);\n                    uVar8 = uVar14;\n                    if (uVar5 <= uVar14) {\n                        uVar8 = uVar5;\n                    }\n                    if (uVar8 != 0) {\n                        iVar10 = puVar2[5];\n                        if ((iVar10 != 0) && (*(iVar10 + 0x10) != 0)) {\n                            uVar5 = *(iVar10 + 0x18) - uVar5;\n                            uVar7 = uVar8;\n                            if (*(iVar10 + 0x1c) < uVar8 + uVar5) {\n                                uVar7 = *(iVar10 + 0x1c) - uVar5;\n                            }\n                            fcn.1400092f0(uVar5 + *(iVar10 + 0x10), arg2_00, uVar7);\n                            uVar7 = *(puVar2 + 3);\n                        }\n                        if (((uVar7 >> 9 & 1) != 0) && ((*(puVar2 + 2) & 4) != 0)) {\n                            uVar6 = fcn.1400076e0(*(puVar2 + 4), arg2_00, uVar8);\n                            *(puVar2 + 4) = uVar6;\n                        }\n                        uVar14 = uVar14 - uVar8;\n                        arg2_00 = arg2_00 + uVar8;\n                        *(puVar2 + 10) = *(puVar2 + 10) - uVar8;\n                        uVar5 = *(puVar2 + 10);\n                    }\n                    if (uVar5 != 0) goto code_r0x0001400060d6;\n                }\n                *(puVar2 + 10) = 0;\n                *(puVar2 + 1) = 0x3f3a;\ncode_r0x000140005d32:\n                if ((*(puVar2 + 3) & 0x800) == 0) {\n                    if (puVar2[5] != 0) {\n                        *(puVar2[5] + 0x20) = 0;\n                    }\ncode_r0x000140005dd0:\n                    *(puVar2 + 10) = 0;\n                    *(puVar2 + 1) = 0x3f3b;\ncode_r0x000140005ddc:\n                    uVar20 = 0;\n                    if ((*(puVar2 + 3) & 0x1000) == 0) {\n                        if (puVar2[5] != 0) {\n                            *(puVar2[5] + 0x30) = 0;\n                        }\ncode_r0x000140005e71:\n                        *(puVar2 + 1) = 0x3f3c;\n                        uVar7 = uStackX32;\ncode_r0x000140005e81:\n                        if ((*(puVar2 + 3) >> 9 & 1) != 0) {\n                            for (; uVar11 < 0x10; uVar11 = uVar11 + 8) {\n                                if (uVar14 == 0) goto code_r0x0001400060d6;\n                                uVar14 = uVar14 - 1;\n                                uVar13 = uVar13 + (*arg2_00 << (uVar11 & 0x1f));\n                                arg2_00 = arg2_00 + 1;\n                            }\n                            if (((*(puVar2 + 2) & 4) != 0) && (uVar13 != *(puVar2 + 4))) {\n                                arg1[4] = \"header crc mismatch\";\n                                *(puVar2 + 1) = 0x3f51;\n                                puVar18 = puStack88;\n                                break;\n                            }\n                            uVar13 = 0;\n                            uVar11 = uVar13;\n                        }\n                        if (puVar2[5] != 0) {\n                            *(puVar2[5] + 0x3c) = *(puVar2 + 3) >> 9 & 1;\n                            *(puVar2[5] + 0x40) = 1;\n                        }\n                        uVar6 = fcn.1400076e0(0, 0, 0);\n                        *(puVar2 + 4) = uVar6;\n                        *(arg1 + 0x4c) = uVar6;\ncode_r0x000140005f0c:\n                        *(puVar2 + 1) = 0x3f3f;\n                        puVar18 = puStack88;\n                        uVar7 = uStackX32;\n                        break;\n                    }\n                    if (uVar14 != 0) {\n                        do {\n                            uVar7 = uVar20 + 1;\n                            uVar19 = uVar7;\n                            uVar1 = arg2_00[uVar20];\n                            iVar10 = puVar2[5];\n                            if (((iVar10 != 0) && (*(iVar10 + 0x30) != 0)) && (*(puVar2 + 10) < *(iVar10 + 0x38))) {\n                                *(*(puVar2 + 10) + *(iVar10 + 0x30)) = uVar1;\n                                *(puVar2 + 10) = *(puVar2 + 10) + 1;\n                            }\n                        } while ((uVar1 != 0) && (uVar20 = uVar19,  uVar7 < uVar14));\n                        if (((*(puVar2 + 3) & 0x200) != 0) && ((*(puVar2 + 2) & 4) != 0)) {\n                            uVar6 = fcn.1400076e0(*(puVar2 + 4), arg2_00, uVar19);\n                            *(puVar2 + 4) = uVar6;\n                        }\n                        uVar14 = uVar14 - uVar7;\n                        arg2_00 = arg2_00 + uVar19;\n                        if (uVar1 == 0) goto code_r0x000140005e71;\n                    }\n                }\n                else if (uVar14 != 0) {\n                    do {\n                        uVar7 = uVar20 + 1;\n                        uVar19 = uVar7;\n                        uVar1 = arg2_00[uVar20];\n                        iVar10 = puVar2[5];\n                        if (((iVar10 != 0) && (*(iVar10 + 0x20) != 0)) && (*(puVar2 + 10) < *(iVar10 + 0x28))) {\n                            *(*(puVar2 + 10) + *(iVar10 + 0x20)) = uVar1;\n                            *(puVar2 + 10) = *(puVar2 + 10) + 1;\n                        }\n                    } while ((uVar1 != 0) && (uVar20 = uVar19,  uVar7 < uVar14));\n                    if (((*(puVar2 + 3) & 0x200) != 0) && ((*(puVar2 + 2) & 4) != 0)) {\n                        uVar6 = fcn.1400076e0(*(puVar2 + 4), arg2_00, uVar19);\n                        *(puVar2 + 4) = uVar6;\n                    }\n                    uVar14 = uVar14 - uVar7;\n                    arg2_00 = arg2_00 + uVar19;\n                    if (uVar1 == 0) goto code_r0x000140005dd0;\n                }\n                goto code_r0x0001400060d6;\n            case 0x140005d32:\n                goto code_r0x000140005d32;\n            case 0x140005ddc:\n                goto code_r0x000140005ddc;\n            case 0x140005e81:\n                goto code_r0x000140005e81;\n            case 0x140005f4c:\n                for (; uVar11 < 0x20; uVar11 = uVar11 + 8) {\n                    if (uVar14 == 0) goto code_r0x0001400060d6;\n                    uVar14 = uVar14 - 1;\n                    uVar13 = uVar13 + (*arg2_00 << (uVar11 & 0x1f));\n                    arg2_00 = arg2_00 + 1;\n                }\n                iVar4 = (uVar13 >> 8 & 0xff00) + ((uVar13 & 0xff00) + uVar13 * 0x10000) * 0x100 + (uVar13 >> 0x18);\n                *(puVar2 + 4) = iVar4;\n                *(arg1 + 0x4c) = iVar4;\n                *(puVar2 + 1) = 0x3f3e;\n                uVar13 = uVar5;\n                uVar11 = uVar5;\n            case 0x140005fa9:\n                if (*(puVar2 + 0x14) == 0) {\n                    arg1[2] = puVar18;\n                    *(arg1 + 3) = uVar7;\n                    *arg1 = arg2_00;\n                    *(arg1 + 1) = uVar14;\n                    *(puVar2 + 9) = uVar13;\n                    *(puVar2 + 0x4c) = uVar11;\n                    return 2;\n                }\n                uVar6 = fcn.1400073f0(0, 0, 0);\n                *(puVar2 + 4) = uVar6;\n                *(arg1 + 0x4c) = uVar6;\n                *(puVar2 + 1) = 0x3f3f;\n                uVar7 = uStackX32;\ncode_r0x000140005fd9:\n                if (arg2 - 5U < 2) goto code_r0x0001400060d6;\ncode_r0x000140005fe6:\n                puVar18 = puStack88;\n                if (*(puVar2 + 0xc) == 0) {\n                    for (; uVar11 < 3; uVar11 = uVar11 + 8) {\n                        if (uVar14 == 0) goto code_r0x0001400060d6;\n                        uVar14 = uVar14 - 1;\n                        uVar13 = uVar13 + (*arg2_00 << (uVar11 & 0x1f));\n                        arg2_00 = arg2_00 + 1;\n                    }\n                    *(puVar2 + 0xc) = uVar13 & 1;\n                    uVar5 = uVar13 >> 1 & 3;\n                    if (uVar5 == 0) {\n                        *(puVar2 + 1) = 0x3f41;\n                    }\n                    else {\n                        if (uVar5 != 1) {\n                            if (uVar5 == 2) {\n                                uVar13 = uVar13 >> 3;\n                                uVar11 = uVar11 - 3;\n                                *(puVar2 + 1) = 0x3f44;\n                            }\n                            else {\n                                if (uVar5 != 3) goto code_r0x000140006165;\n                                uVar13 = uVar13 >> 3;\n                                arg1[4] = \"invalid block type\";\n                                uVar11 = uVar11 - 3;\n                                *(puVar2 + 1) = 0x3f51;\n                            }\n                            break;\n                        }\n                        *(puVar2 + 0xe) = 9;\n                        puVar2[0xc] = 0x1400251c0;\n                        puVar2[0xd] = 0x1400259c0;\n                        *(puVar2 + 0x74) = 5;\n                        *(puVar2 + 1) = 0x3f47;\n                        if (arg2 == 6) {\n                            uVar13 = uVar13 >> 3;\n                            uVar11 = uVar11 - 3;\n                            goto code_r0x0001400060d6;\n                        }\n                    }\ncode_r0x000140006165:\n                    uVar13 = uVar13 >> 3;\n                    uVar11 = uVar11 - 3;\n                }\n                else {\n                    *(puVar2 + 1) = 0x3f4e;\n                    uVar13 = uVar13 >> (uVar11 & 7);\n                    uVar11 = uVar11 - (uVar11 & 7);\n                }\n                break;\n            case 0x140005fd9:\n                goto code_r0x000140005fd9;\n            case 0x140005fe6:\n                goto code_r0x000140005fe6;\n            case 0x140006153:\n                goto code_r0x000140006f2a;\n            case 0x140006170:\n                uVar13 = uVar13 >> (uVar11 & 7);\n                for (uVar11 = uVar11 - (uVar11 & 7); uVar11 < 0x20; uVar11 = uVar11 + 8) {\n                    if (uVar14 == 0) goto code_r0x0001400060d6;\n                    uVar14 = uVar14 - 1;\n                    uVar13 = uVar13 + (*arg2_00 << (uVar11 & 0x1f));\n                    arg2_00 = arg2_00 + 1;\n                }\n                if ((uVar13 & 0xffff) == ~uVar13 >> 0x10) {\n                    *(puVar2 + 10) = uVar13 & 0xffff;\n                    *(puVar2 + 1) = 0x3f42;\n                    uVar13 = uVar5;\n                    uVar11 = uVar5;\n                    if (arg2 != 6) goto code_r0x0001400061e1;\n                    goto code_r0x0001400060d6;\n                }\n                arg1[4] = \"invalid stored block lengths\";\n                *(puVar2 + 1) = 0x3f51;\n                break;\n            case 0x1400061e1:\ncode_r0x0001400061e1:\n                *(puVar2 + 1) = 0x3f43;\n            case 0x1400061e9:\n                uVar5 = *(puVar2 + 10);\n                if (uVar5 == 0) {\n                    *(puVar2 + 1) = 0x3f3f;\n                }\n                else {\n                    uVar8 = uVar14;\n                    if (uVar5 <= uVar14) {\n                        uVar8 = uVar5;\n                    }\n                    if (uVar8 <= uVar7) {\n                        uVar7 = uVar8;\n                    }\n                    if (uVar7 == 0) goto code_r0x0001400060d6;\n                    fcn.1400092f0(puVar18, arg2_00, uVar7);\n                    uVar14 = uVar14 - uVar7;\n                    uStackX32 = uStackX32 - uVar7;\n                    puStack88 = puStack88 + uVar7;\n                    arg2_00 = arg2_00 + uVar7;\n                    *(puVar2 + 10) = *(puVar2 + 10) - uVar7;\n                    puVar18 = puStack88;\n                    uVar7 = uStackX32;\n                }\n                break;\n            case 0x140006258:\n                for (; uVar11 < 0xe; uVar11 = uVar11 + 8) {\n                    if (uVar14 == 0) goto code_r0x0001400060d6;\n                    uVar14 = uVar14 - 1;\n                    uVar13 = uVar13 + (*arg2_00 << (uVar11 & 0x1f));\n                    arg2_00 = arg2_00 + 1;\n                }\n                uVar11 = uVar11 - 0xe;\n                uVar8 = uVar13 >> 5;\n                uVar5 = (uVar13 & 0x1f) + 0x101;\n                uVar12 = uVar13 >> 10;\n                *(puVar2 + 0x7c) = uVar5;\n                uVar13 = uVar13 >> 0xe;\n                uVar8 = (uVar8 & 0x1f) + 1;\n                *(puVar2 + 0x10) = uVar8;\n                *(puVar2 + 0xf) = (uVar12 & 0xf) + 4;\n                if ((uVar5 < 0x11f) && (uVar8 < 0x1f)) {\n                    *(puVar2 + 0x84) = 0;\n                    *(puVar2 + 1) = 0x3f45;\n                    goto code_r0x0001400062d7;\n                }\n                arg1[4] = \"too many length or distance symbols\";\n                *(puVar2 + 1) = 0x3f51;\n                break;\n            case 0x1400062d7:\ncode_r0x0001400062d7:\n                uVar7 = *(puVar2 + 0x84);\n                if (uVar7 < *(puVar2 + 0xf)) {\n                    do {\n                        for (; uVar11 < 3; uVar11 = uVar11 + 8) {\n                            if (uVar14 == 0) goto code_r0x0001400060d6;\n                            uVar14 = uVar14 - 1;\n                            uVar13 = uVar13 + (*arg2_00 << (uVar11 & 0x1f));\n                            arg2_00 = arg2_00 + 1;\n                        }\n                        uVar15 = uVar13;\n                        uVar13 = uVar13 >> 3;\n                        uVar11 = uVar11 - 3;\n                        *(puVar2 + *(*(puVar2 + 0x84) * 2 + 0x140025a40) * 2 + 0x90) = uVar15 & 7;\n                        *(puVar2 + 0x84) = *(puVar2 + 0x84) + 1;\n                        uVar7 = *(puVar2 + 0x84);\n                    } while (uVar7 < *(puVar2 + 0xf));\n                }\n                while (uVar7 < 0x13) {\n                    *(puVar2 + *(*(puVar2 + 0x84) * 2 + 0x140025a40) * 2 + 0x90) = 0;\n                    *(puVar2 + 0x84) = *(puVar2 + 0x84) + 1;\n                    uVar7 = *(puVar2 + 0x84);\n                }\n                *(puVar2 + 0xe) = 7;\n                puVar2[0xc] = puVar2 + 0xaa;\n                puVar2[0x11] = puVar2 + 0xaa;\n                iStackX24 = fcn.140007a20(0, puVar2 + 0x12, 0x13, puVar2 + 0x11);\n                if (iStackX24 == 0) {\n                    *(puVar2 + 0x84) = 0;\n                    iVar4 = 0x3f46;\n                    *(puVar2 + 1) = 0x3f46;\n                    goto code_r0x00014000640d;\n                }\n                arg1[4] = \"invalid code lengths set\";\n                *(puVar2 + 1) = 0x3f51;\n                puVar18 = puStack88;\n                uVar7 = uStackX32;\n                break;\n            case 0x14000640d:\ncode_r0x00014000640d:\n                uVar5 = *(puVar2 + 0x7c);\n                puVar18 = puStack88;\n                if (*(puVar2 + 0x84) < *(puVar2 + 0x10) + uVar5) {\n                    do {\n                        uVar5 = (1 << (*(puVar2 + 0xe) & 0x1f)) - 1;\n                        uStack100 = *(puVar2[0xc] + (uVar5 & uVar13) * 4);\n                        uVar7 = uStack100 >> 8;\n                        uVar15 = uStack100 >> 0x10;\n                        if (uVar11 < (uVar7 & 0xff)) {\n                            do {\n                                if (uVar14 == 0) goto code_r0x0001400060d6;\n                                uVar14 = uVar14 - 1;\n                                uVar13 = uVar13 + (*arg2_00 << (uVar11 & 0x1f));\n                                arg2_00 = arg2_00 + 1;\n                                uVar11 = uVar11 + 8;\n                                uStack100 = *(puVar2[0xc] + (uVar5 & uVar13) * 4);\n                                uVar7 = uStack100 >> 8;\n                                uVar15 = uStack100 >> 0x10;\n                            } while (uVar11 < (uVar7 & 0xff));\n                        }\n                        if (0xf < uVar15) {\n                            uVar7 = uVar7 & 0xff;\n                            uStack100._1_1_ = uStack100 >> 8;\n                            if (uVar15 == 0x10) {\n                                for (; uVar11 < uVar7 + 2; uVar11 = uVar11 + 8) {\n                                    if (uVar14 == 0) goto code_r0x0001400060d6;\n                                    uVar14 = uVar14 - 1;\n                                    uVar13 = uVar13 + (*arg2_00 << (uVar11 & 0x1f));\n                                    arg2_00 = arg2_00 + 1;\n                                }\n                                uVar11 = uVar11 - uStack100._1_1_;\n                                uVar13 = uVar13 >> (uStack100._1_1_ & 0x1f);\n                                if (*(puVar2 + 0x84) != 0) {\n                                    uVar11 = uVar11 - 2;\n                                    uVar7 = uVar13 & 3;\n                                    uVar13 = uVar13 >> 2;\n                                    iVar9 = uVar7 + 3;\n                                    uVar16 = *(puVar2 + (*(puVar2 + 0x84) - 1) * 2 + 0x90);\n                                    goto code_r0x0001400065c3;\n                                }\n                            }\n                            else {\n                                if (uVar15 == 0x11) {\n                                    for (; uVar11 < uVar7 + 3; uVar11 = uVar11 + 8) {\n                                        if (uVar14 == 0) goto code_r0x0001400060d6;\n                                        uVar14 = uVar14 - 1;\n                                        uVar13 = uVar13 + (*arg2_00 << (uVar11 & 0x1f));\n                                        arg2_00 = arg2_00 + 1;\n                                    }\n                                    iVar4 = -3;\n                                    uVar13 = uVar13 >> (uStack100._1_1_ & 0x1f);\n                                    iVar9 = (uVar13 & 7) + 3;\n                                    uVar13 = uVar13 >> 3;\n                                }\n                                else {\n                                    for (; uVar11 < uVar7 + 7; uVar11 = uVar11 + 8) {\n                                        if (uVar14 == 0) goto code_r0x0001400060d6;\n                                        uVar14 = uVar14 - 1;\n                                        uVar13 = uVar13 + (*arg2_00 << (uVar11 & 0x1f));\n                                        arg2_00 = arg2_00 + 1;\n                                    }\n                                    iVar4 = -7;\n                                    uVar13 = uVar13 >> (uStack100._1_1_ & 0x1f);\n                                    iVar9 = (uVar13 & 0x7f) + 0xb;\n                                    uVar13 = uVar13 >> 7;\n                                }\n                                uVar16 = 0;\n                                uVar11 = uVar11 + (iVar4 - uStack100._1_1_);\ncode_r0x0001400065c3:\n                                if (*(puVar2 + 0x84) + iVar9 <= *(puVar2 + 0x10) + *(puVar2 + 0x7c)) {\n                                    do {\n                                        *(puVar2 + *(puVar2 + 0x84) * 2 + 0x90) = uVar16;\n                                        uVar7 = *(puVar2 + 0x84) + 1;\n                                        *(puVar2 + 0x84) = uVar7;\n                                        iVar9 = iVar9 + -1;\n                                    } while (iVar9 != 0);\n                                    goto code_r0x000140006607;\n                                }\n                            }\n                            arg1[4] = \"invalid bit length repeat\";\n                            *(puVar2 + 1) = 0x3f51;\n                            uVar7 = uStackX32;\n                            goto code_r0x000140005f21;\n                        }\n                        uVar13 = uVar13 >> (uVar7 & 0x1f);\n                        uVar11 = uVar11 - (uVar7 & 0xff);\n                        *(puVar2 + *(puVar2 + 0x84) * 2 + 0x90) = uStack100 >> 0x10;\n                        *(puVar2 + 0x84) = *(puVar2 + 0x84) + 1;\n                        uVar7 = *(puVar2 + 0x84);\ncode_r0x000140006607:\n                        uVar5 = *(puVar2 + 0x7c);\n                    } while (uVar7 < *(puVar2 + 0x10) + uVar5);\n                    iVar4 = *(puVar2 + 1);\n                }\n                uVar7 = uStackX32;\n                if (iVar4 != 0x3f51) {\n                    if (*(puVar2 + 0x52) == 0) {\n                        arg1[4] = \"invalid code -- missing end-of-block\";\n                        *(puVar2 + 1) = 0x3f51;\n                    }\n                    else {\n                        *(puVar2 + 0xe) = 9;\n                        puVar2[0x11] = puVar2 + 0xaa;\n                        puVar2[0xc] = puVar2 + 0xaa;\n                        iStackX24 = fcn.140007a20(1, puVar2 + 0x12, uVar5, puVar2 + 0x11);\n                        if (iStackX24 == 0) {\n                            puVar2[0xd] = puVar2[0x11];\n                            *(puVar2 + 0x74) = 6;\n                            iStackX24 = fcn.140007a20(2, *(puVar2 + 0x7c) * 2 + 0x90 + puVar2, *(puVar2 + 0x10), \n                                                      puVar2 + 0x11);\n                            if (iStackX24 == 0) {\n                                *(puVar2 + 1) = 0x3f47;\n                                if (arg2 != 6) goto code_r0x000140006771;\n                                goto code_r0x0001400060d6;\n                            }\n                            arg1[4] = \"invalid distances set\";\n                            *(puVar2 + 1) = 0x3f51;\n                            puVar18 = puStack88;\n                        }\n                        else {\n                            arg1[4] = \"invalid literal/lengths set\";\n                            *(puVar2 + 1) = 0x3f51;\n                            puVar18 = puStack88;\n                        }\n                    }\n                }\n                break;\n            case 0x140006771:\ncode_r0x000140006771:\n                *(puVar2 + 1) = 0x3f48;\n            case 0x140006779:\n                if ((5 < uVar14) && (0x101 < uVar7)) {\n                    arg1[2] = puStack88;\n                    *(arg1 + 3) = uVar7;\n                    *arg1 = arg2_00;\n                    *(arg1 + 1) = uVar14;\n                    *(puVar2 + 9) = uVar13;\n                    *(puVar2 + 0x4c) = uVar11;\n                    fcn.140007fe0(arg1, uStackX8);\n                    puStack88 = arg1[2];\n                    uStackX32 = *(arg1 + 3);\n                    arg2_00 = *arg1;\n                    uVar14 = *(arg1 + 1);\n                    uVar11 = *(puVar2 + 0x4c);\n                    puVar18 = puStack88;\n                    uVar7 = uStackX32;\n                    uVar13 = *(puVar2 + 9);\n                    if (*(puVar2 + 1) == 0x3f3f) {\n                        *(puVar2 + 0x1be4) = 0xffffffff;\n                    }\n                    break;\n                }\n                iVar10 = puVar2[0xc];\n                uVar5 = (1 << (*(puVar2 + 0xe) & 0x1f)) - 1;\n                *(puVar2 + 0x1be4) = 0;\n                uVar7 = *(iVar10 + (uVar5 & uVar13) * 4);\n                if (uVar11 < (uVar7 >> 8 & 0xff)) {\n                    do {\n                        if (uVar14 == 0) goto code_r0x0001400060d6;\n                        uVar14 = uVar14 - 1;\n                        uVar13 = uVar13 + (*arg2_00 << (uVar11 & 0x1f));\n                        arg2_00 = arg2_00 + 1;\n                        uVar11 = uVar11 + 8;\n                        uVar7 = *(iVar10 + (uVar5 & uVar13) * 4);\n                    } while (uVar11 < (uVar7 >> 8 & 0xff));\n                }\n                cVar3 = uVar7;\n                uVar5 = uVar7;\n                if ((cVar3 != '\\0') && ((uVar7 & 0xf0) == 0)) {\n                    uStack100._1_1_ = uVar7 >> 8;\n                    uVar12 = uStack100._1_1_;\n                    uVar8 = uVar7 >> 8 & 0xff;\n                    uVar1 = uVar8;\n                    uVar5 = *(iVar10 + ((((1 << (cVar3 + uVar1 & 0x1f)) - 1U & uVar13) >> (uVar1 & 0x1f)) +\n                                       (uVar7 >> 0x10)) * 4);\n                    uStack100 = uVar7;\n                    if (uVar11 < (uVar5 >> 8 & 0xff) + uVar8) {\n                        do {\n                            if (uVar14 == 0) goto code_r0x0001400060d6;\n                            uVar13 = uVar13 + (*arg2_00 << (uVar11 & 0x1f));\n                            uVar14 = uVar14 - 1;\n                            arg2_00 = arg2_00 + 1;\n                            uVar11 = uVar11 + 8;\n                            uVar5 = *(iVar10 + ((((1 << (cVar3 + uStack100._1_1_ & 0x1f)) - 1U & uVar13) >>\n                                                (uStack100._1_1_ & 0x1f)) + (uVar7 >> 0x10)) * 4);\n                        } while (uVar11 < (uVar5 >> 8 & 0xff) + uVar12);\n                    }\n                    uVar13 = uVar13 >> (uStack100._1_1_ & 0x1f);\n                    uVar11 = uVar11 - uVar12;\n                    *(puVar2 + 0x1be4) = uVar12;\n                }\n                uVar7 = uVar5 >> 8 & 0xff;\n                *(puVar2 + 0x1be4) = *(puVar2 + 0x1be4) + uVar7;\n                uVar11 = uVar11 - uVar7;\n                uVar13 = uVar13 >> (uVar7 & 0x1f);\n                *(puVar2 + 10) = uVar5 >> 0x10;\n                puVar18 = puStack88;\n                if (uVar5 == '\\0') {\n                    *(puVar2 + 1) = 0x3f4d;\n                    uVar7 = uStackX32;\n                    break;\n                }\n                if ((uVar5 & 0x20) == 0) {\n                    if ((uVar5 & 0x40) == 0) {\n                        *(puVar2 + 1) = 0x3f49;\n                        *(puVar2 + 0xb) = uVar5 & 0xf;\ncode_r0x000140006983:\n                        uVar7 = *(puVar2 + 0xb);\n                        if (uVar7 != 0) {\n                            for (; uVar11 < uVar7; uVar11 = uVar11 + 8) {\n                                if (uVar14 == 0) goto code_r0x0001400060d6;\n                                uVar14 = uVar14 - 1;\n                                uVar13 = uVar13 + (*arg2_00 << (uVar11 & 0x1f));\n                                arg2_00 = arg2_00 + 1;\n                            }\n                            uVar11 = uVar11 - uVar7;\n                            uVar5 = (1 << (uVar7 & 0x1f)) - 1U & uVar13;\n                            uVar13 = uVar13 >> (uVar7 & 0x1f);\n                            *(puVar2 + 10) = *(puVar2 + 10) + uVar5;\n                            *(puVar2 + 0x1be4) = *(puVar2 + 0x1be4) + uVar7;\n                        }\n                        *(puVar2 + 0x37d) = *(puVar2 + 10);\n                        *(puVar2 + 1) = 0x3f4a;\ncode_r0x0001400069dc:\n                        iVar10 = puVar2[0xd];\n                        uVar5 = (1 << (*(puVar2 + 0x74) & 0x1f)) - 1;\n                        uVar7 = *(iVar10 + (uVar5 & uVar13) * 4);\n                        if (uVar11 < (uVar7 >> 8 & 0xff)) {\n                            do {\n                                if (uVar14 == 0) goto code_r0x0001400060d6;\n                                uVar14 = uVar14 - 1;\n                                uVar13 = uVar13 + (*arg2_00 << (uVar11 & 0x1f));\n                                arg2_00 = arg2_00 + 1;\n                                uVar11 = uVar11 + 8;\n                                uVar7 = *(iVar10 + (uVar5 & uVar13) * 4);\n                            } while (uVar11 < (uVar7 >> 8 & 0xff));\n                        }\n                        uVar5 = uVar7;\n                        if ((uVar7 & 0xf0) == 0) {\n                            uStack100._1_1_ = uVar7 >> 8;\n                            uVar12 = uStack100._1_1_;\n                            uVar8 = uVar7 >> 8 & 0xff;\n                            uVar1 = uVar8;\n                            uVar5 = *(iVar10 + ((((1 << (uVar7 + uVar1 & 0x1f)) - 1U & uVar13) >> (uVar1 & 0x1f)) +\n                                               (uVar7 >> 0x10)) * 4);\n                            uStack100 = uVar7;\n                            if (uVar11 < (uVar5 >> 8 & 0xff) + uVar8) {\n                                do {\n                                    if (uVar14 == 0) goto code_r0x0001400060d6;\n                                    uVar13 = uVar13 + (*arg2_00 << (uVar11 & 0x1f));\n                                    uVar14 = uVar14 - 1;\n                                    arg2_00 = arg2_00 + 1;\n                                    uVar11 = uVar11 + 8;\n                                    uVar5 = *(iVar10 + ((((1 << (uVar7 + uStack100._1_1_ & 0x1f)) - 1U & uVar13) >>\n                                                        (uStack100._1_1_ & 0x1f)) + (uVar7 >> 0x10)) * 4);\n                                } while (uVar11 < (uVar5 >> 8 & 0xff) + uVar12);\n                            }\n                            uVar11 = uVar11 - uVar12;\n                            uVar13 = uVar13 >> (uStack100._1_1_ & 0x1f);\n                            *(puVar2 + 0x1be4) = *(puVar2 + 0x1be4) + uVar12;\n                        }\n                        uVar7 = uVar5 >> 8 & 0xff;\n                        *(puVar2 + 0x1be4) = *(puVar2 + 0x1be4) + uVar7;\n                        uVar11 = uVar11 - uVar7;\n                        uVar13 = uVar13 >> (uVar7 & 0x1f);\n                        if ((uVar5 & 0x40) == 0) {\n                            *(puVar2 + 0x54) = uVar5 >> 0x10;\n                            *(puVar2 + 1) = 0x3f4b;\n                            *(puVar2 + 0xb) = uVar5 & 0xf;\n                            uVar7 = uStackX32;\ncode_r0x000140006b46:\n                            uVar5 = *(puVar2 + 0xb);\n                            if (uVar5 != 0) {\n                                for (; uVar11 < uVar5; uVar11 = uVar11 + 8) {\n                                    if (uVar14 == 0) goto code_r0x0001400060d6;\n                                    uVar14 = uVar14 - 1;\n                                    uVar13 = uVar13 + (*arg2_00 << (uVar11 & 0x1f));\n                                    arg2_00 = arg2_00 + 1;\n                                }\n                                uVar11 = uVar11 - uVar5;\n                                uVar8 = (1 << (uVar5 & 0x1f)) - 1U & uVar13;\n                                uVar13 = uVar13 >> (uVar5 & 0x1f);\n                                *(puVar2 + 0x54) = *(puVar2 + 0x54) + uVar8;\n                                *(puVar2 + 0x1be4) = *(puVar2 + 0x1be4) + uVar5;\n                            }\n                            *(puVar2 + 1) = 0x3f4c;\ncode_r0x000140006b93:\n                            if (uVar7 == 0) goto code_r0x0001400060d6;\n                            uVar5 = *(puVar2 + 0x54);\n                            if (uStackX8 - uVar7 < uVar5) {\n                                uVar5 = uVar5 - (uStackX8 - uVar7);\n                                if ((*(puVar2 + 7) <= uVar5 && uVar5 != *(puVar2 + 7)) && (*(puVar2 + 0x37c) != 0)) {\n                                    arg1[4] = \"invalid distance too far back\";\n                                    *(puVar2 + 1) = 0x3f51;\n                                    puVar18 = puStack88;\n                                    break;\n                                }\n                                uVar12 = *(puVar2 + 0x3c);\n                                if (uVar12 < uVar5) {\n                                    uVar5 = uVar5 - uVar12;\n                                    uVar12 = *(puVar2 + 0x34);\n                                }\n                                uVar8 = *(puVar2 + 10);\n                                iVar10 = (uVar12 - uVar5) + puVar2[8];\n                                uVar12 = uVar8;\n                                if (uVar5 <= uVar8) {\n                                    uVar12 = uVar5;\n                                }\n                            }\n                            else {\n                                uVar8 = *(puVar2 + 10);\n                                iVar10 = puStack88 - uVar5;\n                                uVar12 = uVar8;\n                            }\n                            uVar5 = uVar7;\n                            if (uVar12 <= uVar7) {\n                                uVar5 = uVar12;\n                            }\n                            uStackX32 = uVar7 - uVar5;\n                            iVar10 = iVar10 - puStack88;\n                            *(puVar2 + 10) = uVar8 - uVar5;\n                            do {\n                                *puStack88 = puStack88[iVar10];\n                                puStack88 = puStack88 + 1;\n                                uVar5 = uVar5 - 1;\n                            } while (uVar5 != 0);\n                            puVar18 = puStack88;\n                            uVar7 = uStackX32;\n                            if (*(puVar2 + 10) == 0) {\n                                *(puVar2 + 1) = 0x3f48;\n                            }\n                        }\n                        else {\n                            arg1[4] = \"invalid distance code\";\n                            *(puVar2 + 1) = 0x3f51;\n                            puVar18 = puStack88;\n                            uVar7 = uStackX32;\n                        }\n                    }\n                    else {\n                        arg1[4] = \"invalid literal/length code\";\n                        *(puVar2 + 1) = 0x3f51;\n                        uVar7 = uStackX32;\n                    }\n                    break;\n                }\n                *(puVar2 + 0x1be4) = 0xffffffff;\n                goto code_r0x000140005f0c;\n            case 0x140006983:\n                goto code_r0x000140006983;\n            case 0x1400069dc:\n                goto code_r0x0001400069dc;\n            case 0x140006b46:\n                goto code_r0x000140006b46;\n            case 0x140006b93:\n                goto code_r0x000140006b93;\n            case 0x140006c5c:\n                if (uVar7 == 0) goto code_r0x0001400060d6;\n                *puVar18 = *(puVar2 + 10);\n                puStack88 = puVar18 + 1;\n                uStackX32 = uVar7 - 1;\n                *(puVar2 + 1) = 0x3f48;\n                puVar18 = puStack88;\n                uVar7 = uStackX32;\n                break;\n            case 0x140006c8d:\n                if (*(puVar2 + 2) == 0) {\n                    *(puVar2 + 1) = 0x3f4f;\n                }\n                else {\n                    for (; uVar11 < 0x20; uVar11 = uVar11 + 8) {\n                        if (uVar14 == 0) goto code_r0x0001400060d6;\n                        uVar14 = uVar14 - 1;\n                        uVar13 = uVar13 + (*arg2_00 << (uVar11 & 0x1f));\n                        arg2_00 = arg2_00 + 1;\n                    }\n                    uStackX8 = uStackX8 - uVar7;\n                    *(arg1 + 0x1c) = *(arg1 + 0x1c) + uStackX8;\n                    *(puVar2 + 0x24) = *(puVar2 + 0x24) + uStackX8;\n                    uVar8 = *(puVar2 + 2);\n                    if (((uVar8 & 4) != 0) && (uStackX8 != 0)) {\n                        if (*(puVar2 + 3) == 0) {\n                            uVar6 = fcn.1400073f0(*(puVar2 + 4), puVar18 - uStackX8, uStackX8);\n                        }\n                        else {\n                            uVar6 = fcn.1400076e0(*(puVar2 + 4), puVar18 - uStackX8, uStackX8);\n                        }\n                        *(puVar2 + 4) = uVar6;\n                        *(arg1 + 0x4c) = uVar6;\n                        uVar8 = *(puVar2 + 2);\n                        uVar7 = uStackX32;\n                    }\n                    uStackX8 = uVar7;\n                    if ((uVar8 & 4) != 0) {\n                        uVar8 = uVar13;\n                        if (*(puVar2 + 3) == 0) {\n                            uVar8 = ((uVar13 & 0xff00) + uVar13 * 0x10000) * 0x100 + (uVar13 >> 8 & 0xff00) +\n                                    (uVar13 >> 0x18);\n                        }\n                        if (uVar8 != *(puVar2 + 4)) {\n                            arg1[4] = \"incorrect data check\";\n                            *(puVar2 + 1) = 0x3f51;\n                            puVar18 = puStack88;\n                            break;\n                        }\n                    }\n                    *(puVar2 + 1) = 0x3f4f;\n                    uVar13 = uVar5;\n                    uVar11 = uVar5;\n                }\n                goto code_r0x000140006d90;\n            case 0x140006d88:\ncode_r0x000140006d90:\n                uVar8 = uVar13;\n                uVar12 = uVar11;\n                if ((*(puVar2 + 2) != 0) && (*(puVar2 + 3) != 0)) {\n                    for (; uVar11 < 0x20; uVar11 = uVar11 + 8) {\n                        if (uVar14 == 0) goto code_r0x0001400060d6;\n                        uVar14 = uVar14 - 1;\n                        uVar13 = uVar13 + (*arg2_00 << (uVar11 & 0x1f));\n                        arg2_00 = arg2_00 + 1;\n                    }\n                    uVar8 = uVar5;\n                    uVar12 = uVar5;\n                    if (uVar13 != *(puVar2 + 0x24)) {\n                        arg1[4] = \"incorrect length check\";\n                        *(puVar2 + 1) = 0x3f51;\n                        puVar18 = puStack88;\n                        break;\n                    }\n                }\n                *(puVar2 + 1) = 0x3f50;\n                iStackX24 = 1;\n                uVar13 = uVar8;\n                uVar11 = uVar12;\n                goto code_r0x0001400060d6;\n            case 0x140006e1e:\n                iStackX24 = 1;\n                goto code_r0x0001400060d6;\n            case 0x140006e31:\n                iStackX24 = -3;\ncode_r0x0001400060d6:\n                arg1[2] = puStack88;\n                *(arg1 + 3) = uStackX32;\n                *arg1 = arg2_00;\n                *(arg1 + 1) = uVar14;\n                *(puVar2 + 9) = uVar13;\n                *(puVar2 + 0x4c) = uVar11;\n                if (((*(puVar2 + 0x34) == 0) &&\n                    (((uStackX8 == *(arg1 + 3) || (0x3f50 < *(puVar2 + 1))) || ((0x3f4d < *(puVar2 + 1) && (arg2 == 4)))\n                     ))) || (iVar4 = fcn.1400072e0(arg1, arg1[2], uStackX8 - *(arg1 + 3)),  iVar4 == 0)) {\n                    uStackX8 = uStackX8 - *(arg1 + 3);\n                    uStack96 = uStack96 - *(arg1 + 1);\n                    *(arg1 + 0xc) = *(arg1 + 0xc) + uStack96;\n                    *(arg1 + 0x1c) = *(arg1 + 0x1c) + uStackX8;\n                    *(puVar2 + 0x24) = *(puVar2 + 0x24) + uStackX8;\n                    if (((*(puVar2 + 2) & 4) != 0) && (uStackX8 != 0)) {\n                        if (*(puVar2 + 3) == 0) {\n                            uVar6 = fcn.1400073f0(*(puVar2 + 4), arg1[2] - uStackX8, uStackX8);\n                        }\n                        else {\n                            uVar6 = fcn.1400076e0(*(puVar2 + 4), arg1[2] - uStackX8, uStackX8);\n                        }\n                        *(puVar2 + 4) = uVar6;\n                        *(arg1 + 0x4c) = uVar6;\n                    }\n                    iVar4 = *(puVar2 + 1);\n                    if ((iVar4 == 0x3f47) || (iVar4 == 0x3f42)) {\n                        iVar9 = 0x100;\n                    }\n                    else {\n                        iVar9 = 0;\n                    }\n                    iVar17 = 0;\n                    if (iVar4 == 0x3f3f) {\n                        iVar17 = 0x80;\n                    }\n                    *(arg1 + 9) = (-(*(puVar2 + 0xc) != 0) & 0x40) + iVar17 + *(puVar2 + 0x4c) + iVar9;\n                    if (((uStack96 != 0) || (uStackX8 != 0)) && (arg2 != 4)) {\n                        return iStackX24;\n                    }\n                    if (iStackX24 != 0) {\n                        return iStackX24;\n                    }\n                    return -5;\n                }\n                *(puVar2 + 1) = 0x3f52;\ncode_r0x000140006f2a:\n                return -4;\n            }\ncode_r0x000140005f21:\n            iVar4 = *(puVar2 + 1);\n        }\n    }\n    return -2;\n}\n",
        "token_count": 14436
    },
    "140006fc": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140006fc0(int64_t arg1)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    \n    if ((((arg1 != 0) && (*(arg1 + 0x30) != 0)) && (pcVar2 = *(arg1 + 0x38),  pcVar2 != NULL)) &&\n       (((piVar1 = *(arg1 + 0x28),  piVar1 != NULL && (*piVar1 == arg1)) && (*(piVar1 + 1) - 0x3f34U < 0x20)))) {\n        if (piVar1[8] != 0) {\n            (*pcVar2)(*(arg1 + 0x40), piVar1[8]);\n            piVar1 = *(arg1 + 0x28);\n            pcVar2 = *(arg1 + 0x38);\n        }\n        (*pcVar2)(*(arg1 + 0x40), piVar1);\n        *(arg1 + 0x28) = 0;\n        return 0;\n    }\n    return 0xfffffffe;\n}\n",
        "token_count": 246
    },
    "1400073f": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint32_t fcn.1400073f0(ulong arg1, uint8_t *arg2, ulong arg3)\n\n{\n    uint8_t *puVar1;\n    uint8_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    int32_t iVar10;\n    int32_t iVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    int32_t iVar14;\n    int32_t iVar15;\n    int32_t iVar16;\n    int32_t iVar17;\n    int32_t iVar18;\n    int32_t iVar19;\n    int64_t iVar20;\n    uint32_t uVar21;\n    uint64_t uVar22;\n    uint32_t uVar23;\n    uint64_t uVar24;\n    \n    uVar22 = arg3;\n    uVar23 = arg1 >> 0x10;\n    arg1._0_4_ = arg1 & 0xffff;\n    if (uVar22 == 1) {\n        arg1._0_4_ = *arg2 + arg1;\n        uVar21 = arg1 - 0xfff1;\n        if (arg1 < 0xfff1) {\n            uVar21 = arg1;\n        }\n        uVar23 = uVar21 + uVar23;\n        uVar3 = uVar23 - 0xfff1;\n        if (uVar23 < 0xfff1) {\n            uVar3 = uVar23;\n        }\n        return uVar3 << 0x10 | uVar21;\n    }\n    if (arg2 == NULL) {\n        return 1;\n    }\n    if (uVar22 < 0x10) {\n        for (; uVar22 != 0; uVar22 = uVar22 - 1) {\n            uVar2 = *arg2;\n            arg2 = arg2 + 1;\n            arg1._0_4_ = arg1 + uVar2;\n            uVar23 = uVar23 + arg1;\n        }\n        uVar21 = arg1 - 0xfff1;\n        if (arg1 < 0xfff1) {\n            uVar21 = arg1;\n        }\n        return ((uVar23 / 0xfff1) * 0xf + uVar23) * 0x10000 | uVar21;\n    }\n    if (0x15af < uVar22) {\n        iVar20 = SUB168(ZEXT816(0x79baa6bb6398b6f7) * ZEXT816(uVar22) >> 0x40, 0);\n        uVar24 = (uVar22 - iVar20 >> 1) + iVar20 >> 0xc;\n        uVar22 = uVar22 + uVar24 * -0x15b0;\n        do {\n            iVar19 = 0x15b;\n            do {\n                iVar4 = arg1 + *arg2;\n                iVar5 = iVar4 + arg2[1];\n                iVar6 = iVar5 + arg2[2];\n                iVar7 = iVar6 + arg2[3];\n                iVar8 = iVar7 + arg2[4];\n                iVar9 = iVar8 + arg2[5];\n                iVar10 = iVar9 + arg2[6];\n                iVar11 = iVar10 + arg2[7];\n                iVar12 = iVar11 + arg2[8];\n                iVar13 = iVar12 + arg2[9];\n                iVar14 = iVar13 + arg2[10];\n                iVar15 = iVar14 + arg2[0xb];\n                iVar16 = iVar15 + arg2[0xc];\n                iVar17 = iVar16 + arg2[0xd];\n                iVar18 = iVar17 + arg2[0xe];\n                puVar1 = arg2 + 0xf;\n                arg2 = arg2 + 0x10;\n                arg1._0_4_ = iVar18 + *puVar1;\n                uVar23 = uVar23 + iVar4 + iVar5 + iVar6 + iVar7 + iVar8 + iVar9 + iVar10 + iVar11 + iVar12 + iVar13 +\n                         iVar14 + iVar15 + iVar16 + iVar17 + iVar18 + arg1;\n                iVar19 = iVar19 + -1;\n            } while (iVar19 != 0);\n            arg1._0_4_ = arg1 % 0xfff1;\n            uVar23 = uVar23 % 0xfff1;\n            uVar24 = uVar24 - 1;\n        } while (uVar24 != 0);\n        if (uVar22 == 0) goto code_r0x0001400076cb;\n        if (uVar22 < 0x10) goto code_r0x000140007692;\n    }\n    uVar24 = uVar22 >> 4;\n    uVar22 = uVar22 + uVar24 * -0x10;\n    do {\n        iVar19 = arg1 + *arg2;\n        iVar4 = iVar19 + arg2[1];\n        iVar5 = iVar4 + arg2[2];\n        iVar6 = iVar5 + arg2[3];\n        iVar7 = iVar6 + arg2[4];\n        iVar8 = iVar7 + arg2[5];\n        iVar9 = iVar8 + arg2[6];\n        iVar10 = iVar9 + arg2[7];\n        iVar11 = iVar10 + arg2[8];\n        iVar12 = iVar11 + arg2[9];\n        iVar13 = iVar12 + arg2[10];\n        iVar14 = iVar13 + arg2[0xb];\n        iVar15 = iVar14 + arg2[0xc];\n        iVar16 = iVar15 + arg2[0xd];\n        iVar17 = iVar16 + arg2[0xe];\n        puVar1 = arg2 + 0xf;\n        arg2 = arg2 + 0x10;\n        arg1._0_4_ = iVar17 + *puVar1;\n        uVar23 = uVar23 + iVar19 + iVar4 + iVar5 + iVar6 + iVar7 + iVar8 + iVar9 + iVar10 + iVar11 + iVar12 + iVar13 +\n                 iVar14 + iVar15 + iVar16 + iVar17 + arg1;\n        uVar24 = uVar24 - 1;\n    } while (uVar24 != 0);\n    for (; uVar22 != 0; uVar22 = uVar22 - 1) {\ncode_r0x000140007692:\n        uVar2 = *arg2;\n        arg2 = arg2 + 1;\n        arg1._0_4_ = arg1 + uVar2;\n        uVar23 = uVar23 + arg1;\n    }\n    arg1._0_4_ = arg1 % 0xfff1;\n    uVar23 = uVar23 % 0xfff1;\ncode_r0x0001400076cb:\n    return uVar23 << 0x10 | arg1;\n}\n",
        "token_count": 1531
    },
    "140007a2": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140007a20(ulong arg1, uint16_t *arg2, ulong arg3, int64_t *arg4)\n\n{\n    int64_t iVar1;\n    uint16_t uVar2;\n    code *pcVar3;\n    char cVar4;\n    uint8_t uVar5;\n    uint16_t *puVar6;\n    uint64_t uVar7;\n    uint64_t uVar8;\n    int64_t iVar9;\n    uint64_t uVar10;\n    uint32_t uVar11;\n    int32_t iVar12;\n    uint32_t uVar13;\n    uint32_t uVar14;\n    uint32_t uVar15;\n    uint64_t uVar16;\n    uint32_t uVar17;\n    int32_t iVar18;\n    uint32_t uVar19;\n    uint8_t uVar20;\n    uint64_t uVar21;\n    bool bVar22;\n    bool bVar23;\n    uint32_t *in_stack_00000028;\n    int64_t in_stack_00000030;\n    uchar auStack232 [32];\n    uint uStack200;\n    uint32_t uStack196;\n    uint32_t uStack192;\n    uint32_t uStack188;\n    uint32_t uStack184;\n    int32_t iStack180;\n    int64_t iStack176;\n    int64_t iStack168;\n    int64_t *piStack160;\n    uint16_t *puStack144;\n    uint16_t auStack128 [16];\n    uint16_t auStack96 [16];\n    uint64_t uStack64;\n    \n    uStack64 = *0x140034018 ^ auStack232;\n    uVar10 = 0;\n    uVar8 = arg3;\n    uVar16 = uVar10;\n    do {\n        iStack180 = arg1;\n        piStack160 = arg4;\n        puStack144 = arg2;\n        if (0x1f < uVar16 * 2) {\n            fcn.140008980();\n            pcVar3 = swi(3);\n            (*pcVar3)();\n            return;\n        }\n        uVar17 = uVar16 + 1;\n        auStack128[uVar16] = 0;\n        uVar16 = uVar17;\n    } while (uVar17 < 0x10);\n    puVar6 = arg2;\n    if (arg3 != 0) {\n        do {\n            auStack128[*puVar6] = auStack128[*puVar6] + 1;\n            uVar8 = uVar8 - 1;\n            puVar6 = puVar6 + 1;\n        } while (uVar8 != 0);\n    }\n    uVar17 = 0xd;\n    uVar16 = 0xf;\n    do {\n        uVar15 = uVar16;\n        uVar14 = 0xffffffff;\n        if (auStack128[uVar16] != 0) break;\n        if (auStack128[uVar17 + 1] != 0) {\n            uVar15 = uVar15 - 1;\n            break;\n        }\n        if (auStack128[uVar17] != 0) {\n            uVar15 = uVar15 - 2;\n            break;\n        }\n        if (auStack128[uVar17 - 1] != 0) {\n            uVar15 = uVar15 - 3;\n            break;\n        }\n        if (auStack128[uVar17 - 2] != 0) {\n            uVar15 = uVar15 - 4;\n            break;\n        }\n        uVar15 = uVar15 - 5;\n        uVar16 = uVar15;\n        uVar17 = uVar17 - 5;\n    } while (uVar15 != 0);\n    uVar17 = uVar15;\n    if (*in_stack_00000028 <= uVar15) {\n        uVar17 = *in_stack_00000028;\n    }\n    if (uVar15 == 0) {\n        uStack200 = 0x140;\n        **arg4 = 0x140;\n        *arg4 = *arg4 + 4;\n        **arg4 = 0x140;\n        *arg4 = *arg4 + 4;\n        *in_stack_00000028 = 1;\n        goto code_r0x000140007d10;\n    }\n    uVar19 = 1;\n    if (1 < uVar15) {\n        puVar6 = auStack128;\n        do {\n            puVar6 = puVar6 + 1;\n            if (*puVar6 != 0) break;\n            uVar19 = uVar19 + 1;\n        } while (uVar19 < uVar15);\n    }\n    uVar16 = 1;\n    uStack184 = uVar19;\n    if (uVar19 <= uVar17) {\n        uStack184 = uVar17;\n    }\n    iVar12 = 1;\n    do {\n        iVar12 = iVar12 * 2 - auStack128[uVar16];\n        if (iVar12 < 0) goto code_r0x000140007d10;\n        uVar17 = uVar16 + 1;\n        uVar16 = uVar17;\n    } while (uVar17 < 0x10);\n    if ((0 < iVar12) && ((arg1 == 0 || (uVar15 != 1)))) goto code_r0x000140007d10;\n    auStack96[1] = 0;\n    iVar9 = 0xe;\n    uVar16 = uVar10;\n    do {\n        *(auStack96 + uVar16 + 4) = *(auStack128 + uVar16 + 2) + *(auStack96 + uVar16 + 2);\n        uVar16 = uVar16 + 2;\n        iVar9 = iVar9 + -1;\n    } while (iVar9 != 0);\n    puVar6 = arg2;\n    if (arg3 != 0) {\n        do {\n            if (*puVar6 != 0) {\n                *(in_stack_00000030 + auStack96[*puVar6] * 2) = uVar10;\n                auStack96[*puVar6] = auStack96[*puVar6] + 1;\n            }\n            uVar17 = uVar10 + 1;\n            uVar10 = uVar17;\n            puVar6 = puVar6 + 1;\n        } while (uVar17 < arg3);\n    }\n    iVar9 = *arg4;\n    uVar17 = 1 << (uStack184 & 0x1f);\n    uVar16 = uVar17;\n    if (arg1 == 0) {\n        iStack176 = in_stack_00000030;\n        uStack196 = 0x14;\n        iStack168 = in_stack_00000030;\n        goto code_r0x000140007d93;\n    }\n    if (arg1 == 1) {\n        iStack168 = 0x140027d90;\n        iStack176 = 0x140027dd0;\n        uStack196 = 0x101;\ncode_r0x000140007d63:\n        if (uVar17 < 0x355) {\ncode_r0x000140007d93:\n            uStack192 = uVar17 - 1;\n            uVar7 = 0;\n            uStack188 = 0;\n            uVar8 = uVar7;\n            uVar10 = uVar16;\n            uVar21 = uVar7;\n            do {\n                cVar4 = uVar19;\n                uVar20 = uVar21;\n                uVar5 = cVar4 - uVar20;\n                uVar2 = *(in_stack_00000030 + uVar7 * 2);\n                if (uVar2 + 1 < uStack196) {\n                    uStack200 = uVar5 << 8;\n                    uStack200 = uStack200 | uVar2 << 0x10;\n                }\n                else {\n                    uStack200._1_3_ = uVar5;\n                    if (uVar2 < uStack196) {\n                        uStack200 = CONCAT31(uStack200._1_3_, 0x60);\n                    }\n                    else {\n                        iVar1 = (uVar2 - uStack196) * 2;\n                        uStack200 = CONCAT22(*(iVar1 + iStack168), CONCAT11(uVar5, *(iVar1 + iStack176)));\n                    }\n                }\n                uVar11 = uVar8;\n                iVar12 = 1 << (cVar4 - uVar20 & 0x1f);\n                uVar7 = (uVar11 >> (uVar20 & 0x1f)) + uVar10;\n                uVar8 = uVar10;\n                do {\n                    uVar7 = uVar7 - iVar12;\n                    *(iVar9 + uVar7 * 4) = uStack200;\n                    uVar13 = uVar8 - iVar12;\n                    uVar8 = uVar13;\n                } while (uVar13 != 0);\n                for (uVar13 = 1 << (cVar4 - 1U & 0x1f); (uVar11 & uVar13) != 0; uVar13 = uVar13 >> 1) {\n                }\n                if (uVar13 == 0) {\n                    uVar8 = 0;\n                }\n                else {\n                    uVar8 = (uVar11 & uVar13 - 1) + uVar13;\n                }\n                uStack188 = uStack188 + 1;\n                puVar6 = auStack128 + uVar19;\n                *puVar6 = *puVar6 - 1;\n                if (*puVar6 == 0) {\n                    if (uVar19 == uVar15) {\n                        if (uVar8 != 0) {\n                            uStack200 = CONCAT31(uStack200._1_3_, 0x40);\n                            uStack200 = uStack200 & 0xffff;\n                            *(iVar9 + uVar8 * 4) = uStack200;\n                        }\n                        *arg4 = *arg4 + uVar16 * 4;\n                        *in_stack_00000028 = uStack184;\n                        break;\n                    }\n                    uVar19 = arg2[*(in_stack_00000030 + uStack188 * 2)];\n                }\n                if (uStack184 < uVar19) {\n                    uVar11 = uStack192 & uVar8;\n                    if (uVar11 != uVar14) {\n                        iVar9 = iVar9 + uVar10 * 4;\n                        if (uVar21 == 0) {\n                            uVar21 = uStack184;\n                        }\n                        iVar18 = uVar19 - uVar21;\n                        uVar5 = iVar18;\n                        iVar12 = 1 << (uVar5 & 0x1f);\n                        for (uVar14 = uVar19; uVar14 < uVar15; uVar14 = uVar14 + 1) {\n                            uVar5 = iVar18;\n                            if (iVar12 - auStack128[uVar14] < 1) break;\n                            iVar18 = iVar18 + 1;\n                            uVar5 = iVar18;\n                            iVar12 = (iVar12 - auStack128[uVar14]) * 2;\n                        }\n                        uVar14 = 1 << (uVar5 & 0x1f);\n                        uVar10 = uVar14;\n                        uVar14 = uVar16 + uVar14;\n                        uVar16 = uVar14;\n                        if (arg1 == 1) {\n                            bVar22 = uVar14 < 0x354;\n                            bVar23 = uVar14 == 0x354;\ncode_r0x000140007f48:\n                            if (!bVar22 && !bVar23) break;\n                        }\n                        else if (arg1 == 2) {\n                            bVar22 = uVar14 < 0x250;\n                            bVar23 = uVar14 == 0x250;\n                            goto code_r0x000140007f48;\n                        }\n                        iVar1 = uVar11 * 4;\n                        *(iVar1 + *arg4) = uVar5;\n                        *(iVar1 + 1 + *arg4) = uStack184;\n                        *(*arg4 + 2 + iVar1) = iVar9 - *arg4 >> 2;\n                        uVar14 = uVar11;\n                    }\n                }\n                uVar7 = uStack188;\n            } while( true );\n        }\n    }\n    else {\n        uStack196 = 0;\n        iStack168 = 0x140027e10;\n        iStack176 = 0x140027e50;\n        if (arg1 == 1) goto code_r0x000140007d63;\n        if (arg1 != 2) {\ncode_r0x000140007d90:\n            iStack168 = 0x140027e10;\n            iStack176 = 0x140027e50;\n            uStack196 = 0;\n            goto code_r0x000140007d93;\n        }\n        iStack168 = 0x140027e10;\n        iStack176 = 0x140027e50;\n        uStack196 = 0;\n        if (uVar17 < 0x251) goto code_r0x000140007d90;\n    }\n    uStack192 = uVar17 - 1;\ncode_r0x000140007d10:\n    fcn.1400085e0(uStack64 ^ auStack232);\n    return;\n}\n",
        "token_count": 2973
    },
    "140007fe": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140007fe0(uint8_t **arg1, ulong arg2)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint uVar6;\n    uint8_t *puVar7;\n    uint8_t *puVar8;\n    int64_t iVar9;\n    uint8_t *puVar10;\n    int64_t iVar11;\n    char cVar12;\n    uint32_t uVar13;\n    uint32_t uVar14;\n    uint8_t *puVar15;\n    uint32_t uVar16;\n    uint64_t uVar17;\n    uint8_t *puVar18;\n    uint32_t uVar19;\n    uint32_t uVar20;\n    uint8_t *puVar21;\n    uint8_t *puVar22;\n    uint8_t *puVar23;\n    uint8_t *puVar24;\n    uint8_t *puVar25;\n    int64_t iVar26;\n    uint32_t uVar27;\n    uint32_t uVar28;\n    int32_t iVar29;\n    int32_t iStack88;\n    \n    puVar7 = arg1[5];\n    puVar8 = arg1[2];\n    puVar21 = *arg1;\n    iVar29 = *(arg1 + 3);\n    puVar15 = puVar21 + (*(arg1 + 1) - 5);\n    iVar9 = *(puVar7 + 0x68);\n    uVar2 = *(puVar7 + 0x3c);\n    puVar10 = *(puVar7 + 0x40);\n    uVar20 = *(puVar7 + 0x48);\n    uVar3 = *(puVar7 + 0x70);\n    uVar27 = *(puVar7 + 0x4c);\n    iVar11 = *(puVar7 + 0x60);\n    iStack88 = puVar8 - (arg2 - iVar29);\n    iVar4 = *(puVar7 + 0x34);\n    uVar5 = *(puVar7 + 0x38);\n    uVar6 = *(puVar7 + 0x74);\n    puVar23 = puVar8;\ncode_r0x000140008084:\n    if (uVar27 < 0xf) {\n        uVar20 = uVar20 + (*puVar21 << (uVar27 & 0x1f)) + (puVar21[1] << (uVar27 + 8 & 0x1f));\n        puVar21 = puVar21 + 2;\n        uVar27 = uVar27 + 0x10;\n    }\n    uVar19 = *(iVar11 + ((1 << (uVar3 & 0x1f)) - 1U & uVar20) * 4);\n    uVar16 = uVar19 >> 8 & 0xff;\n    uVar20 = uVar20 >> (uVar16 & 0x1f);\n    uVar27 = uVar27 - uVar16;\n    cVar12 = uVar19;\n    while (cVar12 != '\\0') {\n        uVar16 = uVar19 >> 0x10;\n        puVar25 = puVar23;\n        if ((uVar19 & 0x10) != 0) {\n            uVar19 = uVar19 & 0xf;\n            puVar22 = puVar21;\n            if (uVar19 != 0) {\n                if (uVar27 < uVar19) {\n                    uVar1 = *puVar21;\n                    puVar21 = puVar21 + 1;\n                    uVar20 = uVar20 + (uVar1 << (uVar27 & 0x1f));\n                    uVar27 = uVar27 + 8;\n                }\n                uVar13 = (1 << uVar19) - 1U & uVar20;\n                uVar20 = uVar20 >> uVar19;\n                uVar16 = uVar16 + uVar13;\n                uVar27 = uVar27 - uVar19;\n                puVar22 = puVar21;\n            }\n            if (uVar27 < 0xf) {\n                uVar20 = uVar20 + (*puVar22 << (uVar27 & 0x1f)) + (puVar22[1] << (uVar27 + 8 & 0x1f));\n                puVar22 = puVar22 + 2;\n                uVar27 = uVar27 + 0x10;\n            }\n            uVar19 = *(iVar9 + ((1 << (uVar6 & 0x1f)) - 1U & uVar20) * 4);\n            uVar13 = uVar19 >> 8 & 0xff;\n            uVar20 = uVar20 >> (uVar13 & 0x1f);\n            uVar27 = uVar27 - uVar13;\n            uVar13 = uVar19 & 0xff;\n            puVar21 = puVar22;\n            if ((uVar19 & 0x10) == 0) goto code_r0x000140008197;\n            goto code_r0x0001400081d3;\n        }\n        if ((uVar19 & 0x40) != 0) {\n            if ((uVar19 & 0x20) == 0) {\n                arg1[4] = \"invalid literal/length code\";\n                *(puVar7 + 8) = 0x3f51;\n            }\n            else {\n                *(puVar7 + 8) = 0x3f3f;\n            }\n            goto code_r0x000140008472;\n        }\n        uVar19 = *(iVar11 + (((1 << (uVar19 & 0x1f)) - 1U & uVar20) + (uVar19 >> 0x10)) * 4);\n        uVar16 = uVar19 >> 8 & 0xff;\n        uVar20 = uVar20 >> (uVar16 & 0x1f);\n        uVar27 = uVar27 - uVar16;\n        cVar12 = uVar19;\n    }\n    *puVar23 = uVar19 >> 0x10;\n    puVar25 = puVar23 + 1;\n    goto code_r0x0001400083eb;\n    while( true ) {\n        uVar19 = *(iVar9 + (((1 << (uVar13 & 0x1f)) - 1U & uVar20) + (uVar19 >> 0x10)) * 4);\n        uVar13 = uVar19 >> 8 & 0xff;\n        uVar20 = uVar20 >> (uVar13 & 0x1f);\n        uVar27 = uVar27 - uVar13;\n        uVar13 = uVar19 & 0xff;\n        if ((uVar19 & 0x10) != 0) break;\ncode_r0x000140008197:\n        if ((uVar13 & 0x40) != 0) {\n            arg1[4] = \"invalid distance code\";\n            *(puVar7 + 8) = 0x3f51;\n            goto code_r0x000140008472;\n        }\n    }\ncode_r0x0001400081d3:\n    uVar13 = uVar13 & 0xf;\n    uVar28 = uVar27;\n    if (uVar27 < uVar13) {\n        uVar28 = uVar27 + 8;\n        uVar20 = uVar20 + (*puVar22 << (uVar27 & 0x1f));\n        puVar21 = puVar22 + 1;\n        if (uVar28 < uVar13) {\n            uVar20 = uVar20 + (*puVar21 << (uVar28 & 0x1f));\n            puVar21 = puVar22 + 2;\n            uVar28 = uVar27 + 0x10;\n        }\n    }\n    uVar14 = puVar23 - iStack88;\n    uVar27 = uVar28 - uVar13;\n    uVar19 = ((1 << uVar13) - 1U & uVar20) + (uVar19 >> 0x10);\n    uVar20 = uVar20 >> uVar13;\n    if (uVar19 <= uVar14) {\n        puVar22 = puVar23 + -uVar19;\n        do {\n            puVar24 = puVar23;\n            puVar18 = puVar22;\n            *puVar24 = *puVar18;\n            uVar16 = uVar16 - 3;\n            puVar24[1] = puVar18[1];\n            puVar24[2] = puVar18[2];\n            puVar25 = puVar24 + 3;\n            puVar22 = puVar18 + 3;\n            puVar23 = puVar25;\n        } while (2 < uVar16);\n        if (uVar16 != 0) {\n            *puVar25 = puVar18[3];\n            puVar25 = puVar24 + 4;\n            if (1 < uVar16) {\n                puVar24[4] = puVar18[4];\n                puVar25 = puVar24 + 5;\n            }\n        }\n        goto code_r0x0001400083eb;\n    }\n    uVar14 = uVar19 - uVar14;\n    if ((uVar5 < uVar14) && (*(puVar7 + 0x1be0) != 0)) {\n        arg1[4] = \"invalid distance too far back\";\n        *(puVar7 + 8) = 0x3f51;\ncode_r0x000140008472:\n        arg1[2] = puVar25;\n        *(arg1 + 3) = ((puVar8 + (iVar29 - 0x101)) - puVar25) + 0x101;\n        *arg1 = puVar21 + -(uVar27 >> 3);\n        iVar29 = uVar27 - (uVar27 & 0xfffffff8);\n        *(arg1 + 1) = (puVar15 - (puVar21 + -(uVar27 >> 3))) + 5;\n        *(puVar7 + 0x4c) = iVar29;\n        *(puVar7 + 0x48) = (1 << (iVar29 & 0x1f)) - 1U & uVar20;\n        return;\n    }\n    if (uVar2 == 0) {\n        puVar22 = puVar10 + (iVar4 - uVar14);\n        if (uVar14 < uVar16) {\n            uVar16 = uVar16 - uVar14;\n            do {\n                uVar1 = *puVar22;\n                puVar22 = puVar22 + 1;\n                *puVar23 = uVar1;\n                puVar23 = puVar23 + 1;\n                uVar14 = uVar14 - 1;\n            } while (uVar14 != 0);\ncode_r0x000140008303:\n            puVar22 = puVar23 + -uVar19;\n        }\n    }\n    else if (uVar2 < uVar14) {\n        uVar13 = uVar14 - uVar2;\n        puVar22 = puVar10 + (iVar4 + (uVar2 - uVar14));\n        if (uVar13 < uVar16) {\n            uVar16 = uVar16 - uVar13;\n            iVar26 = (puVar10 + (iVar4 + (uVar2 - uVar14))) - puVar23;\n            do {\n                *puVar23 = puVar23[iVar26];\n                puVar23 = puVar23 + 1;\n                uVar13 = uVar13 - 1;\n            } while (uVar13 != 0);\n            puVar22 = puVar10;\n            if (uVar2 < uVar16) {\n                uVar16 = uVar16 - uVar2;\n                puVar25 = puVar10;\n                uVar13 = uVar2;\n                do {\n                    uVar1 = *puVar25;\n                    puVar25 = puVar25 + 1;\n                    *puVar23 = uVar1;\n                    puVar23 = puVar23 + 1;\n                    uVar13 = uVar13 - 1;\n                } while (uVar13 != 0);\n                goto code_r0x000140008303;\n            }\n        }\n    }\n    else {\n        puVar22 = puVar10 + (uVar2 - uVar14);\n        if (uVar14 < uVar16) {\n            uVar16 = uVar16 - uVar14;\n            do {\n                uVar1 = *puVar22;\n                puVar22 = puVar22 + 1;\n                *puVar23 = uVar1;\n                puVar23 = puVar23 + 1;\n                uVar14 = uVar14 - 1;\n            } while (uVar14 != 0);\n            goto code_r0x000140008303;\n        }\n    }\n    if (2 < uVar16) {\n        uVar17 = (uVar16 - 3) / 3 + 1;\n        do {\n            uVar16 = uVar16 - 3;\n            *puVar23 = *puVar22;\n            puVar23[1] = puVar22[1];\n            puVar25 = puVar22 + 2;\n            puVar22 = puVar22 + 3;\n            puVar23[2] = *puVar25;\n            puVar23 = puVar23 + 3;\n            uVar17 = uVar17 - 1;\n        } while (uVar17 != 0);\n    }\n    puVar25 = puVar23;\n    if (uVar16 != 0) {\n        *puVar23 = *puVar22;\n        puVar25 = puVar23 + 1;\n        if (1 < uVar16) {\n            puVar23[1] = puVar22[1];\n            puVar25 = puVar23 + 2;\n        }\n    }\ncode_r0x0001400083eb:\n    if ((puVar15 <= puVar21) || (puVar23 = puVar25,  puVar8 + (iVar29 - 0x101) <= puVar25)) goto code_r0x000140008472;\n    goto code_r0x000140008084;\n}\n",
        "token_count": 3182
    },
    "14000974": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuchar (*) [16] fcn.140009748(uchar (*arg1) [16], ulong arg2)\n\n{\n    uint16_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    char *pcVar5;\n    char *pcVar6;\n    uchar (*pauVar7) [16];\n    bool bVar8;\n    bool bVar9;\n    char cVar10;\n    char cVar12;\n    char cVar13;\n    char cVar14;\n    uchar auVar11 [16];\n    uchar in_XMM1 [16];\n    uchar auVar15 [16];\n    uint8_t uVar16;\n    \n    pauVar7 = NULL;\n    if (arg2 == 0) {\n        pcVar5 = arg1 & 0xfffffffffffffff0;\n        auVar11 = in_XMM1 & 0x0;\n        cVar10 = SUB161(auVar11 >> 0x40, 0);\n        cVar12 = SUB161(auVar11 >> 0x48, 0);\n        cVar13 = SUB161(auVar11 >> 0x50, 0);\n        cVar14 = SUB161(auVar11 >> 0x58, 0);\n        auVar11 = CONCAT115(-(pcVar5[0xf] == '\\0'), \n                            CONCAT114(-(pcVar5[0xe] == '\\0'), \n                                      CONCAT113(-(pcVar5[0xd] == '\\0'), \n                                                CONCAT112(-(pcVar5[0xc] == '\\0'), \n                                                          CONCAT111(-(pcVar5[0xb] == cVar14), \n                                                                    CONCAT110(-(pcVar5[10] == cVar13), \n                                                                              CONCAT19(-(pcVar5[9] == cVar12), \n                                                                                       CONCAT18(-(pcVar5[8] == cVar10), \n                                                                                                CONCAT17(-(pcVar5[7] ==\n                                                                                                          '\\0'), \n                                                            CONCAT16(-(pcVar5[6] == '\\0'), \n                                                                     CONCAT15(-(pcVar5[5] == '\\0'), \n                                                                              CONCAT14(-(pcVar5[4] == '\\0'), \n                                                                                       CONCAT13(-(pcVar5[3] == '\\0'), \n                                                                                                CONCAT12(-(pcVar5[2] ==\n                                                                                                          '\\0'), \n                                                            CONCAT11(-(pcVar5[1] == '\\0'), -(*pcVar5 == '\\0'))))))))))))\n                                                         ))));\n        uVar2 = (SUB161(auVar11 >> 7, 0) & 1 | (SUB161(auVar11 >> 0xf, 0) & 1) << 1 |\n                 (SUB161(auVar11 >> 0x17, 0) & 1) << 2 | (SUB161(auVar11 >> 0x1f, 0) & 1) << 3 |\n                 (SUB161(auVar11 >> 0x27, 0) & 1) << 4 | (SUB161(auVar11 >> 0x2f, 0) & 1) << 5 |\n                 (SUB161(auVar11 >> 0x37, 0) & 1) << 6 | (SUB161(auVar11 >> 0x3f, 0) & 1) << 7 |\n                 (SUB161(auVar11 >> 0x47, 0) & 1) << 8 | (SUB161(auVar11 >> 0x4f, 0) & 1) << 9 |\n                 (SUB161(auVar11 >> 0x57, 0) & 1) << 10 | (SUB161(auVar11 >> 0x5f, 0) & 1) << 0xb |\n                 (SUB161(auVar11 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar11 >> 0x6f, 0) & 1) << 0xd |\n                 (SUB161(auVar11 >> 0x77, 0) & 1) << 0xe | (-(pcVar5[0xf] == '\\0') >> 7) << 0xf) & -1 << (arg1 & 0xf);\n        pcVar6 = pcVar5;\n        if (uVar2 == 0) {\n            do {\n                pcVar5 = pcVar6 + 0x10;\n                auVar11 = CONCAT115(-(pcVar6[0x1f] == '\\0'), \n                                    CONCAT114(-(pcVar6[0x1e] == '\\0'), \n                                              CONCAT113(-(pcVar6[0x1d] == '\\0'), \n                                                        CONCAT112(-(pcVar6[0x1c] == '\\0'), \n                                                                  CONCAT111(-(pcVar6[0x1b] == cVar14), \n                                                                            CONCAT110(-(pcVar6[0x1a] == cVar13), \n                                                                                      CONCAT19(-(pcVar6[0x19] == cVar12)\n                                                                                               , CONCAT18(-(pcVar6[0x18]\n                                                                                                           == cVar10), \n                                                                                                          CONCAT17(-(\n                                                            pcVar6[0x17] == '\\0'), \n                                                            CONCAT16(-(pcVar6[0x16] == '\\0'), \n                                                                     CONCAT15(-(pcVar6[0x15] == '\\0'), \n                                                                              CONCAT14(-(pcVar6[0x14] == '\\0'), \n                                                                                       CONCAT13(-(pcVar6[0x13] == '\\0')\n                                                                                                , CONCAT12(-(pcVar6[0x12\n                                                            ] == '\\0'), \n                                                            CONCAT11(-(pcVar6[0x11] == '\\0'), -(*pcVar5 == '\\0')))))))))\n                                                            )))))));\n                uVar1 = SUB161(auVar11 >> 7, 0) & 1 | (SUB161(auVar11 >> 0xf, 0) & 1) << 1 |\n                        (SUB161(auVar11 >> 0x17, 0) & 1) << 2 | (SUB161(auVar11 >> 0x1f, 0) & 1) << 3 |\n                        (SUB161(auVar11 >> 0x27, 0) & 1) << 4 | (SUB161(auVar11 >> 0x2f, 0) & 1) << 5 |\n                        (SUB161(auVar11 >> 0x37, 0) & 1) << 6 | (SUB161(auVar11 >> 0x3f, 0) & 1) << 7 |\n                        (SUB161(auVar11 >> 0x47, 0) & 1) << 8 | (SUB161(auVar11 >> 0x4f, 0) & 1) << 9 |\n                        (SUB161(auVar11 >> 0x57, 0) & 1) << 10 | (SUB161(auVar11 >> 0x5f, 0) & 1) << 0xb |\n                        (SUB161(auVar11 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar11 >> 0x6f, 0) & 1) << 0xd |\n                        (SUB161(auVar11 >> 0x77, 0) & 1) << 0xe | (-(pcVar6[0x1f] == '\\0') >> 7) << 0xf;\n                uVar2 = uVar1;\n                pcVar6 = pcVar5;\n            } while (uVar1 == 0);\n        }\n        uVar4 = 0;\n        if (uVar2 != 0) {\n            for (; (uVar2 >> uVar4 & 1) == 0; uVar4 = uVar4 + 1) {\n            }\n        }\n        return pcVar5 + uVar4;\n    }\n    if (*0x140034028 < 2) {\n        pcVar5 = arg1 & 0xfffffffffffffff0;\n        auVar15 = pshuflw(in_XMM1, ZEXT416((arg2 & 0xff) << 8 | arg2 & 0xff), 0);\n        uVar2 = -1 << (arg1 & 0xf);\n        auVar11 = CONCAT115(-(pcVar5[0xf] == '\\0'), \n                            CONCAT114(-(pcVar5[0xe] == '\\0'), \n                                      CONCAT113(-(pcVar5[0xd] == '\\0'), \n                                                CONCAT112(-(pcVar5[0xc] == '\\0'), \n                                                          CONCAT111(-(pcVar5[0xb] == '\\0'), \n                                                                    CONCAT110(-(pcVar5[10] == '\\0'), \n                                                                              CONCAT19(-(pcVar5[9] == '\\0'), \n                                                                                       CONCAT18(-(pcVar5[8] == '\\0'), \n                                                                                                CONCAT17(-(pcVar5[7] ==\n                                                                                                          '\\0'), \n                                                            CONCAT16(-(pcVar5[6] == '\\0'), \n                                                                     CONCAT15(-(pcVar5[5] == '\\0'), \n                                                                              CONCAT14(-(pcVar5[4] == '\\0'), \n                                                                                       CONCAT13(-(pcVar5[3] == '\\0'), \n                                                                                                CONCAT12(-(pcVar5[2] ==\n                                                                                                          '\\0'), \n                                                            CONCAT11(-(pcVar5[1] == '\\0'), -(*pcVar5 == '\\0'))))))))))))\n                                                         ))));\n        cVar10 = SUB161(auVar15, 0);\n        cVar12 = SUB161(auVar15 >> 8, 0);\n        cVar13 = SUB161(auVar15 >> 0x10, 0);\n        cVar14 = SUB161(auVar15 >> 0x18, 0);\n        auVar15 = CONCAT115(-(cVar14 == pcVar5[0xf]), \n                            CONCAT114(-(cVar13 == pcVar5[0xe]), \n                                      CONCAT113(-(cVar12 == pcVar5[0xd]), \n                                                CONCAT112(-(cVar10 == pcVar5[0xc]), \n                                                          CONCAT111(-(cVar14 == pcVar5[0xb]), \n                                                                    CONCAT110(-(cVar13 == pcVar5[10]), \n                                                                              CONCAT19(-(cVar12 == pcVar5[9]), \n                                                                                       CONCAT18(-(cVar10 == pcVar5[8]), \n                                                                                                CONCAT17(-(cVar14 ==\n                                                                                                          pcVar5[7]), \n                                                                                                         CONCAT16(-(\n                                                            cVar13 == pcVar5[6]), \n                                                            CONCAT15(-(cVar12 == pcVar5[5]), \n                                                                     CONCAT14(-(cVar10 == pcVar5[4]), \n                                                                              CONCAT13(-(cVar14 == pcVar5[3]), \n                                                                                       CONCAT12(-(cVar13 == pcVar5[2]), \n                                                                                                CONCAT11(-(cVar12 ==\n                                                                                                          pcVar5[1]), \n                                                                                                         -(cVar10 ==\n                                                                                                          *pcVar5)))))))\n                                                            )))))))));\n        uVar4 = (SUB161(auVar15 >> 7, 0) & 1 | (SUB161(auVar15 >> 0xf, 0) & 1) << 1 |\n                 (SUB161(auVar15 >> 0x17, 0) & 1) << 2 | (SUB161(auVar15 >> 0x1f, 0) & 1) << 3 |\n                 (SUB161(auVar15 >> 0x27, 0) & 1) << 4 | (SUB161(auVar15 >> 0x2f, 0) & 1) << 5 |\n                 (SUB161(auVar15 >> 0x37, 0) & 1) << 6 | (SUB161(auVar15 >> 0x3f, 0) & 1) << 7 |\n                 (SUB161(auVar15 >> 0x47, 0) & 1) << 8 | (SUB161(auVar15 >> 0x4f, 0) & 1) << 9 |\n                 (SUB161(auVar15 >> 0x57, 0) & 1) << 10 | (SUB161(auVar15 >> 0x5f, 0) & 1) << 0xb |\n                 (SUB161(auVar15 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar15 >> 0x6f, 0) & 1) << 0xd |\n                 (SUB161(auVar15 >> 0x77, 0) & 1) << 0xe | (-(cVar14 == pcVar5[0xf]) >> 7) << 0xf) & uVar2;\n        uVar2 = (SUB161(auVar11 >> 7, 0) & 1 | (SUB161(auVar11 >> 0xf, 0) & 1) << 1 |\n                 (SUB161(auVar11 >> 0x17, 0) & 1) << 2 | (SUB161(auVar11 >> 0x1f, 0) & 1) << 3 |\n                 (SUB161(auVar11 >> 0x27, 0) & 1) << 4 | (SUB161(auVar11 >> 0x2f, 0) & 1) << 5 |\n                 (SUB161(auVar11 >> 0x37, 0) & 1) << 6 | (SUB161(auVar11 >> 0x3f, 0) & 1) << 7 |\n                 (SUB161(auVar11 >> 0x47, 0) & 1) << 8 | (SUB161(auVar11 >> 0x4f, 0) & 1) << 9 |\n                 (SUB161(auVar11 >> 0x57, 0) & 1) << 10 | (SUB161(auVar11 >> 0x5f, 0) & 1) << 0xb |\n                 (SUB161(auVar11 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar11 >> 0x6f, 0) & 1) << 0xd |\n                 (SUB161(auVar11 >> 0x77, 0) & 1) << 0xe | (-(pcVar5[0xf] == '\\0') >> 7) << 0xf) & uVar2;\n        pcVar6 = pcVar5;\n        if (uVar2 == 0) {\n            do {\n                uVar2 = 0x1f;\n                if (uVar4 != 0) {\n                    for (; uVar4 >> uVar2 == 0; uVar2 = uVar2 - 1) {\n                    }\n                }\n                if (uVar4 != 0) {\n                    pauVar7 = pcVar6 + uVar2;\n                }\n                pcVar5 = pcVar6 + 0x10;\n                auVar11 = ZEXT416(CONCAT13(-(pcVar6[0x13] == '\\0'), \n                                           CONCAT12(-(pcVar6[0x12] == '\\0'), \n                                                    CONCAT11(-(pcVar6[0x11] == '\\0'), -(*pcVar5 == '\\0'))))) &\n                          0xffffffffffffffff;\n                uVar16 = -(SUB161(auVar11 >> 0x78, 0) == pcVar6[0x1f]);\n                auVar15 = CONCAT115(uVar16, CONCAT114(-(SUB161(auVar11 >> 0x70, 0) == pcVar6[0x1e]), \n                                                      CONCAT113(-(SUB161(auVar11 >> 0x68, 0) == pcVar6[0x1d]), \n                                                                CONCAT112(-(SUB161(auVar11 >> 0x60, 0) == pcVar6[0x1c])\n                                                                          , CONCAT111(-(SUB161(auVar11 >> 0x58, 0) ==\n                                                                                       pcVar6[0x1b]), \n                                                                                      CONCAT110(-(SUB161(auVar11 >> 0x50\n                                                                                                         , 0) ==\n                                                                                                 pcVar6[0x1a]), \n                                                                                                CONCAT19(-(SUB161(\n                                                            auVar11 >> 0x48, 0) == pcVar6[0x19]), \n                                                            CONCAT18(-(SUB161(auVar11 >> 0x40, 0) == pcVar6[0x18]), \n                                                                     CONCAT17(-(pcVar6[0x17] == '\\0'), \n                                                                              CONCAT16(-(pcVar6[0x16] == '\\0'), \n                                                                                       CONCAT15(-(pcVar6[0x15] == '\\0')\n                                                                                                , CONCAT14(-(pcVar6[0x14\n                                                            ] == '\\0'), SUB164(auVar11, 0)))))))))))));\n                auVar11 = CONCAT115(-(cVar14 == pcVar6[0x1f]), \n                                    CONCAT114(-(cVar13 == pcVar6[0x1e]), \n                                              CONCAT113(-(cVar12 == pcVar6[0x1d]), \n                                                        CONCAT112(-(cVar10 == pcVar6[0x1c]), \n                                                                  CONCAT111(-(cVar14 == pcVar6[0x1b]), \n                                                                            CONCAT110(-(cVar13 == pcVar6[0x1a]), \n                                                                                      CONCAT19(-(cVar12 == pcVar6[0x19])\n                                                                                               , CONCAT18(-(cVar10 ==\n                                                                                                           pcVar6[0x18])\n                                                                                                          , CONCAT17(-(\n                                                            cVar14 == pcVar6[0x17]), \n                                                            CONCAT16(-(cVar13 == pcVar6[0x16]), \n                                                                     CONCAT15(-(cVar12 == pcVar6[0x15]), \n                                                                              CONCAT14(-(cVar10 == pcVar6[0x14]), \n                                                                                       CONCAT13(-(cVar14 == pcVar6[0x13]\n                                                                                                 ), CONCAT12(-(cVar13 ==\n                                                                                                              pcVar6[\n                                                            0x12]), CONCAT11(-(cVar12 == pcVar6[0x11]), \n                                                                             -(cVar10 == *pcVar5))))))))))))))));\n                uVar1 = SUB161(auVar15 >> 7, 0) & 1 | (SUB161(auVar15 >> 0xf, 0) & 1) << 1 |\n                        (SUB161(auVar15 >> 0x17, 0) & 1) << 2 | (SUB161(auVar15 >> 0x1f, 0) & 1) << 3 |\n                        (SUB161(auVar15 >> 0x27, 0) & 1) << 4 | (SUB161(auVar15 >> 0x2f, 0) & 1) << 5 |\n                        (SUB161(auVar15 >> 0x37, 0) & 1) << 6 | (SUB161(auVar15 >> 0x3f, 0) & 1) << 7 |\n                        (SUB161(auVar15 >> 0x47, 0) & 1) << 8 | (SUB161(auVar15 >> 0x4f, 0) & 1) << 9 |\n                        (SUB161(auVar15 >> 0x57, 0) & 1) << 10 | (SUB161(auVar15 >> 0x5f, 0) & 1) << 0xb |\n                        (SUB161(auVar15 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar15 >> 0x6f, 0) & 1) << 0xd |\n                        (SUB161(auVar15 >> 0x77, 0) & 1) << 0xe | (uVar16 >> 7) << 0xf;\n                uVar2 = uVar1;\n                uVar4 = SUB161(auVar11 >> 7, 0) & 1 | (SUB161(auVar11 >> 0xf, 0) & 1) << 1 |\n                        (SUB161(auVar11 >> 0x17, 0) & 1) << 2 | (SUB161(auVar11 >> 0x1f, 0) & 1) << 3 |\n                        (SUB161(auVar11 >> 0x27, 0) & 1) << 4 | (SUB161(auVar11 >> 0x2f, 0) & 1) << 5 |\n                        (SUB161(auVar11 >> 0x37, 0) & 1) << 6 | (SUB161(auVar11 >> 0x3f, 0) & 1) << 7 |\n                        (SUB161(auVar11 >> 0x47, 0) & 1) << 8 | (SUB161(auVar11 >> 0x4f, 0) & 1) << 9 |\n                        (SUB161(auVar11 >> 0x57, 0) & 1) << 10 | (SUB161(auVar11 >> 0x5f, 0) & 1) << 0xb |\n                        (SUB161(auVar11 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar11 >> 0x6f, 0) & 1) << 0xd |\n                        (SUB161(auVar11 >> 0x77, 0) & 1) << 0xe | (-(cVar14 == pcVar6[0x1f]) >> 7) << 0xf;\n                pcVar6 = pcVar5;\n            } while (uVar1 == 0);\n        }\n        uVar4 = uVar4 & (-uVar2 & uVar2) - 1;\n        uVar2 = 0x1f;\n        if (uVar4 != 0) {\n            for (; uVar4 >> uVar2 == 0; uVar2 = uVar2 - 1) {\n            }\n        }\n        if (uVar4 != 0) {\n            pauVar7 = pcVar5 + uVar2;\n        }\n    }\n    else {\n        while( true ) {\n            bVar8 = false;\n            bVar9 = (arg1 & 0xf) == 0;\n            if (bVar9) break;\n            if ((*arg1)[0] == arg2) {\n                pauVar7 = arg1;\n            }\n            if ((*arg1)[0] == '\\0') {\n                return pauVar7;\n            }\n            arg1 = *arg1 + 1;\n        }\n        while( true ) {\n            iVar3 = pcmpistri(ZEXT416(arg2 & 0xff), *arg1, 0x40);\n            if (bVar8) {\n                pauVar7 = *arg1 + iVar3;\n                bVar9 = pauVar7 == NULL;\n                pcmpistri(ZEXT416(arg2 & 0xff), *arg1, 0x40);\n            }\n            if (bVar9) break;\n            bVar8 = 0xffffffffffffffef < arg1;\n            arg1 = arg1[1];\n            bVar9 = arg1 == NULL;\n        }\n    }\n    return pauVar7;\n}\n",
        "token_count": 5225
    },
    "14000ab4": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.14000ab40(int64_t *arg1)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    uint *puVar3;\n    int64_t arg2;\n    uint64_t uVar4;\n    int64_t iVar5;\n    uint64_t arg3;\n    \n    if (arg1 == NULL) {\n        puVar3 = fcn.140014204(0);\n        *puVar3 = 0x16;\n        fcn.1400140e4();\n    }\n    else {\n        uVar2 = fcn.140013370(arg1);\n        if (*(arg1 + 2) < 0) {\n            *(arg1 + 2) = 0;\n        }\n        arg2 = fcn.1400154f8(uVar2 & 0xffffffff, 0, 1);\n        if (-1 < arg2) {\n            if ((*(arg1 + 0x14) & 0xc0) == 0) {\n                return arg2 - *(arg1 + 2);\n            }\n            uVar4 = uVar2 & 0x3f;\n            iVar5 = uVar2 >> 6;\n            arg3 = *arg1 - arg1[1];\n            cVar1 = *(*(iVar5 * 8 + 0x1400437a0) + 0x39 + uVar4 * 0x48);\n            if ((*(arg1 + 0x14) & 3) == 0) {\n                if ((*(arg1 + 0x14) >> 2 & 1) == 0) {\n                    puVar3 = fcn.140014204(iVar5);\n                    *puVar3 = 0x16;\n                    return 0xffffffffffffffff;\n                }\n            }\n            else {\n                if ((cVar1 == '\\x01') && ((*(*(iVar5 * 8 + 0x1400437a0) + 0x3d + uVar4 * 0x48) & 2) != 0)) {\n                    uVar4 = fcn.14000adbc(arg1, arg2);\n                    return uVar4;\n                }\n                if (*(*(iVar5 * 8 + 0x1400437a0) + 0x38 + uVar4 * 0x48) < '\\0') {\n                    iVar5 = fcn.14000af38(arg1[1], *arg1);\n                    arg3 = arg3 + iVar5;\n                }\n            }\n            if (arg2 == 0) {\n                return arg3;\n            }\n            if ((*(arg1 + 0x14) & 1) == 0) {\n                if (cVar1 == '\\x01') {\n                    arg3 = arg3 >> 1;\n                }\n                return arg3 + arg2;\n            }\n            uVar4 = fcn.14000ac70(arg1, arg2, arg3);\n            return uVar4;\n        }\n    }\n    return 0xffffffffffffffff;\n}\n",
        "token_count": 658
    },
    "14000c97": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.14000c97c(int64_t arg1)\n\n{\n    uchar uVar1;\n    int64_t iVar2;\n    char cVar3;\n    uint *puVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    \n    iVar6 = arg1;\n    cVar3 = fcn.14000ca94(arg1);\n    if (cVar3 == '\\0') {\n        puVar4 = fcn.140014204(iVar6);\n        *puVar4 = 0x16;\n        uVar5 = fcn.1400140e4();\n        uVar5 = uVar5 & 0xffffffffffffff00;\n    }\n    else {\n        iVar6 = *(arg1 + 0x468);\n        uVar1 = *(arg1 + 0x41);\n        iVar2 = *(iVar6 + 8);\n        if (*(iVar6 + 0x10) == iVar2) {\n            if (*(iVar6 + 0x18) == '\\0') {\n                *(arg1 + 0x28) = 0xffffffff;\n            }\n            else {\n                *(arg1 + 0x28) = *(arg1 + 0x28) + 1;\n            }\n        }\n        else {\n            *(arg1 + 0x28) = *(arg1 + 0x28) + 1;\n            *(iVar6 + 0x10) = *(iVar6 + 0x10) + 1;\n            ***(arg1 + 0x468) = uVar1;\n            **(arg1 + 0x468) = **(arg1 + 0x468) + 1;\n        }\n        uVar5 = CONCAT71(iVar2 >> 8, 1);\n    }\n    return uVar5;\n}\n",
        "token_count": 393
    },
    "14000cb3": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.14000cb3c(uint8_t *arg1)\n\n{\n    int32_t *arg4;\n    int64_t *arg1_00;\n    uint8_t uVar1;\n    char cVar2;\n    uint32_t uVar3;\n    char *pcVar4;\n    bool bVar5;\n    uint64_t in_RAX;\n    uint *puVar6;\n    uint64_t uVar7;\n    char *pcVar8;\n    ulong uVar9;\n    ushort *noname_1;\n    uint32_t uVar10;\n    uchar uVar11;\n    int64_t arg3;\n    ushort uStackX8;\n    uchar uStackX10;\n    \n    uVar1 = arg1[0x41];\n    pcVar8 = in_RAX & 0xffffffffffffff00;\n    if (uVar1 != 0x46) {\n        if (uVar1 == 0x4e) {\n            if ((*arg1 & 8) != 0) goto code_r0x00014000cca6;\n            *(arg1 + 0x2c) = 8;\n        }\n        else if (*(arg1 + 0x3c) == 0) {\n            if (uVar1 == 0x49) {\n                pcVar4 = *(arg1 + 0x18);\n                cVar2 = *pcVar4;\n                if ((cVar2 == '3') && (pcVar4[1] == '2')) {\n                    pcVar8 = pcVar4 + 2;\n                    *(arg1 + 0x3c) = 10;\n                    *(arg1 + 0x18) = pcVar8;\n                }\n                else if ((cVar2 == '6') && (pcVar4[1] == '4')) {\n                    pcVar8 = pcVar4 + 2;\n                    *(arg1 + 0x3c) = 0xb;\n                    *(arg1 + 0x18) = pcVar8;\n                }\n                else if ((cVar2 + 0xa8U < 0x21) && (pcVar8 = cVar2 + 0xa8U,  (0x120821001U >> (pcVar8 & 0x3f) & 1) != 0)\n                        ) {\n                    *(arg1 + 0x3c) = 9;\n                }\n            }\n            else if (uVar1 == 0x4c) {\n                *(arg1 + 0x3c) = 8;\n            }\n            else if (uVar1 == 0x54) {\n                *(arg1 + 0x3c) = 0xd;\n            }\n            else {\n                if (uVar1 == 0x68) {\n                    if (**(arg1 + 0x18) == 'h') {\n                        *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n                        pcVar8 = 0x1;\n                    }\n                    else {\n                        pcVar8 = 0x2;\n                    }\n                }\n                else {\n                    if (uVar1 == 0x6a) {\n                        *(arg1 + 0x3c) = 5;\n                        goto code_r0x00014000cca6;\n                    }\n                    if (uVar1 != 0x6c) {\n                        if (uVar1 == 0x74) {\n                            *(arg1 + 0x3c) = 7;\n                        }\n                        else if (uVar1 == 0x77) {\n                            *(arg1 + 0x3c) = 0xc;\n                        }\n                        else if (uVar1 == 0x7a) {\n                            *(arg1 + 0x3c) = 6;\n                        }\n                        goto code_r0x00014000cca6;\n                    }\n                    if (**(arg1 + 0x18) == 'l') {\n                        *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n                        pcVar8 = 0x4;\n                    }\n                    else {\n                        pcVar8 = 0x3;\n                    }\n                }\n                *(arg1 + 0x3c) = pcVar8;\n            }\ncode_r0x00014000cca6:\n            return CONCAT71(pcVar8 >> 8, 1);\n        }\n        puVar6 = fcn.140014204(arg1);\n        *puVar6 = 0x16;\n        uVar7 = fcn.1400140e4();\n        return uVar7 & 0xffffffffffffff00;\n    }\n    if ((*arg1 & 8) != 0) goto code_r0x00014000cca6;\n    *(arg1 + 0x2c) = 7;\n    uVar1 = arg1[0x41];\n    uVar11 = 0x78;\n    if (uVar1 < 'e') {\n        if (uVar1 == 100) {\ncode_r0x00014000d0af:\n            *(arg1 + 0x30) = *(arg1 + 0x30) | 0x10;\ncode_r0x00014000d0b3:\n            uVar9 = 10;\ncode_r0x00014000d0bb:\n            pcVar8 = fcn.14000de1c(arg1, uVar9);\n        }\n        else {\n            if (uVar1 == 0x41) goto code_r0x00014000d0c2;\n            if (uVar1 == 0x43) {\ncode_r0x00014000d02d:\n                pcVar8 = fcn.14000dcb8(arg1);\n            }\n            else {\n                if (uVar1 < 'E') goto code_r0x00014000d0cb;\n                if (uVar1 < 'H') goto code_r0x00014000d0c2;\n                if (uVar1 == 0x53) {\ncode_r0x00014000d06b:\n                    pcVar8 = fcn.14000e28c(arg1);\n                }\n                else {\n                    if (uVar1 == 0x58) goto code_r0x00014000d080;\n                    if (uVar1 != 0x5a) {\n                        if (uVar1 != 0x61) {\n                            if (uVar1 != 99) goto code_r0x00014000d0cb;\n                            goto code_r0x00014000d02d;\n                        }\n                        goto code_r0x00014000d0c2;\n                    }\n                    pcVar8 = fcn.14000d774(arg1);\n                }\n            }\n        }\n    }\n    else {\n        if ('g' < uVar1) {\n            if (uVar1 == 0x69) goto code_r0x00014000d0af;\n            if (uVar1 == 0x6e) {\n                pcVar8 = fcn.14000e1b0(arg1);\n                goto code_r0x00014000d0c7;\n            }\n            if (uVar1 == 0x6f) {\n                if ((*(arg1 + 0x30) >> 5 & 1) != 0) {\n                    *(arg1 + 0x30) = *(arg1 + 0x30) | 0x80;\n                }\n                uVar9 = 8;\n            }\n            else if (uVar1 == 0x70) {\n                *(arg1 + 0x38) = 0x10;\n                *(arg1 + 0x3c) = 0xb;\ncode_r0x00014000d080:\n                uVar9 = 0x10;\n            }\n            else {\n                if (uVar1 == 0x73) goto code_r0x00014000d06b;\n                if (uVar1 == 0x75) goto code_r0x00014000d0b3;\n                if (uVar1 != 0x78) goto code_r0x00014000d0cb;\n                uVar9 = 0x10;\n            }\n            goto code_r0x00014000d0bb;\n        }\ncode_r0x00014000d0c2:\n        pcVar8 = fcn.14000d864(arg1);\n    }\ncode_r0x00014000d0c7:\n    if (pcVar8 == '\\0') {\ncode_r0x00014000d0cb:\n        return pcVar8 & 0xffffffffffffff00;\n    }\n    if (arg1[0x40] != 0) goto code_r0x00014000d224;\n    uVar3 = *(arg1 + 0x30);\n    noname_1 = uVar3;\n    uStackX8 = 0;\n    arg3 = 0;\n    uStackX10 = 0;\n    if ((uVar3 >> 4 & 1) != 0) {\n        if ((uVar3 >> 6 & 1) == 0) {\n            if ((uVar3 & 1) == 0) {\n                if ((uVar3 >> 1 & 1) == 0) goto code_r0x00014000d124;\n                uStackX8 = 0x20;\n            }\n            else {\n                uStackX8 = 0x2b;\n            }\n        }\n        else {\n            uStackX8 = 0x2d;\n        }\n        arg3 = 1;\n    }\ncode_r0x00014000d124:\n    uVar1 = arg1[0x41];\n    if (((uVar1 + 0xa8 & 0xdf) == 0) && ((uVar3 >> 5 & 1) != 0)) {\n        bVar5 = true;\n    }\n    else {\n        bVar5 = false;\n    }\n    if ((bVar5) || ((uVar1 + 0xbf & 0xdf) == 0)) {\n        *(&uStackX8 + arg3) = 0x30;\n        if ((uVar1 == 0x58) || (uVar1 == 0x41)) {\n            uVar11 = 0x58;\n        }\n        *(&uStackX8 + arg3 + 1) = uVar11;\n        arg3 = arg3 + 2;\n    }\n    uVar10 = (*(arg1 + 0x34) - *(arg1 + 0x50)) - arg3;\n    if ((uVar3 & 0xc) == 0) {\n        noname_1 = CONCAT71(uVar3 >> 8, 0x20);\n        fcn.14000bd6c(arg1 + 0x468, noname_1, uVar10, arg1 + 0x28);\n    }\n    arg1_00 = arg1 + 0x468;\n    arg4 = arg1 + 0x28;\n    if (((*(*arg1_00 + 0x14) >> 0xc & 1) == 0) || (*(*arg1_00 + 8) != 0)) {\n        noname_1 = &uStackX8;\n        fcn.14000e8bc(arg1_00, noname_1, arg3, arg4);\n    }\n    else {\n        *arg4 = *arg4 + arg3;\n    }\n    if (((*(arg1 + 0x30) >> 3 & 1) != 0) && ((*(arg1 + 0x30) >> 2 & 1) == 0)) {\n        fcn.14000bd6c(arg1_00, CONCAT71(noname_1 >> 8, 0x30), uVar10, arg4);\n    }\n    uVar9 = 0;\n    pcVar8 = fcn.14000e488(arg1);\n    if ((-1 < *arg4) && ((*(arg1 + 0x30) >> 2 & 1) != 0)) {\n        pcVar8 = fcn.14000bd6c(arg1_00, CONCAT71(uVar9 >> 8, 0x20), uVar10, arg4);\n    }\ncode_r0x00014000d224:\n    return pcVar8 & 0xffffffffffffff00 | 1;\n}\n",
        "token_count": 2713
    },
    "14000cfb": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.14000cfbc(int64_t arg1)\n\n{\n    int32_t *arg4;\n    int64_t *arg1_00;\n    char cVar1;\n    uint32_t uVar2;\n    bool bVar3;\n    uint64_t in_RAX;\n    uint64_t uVar4;\n    ulong uVar5;\n    ushort *noname_1;\n    uint32_t uVar6;\n    uchar uVar7;\n    int64_t arg3;\n    ushort uStackX8;\n    uchar uStackX10;\n    \n    cVar1 = *(arg1 + 0x41);\n    uVar4 = in_RAX & 0xffffffffffffff00;\n    uVar7 = 0x78;\n    if (cVar1 < 'e') {\n        if (cVar1 == 'd') {\ncode_r0x00014000d0af:\n            *(arg1 + 0x30) = *(arg1 + 0x30) | 0x10;\ncode_r0x00014000d0b3:\n            uVar5 = 10;\ncode_r0x00014000d0bb:\n            uVar4 = fcn.14000de1c(arg1, uVar5);\n        }\n        else {\n            if (cVar1 == 'A') goto code_r0x00014000d0c2;\n            if (cVar1 == 'C') {\ncode_r0x00014000d02d:\n                uVar4 = fcn.14000dcb8(arg1);\n            }\n            else {\n                if (cVar1 < 'E') goto code_r0x00014000d0cb;\n                if (cVar1 < 'H') goto code_r0x00014000d0c2;\n                if (cVar1 == 'S') {\ncode_r0x00014000d06b:\n                    uVar4 = fcn.14000e28c(arg1);\n                }\n                else {\n                    if (cVar1 == 'X') goto code_r0x00014000d080;\n                    if (cVar1 != 'Z') {\n                        if (cVar1 != 'a') {\n                            if (cVar1 != 'c') goto code_r0x00014000d0cb;\n                            goto code_r0x00014000d02d;\n                        }\n                        goto code_r0x00014000d0c2;\n                    }\n                    uVar4 = fcn.14000d774(arg1);\n                }\n            }\n        }\n    }\n    else {\n        if ('g' < cVar1) {\n            if (cVar1 == 'i') goto code_r0x00014000d0af;\n            if (cVar1 == 'n') {\n                uVar4 = fcn.14000e1b0(arg1);\n                goto code_r0x00014000d0c7;\n            }\n            if (cVar1 == 'o') {\n                if ((*(arg1 + 0x30) >> 5 & 1) != 0) {\n                    *(arg1 + 0x30) = *(arg1 + 0x30) | 0x80;\n                }\n                uVar5 = 8;\n            }\n            else if (cVar1 == 'p') {\n                *(arg1 + 0x38) = 0x10;\n                *(arg1 + 0x3c) = 0xb;\ncode_r0x00014000d080:\n                uVar5 = 0x10;\n            }\n            else {\n                if (cVar1 == 's') goto code_r0x00014000d06b;\n                if (cVar1 == 'u') goto code_r0x00014000d0b3;\n                if (cVar1 != 'x') goto code_r0x00014000d0cb;\n                uVar5 = 0x10;\n            }\n            goto code_r0x00014000d0bb;\n        }\ncode_r0x00014000d0c2:\n        uVar4 = fcn.14000d864(arg1);\n    }\ncode_r0x00014000d0c7:\n    if (uVar4 == '\\0') {\ncode_r0x00014000d0cb:\n        return uVar4 & 0xffffffffffffff00;\n    }\n    if (*(arg1 + 0x40) != '\\0') goto code_r0x00014000d224;\n    uVar2 = *(arg1 + 0x30);\n    noname_1 = uVar2;\n    uStackX8 = 0;\n    arg3 = 0;\n    uStackX10 = 0;\n    if ((uVar2 >> 4 & 1) != 0) {\n        if ((uVar2 >> 6 & 1) == 0) {\n            if ((uVar2 & 1) == 0) {\n                if ((uVar2 >> 1 & 1) == 0) goto code_r0x00014000d124;\n                uStackX8 = 0x20;\n            }\n            else {\n                uStackX8 = 0x2b;\n            }\n        }\n        else {\n            uStackX8 = 0x2d;\n        }\n        arg3 = 1;\n    }\ncode_r0x00014000d124:\n    cVar1 = *(arg1 + 0x41);\n    if (((cVar1 + 0xa8U & 0xdf) == 0) && ((uVar2 >> 5 & 1) != 0)) {\n        bVar3 = true;\n    }\n    else {\n        bVar3 = false;\n    }\n    if ((bVar3) || ((cVar1 + 0xbfU & 0xdf) == 0)) {\n        *(&uStackX8 + arg3) = 0x30;\n        if ((cVar1 == 'X') || (cVar1 == 'A')) {\n            uVar7 = 0x58;\n        }\n        *(&uStackX8 + arg3 + 1) = uVar7;\n        arg3 = arg3 + 2;\n    }\n    uVar6 = (*(arg1 + 0x34) - *(arg1 + 0x50)) - arg3;\n    if ((uVar2 & 0xc) == 0) {\n        noname_1 = CONCAT71(uVar2 >> 8, 0x20);\n        fcn.14000bd6c(arg1 + 0x468, noname_1, uVar6, arg1 + 0x28);\n    }\n    arg1_00 = arg1 + 0x468;\n    arg4 = arg1 + 0x28;\n    if (((*(*arg1_00 + 0x14) >> 0xc & 1) == 0) || (*(*arg1_00 + 8) != 0)) {\n        noname_1 = &uStackX8;\n        fcn.14000e8bc(arg1_00, noname_1, arg3, arg4);\n    }\n    else {\n        *arg4 = *arg4 + arg3;\n    }\n    if (((*(arg1 + 0x30) >> 3 & 1) != 0) && ((*(arg1 + 0x30) >> 2 & 1) == 0)) {\n        fcn.14000bd6c(arg1_00, CONCAT71(noname_1 >> 8, 0x30), uVar6, arg4);\n    }\n    uVar5 = 0;\n    uVar4 = fcn.14000e488(arg1);\n    if ((-1 < *arg4) && ((*(arg1 + 0x30) >> 2 & 1) != 0)) {\n        uVar4 = fcn.14000bd6c(arg1_00, CONCAT71(uVar5 >> 8, 0x20), uVar6, arg4);\n    }\ncode_r0x00014000d224:\n    return uVar4 & 0xffffffffffffff00 | 1;\n}\n",
        "token_count": 1776
    },
    "14000ccb": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.14000ccb0(uint8_t *arg1)\n\n{\n    int32_t *arg4;\n    uint8_t *arg1_00;\n    uint8_t uVar1;\n    char cVar2;\n    uint32_t uVar3;\n    char *pcVar4;\n    bool bVar5;\n    uint64_t in_RAX;\n    uint *puVar6;\n    uint64_t uVar7;\n    char *pcVar8;\n    ulong uVar9;\n    ushort *arg2;\n    uchar uVar10;\n    uint32_t uVar11;\n    int64_t arg3;\n    ushort uStackX8;\n    uchar uStackX10;\n    \n    uVar1 = arg1[0x41];\n    pcVar8 = in_RAX & 0xffffffffffffff00;\n    if (uVar1 != 0x46) {\n        if (uVar1 == 0x4e) {\n            if ((*arg1 & 8) != 0) goto code_r0x00014000ce1a;\n            *(arg1 + 0x2c) = 8;\n        }\n        else if (*(arg1 + 0x3c) == 0) {\n            if (uVar1 == 0x49) {\n                pcVar4 = *(arg1 + 0x18);\n                cVar2 = *pcVar4;\n                if ((cVar2 == '3') && (pcVar4[1] == '2')) {\n                    pcVar8 = pcVar4 + 2;\n                    *(arg1 + 0x3c) = 10;\n                    *(arg1 + 0x18) = pcVar8;\n                }\n                else if ((cVar2 == '6') && (pcVar4[1] == '4')) {\n                    pcVar8 = pcVar4 + 2;\n                    *(arg1 + 0x3c) = 0xb;\n                    *(arg1 + 0x18) = pcVar8;\n                }\n                else if ((cVar2 + 0xa8U < 0x21) && (pcVar8 = cVar2 + 0xa8U,  (0x120821001U >> (pcVar8 & 0x3f) & 1) != 0)\n                        ) {\n                    *(arg1 + 0x3c) = 9;\n                }\n            }\n            else if (uVar1 == 0x4c) {\n                *(arg1 + 0x3c) = 8;\n            }\n            else if (uVar1 == 0x54) {\n                *(arg1 + 0x3c) = 0xd;\n            }\n            else {\n                if (uVar1 == 0x68) {\n                    if (**(arg1 + 0x18) == 'h') {\n                        *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n                        pcVar8 = 0x1;\n                    }\n                    else {\n                        pcVar8 = 0x2;\n                    }\n                }\n                else {\n                    if (uVar1 == 0x6a) {\n                        *(arg1 + 0x3c) = 5;\n                        goto code_r0x00014000ce1a;\n                    }\n                    if (uVar1 != 0x6c) {\n                        if (uVar1 == 0x74) {\n                            *(arg1 + 0x3c) = 7;\n                        }\n                        else if (uVar1 == 0x77) {\n                            *(arg1 + 0x3c) = 0xc;\n                        }\n                        else if (uVar1 == 0x7a) {\n                            *(arg1 + 0x3c) = 6;\n                        }\n                        goto code_r0x00014000ce1a;\n                    }\n                    if (**(arg1 + 0x18) == 'l') {\n                        *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n                        pcVar8 = 0x4;\n                    }\n                    else {\n                        pcVar8 = 0x3;\n                    }\n                }\n                *(arg1 + 0x3c) = pcVar8;\n            }\ncode_r0x00014000ce1a:\n            return CONCAT71(pcVar8 >> 8, 1);\n        }\n        puVar6 = fcn.140014204(arg1);\n        *puVar6 = 0x16;\n        uVar7 = fcn.1400140e4();\n        return uVar7 & 0xffffffffffffff00;\n    }\n    if ((*arg1 & 8) != 0) goto code_r0x00014000ce1a;\n    *(arg1 + 0x2c) = 7;\n    uVar1 = arg1[0x41];\n    uVar10 = 0x78;\n    if (uVar1 < 'e') {\n        if (uVar1 == 100) {\ncode_r0x00014000d333:\n            *(arg1 + 0x30) = *(arg1 + 0x30) | 0x10;\ncode_r0x00014000d337:\n            uVar9 = 10;\ncode_r0x00014000d33f:\n            pcVar8 = fcn.14000de1c(arg1, uVar9);\n        }\n        else {\n            if (uVar1 == 0x41) goto code_r0x00014000d346;\n            if (uVar1 == 0x43) {\ncode_r0x00014000d2b1:\n                pcVar8 = fcn.14000dcb8(arg1);\n            }\n            else {\n                if (uVar1 < 'E') goto code_r0x00014000d34f;\n                if (uVar1 < 'H') goto code_r0x00014000d346;\n                if (uVar1 == 0x53) {\ncode_r0x00014000d2ef:\n                    pcVar8 = fcn.14000e28c(arg1);\n                }\n                else {\n                    if (uVar1 == 0x58) goto code_r0x00014000d304;\n                    if (uVar1 != 0x5a) {\n                        if (uVar1 != 0x61) {\n                            if (uVar1 != 99) goto code_r0x00014000d34f;\n                            goto code_r0x00014000d2b1;\n                        }\n                        goto code_r0x00014000d346;\n                    }\n                    pcVar8 = fcn.14000d774(arg1);\n                }\n            }\n        }\n    }\n    else {\n        if ('g' < uVar1) {\n            if (uVar1 == 0x69) goto code_r0x00014000d333;\n            if (uVar1 == 0x6e) {\n                pcVar8 = fcn.14000e1b0(arg1);\n                goto code_r0x00014000d34b;\n            }\n            if (uVar1 == 0x6f) {\n                if ((*(arg1 + 0x30) >> 5 & 1) != 0) {\n                    *(arg1 + 0x30) = *(arg1 + 0x30) | 0x80;\n                }\n                uVar9 = 8;\n            }\n            else if (uVar1 == 0x70) {\n                *(arg1 + 0x38) = 0x10;\n                *(arg1 + 0x3c) = 0xb;\ncode_r0x00014000d304:\n                uVar9 = 0x10;\n            }\n            else {\n                if (uVar1 == 0x73) goto code_r0x00014000d2ef;\n                if (uVar1 == 0x75) goto code_r0x00014000d337;\n                if (uVar1 != 0x78) goto code_r0x00014000d34f;\n                uVar9 = 0x10;\n            }\n            goto code_r0x00014000d33f;\n        }\ncode_r0x00014000d346:\n        pcVar8 = fcn.14000d864(arg1);\n    }\ncode_r0x00014000d34b:\n    if (pcVar8 == '\\0') {\ncode_r0x00014000d34f:\n        return pcVar8 & 0xffffffffffffff00;\n    }\n    if (arg1[0x40] != 0) goto code_r0x00014000d48a;\n    uVar3 = *(arg1 + 0x30);\n    uStackX8 = 0;\n    arg3 = 0;\n    uStackX10 = 0;\n    if ((uVar3 >> 4 & 1) != 0) {\n        if ((uVar3 >> 6 & 1) == 0) {\n            if ((uVar3 & 1) == 0) {\n                if ((uVar3 >> 1 & 1) == 0) goto code_r0x00014000d3a8;\n                uStackX8 = 0x20;\n            }\n            else {\n                uStackX8 = 0x2b;\n            }\n        }\n        else {\n            uStackX8 = 0x2d;\n        }\n        arg3 = 1;\n    }\ncode_r0x00014000d3a8:\n    uVar1 = arg1[0x41];\n    if (((uVar1 + 0xa8 & 0xdf) == 0) && ((uVar3 >> 5 & 1) != 0)) {\n        bVar5 = true;\n    }\n    else {\n        bVar5 = false;\n    }\n    if ((bVar5) || ((uVar1 + 0xbf & 0xdf) == 0)) {\n        *(&uStackX8 + arg3) = 0x30;\n        if ((uVar1 == 0x58) || (uVar1 == 0x41)) {\n            uVar10 = 0x58;\n        }\n        *(&uStackX8 + arg3 + 1) = uVar10;\n        arg3 = arg3 + 2;\n    }\n    arg4 = arg1 + 0x28;\n    arg1_00 = arg1 + 0x468;\n    uVar11 = (*(arg1 + 0x34) - *(arg1 + 0x50)) - arg3;\n    if ((uVar3 & 0xc) == 0) {\n        fcn.14000bdf8(arg1_00, CONCAT71(uVar3 >> 8, 0x20), uVar11, arg4);\n    }\n    arg2 = &uStackX8;\n    fcn.14000e770(arg1_00, arg2, arg3, arg4);\n    if (((*(arg1 + 0x30) >> 3 & 1) != 0) && ((*(arg1 + 0x30) >> 2 & 1) == 0)) {\n        fcn.14000bdf8(arg1_00, CONCAT71(arg2 >> 8, 0x30), uVar11, arg4);\n    }\n    uVar9 = 0;\n    pcVar8 = fcn.14000e5ac(arg1);\n    if ((-1 < *arg4) && ((*(arg1 + 0x30) >> 2 & 1) != 0)) {\n        pcVar8 = fcn.14000bdf8(arg1_00, CONCAT71(uVar9 >> 8, 0x20), uVar11, arg4);\n    }\ncode_r0x00014000d48a:\n    return pcVar8 & 0xffffffffffffff00 | 1;\n}\n",
        "token_count": 2610
    },
    "14000d24": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.14000d240(int64_t arg1)\n\n{\n    int32_t *arg4;\n    int64_t arg1_00;\n    char cVar1;\n    uint32_t uVar2;\n    bool bVar3;\n    uint64_t in_RAX;\n    uint64_t uVar4;\n    ulong uVar5;\n    ushort *arg2;\n    uchar uVar6;\n    uint32_t uVar7;\n    int64_t arg3;\n    ushort uStackX8;\n    uchar uStackX10;\n    \n    cVar1 = *(arg1 + 0x41);\n    uVar4 = in_RAX & 0xffffffffffffff00;\n    uVar6 = 0x78;\n    if (cVar1 < 'e') {\n        if (cVar1 == 'd') {\ncode_r0x00014000d333:\n            *(arg1 + 0x30) = *(arg1 + 0x30) | 0x10;\ncode_r0x00014000d337:\n            uVar5 = 10;\ncode_r0x00014000d33f:\n            uVar4 = fcn.14000de1c(arg1, uVar5);\n        }\n        else {\n            if (cVar1 == 'A') goto code_r0x00014000d346;\n            if (cVar1 == 'C') {\ncode_r0x00014000d2b1:\n                uVar4 = fcn.14000dcb8(arg1);\n            }\n            else {\n                if (cVar1 < 'E') goto code_r0x00014000d34f;\n                if (cVar1 < 'H') goto code_r0x00014000d346;\n                if (cVar1 == 'S') {\ncode_r0x00014000d2ef:\n                    uVar4 = fcn.14000e28c(arg1);\n                }\n                else {\n                    if (cVar1 == 'X') goto code_r0x00014000d304;\n                    if (cVar1 != 'Z') {\n                        if (cVar1 != 'a') {\n                            if (cVar1 != 'c') goto code_r0x00014000d34f;\n                            goto code_r0x00014000d2b1;\n                        }\n                        goto code_r0x00014000d346;\n                    }\n                    uVar4 = fcn.14000d774(arg1);\n                }\n            }\n        }\n    }\n    else {\n        if ('g' < cVar1) {\n            if (cVar1 == 'i') goto code_r0x00014000d333;\n            if (cVar1 == 'n') {\n                uVar4 = fcn.14000e1b0(arg1);\n                goto code_r0x00014000d34b;\n            }\n            if (cVar1 == 'o') {\n                if ((*(arg1 + 0x30) >> 5 & 1) != 0) {\n                    *(arg1 + 0x30) = *(arg1 + 0x30) | 0x80;\n                }\n                uVar5 = 8;\n            }\n            else if (cVar1 == 'p') {\n                *(arg1 + 0x38) = 0x10;\n                *(arg1 + 0x3c) = 0xb;\ncode_r0x00014000d304:\n                uVar5 = 0x10;\n            }\n            else {\n                if (cVar1 == 's') goto code_r0x00014000d2ef;\n                if (cVar1 == 'u') goto code_r0x00014000d337;\n                if (cVar1 != 'x') goto code_r0x00014000d34f;\n                uVar5 = 0x10;\n            }\n            goto code_r0x00014000d33f;\n        }\ncode_r0x00014000d346:\n        uVar4 = fcn.14000d864(arg1);\n    }\ncode_r0x00014000d34b:\n    if (uVar4 == '\\0') {\ncode_r0x00014000d34f:\n        return uVar4 & 0xffffffffffffff00;\n    }\n    if (*(arg1 + 0x40) != '\\0') goto code_r0x00014000d48a;\n    uVar2 = *(arg1 + 0x30);\n    uStackX8 = 0;\n    arg3 = 0;\n    uStackX10 = 0;\n    if ((uVar2 >> 4 & 1) != 0) {\n        if ((uVar2 >> 6 & 1) == 0) {\n            if ((uVar2 & 1) == 0) {\n                if ((uVar2 >> 1 & 1) == 0) goto code_r0x00014000d3a8;\n                uStackX8 = 0x20;\n            }\n            else {\n                uStackX8 = 0x2b;\n            }\n        }\n        else {\n            uStackX8 = 0x2d;\n        }\n        arg3 = 1;\n    }\ncode_r0x00014000d3a8:\n    cVar1 = *(arg1 + 0x41);\n    if (((cVar1 + 0xa8U & 0xdf) == 0) && ((uVar2 >> 5 & 1) != 0)) {\n        bVar3 = true;\n    }\n    else {\n        bVar3 = false;\n    }\n    if ((bVar3) || ((cVar1 + 0xbfU & 0xdf) == 0)) {\n        *(&uStackX8 + arg3) = 0x30;\n        if ((cVar1 == 'X') || (cVar1 == 'A')) {\n            uVar6 = 0x58;\n        }\n        *(&uStackX8 + arg3 + 1) = uVar6;\n        arg3 = arg3 + 2;\n    }\n    arg4 = arg1 + 0x28;\n    arg1_00 = arg1 + 0x468;\n    uVar7 = (*(arg1 + 0x34) - *(arg1 + 0x50)) - arg3;\n    if ((uVar2 & 0xc) == 0) {\n        fcn.14000bdf8(arg1_00, CONCAT71(uVar2 >> 8, 0x20), uVar7, arg4);\n    }\n    arg2 = &uStackX8;\n    fcn.14000e770(arg1_00, arg2, arg3, arg4);\n    if (((*(arg1 + 0x30) >> 3 & 1) != 0) && ((*(arg1 + 0x30) >> 2 & 1) == 0)) {\n        fcn.14000bdf8(arg1_00, CONCAT71(arg2 >> 8, 0x30), uVar7, arg4);\n    }\n    uVar5 = 0;\n    uVar4 = fcn.14000e5ac(arg1);\n    if ((-1 < *arg4) && ((*(arg1 + 0x30) >> 2 & 1) != 0)) {\n        uVar4 = fcn.14000bdf8(arg1_00, CONCAT71(uVar5 >> 8, 0x20), uVar7, arg4);\n    }\ncode_r0x00014000d48a:\n    return uVar4 & 0xffffffffffffff00 | 1;\n}\n",
        "token_count": 1668
    },
    "14000ce2": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.14000ce24(uint8_t *arg1)\n\n{\n    uint8_t *arg4;\n    uint8_t *arg1_00;\n    int16_t iVar1;\n    uint32_t uVar2;\n    bool bVar3;\n    char cVar4;\n    uint16_t uVar5;\n    uint *puVar6;\n    int16_t *piVar7;\n    uint64_t uVar8;\n    ulong arg2;\n    uchar *arg2_00;\n    uint32_t uVar9;\n    ushort uVar10;\n    int64_t arg3;\n    uchar auStack104 [32];\n    uint8_t *puStack72;\n    uint uStack56;\n    ushort uStack52;\n    uint64_t uStack48;\n    \n    uVar5 = *(arg1 + 0x42);\n    piVar7 = uVar5;\n    if (uVar5 != 0x46) {\n        if (uVar5 == 0x4e) {\n            if ((*arg1 & 8) != 0) goto code_r0x00014000cfb3;\n            *(arg1 + 0x2c) = 8;\n        }\n        else if (*(arg1 + 0x3c) == 0) {\n            if (uVar5 == 0x49) {\n                piVar7 = *(arg1 + 0x18);\n                iVar1 = *piVar7;\n                if ((iVar1 == 0x33) && (piVar7[1] == 0x32)) {\n                    piVar7 = piVar7 + 2;\n                    *(arg1 + 0x3c) = 10;\n                    *(arg1 + 0x18) = piVar7;\n                }\n                else if ((iVar1 == 0x36) && (piVar7[1] == 0x34)) {\n                    piVar7 = piVar7 + 2;\n                    *(arg1 + 0x3c) = 0xb;\n                    *(arg1 + 0x18) = piVar7;\n                }\n                else {\n                    uVar5 = iVar1 - 0x58;\n                    piVar7 = uVar5;\n                    if ((uVar5 < 0x21) && (piVar7 = uVar5,  (0x120821001U >> (piVar7 & 0x3f) & 1) != 0)) {\n                        *(arg1 + 0x3c) = 9;\n                    }\n                }\n            }\n            else if (uVar5 == 0x4c) {\n                *(arg1 + 0x3c) = 8;\n            }\n            else if (uVar5 == 0x54) {\n                *(arg1 + 0x3c) = 0xd;\n            }\n            else {\n                if (uVar5 == 0x68) {\n                    if (**(arg1 + 0x18) == 0x68) {\n                        *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n                        piVar7 = 0x1;\n                    }\n                    else {\n                        piVar7 = 0x2;\n                    }\n                }\n                else {\n                    if (uVar5 == 0x6a) {\n                        *(arg1 + 0x3c) = 5;\n                        goto code_r0x00014000cfb3;\n                    }\n                    if (uVar5 != 0x6c) {\n                        if (uVar5 == 0x74) {\n                            *(arg1 + 0x3c) = 7;\n                        }\n                        else if (uVar5 == 0x77) {\n                            *(arg1 + 0x3c) = 0xc;\n                        }\n                        else if (uVar5 == 0x7a) {\n                            *(arg1 + 0x3c) = 6;\n                        }\n                        goto code_r0x00014000cfb3;\n                    }\n                    if (**(arg1 + 0x18) == 0x6c) {\n                        *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n                        piVar7 = 0x4;\n                    }\n                    else {\n                        piVar7 = 0x3;\n                    }\n                }\n                *(arg1 + 0x3c) = piVar7;\n            }\ncode_r0x00014000cfb3:\n            return CONCAT71(piVar7 >> 8, 1);\n        }\n        uStack48 = 0x14000ce66;\n        puVar6 = fcn.140014204(arg1);\n        *puVar6 = 0x16;\n        uStack48 = 0x14000ce71;\n        uVar8 = fcn.1400140e4();\n        return uVar8 & 0xffffffffffffff00;\n    }\n    if ((*arg1 & 8) != 0) goto code_r0x00014000cfb3;\n    *(arg1 + 0x2c) = 7;\n    uStack48 = *0x140034018 ^ &stack0xffffffffffffff98;\n    uVar5 = *(arg1 + 0x42);\n    uVar10 = 0x78;\n    if (uVar5 < 0x65) {\n        if (uVar5 == 100) {\ncode_r0x00014000d5cf:\n            *(arg1 + 0x30) = *(arg1 + 0x30) | 0x10;\ncode_r0x00014000d5d3:\n            arg2 = 10;\ncode_r0x00014000d5db:\n            cVar4 = fcn.14000dfe4(arg1, arg2);\n        }\n        else {\n            if (uVar5 == 0x41) goto code_r0x00014000d5e2;\n            if (uVar5 == 0x43) {\ncode_r0x00014000d53b:\n                cVar4 = fcn.14000dd74(arg1);\n            }\n            else {\n                if (uVar5 < 0x45) goto code_r0x00014000d747;\n                if (uVar5 < 0x48) goto code_r0x00014000d5e2;\n                if (uVar5 == 0x53) {\ncode_r0x00014000d58b:\n                    cVar4 = fcn.14000e324(arg1);\n                }\n                else {\n                    if (uVar5 == 0x58) goto code_r0x00014000d5a0;\n                    if (uVar5 != 0x5a) {\n                        if (uVar5 != 0x61) {\n                            if (uVar5 != 99) goto code_r0x00014000d747;\n                            goto code_r0x00014000d53b;\n                        }\n                        goto code_r0x00014000d5e2;\n                    }\n                    cVar4 = fcn.14000d7e8(arg1);\n                }\n            }\n        }\n    }\n    else {\n        if (0x67 < uVar5) {\n            if (uVar5 == 0x69) goto code_r0x00014000d5cf;\n            if (uVar5 == 0x6e) {\n                cVar4 = fcn.14000e1b0(arg1);\n                goto code_r0x00014000d5e7;\n            }\n            if (uVar5 == 0x6f) {\n                if ((*(arg1 + 0x30) >> 5 & 1) != 0) {\n                    *(arg1 + 0x30) = *(arg1 + 0x30) | 0x80;\n                }\n                arg2 = 8;\n            }\n            else if (uVar5 == 0x70) {\n                *(arg1 + 0x38) = 0x10;\n                *(arg1 + 0x3c) = 0xb;\ncode_r0x00014000d5a0:\n                arg2 = 0x10;\n            }\n            else {\n                if (uVar5 == 0x73) goto code_r0x00014000d58b;\n                if (uVar5 == 0x75) goto code_r0x00014000d5d3;\n                if (uVar5 != 0x78) goto code_r0x00014000d747;\n                arg2 = 0x10;\n            }\n            goto code_r0x00014000d5db;\n        }\ncode_r0x00014000d5e2:\n        cVar4 = fcn.14000da7c(arg1);\n    }\ncode_r0x00014000d5e7:\n    if ((cVar4 == '\\0') || (arg1[0x40] != 0)) goto code_r0x00014000d747;\n    uVar2 = *(arg1 + 0x30);\n    uStack56 = 0;\n    uStack52 = 0;\n    arg3 = 0;\n    if ((uVar2 >> 4 & 1) != 0) {\n        if ((uVar2 >> 6 & 1) == 0) {\n            if ((uVar2 & 1) == 0) {\n                if ((uVar2 >> 1 & 1) != 0) {\n                    uStack56 = 0x20;\n                    arg3 = 1;\n                }\n                goto code_r0x00014000d64c;\n            }\n            uVar5 = 0x2b;\n        }\n        else {\n            uVar5 = 0x2d;\n        }\n        uStack56 = uVar5;\n        arg3 = 1;\n    }\ncode_r0x00014000d64c:\n    iVar1 = *(arg1 + 0x42);\n    if (((iVar1 - 0x58U & 0xffdf) == 0) && ((uVar2 >> 5 & 1) != 0)) {\n        bVar3 = true;\n    }\n    else {\n        bVar3 = false;\n    }\n    if ((bVar3) || ((iVar1 - 0x41U & 0xffdf) == 0)) {\n        *(&stack0xffffffffffffffc8 + arg3 * 2) = 0x30;\n        if ((iVar1 == 0x58) || (iVar1 == 0x41)) {\n            uVar10 = 0x58;\n        }\n        *(&stack0xffffffffffffffca + arg3 * 2) = uVar10;\n        arg3 = arg3 + 2;\n    }\n    arg4 = arg1 + 0x28;\n    arg1_00 = arg1 + 0x468;\n    uVar9 = (*(arg1 + 0x34) - *(arg1 + 0x50)) - arg3;\n    if ((uVar2 & 0xc) == 0) {\n        fcn.14000be70(arg1_00, uVar2 & 0xffffff00 | 0x20, uVar9, arg4);\n    }\n    puStack72 = arg1 + 0x10;\n    arg2_00 = &stack0xffffffffffffffc8;\n    fcn.14000e814(arg1_00, arg2_00, arg3, arg4);\n    if (((*(arg1 + 0x30) >> 3 & 1) != 0) && ((*(arg1 + 0x30) >> 2 & 1) == 0)) {\n        fcn.14000be70(arg1_00, arg2_00 & 0xffffffffffffff00 | 0x30, uVar9, arg4);\n    }\n    uVar8 = 0;\n    fcn.14000e684(arg1);\n    if ((-1 < *(arg1 + 0x28)) && ((*(arg1 + 0x30) >> 2 & 1) != 0)) {\n        fcn.14000be70(arg1_00, uVar8 & 0xffffffffffffff00 | 0x20, uVar9, arg1 + 0x28);\n    }\ncode_r0x00014000d747:\n    uVar8 = fcn.1400085e0(uStack48 ^ &stack0xffffffffffffff98);\n    return uVar8;\n}\n",
        "token_count": 2734
    },
    "14000d4a": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14000d4a8(int64_t arg1)\n\n{\n    int64_t arg4;\n    int64_t arg1_00;\n    int16_t iVar1;\n    uint32_t uVar2;\n    bool bVar3;\n    char cVar4;\n    uint16_t uVar5;\n    ulong arg2;\n    uint *arg2_00;\n    uint64_t uVar6;\n    uint32_t uVar7;\n    ushort uVar8;\n    int64_t arg3;\n    uchar auStack104 [32];\n    int64_t iStack72;\n    uint uStack56;\n    ushort uStack52;\n    uint64_t uStack48;\n    \n    uStack48 = *0x140034018 ^ auStack104;\n    uVar5 = *(arg1 + 0x42);\n    uVar8 = 0x78;\n    if (uVar5 < 0x65) {\n        if (uVar5 == 100) {\ncode_r0x00014000d5cf:\n            *(arg1 + 0x30) = *(arg1 + 0x30) | 0x10;\ncode_r0x00014000d5d3:\n            arg2 = 10;\ncode_r0x00014000d5db:\n            cVar4 = fcn.14000dfe4(arg1, arg2);\n        }\n        else {\n            if (uVar5 == 0x41) goto code_r0x00014000d5e2;\n            if (uVar5 == 0x43) {\ncode_r0x00014000d53b:\n                cVar4 = fcn.14000dd74(arg1);\n            }\n            else {\n                if (uVar5 < 0x45) goto code_r0x00014000d747;\n                if (uVar5 < 0x48) goto code_r0x00014000d5e2;\n                if (uVar5 == 0x53) {\ncode_r0x00014000d58b:\n                    cVar4 = fcn.14000e324(arg1);\n                }\n                else {\n                    if (uVar5 == 0x58) goto code_r0x00014000d5a0;\n                    if (uVar5 != 0x5a) {\n                        if (uVar5 != 0x61) {\n                            if (uVar5 != 99) goto code_r0x00014000d747;\n                            goto code_r0x00014000d53b;\n                        }\n                        goto code_r0x00014000d5e2;\n                    }\n                    cVar4 = fcn.14000d7e8(arg1);\n                }\n            }\n        }\n    }\n    else {\n        if (0x67 < uVar5) {\n            if (uVar5 == 0x69) goto code_r0x00014000d5cf;\n            if (uVar5 == 0x6e) {\n                cVar4 = fcn.14000e1b0(arg1);\n                goto code_r0x00014000d5e7;\n            }\n            if (uVar5 == 0x6f) {\n                if ((*(arg1 + 0x30) >> 5 & 1) != 0) {\n                    *(arg1 + 0x30) = *(arg1 + 0x30) | 0x80;\n                }\n                arg2 = 8;\n            }\n            else if (uVar5 == 0x70) {\n                *(arg1 + 0x38) = 0x10;\n                *(arg1 + 0x3c) = 0xb;\ncode_r0x00014000d5a0:\n                arg2 = 0x10;\n            }\n            else {\n                if (uVar5 == 0x73) goto code_r0x00014000d58b;\n                if (uVar5 == 0x75) goto code_r0x00014000d5d3;\n                if (uVar5 != 0x78) goto code_r0x00014000d747;\n                arg2 = 0x10;\n            }\n            goto code_r0x00014000d5db;\n        }\ncode_r0x00014000d5e2:\n        cVar4 = fcn.14000da7c(arg1);\n    }\ncode_r0x00014000d5e7:\n    if ((cVar4 == '\\0') || (*(arg1 + 0x40) != '\\0')) goto code_r0x00014000d747;\n    uVar2 = *(arg1 + 0x30);\n    uStack56 = 0;\n    uStack52 = 0;\n    arg3 = 0;\n    if ((uVar2 >> 4 & 1) != 0) {\n        if ((uVar2 >> 6 & 1) == 0) {\n            if ((uVar2 & 1) == 0) {\n                if ((uVar2 >> 1 & 1) != 0) {\n                    uStack56 = 0x20;\n                    arg3 = 1;\n                }\n                goto code_r0x00014000d64c;\n            }\n            uVar5 = 0x2b;\n        }\n        else {\n            uVar5 = 0x2d;\n        }\n        uStack56 = uVar5;\n        arg3 = 1;\n    }\ncode_r0x00014000d64c:\n    iVar1 = *(arg1 + 0x42);\n    if (((iVar1 - 0x58U & 0xffdf) == 0) && ((uVar2 >> 5 & 1) != 0)) {\n        bVar3 = true;\n    }\n    else {\n        bVar3 = false;\n    }\n    if ((bVar3) || ((iVar1 - 0x41U & 0xffdf) == 0)) {\n        *(&uStack56 + arg3 * 2) = 0x30;\n        if ((iVar1 == 0x58) || (iVar1 == 0x41)) {\n            uVar8 = 0x58;\n        }\n        *(&uStack56 + arg3 * 2 + 2) = uVar8;\n        arg3 = arg3 + 2;\n    }\n    arg4 = arg1 + 0x28;\n    arg1_00 = arg1 + 0x468;\n    uVar7 = (*(arg1 + 0x34) - *(arg1 + 0x50)) - arg3;\n    if ((uVar2 & 0xc) == 0) {\n        fcn.14000be70(arg1_00, uVar2 & 0xffffff00 | 0x20, uVar7, arg4);\n    }\n    iStack72 = arg1 + 0x10;\n    arg2_00 = &uStack56;\n    fcn.14000e814(arg1_00, arg2_00, arg3, arg4);\n    if (((*(arg1 + 0x30) >> 3 & 1) != 0) && ((*(arg1 + 0x30) >> 2 & 1) == 0)) {\n        fcn.14000be70(arg1_00, arg2_00 & 0xffffffffffffff00 | 0x30, uVar7, arg4);\n    }\n    uVar6 = 0;\n    fcn.14000e684(arg1);\n    if ((-1 < *(arg1 + 0x28)) && ((*(arg1 + 0x30) >> 2 & 1) != 0)) {\n        fcn.14000be70(arg1_00, uVar6 & 0xffffffffffffff00 | 0x20, uVar7, arg1 + 0x28);\n    }\ncode_r0x00014000d747:\n    fcn.1400085e0(uStack48 ^ auStack104);\n    return;\n}\n",
        "token_count": 1753
    },
    "14000de1": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.14000de1c(int64_t arg1, ulong arg2)\n\n{\n    uint *puVar1;\n    uint64_t uVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    \n    uVar3 = *(arg1 + 0x3c);\n    uVar2 = uVar3;\n    iVar4 = 8;\n    if (uVar3 < 6) {\n        if (uVar3 == 5) goto code_r0x00014000de6b;\n        if (uVar3 != 0) {\n            uVar2 = uVar3 - 1;\n            if (uVar3 - 1 == 0) {\n                iVar4 = 1;\n                goto code_r0x00014000de6b;\n            }\n            uVar3 = uVar3 - 2;\n            uVar2 = uVar3;\n            if (uVar3 == 0) {\n                iVar4 = 2;\n                goto code_r0x00014000de6b;\n            }\n            goto code_r0x00014000de5e;\n        }\n    }\n    else {\n        uVar2 = uVar3 - 6;\n        if ((uVar3 - 6 == 0) || (uVar2 = uVar3 - 7,  uVar3 - 7 == 0)) goto code_r0x00014000de6b;\n        uVar3 = uVar3 - 9;\n        uVar2 = uVar3;\n        if (uVar3 == 0) goto code_r0x00014000de6b;\ncode_r0x00014000de5e:\n        uVar3 = uVar3 - 1;\n        uVar2 = uVar3;\n        if (uVar3 != 0) {\n            if (uVar3 != 1) {\n                iVar4 = 0;\n            }\n            goto code_r0x00014000de6b;\n        }\n    }\n    iVar4 = 4;\ncode_r0x00014000de6b:\n    if (iVar4 == 1) {\n        *(arg1 + 0x20) = *(arg1 + 0x20) + 8;\n        if ((*(arg1 + 0x30) >> 4 & 1) == 0) {\n            uVar2 = *(*(arg1 + 0x20) + -8);\n        }\n        else {\n            uVar2 = *(*(arg1 + 0x20) + -8);\n        }\n    }\n    else if (iVar4 == 2) {\n        *(arg1 + 0x20) = *(arg1 + 0x20) + 8;\n        if ((*(arg1 + 0x30) >> 4 & 1) == 0) {\n            uVar2 = *(*(arg1 + 0x20) + -8);\n        }\n        else {\n            uVar2 = *(*(arg1 + 0x20) + -8);\n        }\n    }\n    else if (iVar4 == 4) {\n        *(arg1 + 0x20) = *(arg1 + 0x20) + 8;\n        if ((*(arg1 + 0x30) >> 4 & 1) == 0) {\n            uVar2 = *(*(arg1 + 0x20) + -8);\n        }\n        else {\n            uVar2 = *(*(arg1 + 0x20) + -8);\n        }\n    }\n    else {\n        if (iVar4 != 8) {\n            puVar1 = fcn.140014204(uVar2);\n            *puVar1 = 0x16;\n            uVar2 = fcn.1400140e4();\n            return uVar2 & 0xffffffffffffff00;\n        }\n        *(arg1 + 0x20) = *(arg1 + 0x20) + 8;\n        uVar2 = *(*(arg1 + 0x20) + -8);\n    }\n    uVar3 = *(arg1 + 0x30);\n    if (((uVar3 >> 4 & 1) != 0) && (uVar2 < 0)) {\n        uVar2 = -uVar2;\n        uVar3 = uVar3 | 0x40;\n        *(arg1 + 0x30) = uVar3;\n    }\n    if (*(arg1 + 0x38) < 0) {\n        *(arg1 + 0x38) = 1;\n    }\n    else {\n        *(arg1 + 0x30) = uVar3 & 0xfffffff7;\n        fcn.14000b978(arg1 + 0x58, *(arg1 + 0x38));\n    }\n    if (uVar2 == 0) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) & 0xffffffdf;\n    }\n    *(arg1 + 0x54) = 0;\n    if (iVar4 == 8) {\n        fcn.14000bc38(arg1, uVar2, arg2);\n    }\n    else {\n        fcn.14000bb0c(arg1, uVar2 & 0xffffffff, arg2);\n    }\n    uVar3 = *(arg1 + 0x30);\n    if (((uVar3 >> 7 & 1) != 0) && ((*(arg1 + 0x50) == 0 || (**(arg1 + 0x48) != '0')))) {\n        *(arg1 + 0x48) = *(arg1 + 0x48) + -1;\n        **(arg1 + 0x48) = 0x30;\n        *(arg1 + 0x50) = *(arg1 + 0x50) + 1;\n    }\n    return CONCAT71(uVar3 >> 0xf, 1);\n}\n",
        "token_count": 1303
    },
    "14000dfe": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.14000dfe4(int64_t arg1, ulong arg2)\n\n{\n    uint *puVar1;\n    uint64_t uVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    \n    uVar3 = *(arg1 + 0x3c);\n    uVar2 = uVar3;\n    iVar4 = 8;\n    if (uVar3 < 6) {\n        if (uVar3 == 5) goto code_r0x00014000e033;\n        if (uVar3 != 0) {\n            uVar2 = uVar3 - 1;\n            if (uVar3 - 1 == 0) {\n                iVar4 = 1;\n                goto code_r0x00014000e033;\n            }\n            uVar3 = uVar3 - 2;\n            uVar2 = uVar3;\n            if (uVar3 == 0) {\n                iVar4 = 2;\n                goto code_r0x00014000e033;\n            }\n            goto code_r0x00014000e026;\n        }\n    }\n    else {\n        uVar2 = uVar3 - 6;\n        if ((uVar3 - 6 == 0) || (uVar2 = uVar3 - 7,  uVar3 - 7 == 0)) goto code_r0x00014000e033;\n        uVar3 = uVar3 - 9;\n        uVar2 = uVar3;\n        if (uVar3 == 0) goto code_r0x00014000e033;\ncode_r0x00014000e026:\n        uVar3 = uVar3 - 1;\n        uVar2 = uVar3;\n        if (uVar3 != 0) {\n            if (uVar3 != 1) {\n                iVar4 = 0;\n            }\n            goto code_r0x00014000e033;\n        }\n    }\n    iVar4 = 4;\ncode_r0x00014000e033:\n    if (iVar4 == 1) {\n        *(arg1 + 0x20) = *(arg1 + 0x20) + 8;\n        if ((*(arg1 + 0x30) >> 4 & 1) == 0) {\n            uVar2 = *(*(arg1 + 0x20) + -8);\n        }\n        else {\n            uVar2 = *(*(arg1 + 0x20) + -8);\n        }\n    }\n    else if (iVar4 == 2) {\n        *(arg1 + 0x20) = *(arg1 + 0x20) + 8;\n        if ((*(arg1 + 0x30) >> 4 & 1) == 0) {\n            uVar2 = *(*(arg1 + 0x20) + -8);\n        }\n        else {\n            uVar2 = *(*(arg1 + 0x20) + -8);\n        }\n    }\n    else if (iVar4 == 4) {\n        *(arg1 + 0x20) = *(arg1 + 0x20) + 8;\n        if ((*(arg1 + 0x30) >> 4 & 1) == 0) {\n            uVar2 = *(*(arg1 + 0x20) + -8);\n        }\n        else {\n            uVar2 = *(*(arg1 + 0x20) + -8);\n        }\n    }\n    else {\n        if (iVar4 != 8) {\n            puVar1 = fcn.140014204(uVar2);\n            *puVar1 = 0x16;\n            uVar2 = fcn.1400140e4();\n            return uVar2 & 0xffffffffffffff00;\n        }\n        *(arg1 + 0x20) = *(arg1 + 0x20) + 8;\n        uVar2 = *(*(arg1 + 0x20) + -8);\n    }\n    uVar3 = *(arg1 + 0x30);\n    if (((uVar3 >> 4 & 1) != 0) && (uVar2 < 0)) {\n        uVar2 = -uVar2;\n        uVar3 = uVar3 | 0x40;\n        *(arg1 + 0x30) = uVar3;\n    }\n    if (*(arg1 + 0x38) < 0) {\n        *(arg1 + 0x38) = 1;\n    }\n    else {\n        *(arg1 + 0x30) = uVar3 & 0xfffffff7;\n        fcn.14000ba20(arg1 + 0x58, *(arg1 + 0x38));\n    }\n    if (uVar2 == 0) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) & 0xffffffdf;\n    }\n    *(arg1 + 0x54) = 1;\n    if (iVar4 == 8) {\n        fcn.14000bcc8(arg1, uVar2, arg2);\n    }\n    else {\n        fcn.14000bb94(arg1, uVar2 & 0xffffffff, arg2);\n    }\n    uVar3 = *(arg1 + 0x30) >> 7;\n    uVar2 = uVar3;\n    if (((uVar3 & 1) != 0) && ((uVar2 = 0,  *(arg1 + 0x50) == 0 || (**(arg1 + 0x48) != 0x30)))) {\n        *(arg1 + 0x48) = *(arg1 + 0x48) + -2;\n        **(arg1 + 0x48) = 0x30;\n        *(arg1 + 0x50) = *(arg1 + 0x50) + 1;\n    }\n    return CONCAT71(uVar2 >> 8, 1);\n}\n",
        "token_count": 1311
    },
    "140012ba": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x000140012a45)\n// WARNING: Removing unreachable block (ram,0x000140012a52)\n// WARNING: Removing unreachable block (ram,0x000140012a5c)\n// WARNING: Removing unreachable block (ram,0x000140012a6b)\n// WARNING: Removing unreachable block (ram,0x000140012a76)\n// WARNING: Removing unreachable block (ram,0x000140012a7f)\n// WARNING: Removing unreachable block (ram,0x000140012a88)\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140012ba4(void)\n\n{\n    code *pcVar1;\n    uint auStackX16 [2];\n    int32_t aiStackX24 [2];\n    ulong var_28h;\n    uchar var_30h [4];\n    ulong var_2ch;\n    uint *var_20h;\n    int32_t *var_bp_18h;\n    ulong *var_bp_10h;\n    \n    aiStackX24[0] = 1;\n    auStackX16[0] = 0;\n    var_20h = auStackX16;\n    var_28h._0_1_ = 0;\n    var_bp_18h = aiStackX24;\n    var_bp_10h = &var_28h;\n    var_2ch._0_4_ = 2;\n    var_2ch._4_4_ = 2;\n    fcn.140012920(var_30h, &var_2ch + 4, &var_20h, &var_2ch);\n    if (aiStackX24[0] == 0) {\n        fcn.140012ae4(0);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 409
    },
    "14001328": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140013284(void)\n\n{\n    char cVar1;\n    ulong uVar2;\n    int64_t *piVar3;\n    bool bVar4;\n    \n    piVar3 = 0x140028fb0;\n    do {\n        if ((*piVar3 != 0) && (cVar1 = (**0x140023338)(),  cVar1 == '\\0')) break;\n        piVar3 = piVar3 + 2;\n    } while (piVar3 != 0x1400290b0);\n    if (piVar3 == 0x1400290b0) {\n        uVar2 = 1;\n    }\n    else {\n        if (piVar3 != 0x140028fb0) {\n            piVar3 = piVar3 + -1;\n            do {\n                if ((piVar3[-1] != 0) && (*piVar3 != 0)) {\n                    (**0x140023338)(0);\n                }\n                bVar4 = piVar3 != 0x140028fb8;\n                piVar3 = piVar3 + -2;\n            } while (bVar4);\n        }\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 270
    },
    "140016e9": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t fcn.140016e90(uint16_t *arg1, uint8_t *arg2, uint64_t arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    int64_t iStack40;\n    uint64_t auStack32 [2];\n    char cStack16;\n    \n    if ((arg2 == NULL) || (arg3 == 0)) {\n        *0x140043d70 = 0;\n        return 0;\n    }\n    if (*arg2 == 0) {\n        if (arg1 == NULL) {\n            return 0;\n        }\n        *arg1 = 0;\n        return 0;\n    }\n    fcn.14000beec(&iStack40, arg4);\n    if (*(auStack32[0] + 0xc) == 0xfde9) {\n        iVar1 = fcn.140019354(arg1);\n        if (iVar1 < 0) {\n            iVar1 = -1;\n        }\n        goto code_r0x000140016f2d;\n    }\n    if (*(auStack32[0] + 0x138) == 0) {\n        if (arg1 != NULL) {\n            *arg1 = *arg2;\n        }\ncode_r0x000140016f28:\n        iVar1 = 1;\n    }\n    else {\n        iVar1 = fcn.140019308(*arg2, auStack32);\n        if (iVar1 == 0) {\n            auStack32[0] = *(auStack32[0] + 0xc);\n            iVar1 = fcn.1400186f8(auStack32[0], 9);\n            if (iVar1 != 0) goto code_r0x000140016f28;\n        }\n        else if ((((1 < *(auStack32[0] + 8)) && (*(auStack32[0] + 8) <= arg3)) &&\n                 (iVar1 = fcn.1400186f8(*(auStack32[0] + 0xc), 9),  iVar1 != 0)) ||\n                ((*(auStack32[0] + 8) <= arg3 && (arg2[1] != 0)))) {\n            iVar1 = *(auStack32[0] + 8);\n            goto code_r0x000140016f2d;\n        }\n        puVar2 = fcn.140014204(auStack32[0]);\n        iVar1 = -1;\n        *puVar2 = 0x2a;\n    }\ncode_r0x000140016f2d:\n    if (cStack16 != '\\0') {\n        *(iStack40 + 0x3a8) = *(iStack40 + 0x3a8) & 0xfffffffd;\n        return iVar1;\n    }\n    return iVar1;\n}\n",
        "token_count": 625
    },
    "14001858": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x000140018634: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x000140018639)\n\nint32_t fcn.140018588(uint16_t *arg1, uint16_t *arg2)\n\n{\n    uint16_t uVar1;\n    uint16_t uVar2;\n    uint *puVar3;\n    uint32_t uVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    int64_t iStack56;\n    int64_t iStack48;\n    char cStack32;\n    \n    if (*0x140043754 != 0) {\n        if ((arg1 == NULL) || (arg2 == NULL)) {\n            puVar3 = fcn.140014204(arg1);\n            *puVar3 = 0x16;\n            fcn.1400140e4();\n            iVar7 = 0x7fffffff;\n        }\n        else {\n            fcn.14000beec(&stack0xffffffffffffffc8, 0);\n            iVar6 = iStack48;\n            if (*(iStack48 + 0x138) == 0) goto code_r0x00014001854e;\n            do {\n                if (*arg1 < 0x100) {\n                    uVar5 = *arg1;\n                    if ((*(\n                          L\"         (((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0181\u0181\u0181\u0181\u0181\u0181\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\\x10\\x10\\x10\\x10\\x10\u0182\u0182\u0182\u0182\u0182\u0182\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\\x10\\x10\\x10      (                          \\b\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0112\\x10\\x100\\x10\\x10\\x10\\x10\\x14\\x14\\x10\u0112\\x10\\x10\\x10\\x14\u0112\\x10\\x10\\x10\\x10\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0101uk\"\n                          + uVar5) & 1) != 0) {\n                        uVar5 = *(uVar5 + *(iVar6 + 0x110));\n                    }\n                    uVar1 = uVar5;\n                }\n                else {\n                    uVar1 = fcn.14001ded8(*arg1, &stack0xffffffffffffffd0);\n                    iVar6 = iStack48;\n                }\n                arg1 = arg1 + 1;\n                if (*arg2 < 0x100) {\n                    uVar5 = *arg2;\n                    if ((*(\n                          L\"         (((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0181\u0181\u0181\u0181\u0181\u0181\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\\x10\\x10\\x10\\x10\\x10\u0182\u0182\u0182\u0182\u0182\u0182\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\\x10\\x10\\x10      (                          \\b\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0112\\x10\\x100\\x10\\x10\\x10\\x10\\x14\\x14\\x10\u0112\\x10\\x10\\x10\\x14\u0112\\x10\\x10\\x10\\x10\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0101uk\"\n                          + uVar5) & 1) != 0) {\n                        uVar5 = *(uVar5 + *(iVar6 + 0x110));\n                    }\n                    uVar2 = uVar5;\n                }\n                else {\n                    uVar2 = fcn.14001ded8(*arg2, &stack0xffffffffffffffd0);\n                    iVar6 = iStack48;\n                }\n                arg2 = arg2 + 1;\n                iVar7 = uVar1 - uVar2;\n            } while ((iVar7 == 0) && (uVar1 != 0));\n            if (cStack32 != '\\0') {\n                *(iStack56 + 0x3a8) = *(iStack56 + 0x3a8) & 0xfffffffd;\n            }\n        }\n        return iVar7;\n    }\n    if ((arg1 == NULL) || (arg2 == NULL)) {\n        iStack48 = 0x14001859f;\n        puVar3 = fcn.140014204(arg1);\n        *puVar3 = 0x16;\n        iStack48 = 0x1400185aa;\n        fcn.1400140e4();\n        return 0x7fffffff;\n    }\ncode_r0x00014001854e:\n    do {\n        uVar1 = *arg1;\n        arg1 = arg1 + 1;\n        uVar2 = *arg2;\n        arg2 = arg2 + 1;\n        uVar8 = uVar1 + 0x20;\n        if (0x19 < uVar1 - 0x41) {\n            uVar8 = uVar1;\n        }\n        uVar4 = uVar2 + 0x20;\n        if (0x19 < uVar2 - 0x41) {\n            uVar4 = uVar2;\n        }\n    } while ((uVar8 - uVar4 == 0) && (uVar8 != 0));\n    return uVar8 - uVar4;\n}\n",
        "token_count": 1545
    },
    "14000aae": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint fcn.14000aae4(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    uint uVar1;\n    uint *puVar2;\n    \n    if ((arg1 == 0) || (2 < arg3)) {\n        puVar2 = fcn.140014204(arg1);\n        *puVar2 = 0x16;\n        fcn.1400140e4();\n        uVar1 = 0xffffffff;\n    }\n    else {\n        fcn.14000b4c0(arg1);\n        uVar1 = fcn.14000aa2c(arg1, arg2, arg3);\n        fcn.14000b4cc(arg1);\n    }\n    return uVar1;\n}\n",
        "token_count": 161
    },
    "140010bf": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.140010bf4(int64_t arg1, int32_t *arg2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    int64_t iVar5;\n    ulong uVar6;\n    uchar auStack664 [32];\n    ulong uStack632;\n    uint uStack624;\n    int32_t iStack616;\n    uchar auStack612 [8];\n    uchar auStack604 [8];\n    uchar auStack596 [12];\n    int32_t iStack584;\n    uchar auStack572 [548];\n    uint64_t uStack24;\n    \n    uStack24 = *0x140034018 ^ auStack664;\n    if ((arg2 == NULL) || (arg1 == 0)) {\n        puVar4 = fcn.140014204(arg1);\n        *puVar4 = 0x16;\n        fcn.1400140e4();\n        goto code_r0x00014001090e;\n    }\n    uStack624 = 0;\n    uStack632 = 0;\n    iVar5 = (*_sym.imp.KERNEL32.dll_FindFirstFileExW)(arg1, 0, &iStack616, 0);\n    if (iVar5 != -1) {\n        if (iStack616 == 0x80) {\n            iStack616 = 0;\n        }\n        *arg2 = iStack616;\n        uVar6 = fcn.140010b3c(auStack612);\n        *(arg2 + 2) = uVar6;\n        uVar6 = fcn.140010b3c(auStack604);\n        *(arg2 + 4) = uVar6;\n        uVar6 = fcn.140010b3c(auStack596);\n        *(arg2 + 6) = uVar6;\n        arg2[8] = iStack584;\n        iVar3 = fcn.1400196e0(arg2 + 9, 0x104, auStack572);\n        if (iVar3 != 0) {\n            uStack632 = 0;\n            fcn.140014104(0, 0, 0, 0);\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        goto code_r0x00014001090e;\n    }\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n    if (uVar2 < 2) {\ncode_r0x000140010974:\n        puVar4 = fcn.140014204(arg1);\n        *puVar4 = 0x16;\n    }\n    else {\n        if (3 < uVar2) {\n            if (uVar2 == 8) {\n                puVar4 = fcn.140014204(arg1);\n                *puVar4 = 0xc;\n                goto code_r0x00014001090e;\n            }\n            if (uVar2 != 0x12) goto code_r0x000140010974;\n        }\n        puVar4 = fcn.140014204(arg1);\n        *puVar4 = 2;\n    }\ncode_r0x00014001090e:\n    fcn.1400085e0(uStack24 ^ auStack664);\n    return;\n}\n",
        "token_count": 722
    },
    "14000541": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nint64_t fcn.140005410(int64_t arg1, ulong lpMultiByteStr, ulong arg3)\n\n{\n    int32_t iVar1;\n    ulong arg4;\n    ulong uVar2;\n    \n    if (arg1 == 0) {\n        arg4 = 0xffffffff;\n        uVar2 = lpMultiByteStr;\n        arg3._0_4_ = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0xfde9, 0, lpMultiByteStr, 0xffffffff, 0, 0);\n        if (arg3 == 0) {\n            fcn.140001c50(0x140025130, \"Failed to get wchar_t buffer size.\\n\", uVar2, arg4);\n            return 0;\n        }\n        arg1 = fcn.14000a420(arg3 + 1, 2);\n        if (arg1 == 0) {\n            fcn.140001c50(\"win32_utils_from_utf8\", \"Out of memory.\", uVar2, arg4);\n            return 0;\n        }\n    }\n    uVar2 = 0xffffffff;\n    iVar1 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0xfde9, 0, lpMultiByteStr, 0xffffffff, arg1, arg3);\n    if (iVar1 == 0) {\n        fcn.140001c50(0x140025130, \"Failed to decode wchar_t from UTF-8\\n\", lpMultiByteStr, uVar2);\n        return 0;\n    }\n    return arg1;\n}\n",
        "token_count": 348
    },
    "14000f9a": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nint64_t fcn.14000f9a8(int16_t *arg1, int16_t *arg2)\n\n{\n    uint *puVar1;\n    int64_t iVar2;\n    int64_t *arg1_00;\n    int64_t iStackX8;\n    \n    if (((arg1 == NULL) || (arg2 == NULL)) || (*arg2 == 0)) {\n        puVar1 = fcn.140014204(arg1);\n        *puVar1 = 0x16;\n        fcn.1400140e4();\n    }\n    else if (*arg1 == 0) {\n        puVar1 = fcn.140014204(arg1);\n        *puVar1 = 0x16;\n    }\n    else {\n        arg1_00 = &iStackX8;\n        fcn.140014514(arg1_00);\n        if (iStackX8 != 0) {\n            iVar2 = fcn.14001926c(arg1, arg2, 0x40, iStackX8);\n            if (iVar2 == 0) {\n                fcn.14001456c(iStackX8);\n            }\n            fcn.14000b4cc(iStackX8);\n            return iVar2;\n        }\n        puVar1 = fcn.140014204(arg1_00);\n        *puVar1 = 0x18;\n    }\n    return 0;\n}\n",
        "token_count": 308
    },
    "140019f6": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nint64_t * fcn.140019f64(int64_t *arg1, ulong arg2)\n\n{\n    char cVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    int64_t *piVar5;\n    int64_t *piVar6;\n    int64_t iVar7;\n    int64_t *piVar8;\n    int64_t *piVar9;\n    uint64_t uVar10;\n    uint32_t uVar11;\n    int64_t *piVar12;\n    int64_t iVar13;\n    \n    piVar9 = NULL;\n    uVar11 = 0;\n    if (arg1 == NULL) {\n        puVar4 = fcn.140014204(0);\n        *puVar4 = 0x16;\n        return 0xffffffffffffffff;\n    }\n    piVar8 = arg1;\n    piVar5 = fcn.1400096c8(arg1, 0x3d);\n    piVar12 = arg1;\n    if ((piVar5 == NULL) || (piVar5 == arg1)) {\ncode_r0x000140019a1a:\n        puVar4 = fcn.140014204(piVar8);\n        uVar11 = 0xffffffff;\n        *puVar4 = 0x16;\n    }\n    else {\n        cVar1 = *(piVar5 + 1);\n        if (*0x140043720 == *0x140043738) {\n            piVar6 = fcn.140019d8c(*0x140043720);\n            piVar8 = *0x140043720;\n            *0x140043720 = piVar6;\n        }\n        if (*0x140043720 == NULL) {\n            if ((arg2 != 0) && (*0x140043728 != 0)) {\n                iVar7 = fcn.140012774();\n                if (iVar7 != 0) {\n                    if (*0x140043720 == *0x140043738) {\n                        *0x140043720 = fcn.140019d8c(*0x140043720);\n                    }\n                    goto code_r0x00014001988c;\n                }\n                goto code_r0x000140019a1a;\n            }\n            if (cVar1 != '\\0') {\n                *0x140043720 = fcn.140014224(1, 8);\n                fcn.14001429c(0);\n                if (*0x140043720 != NULL) {\n                    if (*0x140043728 == 0) {\n                        *0x140043728 = fcn.140014224(1, 8);\n                        fcn.14001429c(0);\n                        if (*0x140043728 == 0) goto code_r0x00014001984f;\n                    }\ncode_r0x00014001988c:\n                    if (*0x140043720 != NULL) goto code_r0x000140019891;\n                }\ncode_r0x00014001984f:\n                uVar11 = 0xffffffff;\n            }\n        }\n        else {\ncode_r0x000140019891:\n            piVar8 = *0x140043720;\n            iVar13 = piVar5 - arg1;\n            iVar7 = **0x140043720;\n            piVar6 = *0x140043720;\n            while (iVar7 != 0) {\n                iVar3 = fcn.14001fb2c(arg1, iVar7, iVar13);\n                if ((iVar3 == 0) && ((*(iVar13 + *piVar6) == '=' || (*(iVar13 + *piVar6) == '\\0')))) {\n                    iVar7 = piVar6 - piVar8 >> 3;\n                    goto code_r0x0001400198e0;\n                }\n                piVar6 = piVar6 + 1;\n                iVar7 = *piVar6;\n            }\n            iVar7 = -(piVar6 - piVar8 >> 3);\ncode_r0x0001400198e0:\n            if ((-1 < iVar7) && (*piVar8 != 0)) {\n                fcn.14001429c(piVar8[iVar7]);\n                if (cVar1 == '\\0') {\n                    for (; piVar8[iVar7] != 0; iVar7 = iVar7 + 1) {\n                        piVar8[iVar7] = piVar8[iVar7 + 1];\n                    }\n                    piVar8 = fcn.14001c140(piVar8, iVar7, 8);\n                    fcn.14001429c(0);\n                    if (piVar8 != NULL) {\n                        *0x140043720 = piVar8;\n                    }\n                }\n                else {\n                    piVar8[iVar7] = arg1;\n                    piVar12 = piVar9;\n                }\ncode_r0x000140019999:\n                if (arg2 != 0) {\n                    iVar7 = -1;\n                    do {\n                        iVar13 = iVar7;\n                        iVar7 = iVar13 + 1;\n                    } while (*(arg1 + iVar13 + 1) != '\\0');\n                    iVar7 = fcn.140014224(iVar13 + 3, 1);\n                    if (iVar7 != 0) {\n                        iVar3 = fcn.140013398(iVar7, iVar13 + 3, arg1);\n                        if (iVar3 != 0) {\n                            fcn.140014104(0, 0, 0, 0, 0);\n                            pcVar2 = swi(3);\n                            piVar9 = (*pcVar2)();\n                            return piVar9;\n                        }\n                        uVar10 = piVar5 + (iVar7 - arg1) + 1;\n                        *(uVar10 - 1) = 0;\n                        iVar13 = iVar7;\n                        iVar3 = fcn.14001fc44(iVar7, -(cVar1 != '\\0') & uVar10);\n                        if (iVar3 == 0) {\n                            puVar4 = fcn.140014204(iVar13);\n                            piVar9 = 0xffffffff;\n                            *puVar4 = 0x2a;\n                        }\n                    }\n                    fcn.14001429c(iVar7);\n                }\n                goto code_r0x000140019a31;\n            }\n            if (cVar1 != '\\0') {\n                uVar10 = -iVar7 + 2;\n                if ((-iVar7 <= uVar10) && (uVar10 < 0x1fffffffffffffff)) {\n                    piVar8 = fcn.14001c140(piVar8, uVar10, 8);\n                    fcn.14001429c(0);\n                    if (piVar8 != NULL) {\n                        piVar8[-iVar7] = arg1;\n                        piVar8[1 - iVar7] = 0;\n                        piVar12 = piVar9;\n                        *0x140043720 = piVar8;\n                        goto code_r0x000140019999;\n                    }\n                }\n                uVar11 = 0xffffffff;\n            }\n        }\n    }\n    piVar9 = uVar11;\ncode_r0x000140019a31:\n    fcn.14001429c(piVar12);\n    return piVar9;\n}\n",
        "token_count": 1579
    },
    "14001a3f": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nulong fcn.14001a3f8(uint64_t *arg1, uchar *arg2, uint64_t arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    bool bVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    int64_t arg3_00;\n    int64_t iVar5;\n    uint64_t uVar7;\n    ulong uVar8;\n    ulong uVar9;\n    int64_t iVar6;\n    \n    uVar8 = 0xb;\n    fcn.140019550(0xb);\n    uVar9 = 0;\n    if (arg1 != NULL) {\n        *arg1 = 0;\n        if (arg2 == NULL) {\ncode_r0x00014001a33c:\n            if (arg3 == 0) goto code_r0x00014001a341;\ncode_r0x00014001a348:\n            bVar2 = false;\n        }\n        else {\n            if (arg3 == 0) {\n                if (arg2 == NULL) goto code_r0x00014001a33c;\n                goto code_r0x00014001a348;\n            }\ncode_r0x00014001a341:\n            bVar2 = true;\n        }\n        if (bVar2) {\n            if (arg2 != NULL) {\n                *arg2 = 0;\n            }\n            arg3_00 = fcn.14001a1bc(arg4);\n            if (arg3_00 != 0) {\n                iVar5 = -1;\n                do {\n                    iVar6 = iVar5;\n                    iVar5 = iVar6 + 1;\n                } while (*(arg3_00 + iVar5) != '\\0');\n                uVar7 = iVar6 + 2;\n                *arg1 = uVar7;\n                if (arg3 != 0) {\n                    if (arg3 < uVar7) {\n                        uVar9 = 0x22;\n                    }\n                    else {\n                        iVar3 = fcn.140013398(arg2, arg3, arg3_00);\n                        if (iVar3 != 0) {\n                            fcn.140014104(0, 0, 0, 0, 0);\n                            pcVar1 = swi(3);\n                            uVar8 = (*pcVar1)();\n                            return uVar8;\n                        }\n                    }\n                }\n            }\n            goto code_r0x00014001a398;\n        }\n    }\n    puVar4 = fcn.140014204(uVar8);\n    uVar9 = 0x16;\n    *puVar4 = 0x16;\n    fcn.1400140e4();\ncode_r0x00014001a398:\n    fcn.1400195a4(0xb);\n    return uVar9;\n}\n",
        "token_count": 609
    },
    "1400072d": {
        "rules": [
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df",
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x000140007143)\n\nuint fcn.1400072d0(int64_t arg1, char *arg2, ulong arg3)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    int64_t *piVar3;\n    ulong uVar4;\n    \n    if (((arg2 == NULL) || (*arg2 != '1')) || (arg3 != 0x58)) {\n        return 0xfffffffa;\n    }\n    if (arg1 == 0) {\n        return 0xfffffffe;\n    }\n    pcVar2 = *(arg1 + 0x30);\n    uVar4 = 0;\n    *(arg1 + 0x20) = 0;\n    if (pcVar2 == NULL) {\n        pcVar2 = 0x140007a00;\n        *(arg1 + 0x40) = 0;\n        *(arg1 + 0x30) = 0x140007a00;\n    }\n    else {\n        uVar4 = *(arg1 + 0x40);\n    }\n    if (*(arg1 + 0x38) == 0) {\n        *(arg1 + 0x38) = 0x140007a10;\n    }\n    piVar3 = (*pcVar2)(uVar4, 1, 0x1bf0);\n    if (piVar3 != NULL) {\n        *(arg1 + 0x28) = piVar3;\n        *piVar3 = arg1;\n        piVar3[8] = 0;\n        *(piVar3 + 1) = 0x3f34;\n        if (((*(arg1 + 0x30) != 0) && (*(arg1 + 0x38) != NULL)) &&\n           ((piVar1 = *(arg1 + 0x28),  piVar1 != NULL && ((*piVar1 == arg1 && (*(piVar1 + 1) - 0x3f34U < 0x20)))))) {\n            if ((piVar1[8] != 0) && (*(piVar1 + 6) != 0xf)) {\n                (**(arg1 + 0x38))(*(arg1 + 0x40));\n                piVar1[8] = 0;\n            }\n            *(piVar1 + 2) = 5;\n            *(piVar1 + 6) = 0xf;\n            if ((((*(arg1 + 0x30) != 0) && (*(arg1 + 0x38) != 0)) && (piVar1 = *(arg1 + 0x28),  piVar1 != NULL)) &&\n               ((*piVar1 == arg1 && (*(piVar1 + 1) - 0x3f34U < 0x20)))) {\n                *(piVar1 + 0x34) = 0;\n                *(piVar1 + 0x3c) = 0;\n                if ((((*(arg1 + 0x30) != 0) && ((*(arg1 + 0x38) != 0 && (piVar1 = *(arg1 + 0x28),  piVar1 != NULL)))) &&\n                    (*piVar1 == arg1)) && (*(piVar1 + 1) - 0x3f34U < 0x20)) {\n                    *(piVar1 + 0x24) = 0;\n                    *(arg1 + 0x1c) = 0;\n                    *(arg1 + 0xc) = 0;\n                    *(arg1 + 0x20) = 0;\n                    if (*(piVar1 + 2) != 0) {\n                        *(arg1 + 0x4c) = *(piVar1 + 2) & 1;\n                    }\n                    piVar3 = piVar1 + 0xaa;\n                    piVar1[0x11] = piVar3;\n                    piVar1[0xd] = piVar3;\n                    piVar1[0xc] = piVar3;\n                    *(piVar1 + 0x14) = 0;\n                    piVar1[5] = 0;\n                    piVar1[9] = 0;\n                    piVar1[1] = 0x3f34;\n                    *(piVar1 + 0x1c) = 0x8000;\n                    *(piVar1 + 0x37c) = 1;\n                    *(piVar1 + 0x1be4) = 0xffffffff;\n                    return 0;\n                }\n            }\n        }\n        (**(arg1 + 0x38))(*(arg1 + 0x40), piVar3);\n        *(arg1 + 0x28) = 0;\n        return 0xfffffffe;\n    }\n    return 0xfffffffc;\n}\n",
        "token_count": 1061
    },
    "14001ac2": {
        "rules": [
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14001ac24(int16_t **arg1, int64_t *arg2)\n\n{\n    code *pcVar1;\n    uint8_t uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    int16_t *piVar5;\n    int16_t *piVar6;\n    int64_t iVar7;\n    uint16_t uVar8;\n    int64_t iVar9;\n    int64_t *piVar10;\n    uint64_t uVar11;\n    uint64_t uVar12;\n    uint64_t uVar13;\n    int64_t iVar14;\n    uint64_t uVar15;\n    ulong var_1b0h;\n    ulong var_1b8h;\n    uchar auStack760 [32];\n    ulong uStack728;\n    uint uStack720;\n    uchar auStack712 [16];\n    ulong uStack696;\n    uint64_t uStack688;\n    int64_t iStack680;\n    int64_t *piStack672;\n    uchar auStack664 [44];\n    int16_t iStack620;\n    int16_t iStack618;\n    int16_t iStack616;\n    ulong var_74h;\n    ulong uStack72;\n    uint64_t uStack64;\n    \n    uStack64 = *0x140034018 ^ auStack760;\n    uVar11 = 0;\n    piStack672 = arg2;\n    if (arg2 == NULL) {\n        puVar4 = fcn.140014204(arg1);\n        *puVar4 = 0x16;\n        fcn.1400140e4();\n    }\n    else {\n        *arg2 = 0;\n        piVar5 = *arg1;\n        auStack712 = ZEXT816(0);\n        auStack712._8_8_ = NULL;\n        auStack712._0_8_ = NULL;\n        uStack696 = 0;\n        while (piVar5 != NULL) {\n            uStack72 = CONCAT26(uStack72._6_2_, 0x3f002a);\n            piVar6 = fcn.140018514(piVar5, &uStack72);\n            piVar5 = *arg1;\n            if (piVar6 == NULL) {\n                iVar3 = fcn.14001aa98(piVar5, 0, 0, auStack712);\ncode_r0x00014001a905:\n                if (iVar3 != 0) goto code_r0x00014001aa19;\n            }\n            else {\n                while ((piVar6 != piVar5 &&\n                       ((0x2d < *piVar6 - 0x2fU || ((0x200000000801U >> (*piVar6 - 0x2fU & 0x3f) & 1) == 0))))) {\n                    piVar6 = piVar6 + -1;\n                }\n                if ((*piVar6 == 0x3a) && (piVar6 != piVar5 + 1)) {\ncode_r0x00014001a7da:\n                    iVar3 = fcn.14001aa98(piVar5, 0, 0, auStack712);\ncode_r0x00014001a8f8:\n                    goto code_r0x00014001a905;\n                }\n                uVar8 = *piVar6 - 0x2f;\n                if ((0x2d < uVar8) || (uVar2 = 1,  (0x200000000801U >> (uVar8 & 0x3f) & 1) == 0)) {\n                    uVar2 = 0;\n                }\n                uStack720 = 0;\n                uStack728 = 0;\n                uVar15 = -uVar2 & (piVar6 - piVar5 >> 1) + 1U;\n                uStack688 = uVar15;\n                iVar7 = (*_sym.imp.KERNEL32.dll_FindFirstFileExW)(piVar5, 0, auStack664, 0);\n                if (iVar7 == -1) goto code_r0x00014001a7da;\n                iStack680 = auStack712._8_8_ - auStack712._0_8_ >> 3;\n                do {\n                    if (((iStack620 != 0x2e) || ((iStack618 != 0 && ((iStack618 != 0x2e || (iStack616 != 0)))))) &&\n                       (iVar3 = fcn.14001aa98(&iStack620, piVar5, uVar15, auStack712),  uVar15 = uStack688,  iVar3 != 0)\n                       ) {\n                        (*_sym.imp.KERNEL32.dll_FindClose)(iVar7);\n                        goto code_r0x00014001a8f8;\n                    }\n                    iVar3 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(iVar7, auStack664);\n                } while (iVar3 != 0);\n                iVar9 = auStack712._8_8_ - auStack712._0_8_ >> 3;\n                if (iStack680 != iVar9) {\n                    fcn.14001fe70(auStack712._0_8_ + iStack680, iVar9 - iStack680, 8, 0x14001a6b8);\n                    (*_sym.imp.KERNEL32.dll_FindClose)(iVar7);\n                    iVar3 = 0;\n                    goto code_r0x00014001a905;\n                }\n                (*_sym.imp.KERNEL32.dll_FindClose)(iVar7);\n            }\n            arg1 = arg1 + 1;\n            piVar5 = *arg1;\n        }\n        uStack72 = 0;\n        iVar7 = (auStack712._8_8_ - auStack712._0_8_ >> 3) + 1;\n        uVar15 = (auStack712._8_8_ - auStack712._0_8_) + 7U >> 3;\n        if (auStack712._8_8_ < auStack712._0_8_) {\n            uVar15 = uVar11;\n        }\n        piVar10 = auStack712._0_8_;\n        uVar12 = uVar11;\n        uVar13 = uVar11;\n        if (uVar15 != 0) {\n            do {\n                iVar9 = -1;\n                do {\n                    iVar9 = iVar9 + 1;\n                } while (*(*piVar10 + iVar9 * 2) != 0);\n                piVar10 = piVar10 + 1;\n                uVar13 = uVar13 + 1 + iVar9;\n                uVar12 = uVar12 + 1;\n                uStack72 = uVar13;\n            } while (uVar12 != uVar15);\n        }\n        iVar9 = fcn.14001209c(iVar7, uStack72);\n        if (iVar9 != 0) {\n            uVar15 = iVar9 + iVar7 * 8;\n            uStack688 = uVar15;\n            if (auStack712._0_8_ != auStack712._8_8_) {\n                iStack680 = iVar9 - auStack712._0_8_;\n                piVar10 = auStack712._0_8_;\n                do {\n                    iVar7 = -1;\n                    do {\n                        iVar14 = iVar7;\n                        iVar7 = iVar14 + 1;\n                    } while (*(*piVar10 + iVar7 * 2) != 0);\n                    iVar14 = iVar14 + 2;\n                    iVar3 = fcn.14001a5d4(uVar15, uStack72 - (uVar15 - uStack688 >> 1), *piVar10, iVar14);\n                    if (iVar3 != 0) {\n                        uStack728 = 0;\n                        fcn.140014104(0, 0, 0, 0);\n                        pcVar1 = swi(3);\n                        (*pcVar1)();\n                        return;\n                    }\n                    *(iStack680 + piVar10) = uVar15;\n                    piVar10 = piVar10 + 1;\n                    uVar15 = uVar15 + iVar14 * 2;\n                } while (piVar10 != auStack712._8_8_);\n            }\n            *piStack672 = iVar9;\n        }\n        fcn.14001429c(0);\ncode_r0x00014001aa19:\n        uVar15 = auStack712._8_8_ + (7 - auStack712._0_8_) >> 3;\n        if (auStack712._8_8_ < auStack712._0_8_) {\n            uVar15 = uVar11;\n        }\n        piVar10 = auStack712._0_8_;\n        if (uVar15 != 0) {\n            do {\n                fcn.14001429c(*piVar10);\n                uVar11 = uVar11 + 1;\n                piVar10 = piVar10 + 1;\n            } while (uVar11 != uVar15);\n        }\n        fcn.14001429c(auStack712._0_8_);\n    }\n    fcn.1400085e0(uStack64 ^ auStack760);\n    return;\n}\n",
        "token_count": 2022
    },
    "140001bb": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140001bb0(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    ulong uStackX24;\n    ulong uStackX32;\n    \n    uStackX24 = arg3;\n    uStackX32 = arg4;\n    fcn.140001ca0(arg2, &uStackX24);\n    fcn.14000b4d8(arg1);\n    return;\n}\n",
        "token_count": 94
    },
    "140001c5": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140001c50(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint uVar1;\n    ulong arg3_00;\n    ulong uStackX24;\n    ulong uStackX32;\n    \n    uStackX24 = arg3;\n    uStackX32 = arg4;\n    fcn.140001ca0(arg2, &uStackX24);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n    arg3_00 = fcn.140004dd0(uVar1);\n    fcn.140001b80(\"%s: %s\", arg1, arg3_00, arg4);\n    return;\n}\n",
        "token_count": 152
    },
    "140002bb": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140002bb0(ulong param_1, ulong param_2)\n\n{\n    int64_t iVar1;\n    uchar auStackX24 [16];\n    ulong uStack16;\n    \n    uStack16 = 0x140002bbc;\n    iVar1 = fcn.140008570();\n    iVar1 = -iVar1;\n    *(&stack0x00002038 + iVar1) = *0x140034018 ^ &stack0xfffffffffffffff8 + iVar1;\n    *(&stack0xfffffffffffffff0 + iVar1) = 0x140002be7;\n    fcn.140005410(&stack0x00000038 + iVar1, param_1, 0x1000);\n    *(&stack0xfffffffffffffff0 + iVar1) = 0x140002bfa;\n    fcn.140005410(&stack0x00000018 + iVar1, param_2, 10);\n    *(&stack0xfffffffffffffff0 + iVar1) = 0x140002c09;\n    fcn.14000f9a8(&stack0x00000038 + iVar1, &stack0x00000018 + iVar1);\n    *(&stack0xfffffffffffffff0 + iVar1) = 0x140002c19;\n    fcn.1400085e0(*(&stack0x00002038 + iVar1) ^ &stack0xfffffffffffffff8 + iVar1);\n    return;\n}\n",
        "token_count": 311
    },
    "140004dd": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140004dd0(uint32_t param_1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint64_t arg3;\n    uchar *arg3_00;\n    ulong uVar3;\n    int64_t iStackX24;\n    uint auStackX32 [2];\n    ulong uStack16;\n    \n    uStack16 = 0x140004ddc;\n    iVar2 = fcn.140008570();\n    iVar2 = -iVar2;\n    *(&stack0x00002038 + iVar2) = *0x140034018 ^ &stack0xfffffffffffffff8 + iVar2;\n    if (param_1 == 0) {\n        *(&stack0xfffffffffffffff0 + iVar2) = 0x140004dfd;\n        param_1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n    }\n    *(&stack0x00000028 + iVar2) = 0;\n    uVar3 = 0x400;\n    *(&stack0x00000020 + iVar2) = 0x1000;\n    arg3 = param_1;\n    *(&stack0x00000018 + iVar2) = &stack0x00000038 + iVar2;\n    *(&stack0xfffffffffffffff0 + iVar2) = 0x140004e2c;\n    iVar1 = (*_sym.imp.KERNEL32.dll_FormatMessageW)(0x1000, 0);\n    if (iVar1 == 0) {\n        *(&stack0xfffffffffffffff0 + iVar2) = 0x140004e43;\n        fcn.140001c50(0x140024f78, \"No error messages generated.\\n\", arg3, uVar3);\n    }\n    else {\n        *(&stack0x00000030 + iVar2) = 0;\n        arg3_00 = &stack0x00000038 + iVar2;\n        *(&stack0x00000028 + iVar2) = 0;\n        uVar3 = 0xffffffff;\n        *(&stack0x00000020 + iVar2) = 0x1000;\n        *(&stack0x00000018 + iVar2) = 0x140041d30;\n        *(&stack0xfffffffffffffff0 + iVar2) = 0x140004e82;\n        iVar1 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0xfde9, 0);\n        if (iVar1 == 0) {\n            *(&stack0xfffffffffffffff0 + iVar2) = 0x140004e99;\n            fcn.140001c50(0x140025038, \"Failed to encode wchar_t as UTF-8.\\n\", arg3_00, uVar3);\n        }\n    }\n    *(&stack0xfffffffffffffff0 + iVar2) = 0x140004eb5;\n    fcn.1400085e0(*(&stack0x00002038 + iVar2) ^ &stack0xfffffffffffffff8 + iVar2);\n    return;\n}\n",
        "token_count": 661
    },
    "1400050c": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.1400050c0(ulong param_1)\n\n{\n    char16_t *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    ulong uVar4;\n    ulong *arg1;\n    char16_t *arg4;\n    int64_t aiStackX24 [2];\n    ulong uStack16;\n    \n    uStack16 = 0x1400050d0;\n    iVar3 = fcn.140008570();\n    iVar3 = -iVar3;\n    *(&stack0x00002058 + iVar3) = *0x140034018 ^ &stack0xfffffffffffffff8 + iVar3;\n    arg1 = NULL;\n    *(&stack0x00000030 + iVar3) = 0xffffffffffffffff;\n    *(&stack0x00000038 + iVar3) = 0;\n    *(&stack0x00000028 + iVar3) = 0;\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140005106;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140005117;\n    iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar4, 8, &stack0x00000030 + iVar3);\n    if (iVar2 != 0) {\n        *(&stack0x00000018 + iVar3) = &stack0x00000028 + iVar3;\n        *(&stack0xfffffffffffffff0 + iVar3) = 0x140005139;\n        iVar2 = (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(*(&stack0x00000030 + iVar3), 1, 0, 0);\n        if (iVar2 == 0) {\n            *(&stack0xfffffffffffffff0 + iVar3) = 0x140005143;\n            iVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar2 != 0x7a) goto code_r0x000140005191;\n        }\n        *(&stack0xfffffffffffffff0 + iVar3) = 0x140005156;\n        arg1 = fcn.14000a420(1, *(&stack0x00000028 + iVar3));\n        if (arg1 != NULL) {\n            *(&stack0x00000018 + iVar3) = &stack0x00000028 + iVar3;\n            *(&stack0xfffffffffffffff0 + iVar3) = 0x140005180;\n            iVar2 = (*_sym.imp.ADVAPI32.dll_GetTokenInformation)\n                              (*(&stack0x00000030 + iVar3), 1, arg1, *(&stack0x00000028 + iVar3));\n            if (iVar2 != 0) {\n                uVar4 = *arg1;\n                *(&stack0xfffffffffffffff0 + iVar3) = 0x140005191;\n                sub.ADVAPI32.dll_ConvertSidToStringSidW(uVar4, &stack0x00000038 + iVar3);\n            }\n        }\n    }\ncode_r0x000140005191:\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140005199;\n    fcn.14000a428(arg1);\n    if (*(&stack0x00000030 + iVar3) != -1) {\n        *(&stack0xfffffffffffffff0 + iVar3) = 0x1400051aa;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)();\n    }\n    pcVar1 = *(&stack0x00000038 + iVar3);\n    arg4 = L\"S-1-3-4\";\n    if (pcVar1 != NULL) {\n        arg4 = pcVar1;\n    }\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x1400051d3;\n    fcn.140004ec0(&stack0x00000058 + iVar3, 0x1000, L\"D:(A;;FA;;;%s)\", arg4);\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x1400051dc;\n    (*_sym.imp.KERNEL32.dll_LocalFree)(pcVar1);\n    *(&stack0x00000040 + iVar3) = 0x18;\n    *(&stack0x00000050 + iVar3) = 0;\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140005202;\n    iVar2 = sub.ADVAPI32.dll_ConvertStringSecurityDescriptorToSecurityDescriptorW\n                      (&stack0x00000058 + iVar3, 1, &stack0x00000048 + iVar3);\n    if (iVar2 != 0) {\n        *(&stack0xfffffffffffffff0 + iVar3) = 0x140005214;\n        (*_sym.imp.KERNEL32.dll_CreateDirectoryW)(param_1, &stack0x00000040 + iVar3);\n    }\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140005231;\n    fcn.1400085e0(*(&stack0x00002058 + iVar3) ^ &stack0xfffffffffffffff8 + iVar3);\n    return;\n}\n",
        "token_count": 1134
    },
    "14000ea4": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14000ea40(uint64_t arg1, uchar *arg2, int64_t arg3, int64_t arg4)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    ulong in_stack_00000028;\n    ulong var_3b8h;\n    ulong var_3c0h;\n    ulong var_3c8h;\n    ulong var_3d0h;\n    ulong var_3e0h;\n    uchar auStack1320 [32];\n    uchar *puStack1288;\n    int64_t iStack1280;\n    int64_t iStack1272;\n    uchar uStack1264;\n    uint uStack1263;\n    ushort uStack1259;\n    uchar uStack1257;\n    int64_t iStack1256;\n    uchar auStack1248 [16];\n    char cStack1232;\n    uint64_t uStack1224;\n    uchar *puStack1216;\n    ulong uStack1208;\n    int64_t iStack1200;\n    ulong uStack1184;\n    ulong uStack1176;\n    uint uStack1168;\n    ushort uStack1160;\n    uint uStack1144;\n    uchar uStack1140;\n    ulong var_80h;\n    ulong var_78h;\n    ulong var_bp_70h;\n    ulong var_bp_68h;\n    ulong var_bp_60h;\n    uchar **ppuStack96;\n    ulong var_50h;\n    uint64_t uStack72;\n    \n    uStack72 = *0x140034018 ^ auStack1320;\n    if ((arg4 == 0) || ((arg3 != 0 && (arg2 == NULL)))) {\n        puVar2 = fcn.140014204(arg1);\n        *puVar2 = 0x16;\n        fcn.1400140e4();\n        goto code_r0x00014000b762;\n    }\n    fcn.14000beec(&iStack1256, in_stack_00000028);\n    uStack1263 = 0;\n    uStack1259 = 0;\n    uStack1257 = 0;\n    iStack1272 = 0;\n    if (((arg1 & 2) != 0) || (uStack1264 = 0,  arg2 == NULL)) {\n        uStack1264 = 1;\n    }\n    ppuStack96 = &puStack1288;\n    uStack1208 = 0;\n    puStack1216 = auStack1248;\n    uStack1184 = 0;\n    uStack1176 = 0;\n    uStack1168 = 0;\n    uStack1160 = 0;\n    uStack1144 = 0;\n    uStack1140 = 0;\n    var_bp_68h = 0;\n    var_bp_60h = 0;\n    var_50h._0_4_ = 0;\n    puStack1288 = arg2;\n    iStack1280 = arg3;\n    uStack1224 = arg1;\n    iStack1200 = arg4;\n    iVar1 = fcn.14000c484(&uStack1224);\n    if (arg2 != NULL) {\n        if ((arg1 & 1) == 0) {\n            if ((arg1 & 2) == 0) {\n                if (arg3 != 0) {\n                    if (iStack1272 != arg3) goto code_r0x00014000b736;\ncode_r0x00014000b79c:\n                    arg2[arg3 + -1] = 0;\n                }\n            }\n            else if (arg3 != 0) {\n                if (-1 < iVar1) {\n                    if (iStack1272 == arg3) goto code_r0x00014000b79c;\n                    goto code_r0x00014000b736;\n                }\n                *arg2 = 0;\n            }\n        }\n        else if (((arg3 != 0) || (iVar1 == 0)) && (iStack1272 != arg3)) {\ncode_r0x00014000b736:\n            arg2[iStack1272] = 0;\n        }\n    }\n    fcn.14001429c(var_bp_60h);\n    var_bp_60h = 0;\n    if (cStack1232 != '\\0') {\n        *(iStack1256 + 0x3a8) = *(iStack1256 + 0x3a8) & 0xfffffffd;\n    }\ncode_r0x00014000b762:\n    fcn.1400085e0(uStack72 ^ auStack1320);\n    return;\n}\n",
        "token_count": 1022
    },
    "1400143b": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nulong fcn.1400143b0(int64_t arg1)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    uint32_t auStackX8 [2];\n    uchar auStackX16 [8];\n    uint32_t auStackX24 [2];\n    uint32_t auStackX32 [2];\n    uint32_t *apuStack24 [3];\n    \n    auStackX8[0] = arg1;\n    if (auStackX8[0] == 0xfffffffe) {\n        puVar1 = fcn.1400141e4(arg1);\n        *puVar1 = 0;\n        puVar1 = fcn.140014204(arg1);\n        *puVar1 = 9;\n    }\n    else {\n        if (((-1 < auStackX8[0]) && (auStackX8[0] < *0x140043ba0)) &&\n           (arg1 = (auStackX8[0] & 0x3f) * 9, \n           (*(*((auStackX8[0] >> 6) * 8 + 0x1400437a0) + 0x38 + (auStackX8[0] & 0x3f) * 0x48) & 1) != 0)) {\n            apuStack24[0] = auStackX8;\n            auStackX24[0] = auStackX8[0];\n            auStackX32[0] = auStackX8[0];\n            uVar2 = fcn.14001433c(auStackX16, auStackX32, apuStack24, auStackX24);\n            return uVar2;\n        }\n        puVar1 = fcn.1400141e4(arg1);\n        *puVar1 = 0;\n        puVar1 = fcn.140014204(arg1);\n        *puVar1 = 9;\n        fcn.1400140e4();\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 442
    },
    "14000402": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\nvoid fcn.140004020(ulong param_1, int64_t param_2, ulong param_3, ulong param_4)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int64_t lpMultiByteStr;\n    int64_t iVar5;\n    ulong uVar6;\n    ulong arg2;\n    int64_t arg2_00;\n    int64_t iStackX8;\n    uchar auStackX16 [8];\n    ulong uStack32;\n    \n    uStack32 = 0x140004038;\n    iVar4 = fcn.140008570();\n    iVar4 = -iVar4;\n    *(&stack0x00002038 + iVar4) = *0x140034018 ^ &stack0xffffffffffffffe8 + iVar4;\n    if (param_2 == 0) {\n        lpMultiByteStr = *(&stack0x00000008 + iVar4);\n    }\n    else {\n        *(&stack0xffffffffffffffe0 + iVar4) = 0x140004064;\n        lpMultiByteStr = fcn.140004230(0x140024e44);\n        *(&stack0xffffffffffffffe0 + iVar4) = 0x14000406f;\n        iVar5 = fcn.140003d50(param_2);\n        if (iVar5 == 0) goto code_r0x000140004208;\n        *(&stack0xffffffffffffffe0 + iVar4) = 0x14000408a;\n        arg2_00 = iVar5;\n        iVar1 = fcn.14001086c(0x140024e48, iVar5);\n        *(&stack0xffffffffffffffe0 + iVar4) = 0x140004094;\n        fcn.14000a428(iVar5);\n        if (iVar1 != 0) {\n            *(&stack0xffffffffffffffe0 + iVar4) = 0x1400040a4;\n            fcn.140001bf0(\"LOADER: Failed to set the TMP environment variable.\\n\", arg2_00, param_3, param_4);\n            goto code_r0x000140004208;\n        }\n    }\n    *(&stack0xffffffffffffffe0 + iVar4) = 0x1400040c0;\n    (*_sym.imp.KERNEL32.dll_GetTempPathW)(0x1000, &stack0x00000038 + iVar4);\n    *(&stack0xffffffffffffffe0 + iVar4) = 0x1400040c5;\n    uVar2 = sub.KERNEL32.dll_GetCurrentProcessId();\n    *(&stack0xffffffffffffffe0 + iVar4) = 0x1400040de;\n    fcn.140004be0(&stack0x00000010 + iVar4, 0x10, L\"_MEI%d\", uVar2);\n    iVar1 = 0;\n    do {\n        *(&stack0xffffffffffffffe0 + iVar4) = 0x1400040ef;\n        uVar6 = fcn.140011a9c(&stack0x00000038 + iVar4, &stack0x00000010 + iVar4);\n        *(&stack0xffffffffffffffe0 + iVar4) = 0x1400040fa;\n        iVar3 = fcn.1400050c0(uVar6);\n        if (iVar3 == 0) {\n            *(&stack0xffffffffffffffe0 + iVar4) = 0x140004197;\n            fcn.140005520(param_1, uVar6, 0x1000);\n            *(&stack0xffffffffffffffe0 + iVar4) = 0x14000419f;\n            fcn.14000a428(uVar6);\n            if (param_2 != 0) {\n                *(&stack0xffffffffffffffe0 + iVar4) = 0x1400041b5;\n                iVar5 = fcn.140005410(0, 0x140024e44, 0);\n                if (lpMultiByteStr == 0) {\n                    *(&stack0xffffffffffffffe0 + iVar4) = 0x1400041fb;\n                    (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableW)(iVar5, 0);\n                }\n                else {\n                    *(&stack0xffffffffffffffe0 + iVar4) = 0x1400041ca;\n                    uVar6 = fcn.140005410(0, lpMultiByteStr, 0);\n                    *(&stack0xffffffffffffffe0 + iVar4) = 0x1400041d8;\n                    fcn.14001086c(iVar5, uVar6);\n                    *(&stack0xffffffffffffffe0 + iVar4) = 0x1400041e0;\n                    fcn.14000a428(iVar5);\n                    *(&stack0xffffffffffffffe0 + iVar4) = 0x1400041e8;\n                    fcn.14000a428(uVar6);\n                    iVar5 = lpMultiByteStr;\n                }\n                *(&stack0xffffffffffffffe0 + iVar4) = 0x140004203;\n                fcn.14000a428(iVar5);\n            }\n            goto code_r0x000140004208;\n        }\n        *(&stack0xffffffffffffffe0 + iVar4) = 0x14000410a;\n        fcn.14000a428(uVar6);\n        iVar1 = iVar1 + 1;\n    } while (iVar1 < 5);\n    if (param_2 != 0) {\n        *(&stack0xffffffffffffffe0 + iVar4) = 0x140004127;\n        uVar6 = fcn.140005410(0, 0x140024e44, 0);\n        if (lpMultiByteStr == 0) {\n            *(&stack0xffffffffffffffe0 + iVar4) = 0x140004177;\n            (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableW)(uVar6, 0);\n            *(&stack0xffffffffffffffe0 + iVar4) = 0x14000417f;\n            fcn.14000a428(uVar6);\n        }\n        else {\n            *(&stack0xffffffffffffffe0 + iVar4) = 0x14000413c;\n            arg2 = fcn.140005410(0, lpMultiByteStr, 0);\n            *(&stack0xffffffffffffffe0 + iVar4) = 0x14000414a;\n            fcn.14001086c(uVar6, arg2);\n            *(&stack0xffffffffffffffe0 + iVar4) = 0x140004152;\n            fcn.14000a428(uVar6);\n            *(&stack0xffffffffffffffe0 + iVar4) = 0x14000415a;\n            fcn.14000a428(arg2);\n            *(&stack0xffffffffffffffe0 + iVar4) = 0x140004162;\n            fcn.14000a428(lpMultiByteStr);\n        }\n    }\ncode_r0x000140004208:\n    *(&stack0xffffffffffffffe0 + iVar4) = 0x140004218;\n    fcn.1400085e0(*(&stack0x00002038 + iVar4) ^ &stack0xffffffffffffffe8 + iVar4);\n    return;\n}\n",
        "token_count": 1607
    },
    "1400154f": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nulong fcn.1400154f8(uint64_t arg1, ulong arg2, ulong arg3)\n\n{\n    uint *puVar1;\n    uint32_t uVar2;\n    uint64_t arg1_00;\n    int64_t iVar3;\n    ulong uVar4;\n    \n    uVar2 = arg1;\n    if (uVar2 == 0xfffffffe) {\n        puVar1 = fcn.1400141e4(arg1);\n        *puVar1 = 0;\n        puVar1 = fcn.140014204(arg1);\n        *puVar1 = 9;\n    }\n    else {\n        if ((-1 < uVar2) && (uVar2 < *0x140043ba0)) {\n            iVar3 = uVar2 >> 6;\n            if ((*(*(iVar3 * 8 + 0x1400437a0) + 0x38 + (uVar2 & 0x3f) * 0x48) & 1) != 0) {\n                arg1_00 = uVar2 & 0xffffffff;\n                fcn.140010da4(arg1_00);\n                uVar4 = 0xffffffffffffffff;\n                if ((*(*(iVar3 * 8 + 0x1400437a0) + 0x38 + (uVar2 & 0x3f) * 0x48) & 1) == 0) {\n                    puVar1 = fcn.140014204(arg1_00);\n                    *puVar1 = 9;\n                    puVar1 = fcn.1400141e4(arg1_00);\n                    *puVar1 = 0;\n                }\n                else {\n                    uVar4 = fcn.14001545c(arg1 & 0xffffffff, arg2, arg3);\n                }\n                fcn.140010e8c(arg1 & 0xffffffff);\n                return uVar4;\n            }\n        }\n        puVar1 = fcn.1400141e4(arg1);\n        *puVar1 = 0;\n        puVar1 = fcn.140014204(arg1);\n        *puVar1 = 9;\n        fcn.1400140e4();\n    }\n    return 0xffffffffffffffff;\n}\n",
        "token_count": 490
    },
    "1400076e": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498",
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nuint32_t fcn.1400076e0(ulong arg1, uint32_t *arg2, ulong arg3)\n\n{\n    uint8_t uVar1;\n    uint64_t uVar2;\n    uint32_t uVar3;\n    uint64_t uVar4;\n    \n    uVar4 = arg3;\n    if (arg2 == NULL) {\n        return 0;\n    }\n    arg1._0_4_ = ~arg1;\n    for (; (uVar4 != 0 && ((arg2 & 3) != 0)); arg2 = arg2 + 1) {\n        arg1._0_4_ = *((*arg2 ^ arg1) * 4 + 0x140025c80) ^ arg1 >> 8;\n        uVar4 = uVar4 - 1;\n    }\n    if (0x1f < uVar4) {\n        uVar2 = uVar4 >> 5;\n        uVar4 = uVar4 + uVar2 * -0x20;\n        do {\n            arg1._0_4_ = arg1 ^ *arg2;\n            uVar3 = *((arg1 >> 0x10) * 4 + 0x140026080) ^ *((arg1 >> 8) * 4 + 0x140026480) ^\n                    *((arg1 >> 0x18) * 4 + 0x140025c80) ^ *((arg1 & 0xff) * 4 + 0x140026880) ^ arg2[1];\n            uVar3 = *((uVar3 >> 0x10) * 4 + 0x140026080) ^ *((uVar3 >> 8) * 4 + 0x140026480) ^\n                    *((uVar3 >> 0x18) * 4 + 0x140025c80) ^ *((uVar3 & 0xff) * 4 + 0x140026880) ^ arg2[2];\n            uVar3 = *((uVar3 >> 0x10) * 4 + 0x140026080) ^ *((uVar3 >> 8) * 4 + 0x140026480) ^\n                    *((uVar3 >> 0x18) * 4 + 0x140025c80) ^ *((uVar3 & 0xff) * 4 + 0x140026880) ^ arg2[3];\n            uVar3 = *((uVar3 >> 0x10) * 4 + 0x140026080) ^ *((uVar3 >> 8) * 4 + 0x140026480) ^\n                    *((uVar3 >> 0x18) * 4 + 0x140025c80) ^ *((uVar3 & 0xff) * 4 + 0x140026880) ^ arg2[4];\n            uVar3 = *((uVar3 >> 0x10) * 4 + 0x140026080) ^ *((uVar3 >> 8) * 4 + 0x140026480) ^\n                    *((uVar3 >> 0x18) * 4 + 0x140025c80) ^ *((uVar3 & 0xff) * 4 + 0x140026880) ^ arg2[5];\n            uVar3 = *((uVar3 >> 0x10) * 4 + 0x140026080) ^ *((uVar3 >> 8) * 4 + 0x140026480) ^\n                    *((uVar3 >> 0x18) * 4 + 0x140025c80) ^ *((uVar3 & 0xff) * 4 + 0x140026880) ^ arg2[6];\n            uVar3 = *((uVar3 >> 0x10) * 4 + 0x140026080) ^ *((uVar3 >> 8) * 4 + 0x140026480) ^\n                    *((uVar3 >> 0x18) * 4 + 0x140025c80) ^ *((uVar3 & 0xff) * 4 + 0x140026880) ^ arg2[7];\n            arg2 = arg2 + 8;\n            arg1._0_4_ = *((uVar3 >> 0x10) * 4 + 0x140026080) ^ *((uVar3 >> 8) * 4 + 0x140026480) ^\n                         *((uVar3 >> 0x18) * 4 + 0x140025c80) ^ *((uVar3 & 0xff) * 4 + 0x140026880);\n            uVar2 = uVar2 - 1;\n        } while (uVar2 != 0);\n    }\n    if (3 < uVar4) {\n        uVar2 = uVar4 >> 2;\n        uVar4 = uVar4 + uVar2 * -4;\n        do {\n            arg1._0_4_ = arg1 ^ *arg2;\n            arg2 = arg2 + 1;\n            arg1._0_4_ = *((arg1 >> 0x10) * 4 + 0x140026080) ^ *((arg1 >> 8) * 4 + 0x140026480) ^\n                         *((arg1 >> 0x18) * 4 + 0x140025c80) ^ *((arg1 & 0xff) * 4 + 0x140026880);\n            uVar2 = uVar2 - 1;\n        } while (uVar2 != 0);\n    }\n    for (; uVar4 != 0; uVar4 = uVar4 - 1) {\n        uVar1 = *arg2;\n        arg2 = arg2 + 1;\n        arg1._0_4_ = *((uVar1 ^ arg1) * 4 + 0x140025c80) ^ arg1 >> 8;\n    }\n    return ~arg1;\n}\n",
        "token_count": 1317
    },
    "1400092f": {
        "rules": [
            "encrypt data using Curve25519/98eda359275044f0933c6ca58186cb36"
        ],
        "decompiled_code": "\nulong * fcn.1400092f0(ulong *arg1, ulong *arg2, uint64_t arg3)\n\n{\n    uint *puVar1;\n    uchar uVar2;\n    ushort uVar3;\n    ulong *puVar4;\n    ulong *puVar5;\n    uint *puVar6;\n    uint *puVar7;\n    uint *puVar8;\n    int64_t iVar9;\n    uchar *puVar10;\n    uint64_t uVar11;\n    uint64_t uVar12;\n    uint uVar13;\n    uint uVar14;\n    uint uVar15;\n    uint uVar16;\n    uint uVar17;\n    uint uVar18;\n    uint uVar19;\n    uint uVar20;\n    \n    if (arg3 < 0x11) {\n    // switch table (17 cases) at 0x140047000\n        switch(*(arg3 * 4 + 0x140047000) + 0x140000000) {\n        case 0x140009370:\n            return arg1;\n        case 0x140009371:\n            *arg1 = *arg2;\n            return arg1;\n        case 0x140009378:\n            *arg1 = *arg2;\n            return arg1;\n        case 0x14000937f:\n            uVar2 = *(arg2 + 2);\n            *arg1 = *arg2;\n            *(arg1 + 2) = uVar2;\n            return arg1;\n        case 0x14000938f:\n            *arg1 = *arg2;\n            return arg1;\n        case 0x140009395:\n            uVar17 = *(arg2 + 4);\n            uVar18 = *(arg2 + 1);\n            uVar19 = *(arg2 + 0xc);\n            *arg1 = *arg2;\n            *(arg1 + 4) = uVar17;\n            *(arg1 + 1) = uVar18;\n            *(arg1 + 0xc) = uVar19;\n            return arg1;\n        case 0x1400093a0:\n            uVar3 = *(arg2 + 1);\n            uVar2 = *(arg2 + 10);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar3;\n            *(arg1 + 10) = uVar2;\n            return arg1;\n        case 0x1400093b8:\n            *arg1 = *arg2;\n            return arg1;\n        case 0x1400093c0:\n            uVar2 = *(arg2 + 4);\n            *arg1 = *arg2;\n            *(arg1 + 4) = uVar2;\n            return arg1;\n        case 0x1400093d0:\n            uVar3 = *(arg2 + 4);\n            *arg1 = *arg2;\n            *(arg1 + 4) = uVar3;\n            return arg1;\n        case 0x1400093e0:\n            uVar3 = *(arg2 + 4);\n            uVar2 = *(arg2 + 6);\n            *arg1 = *arg2;\n            *(arg1 + 4) = uVar3;\n            *(arg1 + 6) = uVar2;\n            return arg1;\n        case 0x1400093f8:\n            uVar17 = *(arg2 + 1);\n            uVar2 = *(arg2 + 0xc);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar17;\n            *(arg1 + 0xc) = uVar2;\n            return arg1;\n        case 0x140009410:\n            uVar2 = *(arg2 + 1);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar2;\n            return arg1;\n        case 0x140009420:\n            uVar3 = *(arg2 + 1);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar3;\n            return arg1;\n        case 0x140009430:\n            uVar17 = *(arg2 + 1);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar17;\n            return arg1;\n        case 0x140009440:\n            uVar17 = *(arg2 + 1);\n            uVar3 = *(arg2 + 0xc);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar17;\n            *(arg1 + 0xc) = uVar3;\n            return arg1;\n        case 0x140009460:\n            uVar17 = *(arg2 + 1);\n            uVar3 = *(arg2 + 0xc);\n            uVar2 = *(arg2 + 0xe);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar17;\n            *(arg1 + 0xc) = uVar3;\n            *(arg1 + 0xe) = uVar2;\n            return arg1;\n        }\n    }\n    if (0x20 < arg3) {\n        iVar9 = arg2 - arg1;\n        if ((arg2 < arg1) && (arg1 < arg3 + arg2)) {\n            puVar8 = arg1 + iVar9 + (arg3 - 0x10);\n            uVar17 = puVar8[1];\n            uVar18 = puVar8[2];\n            uVar19 = puVar8[3];\n            puVar6 = arg1 + (arg3 - 0x10);\n            uVar11 = arg3 - 0x10;\n            puVar7 = puVar6;\n            uVar20 = *puVar8;\n            uVar13 = uVar17;\n            uVar14 = uVar18;\n            uVar15 = uVar19;\n            if ((puVar6 & 0xf) != 0) {\n                puVar7 = puVar6 & 0xfffffffffffffff0;\n                puVar1 = puVar7 + iVar9;\n                uVar20 = *puVar1;\n                uVar13 = puVar1[1];\n                uVar14 = puVar1[2];\n                uVar15 = puVar1[3];\n                *puVar6 = *puVar8;\n                *(arg1 + (arg3 - 0xc)) = uVar17;\n                *(arg1 + (arg3 - 8)) = uVar18;\n                *(arg1 + (arg3 - 4)) = uVar19;\n                uVar11 = puVar7 - arg1;\n            }\n            uVar12 = uVar11 >> 7;\n            if (uVar12 != 0) {\n                *puVar7 = uVar20;\n                puVar7[1] = uVar13;\n                puVar7[2] = uVar14;\n                puVar7[3] = uVar15;\n                puVar8 = puVar7;\n                while( true ) {\n                    puVar6 = puVar8 + iVar9 + -0x10;\n                    uVar17 = puVar6[1];\n                    uVar18 = puVar6[2];\n                    uVar19 = puVar6[3];\n                    puVar7 = puVar8 + iVar9 + -0x20;\n                    uVar20 = *puVar7;\n                    uVar13 = puVar7[1];\n                    uVar14 = puVar7[2];\n                    uVar15 = puVar7[3];\n                    puVar7 = puVar8 + -0x20;\n                    puVar8[-4] = *puVar6;\n                    puVar8[-3] = uVar17;\n                    puVar8[-2] = uVar18;\n                    puVar8[-1] = uVar19;\n                    puVar8[-8] = uVar20;\n                    puVar8[-7] = uVar13;\n                    puVar8[-6] = uVar14;\n                    puVar8[-5] = uVar15;\n                    puVar6 = puVar8 + iVar9 + -0x30;\n                    uVar17 = puVar6[1];\n                    uVar18 = puVar6[2];\n                    uVar19 = puVar6[3];\n                    puVar1 = puVar8 + iVar9 + -0x40;\n                    uVar20 = *puVar1;\n                    uVar13 = puVar1[1];\n                    uVar14 = puVar1[2];\n                    uVar15 = puVar1[3];\n                    uVar12 = uVar12 - 1;\n                    puVar8[-0xc] = *puVar6;\n                    puVar8[-0xb] = uVar17;\n                    puVar8[-10] = uVar18;\n                    puVar8[-9] = uVar19;\n                    puVar8[-0x10] = uVar20;\n                    puVar8[-0xf] = uVar13;\n                    puVar8[-0xe] = uVar14;\n                    puVar8[-0xd] = uVar15;\n                    puVar6 = puVar8 + iVar9 + -0x50;\n                    uVar17 = puVar6[1];\n                    uVar18 = puVar6[2];\n                    uVar19 = puVar6[3];\n                    puVar1 = puVar8 + iVar9 + -0x60;\n                    uVar20 = *puVar1;\n                    uVar13 = puVar1[1];\n                    uVar14 = puVar1[2];\n                    uVar15 = puVar1[3];\n                    puVar8[-0x14] = *puVar6;\n                    puVar8[-0x13] = uVar17;\n                    puVar8[-0x12] = uVar18;\n                    puVar8[-0x11] = uVar19;\n                    puVar8[-0x18] = uVar20;\n                    puVar8[-0x17] = uVar13;\n                    puVar8[-0x16] = uVar14;\n                    puVar8[-0x15] = uVar15;\n                    puVar1 = puVar8 + iVar9 + -0x70;\n                    uVar17 = puVar1[1];\n                    uVar18 = puVar1[2];\n                    uVar19 = puVar1[3];\n                    puVar6 = puVar7 + iVar9;\n                    uVar20 = *puVar6;\n                    uVar13 = puVar6[1];\n                    uVar14 = puVar6[2];\n                    uVar15 = puVar6[3];\n                    if (uVar12 == 0) break;\n                    puVar8[-0x1c] = *puVar1;\n                    puVar8[-0x1b] = uVar17;\n                    puVar8[-0x1a] = uVar18;\n                    puVar8[-0x19] = uVar19;\n                    *puVar7 = uVar20;\n                    puVar8[-0x1f] = uVar13;\n                    puVar8[-0x1e] = uVar14;\n                    puVar8[-0x1d] = uVar15;\n                    puVar8 = puVar7;\n                }\n                puVar8[-0x1c] = *puVar1;\n                puVar8[-0x1b] = uVar17;\n                puVar8[-0x1a] = uVar18;\n                puVar8[-0x19] = uVar19;\n                uVar11 = uVar11 & 0x7f;\n            }\n            for (uVar12 = uVar11 >> 4; uVar12 != 0; uVar12 = uVar12 - 1) {\n                *puVar7 = uVar20;\n                puVar7[1] = uVar13;\n                puVar7[2] = uVar14;\n                puVar7[3] = uVar15;\n                puVar7 = puVar7 + -4;\n                puVar8 = puVar7 + iVar9;\n                uVar20 = *puVar8;\n                uVar13 = puVar8[1];\n                uVar14 = puVar8[2];\n                uVar15 = puVar8[3];\n            }\n            if ((uVar11 & 0xf) != 0) {\n                uVar17 = *(arg2 + 4);\n                uVar18 = *(arg2 + 1);\n                uVar19 = *(arg2 + 0xc);\n                *arg1 = *arg2;\n                *(arg1 + 4) = uVar17;\n                *(arg1 + 1) = uVar18;\n                *(arg1 + 0xc) = uVar19;\n            }\n            *puVar7 = uVar20;\n            puVar7[1] = uVar13;\n            puVar7[2] = uVar14;\n            puVar7[3] = uVar15;\n            return arg1;\n        }\n        if (arg3 < 0x81) {\n            puVar8 = arg1 + iVar9;\n            uVar17 = *puVar8;\n            uVar18 = puVar8[1];\n            uVar19 = puVar8[2];\n            uVar20 = puVar8[3];\n            puVar5 = arg1 + 2;\n            puVar10 = arg3 - 0x10;\n        }\n        else {\n            if ((*0x140043318 & 2) != 0) {\n                puVar5 = arg1;\n                for (; arg3 != 0; arg3 = arg3 - 1) {\n                    *puVar5 = *arg2;\n                    arg2 = arg2 + 1;\n                    puVar5 = puVar5 + 1;\n                }\n                return arg1;\n            }\n            puVar8 = arg1 + iVar9;\n            uVar13 = puVar8[1];\n            uVar14 = puVar8[2];\n            uVar15 = puVar8[3];\n            puVar4 = arg1 + 2;\n            uVar17 = *puVar8;\n            uVar18 = uVar13;\n            uVar19 = uVar14;\n            uVar20 = uVar15;\n            if ((arg1 & 0xf) != 0) {\n                puVar7 = (puVar4 & 0xfffffffffffffff0) + iVar9;\n                uVar17 = *puVar7;\n                uVar18 = puVar7[1];\n                uVar19 = puVar7[2];\n                uVar20 = puVar7[3];\n                puVar4 = (puVar4 & 0xfffffffffffffff0) + 0x10;\n                *arg1 = *puVar8;\n                *(arg1 + 4) = uVar13;\n                *(arg1 + 1) = uVar14;\n                *(arg1 + 0xc) = uVar15;\n            }\n            puVar10 = arg1 + (arg3 - puVar4);\n            uVar11 = puVar10 >> 7;\n            puVar5 = puVar4;\n            if (uVar11 != 0) {\n                *(puVar4 + -2) = uVar17;\n                *(puVar4 + -0xc) = uVar18;\n                *(puVar4 + -1) = uVar19;\n                *(puVar4 + -4) = uVar20;\n                if (*0x140034030 < uVar11) {\n                    while( true ) {\n                        puVar8 = puVar4 + iVar9;\n                        uVar17 = puVar8[1];\n                        uVar18 = puVar8[2];\n                        uVar19 = puVar8[3];\n                        puVar7 = puVar4 + iVar9 + 0x10;\n                        uVar20 = *puVar7;\n                        uVar13 = puVar7[1];\n                        uVar14 = puVar7[2];\n                        uVar15 = puVar7[3];\n                        puVar5 = puVar4 + 0x10;\n                        *puVar4 = *puVar8;\n                        *(puVar4 + 4) = uVar17;\n                        *(puVar4 + 1) = uVar18;\n                        *(puVar4 + 0xc) = uVar19;\n                        *(puVar4 + 2) = uVar20;\n                        *(puVar4 + 0x14) = uVar13;\n                        *(puVar4 + 3) = uVar14;\n                        *(puVar4 + 0x1c) = uVar15;\n                        puVar8 = puVar4 + iVar9 + 0x20;\n                        uVar17 = puVar8[1];\n                        uVar18 = puVar8[2];\n                        uVar19 = puVar8[3];\n                        puVar7 = puVar4 + iVar9 + 0x30;\n                        uVar20 = *puVar7;\n                        uVar13 = puVar7[1];\n                        uVar14 = puVar7[2];\n                        uVar15 = puVar7[3];\n                        uVar11 = uVar11 - 1;\n                        *(puVar4 + 4) = *puVar8;\n                        *(puVar4 + 0x24) = uVar17;\n                        *(puVar4 + 5) = uVar18;\n                        *(puVar4 + 0x2c) = uVar19;\n                        *(puVar4 + 6) = uVar20;\n                        *(puVar4 + 0x34) = uVar13;\n                        *(puVar4 + 7) = uVar14;\n                        *(puVar4 + 0x3c) = uVar15;\n                        puVar8 = puVar4 + iVar9 + 0x40;\n                        uVar17 = puVar8[1];\n                        uVar18 = puVar8[2];\n                        uVar19 = puVar8[3];\n                        puVar7 = puVar4 + iVar9 + 0x50;\n                        uVar20 = *puVar7;\n                        uVar13 = puVar7[1];\n                        uVar14 = puVar7[2];\n                        uVar15 = puVar7[3];\n                        *(puVar4 + 8) = *puVar8;\n                        *(puVar4 + 0x44) = uVar17;\n                        *(puVar4 + 9) = uVar18;\n                        *(puVar4 + 0x4c) = uVar19;\n                        *(puVar4 + 10) = uVar20;\n                        *(puVar4 + 0x54) = uVar13;\n                        *(puVar4 + 0xb) = uVar14;\n                        *(puVar4 + 0x5c) = uVar15;\n                        puVar8 = puVar4 + iVar9 + 0x60;\n                        uVar13 = *puVar8;\n                        uVar14 = puVar8[1];\n                        uVar15 = puVar8[2];\n                        uVar16 = puVar8[3];\n                        puVar8 = puVar4 + iVar9 + 0x70;\n                        uVar17 = *puVar8;\n                        uVar18 = puVar8[1];\n                        uVar19 = puVar8[2];\n                        uVar20 = puVar8[3];\n                        if (uVar11 == 0) break;\n                        *(puVar4 + 0xc) = uVar13;\n                        *(puVar4 + 100) = uVar14;\n                        *(puVar4 + 0xd) = uVar15;\n                        *(puVar4 + 0x6c) = uVar16;\n                        *(puVar4 + 0xe) = uVar17;\n                        *(puVar4 + 0x74) = uVar18;\n                        *(puVar4 + 0xf) = uVar19;\n                        *(puVar4 + 0x7c) = uVar20;\n                        puVar4 = puVar5;\n                    }\n                }\n                else {\n                    while( true ) {\n                        puVar8 = puVar4 + iVar9;\n                        uVar17 = puVar8[1];\n                        uVar18 = puVar8[2];\n                        uVar19 = puVar8[3];\n                        puVar7 = puVar4 + iVar9 + 0x10;\n                        uVar20 = *puVar7;\n                        uVar13 = puVar7[1];\n                        uVar14 = puVar7[2];\n                        uVar15 = puVar7[3];\n                        puVar5 = puVar4 + 0x10;\n                        *puVar4 = *puVar8;\n                        *(puVar4 + 4) = uVar17;\n                        *(puVar4 + 1) = uVar18;\n                        *(puVar4 + 0xc) = uVar19;\n                        *(puVar4 + 2) = uVar20;\n                        *(puVar4 + 0x14) = uVar13;\n                        *(puVar4 + 3) = uVar14;\n                        *(puVar4 + 0x1c) = uVar15;\n                        puVar8 = puVar4 + iVar9 + 0x20;\n                        uVar17 = puVar8[1];\n                        uVar18 = puVar8[2];\n                        uVar19 = puVar8[3];\n                        puVar7 = puVar4 + iVar9 + 0x30;\n                        uVar20 = *puVar7;\n                        uVar13 = puVar7[1];\n                        uVar14 = puVar7[2];\n                        uVar15 = puVar7[3];\n                        uVar11 = uVar11 - 1;\n                        *(puVar4 + 4) = *puVar8;\n                        *(puVar4 + 0x24) = uVar17;\n                        *(puVar4 + 5) = uVar18;\n                        *(puVar4 + 0x2c) = uVar19;\n                        *(puVar4 + 6) = uVar20;\n                        *(puVar4 + 0x34) = uVar13;\n                        *(puVar4 + 7) = uVar14;\n                        *(puVar4 + 0x3c) = uVar15;\n                        puVar8 = puVar4 + iVar9 + 0x40;\n                        uVar17 = puVar8[1];\n                        uVar18 = puVar8[2];\n                        uVar19 = puVar8[3];\n                        puVar7 = puVar4 + iVar9 + 0x50;\n                        uVar20 = *puVar7;\n                        uVar13 = puVar7[1];\n                        uVar14 = puVar7[2];\n                        uVar15 = puVar7[3];\n                        *(puVar4 + 8) = *puVar8;\n                        *(puVar4 + 0x44) = uVar17;\n                        *(puVar4 + 9) = uVar18;\n                        *(puVar4 + 0x4c) = uVar19;\n                        *(puVar4 + 10) = uVar20;\n                        *(puVar4 + 0x54) = uVar13;\n                        *(puVar4 + 0xb) = uVar14;\n                        *(puVar4 + 0x5c) = uVar15;\n                        puVar8 = puVar4 + iVar9 + 0x60;\n                        uVar13 = *puVar8;\n                        uVar14 = puVar8[1];\n                        uVar15 = puVar8[2];\n                        uVar16 = puVar8[3];\n                        puVar8 = puVar4 + iVar9 + 0x70;\n                        uVar17 = *puVar8;\n                        uVar18 = puVar8[1];\n                        uVar19 = puVar8[2];\n                        uVar20 = puVar8[3];\n                        if (uVar11 == 0) break;\n                        *(puVar4 + 0xc) = uVar13;\n                        *(puVar4 + 100) = uVar14;\n                        *(puVar4 + 0xd) = uVar15;\n                        *(puVar4 + 0x6c) = uVar16;\n                        *(puVar4 + 0xe) = uVar17;\n                        *(puVar4 + 0x74) = uVar18;\n                        *(puVar4 + 0xf) = uVar19;\n                        *(puVar4 + 0x7c) = uVar20;\n                        puVar4 = puVar5;\n                    }\n                }\n                *(puVar5 + -4) = uVar13;\n                *(puVar5 + -0x1c) = uVar14;\n                *(puVar5 + -3) = uVar15;\n                *(puVar5 + -0x14) = uVar16;\n                puVar10 = puVar10 & 0x7f;\n            }\n        }\n        for (uVar11 = puVar10 >> 4; uVar11 != 0; uVar11 = uVar11 - 1) {\n            *(puVar5 + -2) = uVar17;\n            *(puVar5 + -0xc) = uVar18;\n            *(puVar5 + -1) = uVar19;\n            *(puVar5 + -4) = uVar20;\n            puVar8 = puVar5 + iVar9;\n            uVar17 = *puVar8;\n            uVar18 = puVar8[1];\n            uVar19 = puVar8[2];\n            uVar20 = puVar8[3];\n            puVar5 = puVar5 + 2;\n        }\n        uVar11 = puVar10 & 0xf;\n        if (uVar11 != 0) {\n            puVar8 = puVar5 + iVar9 + (uVar11 - 0x10);\n            uVar13 = puVar8[1];\n            uVar14 = puVar8[2];\n            uVar15 = puVar8[3];\n            *(puVar5 + (uVar11 - 0x10)) = *puVar8;\n            *(puVar5 + (uVar11 - 0xc)) = uVar13;\n            *(puVar5 + (uVar11 - 8)) = uVar14;\n            *(puVar5 + (uVar11 - 4)) = uVar15;\n        }\n        *(puVar5 + -2) = uVar17;\n        *(puVar5 + -0xc) = uVar18;\n        *(puVar5 + -1) = uVar19;\n        *(puVar5 + -4) = uVar20;\n        return arg1;\n    }\n    uVar17 = *(arg2 + 4);\n    uVar18 = *(arg2 + 1);\n    uVar19 = *(arg2 + 0xc);\n    puVar8 = arg2 + (arg3 - 0x10);\n    uVar20 = *puVar8;\n    uVar13 = puVar8[1];\n    uVar14 = puVar8[2];\n    uVar15 = puVar8[3];\n    *arg1 = *arg2;\n    *(arg1 + 4) = uVar17;\n    *(arg1 + 1) = uVar18;\n    *(arg1 + 0xc) = uVar19;\n    puVar8 = arg1 + (arg3 - 0x10);\n    *puVar8 = uVar20;\n    puVar8[1] = uVar13;\n    puVar8[2] = uVar14;\n    puVar8[3] = uVar15;\n    return arg1;\n}\n",
        "token_count": 6039
    },
    "14000993": {
        "rules": [
            "encrypt data using Curve25519/98eda359275044f0933c6ca58186cb36"
        ],
        "decompiled_code": "\nuchar (*) [16] fcn.140009930(uchar (*arg1) [16], ulong noname_1, uint64_t arg3)\n\n{\n    uchar (*pauVar1) [16];\n    uchar (*pauVar2) [16];\n    uint16_t uVar3;\n    uint64_t uVar5;\n    uchar auVar6 [12];\n    uint32_t uVar4;\n    uchar auVar7 [13];\n    uchar auVar8 [16];\n    uchar uVar9;\n    \n    uVar5 = noname_1 * 0x101010101010101;\n    uVar3 = uVar5;\n    uVar4 = uVar5;\n    if (arg3 < 0x11) {\n        uVar9 = uVar5;\n    // switch table (17 cases) at 0x140047050\n        switch(*(arg3 * 4 + 0x140047050) + 0x140000000) {\n        case 0x140009a60:\n            *(arg1[-1] + arg3 + 1) = uVar5;\n        case 0x140009a64:\n            *(arg1[-1] + arg3 + 9) = uVar4;\n        case 0x140009a67:\n            *(arg1[-1] + arg3 + 0xd) = uVar3;\n        case 0x140009a6b:\n            arg1[-1][arg3 + 0xf] = uVar9;\n            return arg1;\n        case 0x140009a6e:\n            return arg1;\n        case 0x140009a70:\n            *(arg1[-1] + arg3 + 4) = uVar5;\n        case 0x140009a74:\n            *(arg1[-1] + arg3 + 0xc) = uVar4;\n            return arg1;\n        case 0x140009a78:\n            *(arg1[-1] + arg3 + 7) = uVar5;\n            arg1[-1][arg3 + 0xf] = uVar9;\n            return arg1;\n        case 0x140009a80:\n            *(arg1[-1] + arg3 + 3) = uVar5;\n        case 0x140009a84:\n            *(arg1[-1] + arg3 + 0xb) = uVar4;\n            arg1[-1][arg3 + 0xf] = uVar9;\n            return arg1;\n        case 0x140009a90:\n            *(arg1[-1] + arg3 + 2) = uVar5;\n        case 0x140009a94:\n            *(arg1[-1] + arg3 + 10) = uVar4;\n        case 0x140009a97:\n            *(arg1[-1] + arg3 + 0xe) = uVar3;\n            return arg1;\n        case 0x140009a9c:\n            **arg1 = uVar5;\n            return arg1;\n        case 0x140009aa0:\n            **arg1 = uVar5;\n            *(*arg1 + 8) = uVar3;\n            (*arg1)[10] = uVar9;\n            return arg1;\n        case 0x140009ab0:\n            **arg1 = uVar5;\n            *(*arg1 + 8) = uVar3;\n            return arg1;\n        case 0x140009ab8:\n            **arg1 = uVar5;\n            *(*arg1 + 8) = uVar5;\n            return arg1;\n        }\n    }\n    uVar9 = SUB141(ZEXT814(uVar5) >> 0x30, 0);\n    auVar7 = ZEXT813(uVar5);\n    auVar6 = ZEXT812(uVar5);\n    auVar8 = CONCAT142(SUB1614(CONCAT133(SUB1613(CONCAT124(SUB1612(CONCAT115(SUB1611(CONCAT106(SUB1610(CONCAT97(SUB169(\n                                                            CONCAT88(SUB168(CONCAT79(SUB167(CONCAT610(SUB166(CONCAT511(\n                                                            SUB165(CONCAT412(SUB164(CONCAT313(SUB163(CONCAT214(SUB162(\n                                                            CONCAT115(SUB161(ZEXT816(uVar5) >> 0x38, 0), \n                                                                      CONCAT114(SUB151(ZEXT815(uVar5) >> 0x38, 0), \n                                                                                ZEXT814(uVar5))) >> 0x70, 0), \n                                                            CONCAT113(uVar9, auVar7)) >> 0x68, 0), \n                                                            CONCAT112(uVar9, auVar6)) >> 0x60, 0), \n                                                            CONCAT111(SUB131(auVar7 >> 0x28, 0), ZEXT811(uVar5))) >>\n                                                            0x58, 0), CONCAT110(SUB121(auVar6 >> 0x28, 0), uVar5)) >>\n                                                            0x50, 0), CONCAT19(SUB131(auVar7 >> 0x20, 0), uVar5)) >>\n                                                            0x48, 0), CONCAT18(SUB121(auVar6 >> 0x20, 0), uVar5)) >>\n                                                            0x40, 0), (uVar5 >> 0x18) << 0x38) >> 0x38, 0), \n                                                            (uVar5 >> 0x18) << 0x30) >> 0x30, 0), \n                                                            (uVar5 >> 0x10) << 0x28) >> 0x28, 0), \n                                                            (uVar5 >> 0x10) << 0x20) >> 0x20, 0), (uVar4 >> 8) << 0x18)\n                                                 >> 0x18, 0), (uVar5 >> 8) << 0x10) >> 0x10, 0), \n                       uVar3 & 0xff | uVar3 << 8);\n    pauVar1 = arg1;\n    if (0x80 < arg3) {\n        if ((*0x140043318 & 2) != 0) {\n            for (; arg3 != 0; arg3 = arg3 - 1) {\n                (*pauVar1)[0] = noname_1;\n                pauVar1 = *pauVar1 + 1;\n            }\n            return arg1;\n        }\n        *arg1 = auVar8;\n        pauVar1 = arg1[1] & 0xfffffffffffffff0;\n        arg3 = arg1 + (arg3 - pauVar1);\n        uVar5 = arg3 >> 7;\n        if (uVar5 != 0) {\n            if (*0x140034038 < uVar5) {\n                do {\n                    *pauVar1 = auVar8;\n                    pauVar1[1] = auVar8;\n                    pauVar2 = pauVar1[8];\n                    pauVar1[2] = auVar8;\n                    pauVar1[3] = auVar8;\n                    uVar5 = uVar5 - 1;\n                    pauVar1[4] = auVar8;\n                    pauVar1[5] = auVar8;\n                    pauVar1[6] = auVar8;\n                    pauVar1[7] = auVar8;\n                    pauVar1 = pauVar2;\n                } while (uVar5 != 0);\n                arg3 = arg3 & 0x7f;\n            }\n            else {\n                do {\n                    *pauVar1 = auVar8;\n                    pauVar1[1] = auVar8;\n                    pauVar2 = pauVar1[8];\n                    pauVar1[2] = auVar8;\n                    pauVar1[3] = auVar8;\n                    uVar5 = uVar5 - 1;\n                    pauVar1[4] = auVar8;\n                    pauVar1[5] = auVar8;\n                    pauVar1[6] = auVar8;\n                    pauVar1[7] = auVar8;\n                    pauVar1 = pauVar2;\n                } while (uVar5 != 0);\n                arg3 = arg3 & 0x7f;\n            }\n        }\n    }\n    for (uVar5 = arg3 >> 4; uVar5 != 0; uVar5 = uVar5 - 1) {\n        *pauVar1 = auVar8;\n        pauVar1 = pauVar1[1];\n    }\n    if ((arg3 & 0xf) != 0) {\n        *(pauVar1[-1] + (arg3 & 0xf)) = auVar8;\n    }\n    return arg1;\n}\n",
        "token_count": 1931
    },
    "140010da": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.140010da4(ulong arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x000140010dc4. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(*((arg1 >> 6) * 8 + 0x1400437a0) + (arg1 & 0x3f) * 0x48);\n    return;\n}\n",
        "token_count": 103
    },
    "140010e8": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.140010e8c(ulong arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x000140010eac. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(*((arg1 >> 6) * 8 + 0x1400437a0) + (arg1 & 0x3f) * 0x48);\n    return;\n}\n",
        "token_count": 105
    },
    "14001112": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nuint64_t fcn.140011128(ulong noname_0, uint32_t *arg2, ulong noname_2, uint32_t *arg4)\n\n{\n    uint8_t uVar1;\n    uint64_t uVar2;\n    \n    fcn.140019550(*arg2);\n    uVar1 = *0x140034018 & 0x3f;\n    uVar2 = *0x140034018 ^ *0x1400434e8;\n    fcn.1400195a4(*arg4);\n    return uVar2 >> uVar1 | uVar2 << 0x40 - uVar1;\n}\n",
        "token_count": 142
    },
    "14001545": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nint64_t fcn.14001545c(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    uint8_t *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    uint *puVar5;\n    uint64_t arg1_00;\n    int64_t iStackX32;\n    \n    arg1_00 = arg1 & 0xffffffff;\n    iVar4 = fcn.1400110b0(arg1_00);\n    if (iVar4 == -1) {\n        puVar5 = fcn.140014204(arg1_00);\n        *puVar5 = 9;\n    }\n    else {\n        iVar2 = (*_sym.imp.KERNEL32.dll_SetFilePointerEx)(iVar4, arg2, &iStackX32, arg3);\n        if (iVar2 == 0) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            fcn.140014194(uVar3);\n        }\n        else if (iStackX32 != -1) {\n            puVar1 = *((arg1 >> 6) * 8 + 0x1400437a0) + 0x38 + (arg1 & 0x3f) * 0x48;\n            *puVar1 = *puVar1 & 0xfd;\n            return iStackX32;\n        }\n    }\n    return -1;\n}\n",
        "token_count": 315
    },
    "14001670": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nuint64_t fcn.140016700(ulong arg1, ulong arg2, uint32_t *arg3, uint32_t *arg4)\n\n{\n    int64_t *piVar1;\n    ulong arg1_00;\n    int64_t iVar2;\n    uint8_t uVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    uint64_t uVar6;\n    uint64_t uVar7;\n    \n    uVar7 = arg1;\n    uVar6 = *0x140034018 ^ *(uVar7 * 8 + 0x140043c60);\n    uVar3 = *0x140034018 & 0x3f;\n    uVar6 = uVar6 >> uVar3 | uVar6 << 0x40 - uVar3;\n    if (uVar6 != 0xffffffffffffffff) {\n        if (uVar6 != 0) {\n            return uVar6;\n        }\n        if (arg3 != arg4) {\n            do {\n                uVar6 = *arg3;\n                iVar5 = *(uVar6 * 8 + 0x140043bc0);\n                if (iVar5 == 0) {\n                    arg1_00 = *(uVar6 * 8 + 0x140029220);\n                    iVar5 = (*_sym.imp.KERNEL32.dll_LoadLibraryExW)(arg1_00, 0);\n                    if (iVar5 == 0) {\n                        iVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                        if (((iVar4 == 0x57) && (iVar4 = fcn.140013ea4(arg1_00, L\"api-ms-\", 7),  iVar4 != 0)) &&\n                           (iVar4 = fcn.140013ea4(arg1_00, L\"ext-ms-\", 7),  iVar4 != 0)) {\n                            iVar5 = (*_sym.imp.KERNEL32.dll_LoadLibraryExW)(arg1_00, 0, 0);\n                        }\n                        else {\n                            iVar5 = 0;\n                        }\n                    }\n                    if (iVar5 != 0) {\n                        piVar1 = uVar6 * 8 + 0x140043bc0;\n                        iVar2 = *piVar1;\n                        *piVar1 = iVar5;\n                        if (iVar2 != 0) {\n                            (*_sym.imp.KERNEL32.dll_FreeLibrary)(iVar5);\n                        }\n                        goto code_r0x000140016832;\n                    }\n                    *(uVar6 * 8 + 0x140043bc0) = 0xffffffffffffffff;\n                }\n                else if (iVar5 != -1) {\ncode_r0x000140016832:\n                    if (iVar5 != 0) goto code_r0x00014001684d;\n                }\n                arg3 = arg3 + 1;\n            } while (arg3 != arg4);\n        }\n        iVar5 = 0;\ncode_r0x00014001684d:\n        if ((iVar5 != 0) && (uVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar5, arg2),  uVar6 != 0)) {\n            uVar3 = 0x40 - (*0x140034018 & 0x3f) & 0x3f;\n            *(uVar7 * 8 + 0x140043c60) = (uVar6 >> uVar3 | uVar6 << 0x40 - uVar3) ^ *0x140034018;\n            return uVar6;\n        }\n        uVar3 = 0x40 - (*0x140034018 & 0x3f) & 0x3f;\n        *(uVar7 * 8 + 0x140043c60) = (0xffffffffffffffffU >> uVar3 | -1 << 0x40 - uVar3) ^ *0x140034018;\n    }\n    return 0;\n}\n",
        "token_count": 859
    },
    "14000b4c": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000b4c0(int64_t arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x00014000b4c4. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(arg1 + 0x30);\n    return;\n}\n",
        "token_count": 79
    },
    "1400016e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint64_t fcn.1400016e0(int64_t arg1, int32_t *arg2, ulong arg3, ulong arg4)\n\n{\n    uint64_t uVar1;\n    \n    uVar1 = *arg2 + arg2;\n    if (uVar1 < *(arg1 + 0x10)) {\n        fcn.140001bf0(\"Cannot read Table of Contents.\\n\", arg2, arg3, arg4);\n        uVar1 = *(arg1 + 0x18);\n    }\n    return uVar1;\n}\n",
        "token_count": 121
    },
    "140001aa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140001aa0(int64_t *arg1)\n\n{\n    if (arg1 != NULL) {\n        if (arg1[2] != 0) {\n            fcn.14000a428(arg1[2]);\n        }\n        if (*arg1 != 0) {\n            fcn.14000a4c8(*arg1);\n            *arg1 = 0;\n        }\n        fcn.14000a428(arg1);\n    }\n    return;\n}\n",
        "token_count": 105
    },
    "140001ae": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140001ae0(ulong param_1, ulong param_2, ulong param_3, ulong param_4)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.14000a420(1, 0x4090);\n    if (iVar1 == 0) {\n        fcn.140001bb0(\"calloc\", \"Cannot allocate memory for ARCHIVE_STATUS\\n\", param_3, param_4);\n    }\n    return iVar1;\n}\n",
        "token_count": 108
    },
    "140001b8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140001b80(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    ulong uStackX16;\n    ulong uStackX24;\n    ulong uStackX32;\n    \n    uStackX16 = arg2;\n    uStackX24 = arg3;\n    uStackX32 = arg4;\n    fcn.140001ca0(arg1, &uStackX16);\n    return;\n}\n",
        "token_count": 97
    },
    "140001bf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140001bf0(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    ulong arg1_00;\n    uint32_t uVar1;\n    ulong uStackX16;\n    ulong uStackX24;\n    ulong uStackX32;\n    \n    uStackX16 = arg2;\n    uStackX24 = arg3;\n    uStackX32 = arg4;\n    uVar1 = sub.KERNEL32.dll_GetCurrentProcessId();\n    arg1_00 = fcn.14000b450(2);\n    fcn.140001b30(arg1_00, \"[%d] \", uVar1, arg4);\n    fcn.140001ca0(arg1, &uStackX16);\n    return;\n}\n",
        "token_count": 167
    },
    "140001ca": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140001ca0(ulong param_1, ulong param_2)\n\n{\n    uint64_t uVar1;\n    uchar *puVar2;\n    int64_t iVar3;\n    uint64_t *puVar4;\n    int64_t iVar5;\n    ulong arg1;\n    ulong uStackX32;\n    ulong uStack16;\n    \n    uStack16 = 0x140001cb0;\n    iVar3 = fcn.140008570();\n    iVar3 = -iVar3;\n    *(&stack0x00001028 + iVar3) = *0x140034018 ^ &stack0xfffffffffffffff8 + iVar3;\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140001cd0;\n    puVar4 = fcn.140001b20();\n    *(&stack0x00000020 + iVar3) = param_2;\n    *(&stack0x00000018 + iVar3) = 0;\n    uVar1 = *puVar4;\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140001cf8;\n    fcn.14000ea40(uVar1 | 2, &stack0x00000028 + iVar3, 0x800, param_1);\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140001d10;\n    iVar5 = fcn.140005250(&stack0x00000828 + iVar3, &stack0x00000028 + iVar3, 0x800);\n    puVar2 = &stack0x00000828;\n    if (iVar5 == 0) {\n        puVar2 = &stack0x00000028;\n    }\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140001d2e;\n    arg1 = fcn.14000b450(2);\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140001d40;\n    fcn.140001b30(arg1, 0x140023804, puVar2 + iVar3, param_1);\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140001d50;\n    fcn.1400085e0(*(&stack0x00001028 + iVar3) ^ &stack0xfffffffffffffff8 + iVar3);\n    return;\n}\n",
        "token_count": 515
    },
    "1400021c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400021c0(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    uint64_t *puVar2;\n    ulong uStackX24;\n    ulong uStackX32;\n    uchar auStack136 [32];\n    ulong uStack104;\n    ulong *puStack96;\n    uchar auStack88 [48];\n    uint64_t uStack40;\n    \n    uStack40 = *0x140034018 ^ auStack136;\n    puStack96 = &uStackX24;\n    uStackX24 = arg3;\n    uStackX32 = arg4;\n    puVar2 = fcn.140001b20();\n    uStack104 = 0;\n    iVar1 = fcn.14000ea40(*puVar2 | 2, arg1, 0x1000, arg2);\n    if (iVar1 < 0) {\n        iVar1 = -1;\n    }\n    if (iVar1 < 0x1000) {\n        fcn.14000f2e0(arg1, auStack88);\n    }\n    fcn.1400085e0(uStack40 ^ auStack136);\n    return;\n}\n",
        "token_count": 265
    },
    "14000226": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140002260(int64_t param_1, ulong param_2, int64_t param_3, int64_t param_4)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    ulong arg1;\n    ulong uVar6;\n    int64_t iVar7;\n    uint64_t arg2;\n    ulong uVar8;\n    ulong unaff_RBX;\n    ulong unaff_RDI;\n    char *arg3;\n    ulong unaff_R12;\n    ulong unaff_R14;\n    ulong unaff_R15;\n    uint auStackX16 [2];\n    int64_t iStackX24;\n    uchar auStackX32 [8];\n    ulong uStack24;\n    \n    uStack24 = 0x14000226d;\n    iVar3 = fcn.140008570();\n    iVar3 = -iVar3;\n    *(&stack0x00001020 + iVar3) = *0x140034018 ^ &stack0xfffffffffffffff0 + iVar3;\n    *(&stack0xffffffffffffffe8 + iVar3) = 0x14000228a;\n    iVar2 = fcn.1400037d0();\n    if (iVar2 == 0) {\n        *(param_1 + 0x407c) = 1;\n        *(&stack0xffffffffffffffe8 + iVar3) = 0x1400022a5;\n        iVar2 = fcn.140003b50(param_1);\n        if (iVar2 == 0) {\n            *(&stack0xffffffffffffffe8 + iVar3) = 0x1400022b5;\n            iVar2 = fcn.140003550(param_1);\n            if (iVar2 == 0) {\n                *(&stack0xffffffffffffffe8 + iVar3) = 0x1400022c5;\n                iVar2 = fcn.1400036d0(param_1, param_2, param_3, param_4);\n                if (iVar2 == 0) {\n                    *(&stack0x00001070 + iVar3) = unaff_RDI;\n                    arg2 = *(param_1 + 0x10);\n                    *(&stack0x00001040 + iVar3) = unaff_R12;\n                    *(&stack0xffffffffffffffe8 + iVar3) = 0x1400022ee;\n                    iVar4 = (**0x140034bb8)(\"__main__\");\n                    if (iVar4 == 0) {\n                        *(&stack0xffffffffffffffe8 + iVar3) = 0x140002302;\n                        fcn.140001bf0(\"Could not get __main__ module.\", param_2, param_3, param_4);\n                    }\n                    else {\n                        *(&stack0x00001030 + iVar3) = unaff_R15;\n                        *(&stack0xffffffffffffffe8 + iVar3) = 0x14000231d;\n                        iVar5 = (**0x140034bf8)(iVar4);\n                        if (iVar5 == 0) {\n                            *(&stack0xffffffffffffffe8 + iVar3) = 0x140002331;\n                            fcn.140001bf0(\"Could not get __main__ module\\'s dict.\", param_2, param_3, param_4);\n                        }\n                        else {\n                            *(&stack0x00001068 + iVar3) = unaff_RBX;\n                            *(&stack0x00001038 + iVar3) = unaff_R14;\n                            if (arg2 < *(param_1 + 0x18)) {\n                                do {\n                                    if (*(arg2 + 0x11) == 's') {\n                                        *(&stack0xffffffffffffffe8 + iVar3) = 0x140002369;\n                                        arg1 = fcn.1400012a0(param_1, arg2);\n                                        uVar8 = 0x1000;\n                                        *(&stack0x00000018 + iVar3) = arg2 + 0x12;\n                                        param_4 = param_1 + 0x3078;\n                                        *(&stack0x00000010 + iVar3) = 0x5c;\n                                        arg3 = \"%s%c%s.py\";\n                                        *(&stack0xffffffffffffffe8 + iVar3) = 0x14000239a;\n                                        iVar2 = fcn.1400026f0(&stack0x00000020 + iVar3, 0x1000, \"%s%c%s.py\", param_4);\n                                        if (0xfff < iVar2) {\n                                            *(&stack0xffffffffffffffe8 + iVar3) = 0x140002483;\n                                            fcn.140001bf0(\"Absolute path to script exceeds PATH_MAX\\n\", uVar8, arg3, \n                                                          param_4);\n                                            break;\n                                        }\n                                        *(&stack0xffffffffffffffe8 + iVar3) = 0x1400023b0;\n                                        uVar6 = (**0x140034be0)(&stack0x00000020 + iVar3);\n                                        *(&stack0xffffffffffffffe8 + iVar3) = 0x1400023c6;\n                                        uVar8 = uVar6;\n                                        (**0x140034bc0)(iVar4, \"__file__\");\n                                        *(&stack0xffffffffffffffe8 + iVar3) = 0x1400023cf;\n                                        (**0x140034b68)(uVar6);\n                                        uVar1 = *(arg2 + 0xc);\n                                        *(&stack0xffffffffffffffe8 + iVar3) = 0x1400023db;\n                                        iVar7 = (**0x140034c70)(arg1, uVar1);\n                                        if (iVar7 == 0) {\n                                            *(&stack0xffffffffffffffe8 + iVar3) = 0x14000246a;\n                                            fcn.140001bf0(\"Failed to unmarshal code object for %s\\n\", arg2 + 0x12, uVar8\n                                                          , param_4);\n                                            *(&stack0xffffffffffffffe8 + iVar3) = 0x140002470;\n                                            (**0x140034c18)();\n                                            break;\n                                        }\n                                        *(&stack0xffffffffffffffe8 + iVar3) = 0x1400023ef;\n                                        param_3 = iVar5;\n                                        iVar7 = (**0x140034c68)(iVar7, iVar5);\n                                        if (iVar7 == 0) {\n                                            *(&stack0xffffffffffffffe8 + iVar3) = 0x140002448;\n                                            (**0x140034c18)();\n                                            *(&stack0xffffffffffffffe8 + iVar3) = 0x140002458;\n                                            fcn.140001bf0(\"Failed to execute script %s\\n\", arg2 + 0x12, param_3, param_4\n                                                         );\n                                            break;\n                                        }\n                                        *(&stack0xffffffffffffffe8 + iVar3) = 0x1400023fc;\n                                        fcn.14000a428(arg1);\n                                    }\n                                    *(&stack0xffffffffffffffe8 + iVar3) = 0x140002407;\n                                    arg2 = fcn.1400016e0(param_1, arg2, param_3, param_4);\n                                } while (arg2 < *(param_1 + 0x18));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    *(&stack0xffffffffffffffe8 + iVar3) = 0x14000249f;\n    fcn.1400085e0(*(&stack0x00001020 + iVar3) ^ &stack0xfffffffffffffff0 + iVar3);\n    return;\n}\n",
        "token_count": 1664
    },
    "1400025f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400025f0(int64_t param_1, ulong param_2, ulong param_3, ulong param_4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    uchar auStackX24 [16];\n    ulong uStack16;\n    \n    uStack16 = 0x1400025fc;\n    iVar1 = fcn.140008570();\n    iVar1 = -iVar1;\n    *(&stack0x00001018 + iVar1) = *0x140034018 ^ &stack0xfffffffffffffff8 + iVar1;\n    *(&stack0xfffffffffffffff0 + iVar1) = 0x140002620;\n    iVar2 = fcn.140001640(param_1, \"pyi-windows-manifest-filename\", param_3, param_4);\n    if (iVar2 != 0) {\n        *(&stack0xfffffffffffffff0 + iVar1) = 0x140002639;\n        iVar2 = fcn.140002c30(&stack0x00000018 + iVar1, param_1 + 0x3078, iVar2);\n        if (iVar2 == 0) {\n            *(&stack0xfffffffffffffff0 + iVar1) = 0x140002657;\n            fcn.140001bf0(\"Path of manifest-file (%s) length exceeds buffer[%d] space\\n\", param_1 + 0x3078, 0x1000, \n                          param_4);\n        }\n        *(&stack0xfffffffffffffff0 + iVar1) = 0x140002661;\n        fcn.140004c40(&stack0x00000018 + iVar1);\n    }\n    *(&stack0xfffffffffffffff0 + iVar1) = 0x140002671;\n    fcn.1400085e0(*(&stack0x00001018 + iVar1) ^ &stack0xfffffffffffffff8 + iVar1);\n    return;\n}\n",
        "token_count": 418
    },
    "14000268": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140002680(int64_t arg1)\n\n{\n    uint8_t uVar1;\n    uint64_t arg2;\n    ulong in_R8;\n    ulong in_R9;\n    \n    arg2 = *(arg1 + 0x10);\n    if (arg2 < *(arg1 + 0x18)) {\n        do {\n            uVar1 = *(arg2 + 0x11) + 0xa6;\n            if ((uVar1 < 0x1f) && ((0x40000501U >> (uVar1 & 0x1f) & 1) != 0)) {\n                return 1;\n            }\n            arg2 = fcn.1400016e0(arg1, arg2, in_R8, in_R9);\n        } while (arg2 < *(arg1 + 0x18));\n    }\n    return 0;\n}\n",
        "token_count": 194
    },
    "140002aa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140002aa0(ulong param_1, ulong param_2, ulong param_3, ulong param_4)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    uchar *lpWideCharStr;\n    ulong uVar4;\n    uchar auStackX24 [16];\n    ulong uStack16;\n    \n    uStack16 = 0x140002aac;\n    iVar2 = fcn.140008570();\n    iVar2 = -iVar2;\n    *(&stack0x00002018 + iVar2) = *0x140034018 ^ &stack0xfffffffffffffff8 + iVar2;\n    uVar4 = 0x1000;\n    *(&stack0xfffffffffffffff0 + iVar2) = 0x140002ad7;\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(0, &stack0x00000018 + iVar2);\n    if (iVar1 == 0) {\n        *(&stack0xfffffffffffffff0 + iVar2) = 0x140002aee;\n        fcn.140001c50(0x140023a90, \"Failed to get executable path.\", uVar4, param_4);\n    }\n    else {\n        uVar4 = 0x1000;\n        lpWideCharStr = &stack0x00000018 + iVar2;\n        *(&stack0xfffffffffffffff0 + iVar2) = 0x140002b05;\n        iVar3 = fcn.140005520(param_1, lpWideCharStr, 0x1000);\n        if (iVar3 == 0) {\n            *(&stack0xfffffffffffffff0 + iVar2) = 0x140002b16;\n            fcn.140001bf0(\"Failed to convert executable path to UTF-8.\", lpWideCharStr, uVar4, param_4);\n        }\n    }\n    *(&stack0xfffffffffffffff0 + iVar2) = 0x140002b2f;\n    fcn.1400085e0(*(&stack0x00002018 + iVar2) ^ &stack0xfffffffffffffff8 + iVar2);\n    return;\n}\n",
        "token_count": 472
    },
    "140002b4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140002b40(ulong param_1)\n\n{\n    int64_t iVar1;\n    uchar auStackX32 [8];\n    ulong uStack8;\n    \n    uStack8 = 0x140002b4a;\n    iVar1 = fcn.140008570();\n    iVar1 = -iVar1;\n    *(&stack0x00002060 + iVar1) = *0x140034018 ^ &stack0x00000000 + iVar1;\n    *(&stack0xfffffffffffffff8 + iVar1) = 0x140002b72;\n    fcn.140005410(&stack0x00000050 + iVar1, param_1, 0x1000);\n    *(&stack0xfffffffffffffff8 + iVar1) = 0x140002b81;\n    fcn.14000f3e0(&stack0x00000050 + iVar1, &stack0x00000020 + iVar1);\n    *(&stack0xfffffffffffffff8 + iVar1) = 0x140002b9a;\n    fcn.1400085e0(*(&stack0x00002060 + iVar1) ^ &stack0x00000000 + iVar1);\n    return;\n}\n",
        "token_count": 265
    },
    "140002cf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140002cf0(ulong arg1, ulong noname_1, ulong arg3, ulong arg4)\n\n{\n    char *arg2;\n    \n    *0x140034b38 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"Py_DontWriteBytecodeFlag\");\n    if (*0x140034b38 == 0) {\n        arg2 = \"Failed to get address for Py_DontWriteBytecodeFlag\\n\";\n    }\n    else {\n        *0x140034b20 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"Py_FileSystemDefaultEncoding\");\n        if (*0x140034b20 == 0) {\n            arg2 = \"Failed to get address for Py_FileSystemDefaultEncoding\\n\";\n        }\n        else {\n            *0x140034b08 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"Py_FrozenFlag\");\n            if (*0x140034b08 == 0) {\n                arg2 = \"Failed to get address for Py_FrozenFlag\\n\";\n            }\n            else {\n                *0x140034b30 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"Py_IgnoreEnvironmentFlag\");\n                if (*0x140034b30 == 0) {\n                    arg2 = \"Failed to get address for Py_IgnoreEnvironmentFlag\\n\";\n                }\n                else {\n                    *0x140034b10 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"Py_NoSiteFlag\");\n                    if (*0x140034b10 == 0) {\n                        arg2 = \"Failed to get address for Py_NoSiteFlag\\n\";\n                    }\n                    else {\n                        *0x140034b40 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"Py_NoUserSiteDirectory\");\n                        if (*0x140034b40 == 0) {\n                            arg2 = \"Failed to get address for Py_NoUserSiteDirectory\\n\";\n                        }\n                        else {\n                            *0x140034b18 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"Py_OptimizeFlag\");\n                            if (*0x140034b18 == 0) {\n                                arg2 = \"Failed to get address for Py_OptimizeFlag\\n\";\n                            }\n                            else {\n                                *0x140034b28 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"Py_VerboseFlag\");\n                                if (*0x140034b28 == 0) {\n                                    arg2 = \"Failed to get address for Py_VerboseFlag\\n\";\n                                }\n                                else {\n                                    *0x140034b48 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                             (arg1, \"Py_UnbufferedStdioFlag\");\n                                    if (*0x140034b48 == 0) {\n                                        arg2 = \"Failed to get address for Py_UnbufferedStdioFlag\\n\";\n                                    }\n                                    else {\n                                        *0x140034bd8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"Py_BuildValue\");\n                                        if (*0x140034bd8 == 0) {\n                                            arg2 = \"Failed to get address for Py_BuildValue\\n\";\n                                        }\n                                        else {\n                                            *0x140034b68 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"Py_DecRef\");\n                                            if (*0x140034b68 == 0) {\n                                                arg2 = \"Failed to get address for Py_DecRef\\n\";\n                                            }\n                                            else {\n                                                *0x140034b58 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                         (arg1, \"Py_Finalize\");\n                                                if (*0x140034b58 == 0) {\n                                                    arg2 = \"Failed to get address for Py_Finalize\\n\";\n                                                }\n                                                else {\n                                                    *0x140034b60 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                             (arg1, \"Py_IncRef\");\n                                                    if (*0x140034b60 == 0) {\n                                                        arg2 = \"Failed to get address for Py_IncRef\\n\";\n                                                    }\n                                                    else {\n                                                        *0x140034b50 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                 (arg1, \"Py_Initialize\");\n                                                        if (*0x140034b50 == 0) {\n                                                            arg2 = \"Failed to get address for Py_Initialize\\n\";\n                                                        }\n                                                        else {\n                                                            *0x140034b80 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                     (arg1, \"Py_SetPath\");\n                                                            if (*0x140034b80 == 0) {\n                                                                arg2 = \"Failed to get address for Py_SetPath\\n\";\n                                                            }\n                                                            else {\n                                                                *0x140034b88 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"Py_GetPath\");\n                                                                if (*0x140034b88 == 0) {\n                                                                    arg2 = \"Failed to get address for Py_GetPath\\n\";\n                                                                }\n                                                                else {\n                                                                    *0x140034b70 = (*\n                                                            _sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                      (arg1, \"Py_SetProgramName\");\n                                                            if (*0x140034b70 == 0) {\n                                                                arg2 = \"Failed to get address for Py_SetProgramName\\n\";\n                                                            }\n                                                            else {\n                                                                *0x140034b78 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"Py_SetPythonHome\");\n                                                                if (*0x140034b78 == 0) {\n                                                                    arg2 = \n                                                            \"Failed to get address for Py_SetPythonHome\\n\";\n                                                            }\n                                                            else {\n                                                                *0x140034c00 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyDict_GetItemString\");\n                                                                if (*0x140034c00 == 0) {\n                                                                    arg2 = \n                                                            \"Failed to get address for PyDict_GetItemString\\n\";\n                                                            }\n                                                            else {\n                                                                *0x140034c08 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyErr_Clear\");\n                                                                if (*0x140034c08 == 0) {\n                                                                    arg2 = \"Failed to get address for PyErr_Clear\\n\";\n                                                                }\n                                                                else {\n                                                                    *0x140034c10 = (*\n                                                            _sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                      (arg1, \"PyErr_Occurred\");\n                                                            if (*0x140034c10 == 0) {\n                                                                arg2 = \"Failed to get address for PyErr_Occurred\\n\";\n                                                            }\n                                                            else {\n                                                                *0x140034c18 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyErr_Print\");\n                                                                if (*0x140034c18 == 0) {\n                                                                    arg2 = \"Failed to get address for PyErr_Print\\n\";\n                                                                }\n                                                                else {\n                                                                    *0x140034c78 = (*\n                                                            _sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"PyErr_Fetch\");\n                                                            if (*0x140034c78 == 0) {\n                                                                arg2 = \"Failed to get address for PyErr_Fetch\\n\";\n                                                            }\n                                                            else {\n                                                                *0x140034c80 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyErr_Restore\");\n                                                                if (*0x140034c80 == 0) {\n                                                                    arg2 = \"Failed to get address for PyErr_Restore\\n\";\n                                                                }\n                                                                else {\n                                                                    *0x140034bb8 = (*\n                                                            _sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                      (arg1, \"PyImport_AddModule\");\n                                                            if (*0x140034bb8 == 0) {\n                                                                arg2 = \"Failed to get address for PyImport_AddModule\\n\";\n                                                            }\n                                                            else {\n                                                                *0x140034ba8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \n                                                            \"PyImport_ExecCodeModule\");\n                                                            if (*0x140034ba8 == 0) {\n                                                                arg2 = \n                                                            \"Failed to get address for PyImport_ExecCodeModule\\n\";\n                                                            }\n                                                            else {\n                                                                *0x140034bb0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyImport_ImportModule\")\n                                                                ;\n                                                                if (*0x140034bb0 == 0) {\n                                                                    arg2 = \n                                                            \"Failed to get address for PyImport_ImportModule\\n\";\n                                                            }\n                                                            else {\n                                                                *0x140034bd0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyList_Append\");\n                                                                if (*0x140034bd0 == 0) {\n                                                                    arg2 = \"Failed to get address for PyList_Append\\n\";\n                                                                }\n                                                                else {\n                                                                    *0x140034bc8 = (*\n                                                            _sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"PyList_New\");\n                                                            if (*0x140034bc8 == 0) {\n                                                                arg2 = \"Failed to get address for PyList_New\\n\";\n                                                            }\n                                                            else {\n                                                                *0x140034c28 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyLong_AsLong\");\n                                                                if (*0x140034c28 == 0) {\n                                                                    arg2 = \"Failed to get address for PyLong_AsLong\\n\";\n                                                                }\n                                                                else {\n                                                                    *0x140034bf8 = (*\n                                                            _sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                      (arg1, \"PyModule_GetDict\");\n                                                            if (*0x140034bf8 == 0) {\n                                                                arg2 = \"Failed to get address for PyModule_GetDict\\n\";\n                                                            }\n                                                            else {\n                                                                *0x140034be8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyObject_CallFunction\")\n                                                                ;\n                                                                if (*0x140034be8 == 0) {\n                                                                    arg2 = \n                                                            \"Failed to get address for PyObject_CallFunction\\n\";\n                                                            }\n                                                            else {\n                                                                *0x140034bf0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \n                                                            \"PyObject_CallFunctionObjArgs\");\n                                                            if (*0x140034bf0 == 0) {\n                                                                arg2 = \n                                                            \"Failed to get address for PyObject_CallFunctionObjArgs\\n\";\n                                                            }\n                                                            else {\n                                                                *0x140034bc0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyObject_SetAttrString\"\n                                                                                         );\n                                                                if (*0x140034bc0 == 0) {\n                                                                    arg2 = \n                                                            \"Failed to get address for PyObject_SetAttrString\\n\";\n                                                            }\n                                                            else {\n                                                                *0x140034c90 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyObject_GetAttrString\"\n                                                                                         );\n                                                                if (*0x140034c90 == 0) {\n                                                                    arg2 = \n                                                            \"Failed to get address for PyObject_GetAttrString\\n\";\n                                                            }\n                                                            else {\n                                                                *0x140034c88 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyObject_Str\");\n                                                                if (*0x140034c88 == 0) {\n                                                                    arg2 = \"Failed to get address for PyObject_Str\\n\";\n                                                                }\n                                                                else {\n                                                                    *0x140034ba0 = (*\n                                                            _sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                      (arg1, \"PyRun_SimpleString\");\n                                                            if (*0x140034ba0 == 0) {\n                                                                arg2 = \"Failed to get address for PyRun_SimpleString\\n\";\n                                                            }\n                                                            else {\n                                                                *0x140034c20 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PySys_AddWarnOption\");\n                                                                if (*0x140034c20 == 0) {\n                                                                    arg2 = \n                                                            \"Failed to get address for PySys_AddWarnOption\\n\";\n                                                            }\n                                                            else {\n                                                                *0x140034b98 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PySys_SetArgvEx\");\n                                                                if (*0x140034b98 == 0) {\n                                                                    arg2 = \"Failed to get address for PySys_SetArgvEx\\n\"\n                                                                    ;\n                                                                }\n                                                                else {\n                                                                    *0x140034c48 = (*\n                                                            _sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                      (arg1, \"PySys_GetObject\");\n                                                            if (*0x140034c48 == 0) {\n                                                                arg2 = \"Failed to get address for PySys_GetObject\\n\";\n                                                            }\n                                                            else {\n                                                                *0x140034c30 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PySys_SetObject\");\n                                                                if (*0x140034c30 == 0) {\n                                                                    arg2 = \"Failed to get address for PySys_SetObject\\n\"\n                                                                    ;\n                                                                }\n                                                                else {\n                                                                    *0x140034b90 = (*\n                                                            _sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"PySys_SetPath\")\n                                                            ;\n                                                            if (*0x140034b90 == 0) {\n                                                                arg2 = \"Failed to get address for PySys_SetPath\\n\";\n                                                            }\n                                                            else {\n                                                                *0x140034c68 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyEval_EvalCode\");\n                                                                if (*0x140034c68 == 0) {\n                                                                    arg2 = \"Failed to get address for PyEval_EvalCode\\n\"\n                                                                    ;\n                                                                }\n                                                                else {\n                                                                    *0x140034c70 = (*\n                                                            _sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                      (arg1, \"PyMarshal_ReadObjectFromString\");\n                                                            if (*0x140034c70 == 0) {\n                                                                arg2 = \n                                                            \"Failed to get address for PyMarshal_ReadObjectFromString\\n\"\n                                                            ;\n                                                            }\n                                                            else {\n                                                                *0x140034be0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyUnicode_FromString\");\n                                                                if (*0x140034be0 == 0) {\n                                                                    arg2 = \n                                                            \"Failed to get address for PyUnicode_FromString\\n\";\n                                                            }\n                                                            else {\n                                                                *0x140034c38 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"Py_DecodeLocale\");\n                                                                if (*0x140034c38 == 0) {\n                                                                    arg2 = \"Failed to get address for Py_DecodeLocale\\n\"\n                                                                    ;\n                                                                }\n                                                                else {\n                                                                    *0x140034c40 = (*\n                                                            _sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"PyMem_RawFree\")\n                                                            ;\n                                                            if (*0x140034c40 == 0) {\n                                                                arg2 = \"Failed to get address for PyMem_RawFree\\n\";\n                                                            }\n                                                            else {\n                                                                *0x140034c50 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyUnicode_FromFormat\");\n                                                                if (*0x140034c50 == 0) {\n                                                                    arg2 = \n                                                            \"Failed to get address for PyUnicode_FromFormat\\n\";\n                                                            }\n                                                            else {\n                                                                *0x140034c60 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyUnicode_Decode\");\n                                                                if (*0x140034c60 == 0) {\n                                                                    arg2 = \n                                                            \"Failed to get address for PyUnicode_Decode\\n\";\n                                                            }\n                                                            else {\n                                                                *0x140034c58 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \n                                                            \"PyUnicode_DecodeFSDefault\");\n                                                            if (*0x140034c58 == 0) {\n                                                                arg2 = \n                                                            \"Failed to get address for PyUnicode_DecodeFSDefault\\n\";\n                                                            }\n                                                            else {\n                                                                *0x140034c98 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyUnicode_AsUTF8\");\n                                                                if (*0x140034c98 != 0) {\n                                                                    return 0;\n                                                                }\n                                                                arg2 = \"Failed to get address for PyUnicode_AsUTF8\\n\";\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    fcn.140001c50(0x140023b30, arg2, arg3, arg4);\n    return 0xffffffff;\n}\n",
        "token_count": 3641
    },
    "140003b5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140003b50(int64_t arg1)\n\n{\n    int64_t *piVar1;\n    int64_t *piVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    int64_t *piVar6;\n    char *arg1_00;\n    int64_t *arg2;\n    ulong uVar7;\n    int64_t *in_R9;\n    \n    iVar5 = arg1 + 0x78;\n    uVar7 = 0x1000;\n    iVar4 = fcn.140005410(0x14003fd10, iVar5, 0x1000);\n    if (iVar4 == 0) {\n        fcn.140001bf0(\"Failed to convert progname to wchar_t\\n\", iVar5, uVar7, in_R9);\n        return 0xffffffff;\n    }\n    (**0x140034b70)(0x14003fd10);\n    piVar6 = arg1 + 0x3078;\n    uVar7 = 0x1000;\n    arg2 = piVar6;\n    iVar5 = fcn.140005410(0x14003dd00, piVar6, 0x1000);\n    if (iVar5 == 0) {\n        arg1_00 = \"Failed to convert pyhome to wchar_t\\n\";\n    }\n    else {\n        (**0x140034b78)(0x14003dd00);\n        in_R9 = piVar6;\n        iVar3 = fcn.1400026f0(0x140034ca0, 0x3020, \"%s%c%s%c%s%c%s%c%s\", piVar6);\n        if (0x301f < iVar3) {\n            fcn.140001bf0(\"sys.path (based on %s) exceeds buffer[%d] space\\n\", piVar6, 0x3020, in_R9);\n            return 0xffffffff;\n        }\n        uVar7 = 0x3020;\n        arg2 = 0x140034ca0;\n        iVar5 = fcn.140005410(0x140037cc0, 0x140034ca0, 0x3020);\n        if (iVar5 == 0) {\n            arg1_00 = \"Failed to convert pypath to wchar_t\\n\";\n        }\n        else {\n            (**0x140034b88)();\n            (**0x140034b80)(0x140037cc0);\n            fcn.140003930(arg1);\n            (**0x140034b50)();\n            (**0x140034b90)();\n            arg2 = *(arg1 + 0x4088);\n            piVar6 = fcn.140005610(*(arg1 + 0x4080), arg2);\n            if (piVar6 == NULL) {\n                arg1_00 = \"Failed to convert argv to wchar_t\\n\";\n            }\n            else {\n                uVar7 = 0;\n                arg2 = piVar6;\n                (**0x140034b98)(*(arg1 + 0x4080));\n                iVar5 = *piVar6;\n                piVar2 = piVar6;\n                while (iVar5 != 0) {\n                    fcn.14000a428(iVar5);\n                    piVar1 = piVar2 + 1;\n                    piVar2 = piVar2 + 1;\n                    iVar5 = *piVar1;\n                }\n                fcn.14000a428(piVar6);\n                iVar5 = (**0x140034c10)();\n                if (iVar5 == 0) {\n                    return 0;\n                }\n                arg1_00 = \"Error detected starting Python VM.\";\n            }\n        }\n    }\n    fcn.140001bf0(arg1_00, arg2, uVar7, in_R9);\n    return 0xffffffff;\n}\n",
        "token_count": 839
    },
    "140003d5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140003d50(ulong param_1, ulong param_2, ulong param_3, ulong param_4)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    uchar *puVar5;\n    ulong unaff_RBX;\n    ulong uVar6;\n    uchar auStackX24 [16];\n    ulong uStack16;\n    \n    uStack16 = 0x140003d5c;\n    iVar2 = fcn.140008570();\n    iVar2 = -iVar2;\n    *(&stack0x00004018 + iVar2) = *0x140034018 ^ &stack0xfffffffffffffff8 + iVar2;\n    uVar6 = 0;\n    *(&stack0xfffffffffffffff0 + iVar2) = 0x140003d7e;\n    iVar3 = fcn.140005410(0, param_1, 0);\n    if (iVar3 == 0) {\n        *(&stack0xfffffffffffffff0 + iVar2) = 0x140003d92;\n        fcn.140001bf0(\"LOADER: Failed to convert runtime-tmpdir to a wide string.\\n\", param_1, uVar6, param_4);\n    }\n    else {\n        uVar6 = 0x1000;\n        *(&stack0x00004040 + iVar2) = unaff_RBX;\n        puVar5 = &stack0x00002018 + iVar2;\n        *(&stack0xfffffffffffffff0 + iVar2) = 0x140003db8;\n        iVar1 = (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar3);\n        *(&stack0xfffffffffffffff0 + iVar2) = 0x140003dc2;\n        fcn.14000a428(iVar3);\n        if (iVar1 == 0) {\n            *(&stack0xfffffffffffffff0 + iVar2) = 0x140003dd2;\n            fcn.140001bf0(\"LOADER: Failed to expand environment variables in the runtime-tmpdir.\\n\", puVar5, uVar6, \n                          param_4);\n        }\n        else {\n            uVar6 = 0x1000;\n            puVar5 = &stack0x00002018 + iVar2;\n            *(&stack0xfffffffffffffff0 + iVar2) = 0x140003dee;\n            iVar3 = fcn.14000f828(0, puVar5, 0x1000);\n            if (iVar3 == 0) {\n                *(&stack0xfffffffffffffff0 + iVar2) = 0x140003e02;\n                fcn.140001bf0(\"LOADER: Failed to obtain the absolute path of the runtime-tmpdir.\\n\", puVar5, uVar6, \n                              param_4);\n            }\n            else {\n                *(&stack0xfffffffffffffff0 + iVar2) = 0x140003e18;\n                fcn.140009930(&stack0x00000018 + iVar2, 0, 0x2000);\n                *(&stack0xfffffffffffffff0 + iVar2) = 0x140003e25;\n                for (iVar4 = fcn.140009878(iVar3); iVar4 != 0; iVar4 = fcn.140009878(iVar4 + 2)) {\n                    *(&stack0xfffffffffffffff0 + iVar2) = 0x140003e49;\n                    fcn.140010178(&stack0x00000018 + iVar2, iVar3, (iVar4 - iVar3 >> 1) + 1);\n                    *(&stack0xfffffffffffffff0 + iVar2) = 0x140003e56;\n                    (*_sym.imp.KERNEL32.dll_CreateDirectoryW)(&stack0x00000018 + iVar2, 0);\n                    *(&stack0xfffffffffffffff0 + iVar2) = 0x140003e64;\n                }\n                *(&stack0xfffffffffffffff0 + iVar2) = 0x140003e77;\n                (*_sym.imp.KERNEL32.dll_CreateDirectoryW)(iVar3, 0);\n            }\n        }\n    }\n    *(&stack0xfffffffffffffff0 + iVar2) = 0x140003e92;\n    fcn.1400085e0(*(&stack0x00004018 + iVar2) ^ &stack0xfffffffffffffff8 + iVar2);\n    return;\n}\n",
        "token_count": 966
    },
    "140003ea": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140003ea0(ulong param_1, ulong param_2, ulong param_3)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t arg1;\n    int64_t arg4;\n    int64_t iVar3;\n    int64_t iVar4;\n    uchar auStackX8 [32];\n    ulong uStack32;\n    \n    uStack32 = 0x140003eae;\n    iVar2 = fcn.140008570();\n    iVar2 = -iVar2;\n    *(&stack0x00001008 + iVar2) = *0x140034018 ^ &stack0xffffffffffffffe8 + iVar2;\n    *(&stack0xffffffffffffffe0 + iVar2) = 0x140003ed5;\n    arg1 = fcn.140002bb0();\n    *(&stack0xffffffffffffffe0 + iVar2) = 0x140003ee3;\n    arg4 = fcn.1400042e0(param_2, param_3);\n    if (arg1 == 0) {\n        arg1 = arg4;\n        if (arg4 == 0) goto code_r0x000140003fa5;\n    }\n    else if (arg4 != 0) {\n        *(&stack0xffffffffffffffe0 + iVar2) = 0x140003f02;\n        iVar1 = fcn.14000a52c(arg1);\n        while (iVar1 == 0) {\n            *(&stack0xffffffffffffffe0 + iVar2) = 0x140003f28;\n            iVar3 = fcn.14000a814(&stack0x00000008 + iVar2, 1, 0x1000, arg1);\n            if (iVar3 != 0) {\n                *(&stack0xffffffffffffffe0 + iVar2) = 0x140003f53;\n                iVar4 = fcn.14000b21c(&stack0x00000008 + iVar2, 1, iVar3, arg4);\n                iVar3 = arg4;\n                if (iVar4 != 0) {\n                    *(&stack0xffffffffffffffe0 + iVar2) = 0x140003f60;\n                    iVar1 = fcn.14000a558(arg4);\n                    if (iVar1 == 0) goto code_r0x000140003f64;\n                }\ncode_r0x000140003f75:\n                *(&stack0xffffffffffffffe0 + iVar2) = 0x140003f7a;\n                fcn.140011ab8(iVar3);\n                break;\n            }\n            *(&stack0xffffffffffffffe0 + iVar2) = 0x140003f35;\n            iVar1 = fcn.14000a558(arg1);\n            iVar3 = arg1;\n            if (iVar1 != 0) goto code_r0x000140003f75;\ncode_r0x000140003f64:\n            *(&stack0xffffffffffffffe0 + iVar2) = 0x140003f6c;\n            iVar1 = fcn.14000a52c(arg1);\n        }\n        *(&stack0xffffffffffffffe0 + iVar2) = 0x140003f87;\n        fcn.14000a4c8(arg1);\n        *(&stack0xffffffffffffffe0 + iVar2) = 0x140003f8f;\n        fcn.14000a4c8(arg4);\n        goto code_r0x000140003fa5;\n    }\n    *(&stack0xffffffffffffffe0 + iVar2) = 0x140003fa0;\n    fcn.14000a4c8(arg1);\ncode_r0x000140003fa5:\n    *(&stack0xffffffffffffffe0 + iVar2) = 0x140003fb5;\n    fcn.1400085e0(*(&stack0x00001008 + iVar2) ^ &stack0xffffffffffffffe8 + iVar2);\n    return;\n}\n",
        "token_count": 868
    },
    "14000482": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.140004820(ulong arg1, ulong arg2)\n\n{\n    uint uVar1;\n    ulong arg1_00;\n    ulong arg2_00;\n    \n    arg1_00 = fcn.140005410(0, arg1, 0);\n    arg2_00 = fcn.140005410(0, arg2, 0);\n    uVar1 = fcn.14001086c(arg1_00, arg2_00);\n    fcn.14000a428(arg1_00);\n    fcn.14000a428(arg2_00);\n    return uVar1;\n}\n",
        "token_count": 136
    },
    "14000489": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "set environment variable"
        ],
        "decompiled_code": "\nuint fcn.140004890(ulong arg1)\n\n{\n    uint uVar1;\n    ulong arg1_00;\n    \n    arg1_00 = fcn.140005410(0, arg1, 0);\n    uVar1 = (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableW)(arg1_00, 0);\n    fcn.14000a428(arg1_00);\n    return uVar1;\n}\n",
        "token_count": 95
    },
    "1400048d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400048d0(ulong param_1)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    ulong uVar4;\n    uchar *arg3;\n    ulong arg4;\n    uint auStackX24 [4];\n    ulong uStack16;\n    \n    uStack16 = 0x1400048e0;\n    iVar3 = fcn.140008570();\n    iVar3 = -iVar3;\n    *(&stack0x000020f8 + iVar3) = *0x140034018 ^ &stack0xfffffffffffffff8 + iVar3;\n    *(&stack0x00000048 + iVar3) = 0;\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140004911;\n    fcn.140005410(&stack0x000000f8 + iVar3, param_1, 0x1000);\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140004920;\n    fcn.1400114fc(0x16, 1);\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x14000492a;\n    fcn.1400114fc(2, 1);\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140004934;\n    fcn.1400114fc(0xf, 1);\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x14000493e;\n    fcn.1400114fc(0x15, 1);\n    *(&stack0x00000050 + iVar3) = 0x18;\n    *(&stack0x00000058 + iVar3) = 0;\n    *(&stack0x00000060 + iVar3) = 1;\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x14000495d;\n    (*_sym.imp.KERNEL32.dll_GetStartupInfoW)();\n    *(&stack0x00000090 + iVar3) = 0;\n    *(&stack0x00000098 + iVar3) = ZEXT816(0);\n    *(&stack0x000000c4 + iVar3) = 0x101;\n    *(&stack0x000000c8 + iVar3) = 1;\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x14000498b;\n    uVar4 = fcn.14000b450(0);\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140004993;\n    uVar1 = fcn.140013370(uVar4);\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x14000499a;\n    uVar4 = fcn.1400110b0(uVar1);\n    *(&stack0x000000d8 + iVar3) = uVar4;\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x1400049a9;\n    uVar4 = fcn.14000b450(1);\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x1400049b1;\n    uVar1 = fcn.140013370(uVar4);\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x1400049b8;\n    uVar4 = fcn.1400110b0(uVar1);\n    *(&stack0x000000e0 + iVar3) = uVar4;\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x1400049c8;\n    uVar4 = fcn.14000b450(2);\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x1400049d0;\n    uVar1 = fcn.140013370(uVar4);\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x1400049d7;\n    uVar4 = fcn.1400110b0(uVar1);\n    *(&stack0x000000e8 + iVar3) = uVar4;\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x1400049e5;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetCommandLineW)();\n    arg4 = 0;\n    arg3 = &stack0x00000050 + iVar3;\n    *(&stack0x00000040 + iVar3) = &stack0x00000068 + iVar3;\n    *(&stack0x00000038 + iVar3) = &stack0x00000088 + iVar3;\n    *(&stack0x00000030 + iVar3) = 0;\n    *(&stack0x00000028 + iVar3) = 0;\n    *(&stack0x00000020 + iVar3) = 0;\n    *(&stack0x00000018 + iVar3) = 1;\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140004a27;\n    iVar2 = (*_sym.imp.KERNEL32.dll_CreateProcessW)(&stack0x000000f8 + iVar3, uVar4);\n    if (iVar2 == 0) {\n        *(&stack0xfffffffffffffff0 + iVar3) = 0x140004a64;\n        fcn.140001c50(0x140024f48, \"Error creating child process!\\n\", arg3, arg4);\n    }\n    else {\n        *(&stack0xfffffffffffffff0 + iVar3) = 0x140004a3b;\n        (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*(&stack0x00000068 + iVar3), 0xffffffff);\n        *(&stack0xfffffffffffffff0 + iVar3) = 0x140004a4b;\n        (*_sym.imp.KERNEL32.dll_GetExitCodeProcess)(*(&stack0x00000068 + iVar3), &stack0x00000048 + iVar3);\n    }\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140004a79;\n    fcn.1400085e0(*(&stack0x000020f8 + iVar3) ^ &stack0xfffffffffffffff8 + iVar3);\n    return;\n}\n",
        "token_count": 1369
    },
    "140004a9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140004a90(ulong arg1)\n\n{\n    ulong arg1_00;\n    ulong uVar1;\n    \n    arg1_00 = fcn.140005410(0, arg1, 0);\n    uVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryExW)(arg1_00, 0, 8);\n    fcn.14000a428(arg1_00);\n    return uVar1;\n}\n",
        "token_count": 99
    },
    "140004f2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t * fcn.140004f20(ulong arg1, int64_t arg2)\n\n{\n    int32_t iVar1;\n    int64_t *arg1_00;\n    int64_t iVar2;\n    char *arg1_01;\n    char *arg2_00;\n    uint64_t uVar3;\n    uint32_t uVar4;\n    uint64_t uVar6;\n    int64_t *piVar7;\n    ulong arg3;\n    ulong uVar8;\n    ulong arg4;\n    uint64_t uVar5;\n    \n    arg1_00 = fcn.14000a420(arg1 + 1, 8);\n    if (arg1_00 == NULL) {\n        return NULL;\n    }\n    uVar3 = 0;\n    if (0 < arg1) {\n        uVar5 = uVar3;\n        uVar6 = uVar3;\n        piVar7 = arg1_00;\n        do {\n            uVar8 = *((arg2 - arg1_00) + piVar7);\n            arg4 = 0xffffffff;\n            arg3 = uVar8;\n            iVar1 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0xfde9, 0, uVar8, 0xffffffff, 0, 0, 0, 0);\n            if (iVar1 == 0) {\n                arg2_00 = \"Failed to get UTF-8 buffer size.\\n\";\ncode_r0x000140005057:\n                arg1_01 = 0x140025038;\ncode_r0x00014000505e:\n                fcn.140001c50(arg1_01, arg2_00, arg3, arg4);\n                *piVar7 = 0;\n                if (-1 < uVar6) {\n                    do {\n                        fcn.14000a428(arg1_00[uVar3]);\n                        uVar3 = uVar3 + 1;\n                    } while (uVar3 <= uVar6);\n                }\n                fcn.14000a428(arg1_00);\n                return NULL;\n            }\n            iVar2 = fcn.14000a420(iVar1 + 1, 1);\n            if (iVar2 == 0) {\n                arg2_00 = \"Out of memory.\";\n                arg1_01 = \"win32_utils_to_utf8\";\n                goto code_r0x00014000505e;\n            }\n            arg4 = 0xffffffff;\n            iVar1 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0xfde9);\n            if (iVar1 == 0) {\n                arg2_00 = \"Failed to encode wchar_t as UTF-8.\\n\";\n                arg3 = uVar8;\n                goto code_r0x000140005057;\n            }\n            *piVar7 = iVar2;\n            uVar4 = uVar5 + 1;\n            uVar5 = uVar4;\n            piVar7 = piVar7 + 1;\n            uVar6 = uVar6 + 1;\n        } while (uVar4 < arg1);\n    }\n    arg1_00[arg1] = 0;\n    return arg1_00;\n}\n",
        "token_count": 697
    },
    "14000525": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140005250(int64_t arg1, ulong lpMultiByteStr, ulong arg3)\n\n{\n    int32_t iVar1;\n    int64_t arg1_00;\n    int64_t arg2;\n    char *arg1_01;\n    char *arg2_00;\n    int64_t arg3_00;\n    ulong arg4;\n    ulong uVar2;\n    \n    arg4 = 0xffffffff;\n    uVar2 = lpMultiByteStr;\n    iVar1 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0xfde9, 0, lpMultiByteStr, 0xffffffff, 0, 0);\n    if (iVar1 == 0) {\n        fcn.140001c50(0x140025130, \"Failed to get wchar_t buffer size.\\n\", uVar2, arg4);\n        return 0;\n    }\n    arg1_00 = fcn.14000a420(iVar1 + 1, 2);\n    if (arg1_00 == 0) {\n        fcn.140001c50(\"win32_utils_from_utf8\", \"Out of memory.\", uVar2, arg4);\n        return 0;\n    }\n    uVar2 = 0xffffffff;\n    iVar1 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0xfde9, 0, lpMultiByteStr, 0xffffffff, arg1_00, iVar1);\n    if (iVar1 == 0) {\n        fcn.140001c50(0x140025130, \"Failed to decode wchar_t from UTF-8\\n\", lpMultiByteStr, uVar2);\n        return 0;\n    }\n    uVar2 = 0xffffffff;\n    arg3_00 = arg1_00;\n    iVar1 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, arg1_00, 0xffffffff, 0, 0, 0, 0);\n    if (iVar1 == 0) {\n        arg2_00 = \"Failed to get ANSI buffer size.\\n\";\n    }\n    else {\n        arg2 = fcn.14000a420(iVar1 + 1, 1);\n        if (arg2 == 0) {\n            arg1_01 = \"win32_wcs_to_mbs\";\n            arg2_00 = \"Out of memory.\";\n            goto code_r0x0001400053b3;\n        }\n        uVar2 = 0xffffffff;\n        arg3_00 = arg1_00;\n        iVar1 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, arg1_00, 0xffffffff, arg2, iVar1, 0, 0);\n        if (iVar1 != 0) {\n            fcn.14000a428(arg1_00);\n            if (arg1 == 0) {\n                return arg2;\n            }\n            fcn.140011b80(arg1, arg2, arg3);\n            fcn.14000a428(arg2);\n            return arg1;\n        }\n        arg2_00 = \"Failed to encode filename as ANSI.\\n\";\n    }\n    arg1_01 = 0x140025038;\ncode_r0x0001400053b3:\n    fcn.140001c50(arg1_01, arg2_00, arg3_00, uVar2);\n    fcn.14000a428(arg1_00);\n    return 0;\n}\n",
        "token_count": 769
    },
    "14000552": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140005520(int64_t arg1, ulong lpWideCharStr, ulong arg3)\n\n{\n    int32_t iVar1;\n    ulong arg4;\n    ulong uVar2;\n    \n    if (arg1 == 0) {\n        arg4 = 0xffffffff;\n        uVar2 = lpWideCharStr;\n        arg3._0_4_ = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0xfde9, 0, lpWideCharStr, 0xffffffff, 0, 0, 0, 0);\n        if (arg3 == 0) {\n            fcn.140001c50(0x140025038, \"Failed to get UTF-8 buffer size.\\n\", uVar2, arg4);\n            return 0;\n        }\n        arg1 = fcn.14000a420(arg3 + 1, 1);\n        if (arg1 == 0) {\n            fcn.140001c50(\"win32_utils_to_utf8\", \"Out of memory.\", uVar2, arg4);\n            return 0;\n        }\n    }\n    uVar2 = 0xffffffff;\n    iVar1 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0xfde9, 0, lpWideCharStr, 0xffffffff, arg1, arg3, 0, 0);\n    if (iVar1 == 0) {\n        fcn.140001c50(0x140025038, \"Failed to encode wchar_t as UTF-8.\\n\", lpWideCharStr, uVar2);\n        arg1 = 0;\n    }\n    return arg1;\n}\n",
        "token_count": 364
    },
    "14000561": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t * fcn.140005610(ulong arg1, int64_t arg2)\n\n{\n    int32_t iVar1;\n    int64_t *arg1_00;\n    int64_t iVar2;\n    char *arg1_01;\n    char *arg2_00;\n    uint64_t uVar3;\n    uint32_t uVar4;\n    uint64_t uVar6;\n    int64_t *piVar7;\n    ulong arg3;\n    ulong uVar8;\n    ulong arg4;\n    uint64_t uVar5;\n    \n    arg1_00 = fcn.14000a420(arg1 + 1, 8);\n    if (arg1_00 == NULL) {\n        return NULL;\n    }\n    uVar3 = 0;\n    if (0 < arg1) {\n        uVar5 = uVar3;\n        uVar6 = uVar3;\n        piVar7 = arg1_00;\n        do {\n            uVar8 = *((arg2 - arg1_00) + piVar7);\n            arg4 = 0xffffffff;\n            arg3 = uVar8;\n            iVar1 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0xfde9, 0, uVar8, 0xffffffff, 0, 0);\n            if (iVar1 == 0) {\n                arg2_00 = \"Failed to get wchar_t buffer size.\\n\";\ncode_r0x00014000572c:\n                arg1_01 = 0x140025130;\ncode_r0x000140005733:\n                fcn.140001c50(arg1_01, arg2_00, arg3, arg4);\n                *piVar7 = 0;\n                if (-1 < uVar6) {\n                    do {\n                        fcn.14000a428(arg1_00[uVar3]);\n                        uVar3 = uVar3 + 1;\n                    } while (uVar3 <= uVar6);\n                }\n                fcn.14000a428(arg1_00);\n                return NULL;\n            }\n            iVar2 = fcn.14000a420(iVar1 + 1, 2);\n            if (iVar2 == 0) {\n                arg2_00 = \"Out of memory.\";\n                arg1_01 = \"win32_utils_from_utf8\";\n                goto code_r0x000140005733;\n            }\n            arg4 = 0xffffffff;\n            iVar1 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0xfde9);\n            if (iVar1 == 0) {\n                arg2_00 = \"Failed to decode wchar_t from UTF-8\\n\";\n                arg3 = uVar8;\n                goto code_r0x00014000572c;\n            }\n            *piVar7 = iVar2;\n            uVar4 = uVar5 + 1;\n            uVar5 = uVar4;\n            piVar7 = piVar7 + 1;\n            uVar6 = uVar6 + 1;\n        } while (uVar4 < arg1);\n    }\n    arg1_00[arg1] = 0;\n    return arg1_00;\n}\n",
        "token_count": 688
    },
    "1400072e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.1400072e0(int64_t arg1, int64_t arg2, uint64_t arg3)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    int64_t arg1_00;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    \n    iVar1 = *(arg1 + 0x28);\n    uVar3 = arg3 & 0xffffffff;\n    arg1_00 = *(iVar1 + 0x40);\n    if (arg1_00 == 0) {\n        arg1_00 = (**(arg1 + 0x30))(*(arg1 + 0x40), 1 << (*(iVar1 + 0x30) & 0x1f));\n        *(iVar1 + 0x40) = arg1_00;\n        if (arg1_00 == 0) {\n            return 1;\n        }\n    }\n    uVar4 = *(iVar1 + 0x34);\n    if (uVar4 == 0) {\n        uVar4 = 1 << (*(iVar1 + 0x30) & 0x1f);\n        *(iVar1 + 0x34) = uVar4;\n        *(iVar1 + 0x38) = 0;\n    }\n    if (uVar3 < uVar4) {\n        uVar4 = uVar4 - *(iVar1 + 0x3c);\n        if (uVar3 < uVar4) {\n            uVar4 = uVar3;\n        }\n        fcn.1400092f0(*(iVar1 + 0x3c) + arg1_00, arg2 - (arg3 & 0xffffffff), uVar4);\n        uVar3 = uVar3 - uVar4;\n        if (uVar3 == 0) {\n            *(iVar1 + 0x3c) = *(iVar1 + 0x3c) + uVar4;\n            iVar2 = *(iVar1 + 0x3c);\n            if (*(iVar1 + 0x3c) == *(iVar1 + 0x34)) {\n                iVar2 = 0;\n            }\n            *(iVar1 + 0x3c) = iVar2;\n            if (*(iVar1 + 0x34) <= *(iVar1 + 0x38)) {\n                return 0;\n            }\n            iVar2 = *(iVar1 + 0x38) + uVar4;\n        }\n        else {\n            fcn.1400092f0(*(iVar1 + 0x40), arg2 - uVar3, uVar3);\n            iVar2 = *(iVar1 + 0x34);\n            *(iVar1 + 0x3c) = uVar3;\n        }\n    }\n    else {\n        fcn.1400092f0(arg1_00, arg2 - uVar4, uVar4);\n        iVar2 = *(iVar1 + 0x34);\n        *(iVar1 + 0x3c) = 0;\n    }\n    *(iVar1 + 0x38) = iVar2;\n    return 0;\n}\n",
        "token_count": 680
    },
    "1400142d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.1400142dc(uint64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint *puVar3;\n    uint64_t arg1_00;\n    \n    if (arg1 < 0xffffffffffffffe1) {\n        arg1_00 = arg1;\n        if (arg1 == 0) {\n            arg1_00 = 1;\n        }\n        do {\n            arg1 = *0x140043ff0;\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x140043ff0, 0, arg1_00);\n            if (iVar2 != 0) {\n                return iVar2;\n            }\n            iVar1 = fcn.140012d20();\n        } while ((iVar1 != 0) && (arg1 = arg1_00,  iVar1 = fcn.14001c2c4(arg1_00),  iVar1 != 0));\n    }\n    puVar3 = fcn.140014204(arg1);\n    *puVar3 = 0xc;\n    return 0;\n}\n",
        "token_count": 245
    },
    "14001429": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001429c(int64_t lpMem)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    ulong arg1;\n    \n    if ((lpMem != 0) &&\n       (arg1 = *0x140043ff0,  iVar2 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x140043ff0, 0, lpMem),  iVar2 == 0)) {\n        puVar1 = fcn.140014204(arg1);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar4 = fcn.14001414c(uVar3);\n        *puVar1 = uVar4;\n    }\n    return;\n}\n",
        "token_count": 172
    },
    "14000909": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140009090(void)\n\n{\n    int64_t *piVar1;\n    \n    for (piVar1 = 0x140030940; piVar1 < 0x140030940; piVar1 = piVar1 + 1) {\n        if (*piVar1 != 0) {\n            (**0x140023338)();\n        }\n    }\n    return;\n}\n",
        "token_count": 85
    },
    "140009fc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140009fc8(void)\n\n{\n    uint64_t uVar1;\n    \n    uVar1 = *0x1400433d8;\n    while (uVar1 != 0) {\n        uVar1 = uVar1 - 1;\n        (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(uVar1 * 0x28 + 0x1400433b0);\n        *0x1400433d8 = *0x1400433d8 - 1;\n    }\n    return 1;\n}\n",
        "token_count": 118
    },
    "14000afb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000afbc(int64_t arg1)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    \n    if (arg1 == 0) {\n        puVar1 = fcn.140014204(0);\n        *puVar1 = 0x16;\n        fcn.1400140e4();\n        uVar2 = 0xffffffffffffffff;\n    }\n    else {\n        fcn.14000b4c0(arg1);\n        uVar2 = fcn.14000ab40(arg1);\n        fcn.14000b4cc(arg1);\n    }\n    return uVar2;\n}\n",
        "token_count": 139
    },
    "14000afc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000afcc(ulong noname_0, ulong *arg2, ulong arg3, ulong *arg4)\n\n{\n    ulong uVar1;\n    \n    fcn.14000b4c0(*arg2);\n    uVar1 = fcn.14000b00c(arg3);\n    fcn.14000b4cc(*arg4);\n    return uVar1;\n}\n",
        "token_count": 88
    },
    "14000b59": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.14000b598(ulong noname_0, ulong *arg2, ulong arg3, ulong *arg4)\n\n{\n    uint uVar1;\n    \n    fcn.14000b4c0(*arg2);\n    uVar1 = fcn.14000bf88(arg3);\n    fcn.14000b4cc(*arg4);\n    return uVar1;\n}\n",
        "token_count": 87
    },
    "14000e9b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000e9b4(ulong arg1, int64_t arg2, int64_t arg3, ulong arg4, ulong arg_30h)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    int64_t var_10h;\n    ulong var_18h;\n    ulong var_20h;\n    int64_t var_28h;\n    ulong var_40h;\n    int64_t var_38h;\n    int64_t var_30h;\n    ulong *var_28h_2;\n    ulong *var_20h_2;\n    ulong *var_18h_2;\n    ulong *var_10h_2;\n    ulong *var_8h;\n    \n    var_40h = arg_30h;\n    var_10h = arg2;\n    var_18h = arg4;\n    var_20h = arg1;\n    var_28h = arg3;\n    if ((arg2 == 0) || (arg3 == 0)) {\n        puVar1 = fcn.140014204(arg1);\n        *puVar1 = 0x16;\n        fcn.1400140e4();\n        uVar2 = 0xffffffff;\n    }\n    else {\n        var_28h_2 = &var_10h;\n        var_20h_2 = &var_18h;\n        var_18h_2 = &var_20h;\n        var_10h_2 = &var_28h;\n        var_8h = &var_40h;\n        var_38h = arg2;\n        var_30h = arg2;\n        uVar2 = fcn.14000b598(&arg_30h, &var_30h, &var_28h_2, &var_38h);\n    }\n    return uVar2;\n}\n",
        "token_count": 405
    },
    "14000fbd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000fbd0(uint *arg1)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    \n    if (arg1 == NULL) {\n        puVar1 = fcn.140014204(0);\n        *puVar1 = 0x16;\n        fcn.1400140e4();\n        uVar2 = 0x16;\n    }\n    else {\n        *arg1 = *0x140043d88;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 119
    },
    "1400108a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400108a4(ulong lpPathName)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    ulong uVar3;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_RemoveDirectoryW)();\n    if (iVar1 == 0) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.140014194(uVar2);\n        uVar3 = 0xffffffff;\n    }\n    else {\n        uVar3 = 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 123
    },
    "1400116d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400116d8(ulong lpFileName)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    ulong uVar3;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_DeleteFileW)();\n    if (iVar1 == 0) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.140014194(uVar2);\n        uVar3 = 0xffffffff;\n    }\n    else {\n        uVar3 = 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 122
    },
    "14001273": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001273c(int64_t *arg1)\n\n{\n    if (*arg1 != *0x140043738) {\n        fcn.140012570(*arg1);\n    }\n    return;\n}\n",
        "token_count": 48
    },
    "14001275": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140012758(int64_t *arg1)\n\n{\n    if (*arg1 != *0x140043730) {\n        fcn.140012570(*arg1);\n    }\n    return;\n}\n",
        "token_count": 47
    },
    "1400122e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400122ec(void)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    int64_t arg1;\n    int64_t iVar3;\n    \n    uVar2 = 0;\n    if (*0x140043728 == 0) {\n        arg1 = fcn.14001b794();\n        if (arg1 == 0) {\n            uVar2 = 0xffffffff;\n        }\n        else {\n            iVar3 = fcn.14001245c(arg1);\n            iVar1 = iVar3;\n            if (iVar3 == 0) {\n                uVar2 = 0xffffffff;\n                iVar3 = *0x140043728;\n                iVar1 = *0x140043730;\n            }\n            *0x140043730 = iVar1;\n            *0x140043728 = iVar3;\n            fcn.14001429c(0);\n        }\n        fcn.14001429c(arg1);\n    }\n    else {\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 229
    },
    "14001311": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140013110(ulong arg1, ulong arg2)\n\n{\n    ulong uStackX8;\n    ulong uStackX16;\n    ulong var_20h_2;\n    ulong var_28h;\n    ulong var_20h;\n    ulong *var_18h;\n    ulong *var_bp_10h;\n    \n    var_18h = &uStackX8;\n    var_bp_10h = &uStackX16;\n    var_28h._0_4_ = 2;\n    var_20h._0_4_ = 2;\n    uStackX8 = arg1;\n    uStackX16 = arg2;\n    fcn.140012d5c(&var_20h_2, &var_20h, &var_18h, &var_28h);\n    return;\n}\n",
        "token_count": 193
    },
    "1400177e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400177e8(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    \n    if ((*arg2 != *0x140043d80) && ((*0x14003442c & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.14001c06c(arg1);\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 100
    },
    "14001781": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001781c(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    \n    if ((*arg2 != *0x140043fd8) && ((*0x14003442c & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.14001b3b8(arg1);\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 100
    },
    "140018ea": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140018eac(ulong arg1, ulong arg2)\n\n{\n    fcn.140018cc4(0, arg1, arg2);\n    return;\n}\n",
        "token_count": 40
    },
    "14001956": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14001956c(void)\n\n{\n    uint64_t uVar1;\n    \n    uVar1 = *0x140043fc0;\n    while (uVar1 != 0) {\n        uVar1 = uVar1 - 1;\n        (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(uVar1 * 0x28 + 0x140043d90);\n        *0x140043fc0 = *0x140043fc0 - 1;\n    }\n    return 1;\n}\n",
        "token_count": 114
    },
    "14001b8a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001b8a0(int64_t arg1)\n\n{\n    if (arg1 != 0) {\n        if (*(arg1 + 0x18) != *0x1400349a8) {\n            fcn.14001429c(*(arg1 + 0x18));\n        }\n        if (*(arg1 + 0x20) != *0x1400349b0) {\n            fcn.14001429c(*(arg1 + 0x20));\n        }\n        if (*(arg1 + 0x28) != *0x1400349b8) {\n            fcn.14001429c(*(arg1 + 0x28));\n        }\n        if (*(arg1 + 0x30) != *0x1400349c0) {\n            fcn.14001429c(*(arg1 + 0x30));\n        }\n        if (*(arg1 + 0x38) != *0x1400349c8) {\n            fcn.14001429c(*(arg1 + 0x38));\n        }\n        if (*(arg1 + 0x40) != *0x1400349d0) {\n            fcn.14001429c(*(arg1 + 0x40));\n        }\n        if (*(arg1 + 0x48) != *0x1400349d8) {\n            fcn.14001429c(*(arg1 + 0x48));\n        }\n        if (*(arg1 + 0x68) != *0x1400349f8) {\n            fcn.14001429c(*(arg1 + 0x68));\n        }\n        if (*(arg1 + 0x70) != *0x140034a00) {\n            fcn.14001429c(*(arg1 + 0x70));\n        }\n        if (*(arg1 + 0x78) != *0x140034a08) {\n            fcn.14001429c(*(arg1 + 0x78));\n        }\n        if (*(arg1 + 0x80) != *0x140034a10) {\n            fcn.14001429c(*(arg1 + 0x80));\n        }\n        if (*(arg1 + 0x88) != *0x140034a18) {\n            fcn.14001429c(*(arg1 + 0x88));\n        }\n        if (*(arg1 + 0x90) != *0x140034a20) {\n            fcn.14001429c(*(arg1 + 0x90));\n        }\n    }\n    return;\n}\n",
        "token_count": 562
    },
    "14001b9a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001b9ac(int64_t *arg1)\n\n{\n    if (arg1 != NULL) {\n        if (*arg1 != *0x140034990) {\n            fcn.14001429c(*arg1);\n        }\n        if (arg1[1] != *0x140034998) {\n            fcn.14001429c(arg1[1]);\n        }\n        if (arg1[2] != *0x1400349a0) {\n            fcn.14001429c(arg1[2]);\n        }\n        if (arg1[0xb] != *0x1400349e8) {\n            fcn.14001429c(arg1[0xb]);\n        }\n        if (arg1[0xc] != *0x1400349f0) {\n            fcn.14001429c(arg1[0xc]);\n        }\n    }\n    return;\n}\n",
        "token_count": 199
    },
    "14001dff": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14001dff8(uint *arg1)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    \n    if (arg1 == NULL) {\n        puVar1 = fcn.140014204(0);\n        *puVar1 = 0x16;\n        fcn.1400140e4();\n        uVar2 = 0x16;\n    }\n    else {\n        *arg1 = *0x140044004;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 117
    },
    "14001e02": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14001e028(uint *arg1)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    \n    if (arg1 == NULL) {\n        puVar1 = fcn.140014204(0);\n        *puVar1 = 0x16;\n        fcn.1400140e4();\n        uVar2 = 0x16;\n    }\n    else {\n        *arg1 = *0x140044008;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 117
    },
    "14001e05": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14001e058(uint *arg1)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    \n    if (arg1 == NULL) {\n        puVar1 = fcn.140014204(0);\n        *puVar1 = 0x16;\n        fcn.1400140e4();\n        uVar2 = 0x16;\n    }\n    else {\n        *arg1 = *0x140044000;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 117
    },
    "140021cf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140021cf0(ulong param_1, ulong param_2, ulong param_3)\n\n{\n    fcn.140021d10(param_1, param_2, param_3, 0x1b);\n    return;\n}\n",
        "token_count": 56
    },
    "1400044d": {
        "rules": [
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nvoid fcn.1400044d0(ulong param_1)\n\n{\n    int16_t *piVar1;\n    int16_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint uVar7;\n    uint uVar8;\n    uint uVar9;\n    uint uVar10;\n    uint *puVar11;\n    int32_t iVar12;\n    int64_t iVar13;\n    int64_t iVar14;\n    uint *puVar15;\n    uchar *puVar16;\n    uint *puVar17;\n    uint *puVar18;\n    int64_t iVar19;\n    int64_t iVar20;\n    ulong var_53b0h;\n    uint auStack21112 [139];\n    uint uStack20554;\n    uchar auStack12344 [4112];\n    int16_t aiStack8232 [4104];\n    uint64_t uStack24;\n    ulong uStack16;\n    \n    uStack16 = 0x1400044f2;\n    iVar13 = fcn.140008570();\n    iVar13 = -iVar13;\n    uStack24 = *0x140034018 ^ &stack0xfffffffffffffff8 + iVar13;\n    *(&stack0xfffffffffffffff0 + iVar13) = 0x14000451b;\n    fcn.140005410(&stack0xffffffffffffdfd8, param_1, 0x1000);\n    iVar19 = 0;\n    do {\n        piVar1 = &stack0xffffffffffffdfd8 + iVar19;\n        *(&stack0xffffffffffffafb8 + iVar19) = *piVar1;\n        iVar19 = iVar19 + 2;\n    } while (*piVar1 != 0);\n    iVar19 = -1;\n    do {\n        iVar14 = iVar19;\n        iVar19 = iVar14 + 1;\n    } while (*(&stack0xffffffffffffafb8 + iVar19 * 2) != 0);\n    if ((*(&stack0xffffffffffffafb6 + iVar19 * 2) != 0x2f) && (*(&stack0xffffffffffffafb6 + iVar19 * 2) != 0x5c)) {\n        puVar17 = &stack0xffffffffffffafb6;\n        do {\n            piVar1 = puVar17 + 2;\n            puVar17 = puVar17 + 2;\n        } while (*piVar1 != 0);\n        iVar19 = iVar14 + 2;\n        *puVar17 = *0x140024ee4;\n    }\n    puVar17 = &stack0xffffffffffffafb6;\n    do {\n        piVar1 = puVar17 + 2;\n        puVar17 = puVar17 + 2;\n    } while (*piVar1 != 0);\n    *puVar17 = *0x140024ee8;\n    *(&stack0xfffffffffffffff0 + iVar13) = 0x1400045b5;\n    iVar14 = fcn.140010bf4(&stack0xffffffffffffafb8, &stack0xffffffffffffad88);\n    if (iVar14 != -1) {\n        iVar20 = 4;\n        puVar17 = &stack0x00000018 + iVar13;\n        puVar11 = &stack0xffffffffffffad88;\n        do {\n            puVar18 = puVar11;\n            puVar15 = puVar17;\n            uVar3 = puVar18[1];\n            uVar4 = puVar18[2];\n            uVar5 = puVar18[3];\n            uVar6 = puVar18[4];\n            uVar7 = puVar18[5];\n            uVar8 = puVar18[6];\n            uVar9 = puVar18[7];\n            *puVar15 = *puVar18;\n            puVar15[1] = uVar3;\n            puVar15[2] = uVar4;\n            puVar15[3] = uVar5;\n            uVar3 = puVar18[8];\n            uVar4 = puVar18[9];\n            uVar5 = puVar18[10];\n            uVar10 = puVar18[0xb];\n            puVar15[4] = uVar6;\n            puVar15[5] = uVar7;\n            puVar15[6] = uVar8;\n            puVar15[7] = uVar9;\n            uVar6 = puVar18[0xc];\n            uVar7 = puVar18[0xd];\n            uVar8 = puVar18[0xe];\n            uVar9 = puVar18[0xf];\n            puVar15[8] = uVar3;\n            puVar15[9] = uVar4;\n            puVar15[10] = uVar5;\n            puVar15[0xb] = uVar10;\n            uVar3 = puVar18[0x10];\n            uVar4 = puVar18[0x11];\n            uVar5 = puVar18[0x12];\n            uVar10 = puVar18[0x13];\n            puVar15[0xc] = uVar6;\n            puVar15[0xd] = uVar7;\n            puVar15[0xe] = uVar8;\n            puVar15[0xf] = uVar9;\n            uVar6 = puVar18[0x14];\n            uVar7 = puVar18[0x15];\n            uVar8 = puVar18[0x16];\n            uVar9 = puVar18[0x17];\n            puVar15[0x10] = uVar3;\n            puVar15[0x11] = uVar4;\n            puVar15[0x12] = uVar5;\n            puVar15[0x13] = uVar10;\n            uVar3 = puVar18[0x18];\n            uVar4 = puVar18[0x19];\n            uVar5 = puVar18[0x1a];\n            uVar10 = puVar18[0x1b];\n            puVar15[0x14] = uVar6;\n            puVar15[0x15] = uVar7;\n            puVar15[0x16] = uVar8;\n            puVar15[0x17] = uVar9;\n            uVar6 = puVar18[0x1c];\n            uVar7 = puVar18[0x1d];\n            uVar8 = puVar18[0x1e];\n            uVar9 = puVar18[0x1f];\n            puVar15[0x18] = uVar3;\n            puVar15[0x19] = uVar4;\n            puVar15[0x1a] = uVar5;\n            puVar15[0x1b] = uVar10;\n            puVar15[0x1c] = uVar6;\n            puVar15[0x1d] = uVar7;\n            puVar15[0x1e] = uVar8;\n            puVar15[0x1f] = uVar9;\n            iVar20 = iVar20 + -1;\n            puVar17 = puVar15 + 0x20;\n            puVar11 = puVar18 + 0x20;\n        } while (iVar20 != 0);\n        uVar7 = puVar18[0x21];\n        uVar8 = puVar18[0x22];\n        uVar9 = puVar18[0x23];\n        uVar3 = puVar18[0x24];\n        uVar4 = puVar18[0x25];\n        uVar5 = puVar18[0x26];\n        uVar6 = puVar18[0x27];\n        puVar15[0x20] = puVar18[0x20];\n        puVar15[0x21] = uVar7;\n        puVar15[0x22] = uVar8;\n        puVar15[0x23] = uVar9;\n        uVar7 = puVar18[0x28];\n        uVar8 = puVar18[0x29];\n        uVar9 = puVar18[0x2a];\n        uVar10 = puVar18[0x2b];\n        puVar15[0x24] = uVar3;\n        puVar15[0x25] = uVar4;\n        puVar15[0x26] = uVar5;\n        puVar15[0x27] = uVar6;\n        puVar15[0x28] = uVar7;\n        puVar15[0x29] = uVar8;\n        puVar15[0x2a] = uVar9;\n        puVar15[0x2b] = uVar10;\n        *(&stack0xfffffffffffffff0 + iVar13) = 0x14000465d;\n        fcn.140004af0(&stack0xffffffffffffafb8, iVar19, &stack0x00000018 + iVar13);\n        *(&stack0xfffffffffffffff0 + iVar13) = 0x14000466c;\n        iVar12 = fcn.140010bfc(iVar14, &stack0xffffffffffffad88);\n        while (iVar12 == 0) {\n            iVar20 = 4;\n            puVar17 = &stack0x00000018 + iVar13;\n            puVar11 = &stack0xffffffffffffad88;\n            do {\n                puVar18 = puVar11;\n                puVar15 = puVar17;\n                uVar3 = puVar18[1];\n                uVar4 = puVar18[2];\n                uVar5 = puVar18[3];\n                uVar6 = puVar18[4];\n                uVar7 = puVar18[5];\n                uVar8 = puVar18[6];\n                uVar9 = puVar18[7];\n                *puVar15 = *puVar18;\n                puVar15[1] = uVar3;\n                puVar15[2] = uVar4;\n                puVar15[3] = uVar5;\n                uVar3 = puVar18[8];\n                uVar4 = puVar18[9];\n                uVar5 = puVar18[10];\n                uVar10 = puVar18[0xb];\n                puVar15[4] = uVar6;\n                puVar15[5] = uVar7;\n                puVar15[6] = uVar8;\n                puVar15[7] = uVar9;\n                uVar6 = puVar18[0xc];\n                uVar7 = puVar18[0xd];\n                uVar8 = puVar18[0xe];\n                uVar9 = puVar18[0xf];\n                puVar15[8] = uVar3;\n                puVar15[9] = uVar4;\n                puVar15[10] = uVar5;\n                puVar15[0xb] = uVar10;\n                uVar3 = puVar18[0x10];\n                uVar4 = puVar18[0x11];\n                uVar5 = puVar18[0x12];\n                uVar10 = puVar18[0x13];\n                puVar15[0xc] = uVar6;\n                puVar15[0xd] = uVar7;\n                puVar15[0xe] = uVar8;\n                puVar15[0xf] = uVar9;\n                uVar6 = puVar18[0x14];\n                uVar7 = puVar18[0x15];\n                uVar8 = puVar18[0x16];\n                uVar9 = puVar18[0x17];\n                puVar15[0x10] = uVar3;\n                puVar15[0x11] = uVar4;\n                puVar15[0x12] = uVar5;\n                puVar15[0x13] = uVar10;\n                uVar3 = puVar18[0x18];\n                uVar4 = puVar18[0x19];\n                uVar5 = puVar18[0x1a];\n                uVar10 = puVar18[0x1b];\n                puVar15[0x14] = uVar6;\n                puVar15[0x15] = uVar7;\n                puVar15[0x16] = uVar8;\n                puVar15[0x17] = uVar9;\n                uVar6 = puVar18[0x1c];\n                uVar7 = puVar18[0x1d];\n                uVar8 = puVar18[0x1e];\n                uVar9 = puVar18[0x1f];\n                puVar15[0x18] = uVar3;\n                puVar15[0x19] = uVar4;\n                puVar15[0x1a] = uVar5;\n                puVar15[0x1b] = uVar10;\n                puVar15[0x1c] = uVar6;\n                puVar15[0x1d] = uVar7;\n                puVar15[0x1e] = uVar8;\n                puVar15[0x1f] = uVar9;\n                iVar20 = iVar20 + -1;\n                puVar17 = puVar15 + 0x20;\n                puVar11 = puVar18 + 0x20;\n            } while (iVar20 != 0);\n            uVar3 = puVar18[0x21];\n            uVar4 = puVar18[0x22];\n            uVar5 = puVar18[0x23];\n            uVar6 = puVar18[0x24];\n            uVar7 = puVar18[0x25];\n            uVar8 = puVar18[0x26];\n            uVar9 = puVar18[0x27];\n            puVar15[0x20] = puVar18[0x20];\n            puVar15[0x21] = uVar3;\n            puVar15[0x22] = uVar4;\n            puVar15[0x23] = uVar5;\n            uVar3 = puVar18[0x28];\n            uVar4 = puVar18[0x29];\n            uVar5 = puVar18[0x2a];\n            uVar10 = puVar18[0x2b];\n            puVar15[0x24] = uVar6;\n            puVar15[0x25] = uVar7;\n            puVar15[0x26] = uVar8;\n            puVar15[0x27] = uVar9;\n            puVar15[0x28] = uVar3;\n            puVar15[0x29] = uVar4;\n            puVar15[0x2a] = uVar5;\n            puVar15[0x2b] = uVar10;\n            if ((*(&stack0x0000003c + iVar13) != 0x2e) ||\n               ((*(&stack0x0000003e + iVar13) != 0 &&\n                ((*(&stack0x0000003e + iVar13) != 0x2e || (*(&stack0x00000040 + iVar13) != 0)))))) {\n                *(&stack0xffffffffffffafb8 + iVar19 * 2) = 0;\n                puVar16 = &stack0xffffffffffffafb6;\n                do {\n                    piVar1 = puVar16 + 2;\n                    puVar16 = puVar16 + 2;\n                } while (*piVar1 != 0);\n                iVar20 = 0;\n                do {\n                    iVar2 = *(&stack0x0000003c + iVar20 * 2 + iVar13);\n                    *(puVar16 + iVar20 * 2) = iVar2;\n                    iVar20 = iVar20 + 1;\n                } while (iVar2 != 0);\n                if ((auStack21112[0] & 0x10) == 0) {\n                    *(&stack0xfffffffffffffff0 + iVar13) = 0x1400047ae;\n                    iVar12 = fcn.1400116d8(&stack0xffffffffffffafb8);\n                    if (iVar12 != 0) {\n                        *(&stack0xfffffffffffffff0 + iVar13) = 0x1400047bd;\n                        (*_sym.imp.KERNEL32.dll_Sleep)(100);\n                        *(&stack0xfffffffffffffff0 + iVar13) = 0x1400047c9;\n                        fcn.1400116d8(&stack0xffffffffffffafb8);\n                    }\n                }\n                else {\n                    *(&stack0xfffffffffffffff0 + iVar13) = 0x140004794;\n                    fcn.140005520(&stack0xffffffffffffcfc8, &stack0xffffffffffffafb8, 0x1000);\n                    *(&stack0xfffffffffffffff0 + iVar13) = 0x1400047a0;\n                    fcn.1400044d0(&stack0xffffffffffffcfc8);\n                }\n            }\n            *(&stack0xfffffffffffffff0 + iVar13) = 0x1400047d8;\n            iVar12 = fcn.140010bfc(iVar14, &stack0xffffffffffffad88);\n        }\n        *(&stack0xfffffffffffffff0 + iVar13) = 0x1400047e8;\n        fcn.140010bcc(iVar14);\n    }\n    *(&stack0xfffffffffffffff0 + iVar13) = 0x1400047f4;\n    fcn.1400108a4(&stack0xffffffffffffdfd8);\n    *(&stack0xfffffffffffffff0 + iVar13) = 0x140004803;\n    fcn.1400085e0(uStack24 ^ &stack0xfffffffffffffff8 + iVar13);\n    return;\n}\n",
        "token_count": 3886
    },
    "140004c4": {
        "rules": [
            "execute .NET assembly via CLR host/2c9ef85a2fe94af39efaaae3fc9e6a8a"
        ],
        "decompiled_code": "\nulong fcn.140004c40(ulong lpMultiByteStr)\n\n{\n    int32_t iVar1;\n    int64_t arg1;\n    ulong uVar2;\n    code *pcVar3;\n    code *pcVar4;\n    char *arg1_00;\n    char *arg2;\n    ulong arg4;\n    uint uStack72;\n    uint uStack68;\n    int64_t iStack64;\n    uchar auStack56 [16];\n    uchar auStack40 [16];\n    ulong uStack24;\n    \n    arg4 = 0xffffffff;\n    uVar2 = lpMultiByteStr;\n    iVar1 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0xfde9, 0, lpMultiByteStr, 0xffffffff, 0, 0);\n    if (iVar1 == 0) {\n        arg2 = \"Failed to get wchar_t buffer size.\\n\";\n        lpMultiByteStr = uVar2;\ncode_r0x000140004cd9:\n        arg1_00 = 0x140025130;\n        uVar2 = lpMultiByteStr;\n    }\n    else {\n        arg1 = fcn.14000a420(iVar1 + 1, 2);\n        if (arg1 != 0) {\n            arg4 = 0xffffffff;\n            iVar1 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0xfde9, 0, lpMultiByteStr, 0xffffffff, arg1, iVar1);\n            if (iVar1 != 0) goto code_r0x000140004ce7;\n            arg2 = \"Failed to decode wchar_t from UTF-8\\n\";\n            goto code_r0x000140004cd9;\n        }\n        arg2 = \"Out of memory.\";\n        arg1_00 = \"win32_utils_from_utf8\";\n    }\n    fcn.140001c50(arg1_00, arg2, uVar2, arg4);\n    arg1 = 0;\ncode_r0x000140004ce7:\n    uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(0x140024fe0);\n    pcVar3 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2, \"CreateActCtxW\");\n    pcVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2, \"ActivateActCtx\");\n    if ((pcVar3 != NULL) && (pcVar4 != NULL)) {\n        uStack24 = 0;\n        uStack72 = 0x38;\n        auStack56 = ZEXT816(0);\n        uStack68 = 0x10;\n        auStack40 = ZEXT816(0);\n        iStack64 = arg1;\n        *0x140034000 = (*pcVar3)(&uStack72);\n        fcn.14000a428(arg1);\n        if (*0x140034000 != -1) {\n            iVar1 = (*pcVar4)(*0x140034000, 0x140041d20);\n            if (iVar1 != 0) {\n                return 1;\n            }\n        }\n        *0x140034000 = 0xffffffffffffffff;\n        fcn.140004dd0(0);\n    }\n    return 0;\n}\n",
        "token_count": 709
    },
    "14000ebc": {
        "rules": [
            "create or open file"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Could not reconcile some variable overlaps\n\nulong fcn.14000ebc8(uchar *arg1, int32_t *arg2)\n\n{\n    char cVar1;\n    ushort uVar2;\n    uint *puVar3;\n    int64_t hFile;\n    ulong uVar4;\n    uchar *arg1_00;\n    ulong uVar5;\n    int32_t aiStackX16 [2];\n    ulong var_38h;\n    uint32_t in_stack_ffffffffffffff8c;\n    uint32_t in_stack_ffffffffffffff94;\n    uint uVar6;\n    ulong in_stack_ffffffffffffffa0;\n    int32_t in_stack_ffffffffffffffa8;\n    int32_t in_stack_ffffffffffffffac;\n    int32_t in_stack_ffffffffffffffb0;\n    int32_t in_stack_ffffffffffffffb4;\n    int32_t in_stack_ffffffffffffffb8;\n    int32_t in_stack_ffffffffffffffbc;\n    int32_t in_stack_ffffffffffffffc0;\n    int32_t in_stack_ffffffffffffffc4;\n    ulong var_30h;\n    int32_t in_stack_ffffffffffffffd0;\n    int32_t in_stack_ffffffffffffffd4;\n    ulong var_20h;\n    ulong var_10h;\n    \n    uVar5 = 0;\n    arg1_00 = arg1;\n    if (arg2 == NULL) {\ncode_r0x00014000ebee:\n        puVar3 = fcn.1400141e4(arg1_00);\n        *puVar3 = 0;\n        puVar3 = fcn.140014204(arg1_00);\n        *puVar3 = 0x16;\n        fcn.1400140e4();\n        return 0xffffffff;\n    }\n    arg1_00 = &stack0xffffffffffffffa8;\n    fcn.140009930(arg1_00, 0, 0x30);\n    *arg2 = in_stack_ffffffffffffffa8;\n    arg2[1] = in_stack_ffffffffffffffac;\n    arg2[2] = in_stack_ffffffffffffffb0;\n    arg2[3] = in_stack_ffffffffffffffb4;\n    arg2[4] = in_stack_ffffffffffffffb8;\n    arg2[5] = in_stack_ffffffffffffffbc;\n    arg2[6] = in_stack_ffffffffffffffc0;\n    arg2[7] = in_stack_ffffffffffffffc4;\n    arg2[8] = var_30h;\n    arg2[9] = var_30h._4_4_;\n    arg2[10] = in_stack_ffffffffffffffd0;\n    arg2[0xb] = in_stack_ffffffffffffffd4;\n    if (arg1 == NULL) goto code_r0x00014000ebee;\n    uVar6 = 0;\n    hFile = (*_sym.imp.KERNEL32.dll_CreateFileW)(arg1);\n    if (hFile == -1) {\n        cVar1 = fcn.14000f1dc(arg1);\n        if (cVar1 == '\\0') {\n            fcn.140014194(2);\n        }\n        else {\n            uVar2 = fcn.14000ef98(0x10, arg1);\n            *(arg2 + 6) = uVar2;\n            *(arg2 + 2) = 1;\n            aiStackX16[0] = 0;\n            cVar1 = fcn.14000f0d4(arg1, aiStackX16);\n            if (cVar1 != '\\0') {\n                arg2[4] = aiStackX16[0] + -1;\n                *arg2 = aiStackX16[0] + -1;\n                uVar4 = fcn.1400189e0(0x7bc, 1, 1, 0, in_stack_ffffffffffffff8c << 0x20, \n                                      in_stack_ffffffffffffff94 << 0x20, CONCAT44(uVar6, 0xffffffff), \n                                      in_stack_ffffffffffffffa0, \n                                      CONCAT44(in_stack_ffffffffffffffac, in_stack_ffffffffffffffa8), \n                                      CONCAT44(in_stack_ffffffffffffffb4, in_stack_ffffffffffffffb0), \n                                      CONCAT44(in_stack_ffffffffffffffbc, in_stack_ffffffffffffffb8), \n                                      CONCAT44(in_stack_ffffffffffffffc4, in_stack_ffffffffffffffc0), \n                                      CONCAT44(var_30h._4_4_, var_30h), \n                                      CONCAT44(in_stack_ffffffffffffffd4, in_stack_ffffffffffffffd0));\n                *(arg2 + 8) = uVar4;\n                *(arg2 + 6) = uVar4;\n                *(arg2 + 10) = uVar4;\n                goto code_r0x00014000ecac;\n            }\n        }\n    }\n    else {\n        cVar1 = fcn.14000ed5c(arg1, 0xffffffff, hFile, arg2);\n        if (cVar1 != '\\0') goto code_r0x00014000ecac;\n    }\n    fcn.140009930(&stack0xffffffffffffffa8, 0, 0x30);\n    uVar5 = 0xffffffff;\n    *arg2 = in_stack_ffffffffffffffa8;\n    arg2[1] = in_stack_ffffffffffffffac;\n    arg2[2] = in_stack_ffffffffffffffb0;\n    arg2[3] = in_stack_ffffffffffffffb4;\n    arg2[4] = in_stack_ffffffffffffffb8;\n    arg2[5] = in_stack_ffffffffffffffbc;\n    arg2[6] = in_stack_ffffffffffffffc0;\n    arg2[7] = in_stack_ffffffffffffffc4;\n    arg2[8] = var_30h;\n    arg2[9] = var_30h._4_4_;\n    arg2[10] = in_stack_ffffffffffffffd0;\n    arg2[0xb] = in_stack_ffffffffffffffd4;\ncode_r0x00014000ecac:\n    if (hFile == -1) {\n        return uVar5;\n    }\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(hFile);\n    return uVar5;\n}\n",
        "token_count": 1421
    },
    "14000a43": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint64_t fcn.14000a43c(uint64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint *puVar3;\n    uint64_t arg1_00;\n    \n    if (arg1 < 0xffffffffffffffe1) {\n        arg1_00 = arg1;\n        if (arg1 == 0) {\n            arg1_00 = 1;\n        }\n        do {\n            arg1 = *0x140043ff0;\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x140043ff0, 0, arg1_00);\n            if (iVar2 != 0) {\n                return iVar2;\n            }\n            iVar1 = fcn.140012d20();\n        } while ((iVar1 != 0) && (arg1 = arg1_00,  iVar1 = fcn.14001c2c4(arg1_00),  iVar1 != 0));\n    }\n    puVar3 = fcn.140014204(arg1);\n    *puVar3 = 0xc;\n    return 0;\n}\n",
        "token_count": 246
    },
    "140012bb": {
        "rules": [
            "parse PE header"
        ],
        "decompiled_code": "\nvoid fcn.140012bb4(ulong arg1)\n\n{\n    code *pcVar1;\n    int16_t *piVar2;\n    int32_t *piVar3;\n    uint auStackX16 [2];\n    int32_t aiStackX24 [2];\n    uchar auStackX32 [8];\n    uchar auStack56 [4];\n    uint uStack52;\n    uint auStack48 [2];\n    uint *puStack40;\n    int32_t *piStack32;\n    uchar *puStack24;\n    \n    aiStackX24[0] = 0;\n    auStackX16[0] = 2;\n    piVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    if ((((piVar2 != NULL) && (*piVar2 == 0x5a4d)) && (piVar3 = *(piVar2 + 0x1e) + piVar2,  *piVar3 == 0x4550)) &&\n       (((*(piVar3 + 6) == 0x20b && (0xe < piVar3[0x21])) && (piVar3[0x3e] != 0)))) {\n        fcn.140012b30(arg1);\n    }\n    puStack40 = auStackX16;\n    auStackX32[0] = 0;\n    piStack32 = aiStackX24;\n    puStack24 = auStackX32;\n    uStack52 = 2;\n    auStack48[0] = 2;\n    fcn.140012920(auStack56, auStack48, &puStack40, &uStack52);\n    if (aiStackX24[0] == 0) {\n        fcn.140012ae4(arg1);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 413
    },
    "140012bf": {
        "rules": [
            "parse PE header"
        ],
        "decompiled_code": "\nvoid fcn.140012bfc(ulong arg1)\n\n{\n    code *pcVar1;\n    int16_t *piVar2;\n    int32_t *piVar3;\n    uint auStackX16 [2];\n    int32_t aiStackX24 [2];\n    uchar auStackX32 [8];\n    uchar auStack56 [4];\n    uint uStack52;\n    uint auStack48 [2];\n    uint *puStack40;\n    int32_t *piStack32;\n    uchar *puStack24;\n    \n    aiStackX24[0] = 0;\n    auStackX16[0] = 0;\n    piVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    if ((((piVar2 != NULL) && (*piVar2 == 0x5a4d)) && (piVar3 = *(piVar2 + 0x1e) + piVar2,  *piVar3 == 0x4550)) &&\n       (((*(piVar3 + 6) == 0x20b && (0xe < piVar3[0x21])) && (piVar3[0x3e] != 0)))) {\n        fcn.140012b30(arg1);\n    }\n    puStack40 = auStackX16;\n    auStackX32[0] = 0;\n    piStack32 = aiStackX24;\n    puStack24 = auStackX32;\n    uStack52 = 2;\n    auStack48[0] = 2;\n    fcn.140012920(auStack56, auStack48, &puStack40, &uStack52);\n    if (aiStackX24[0] == 0) {\n        fcn.140012ae4(arg1);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 413
    }
}